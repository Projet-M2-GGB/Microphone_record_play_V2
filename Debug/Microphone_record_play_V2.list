
Microphone_record_play_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af64  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800b138  0800b138  0000c138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d0  0800b5d0  0000d214  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5d0  0800b5d0  0000c5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5d8  0800b5d8  0000d214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5d8  0800b5d8  0000c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b5dc  0800b5dc  0000c5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800b5e0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020728  20000220  0800b7f4  0000d220  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20020948  0800b7f4  0000d948  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013996  00000000  00000000  0000d244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fea  00000000  00000000  00020bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00023bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cae  00000000  00000000  00024c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279c6  00000000  00000000  000258f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015980  00000000  00000000  0004d2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eea8c  00000000  00000000  00062c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001516c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005298  00000000  00000000  0015170c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001569a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b11c 	.word	0x0800b11c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800b11c 	.word	0x0800b11c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <MX_DMA_Init+0x38>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <MX_DMA_Init+0x38>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_DMA_Init+0x38>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */

  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2039      	movs	r0, #57	@ 0x39
 8000efc:	f003 fa45 	bl	800438a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f00:	2039      	movs	r0, #57	@ 0x39
 8000f02:	f003 fa5e 	bl	80043c2 <HAL_NVIC_EnableIRQ>

}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800

08000f14 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b090      	sub	sp, #64	@ 0x40
 8000f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2a:	4b96      	ldr	r3, [pc, #600]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a95      	ldr	r2, [pc, #596]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f30:	f043 0310 	orr.w	r3, r3, #16
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b93      	ldr	r3, [pc, #588]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f42:	4b90      	ldr	r3, [pc, #576]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a8f      	ldr	r2, [pc, #572]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b8a      	ldr	r3, [pc, #552]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a89      	ldr	r2, [pc, #548]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b87      	ldr	r3, [pc, #540]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	4b84      	ldr	r3, [pc, #528]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a83      	ldr	r2, [pc, #524]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b81      	ldr	r3, [pc, #516]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8a:	4b7e      	ldr	r3, [pc, #504]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a7d      	ldr	r2, [pc, #500]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b7b      	ldr	r3, [pc, #492]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b78      	ldr	r3, [pc, #480]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a77      	ldr	r2, [pc, #476]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b75      	ldr	r3, [pc, #468]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fba:	4b72      	ldr	r3, [pc, #456]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a71      	ldr	r2, [pc, #452]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000fc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fd2:	4b6c      	ldr	r3, [pc, #432]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a6b      	ldr	r2, [pc, #428]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b69      	ldr	r3, [pc, #420]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fea:	4b66      	ldr	r3, [pc, #408]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a65      	ldr	r2, [pc, #404]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000ff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b63      	ldr	r3, [pc, #396]	@ (8001184 <MX_GPIO_Init+0x270>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001002:	4b60      	ldr	r3, [pc, #384]	@ (8001184 <MX_GPIO_Init+0x270>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a5f      	ldr	r2, [pc, #380]	@ (8001184 <MX_GPIO_Init+0x270>)
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b5d      	ldr	r3, [pc, #372]	@ (8001184 <MX_GPIO_Init+0x270>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0320 	and.w	r3, r3, #32
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	4b5a      	ldr	r3, [pc, #360]	@ (8001184 <MX_GPIO_Init+0x270>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a59      	ldr	r2, [pc, #356]	@ (8001184 <MX_GPIO_Init+0x270>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b57      	ldr	r3, [pc, #348]	@ (8001184 <MX_GPIO_Init+0x270>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8001032:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001038:	2303      	movs	r3, #3
 800103a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001040:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001044:	4619      	mov	r1, r3
 8001046:	4850      	ldr	r0, [pc, #320]	@ (8001188 <MX_GPIO_Init+0x274>)
 8001048:	f003 fe1c 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 800104c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800105e:	4619      	mov	r1, r3
 8001060:	484a      	ldr	r0, [pc, #296]	@ (800118c <MX_GPIO_Init+0x278>)
 8001062:	f003 fe0f 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001066:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106c:	2303      	movs	r3, #3
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001078:	4619      	mov	r1, r3
 800107a:	4845      	ldr	r0, [pc, #276]	@ (8001190 <MX_GPIO_Init+0x27c>)
 800107c:	f003 fe02 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD2
                           PD15 PD10 PD14 PD9
                           PD8 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 8001080:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001092:	4619      	mov	r1, r3
 8001094:	483f      	ldr	r0, [pc, #252]	@ (8001194 <MX_GPIO_Init+0x280>)
 8001096:	f003 fdf5 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC3 PC0
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 800109a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800109e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a0:	2303      	movs	r3, #3
 80010a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ac:	4619      	mov	r1, r3
 80010ae:	483a      	ldr	r0, [pc, #232]	@ (8001198 <MX_GPIO_Init+0x284>)
 80010b0:	f003 fde8 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80010b4:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ba:	2303      	movs	r3, #3
 80010bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c6:	4619      	mov	r1, r3
 80010c8:	4834      	ldr	r0, [pc, #208]	@ (800119c <MX_GPIO_Init+0x288>)
 80010ca:	f003 fddb 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80010ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d4:	2303      	movs	r3, #3
 80010d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e0:	4619      	mov	r1, r3
 80010e2:	482f      	ldr	r0, [pc, #188]	@ (80011a0 <MX_GPIO_Init+0x28c>)
 80010e4:	f003 fdce 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 80010e8:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80010ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010fa:	4619      	mov	r1, r3
 80010fc:	4829      	ldr	r0, [pc, #164]	@ (80011a4 <MX_GPIO_Init+0x290>)
 80010fe:	f003 fdc1 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001102:	23ff      	movs	r3, #255	@ 0xff
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001106:	2303      	movs	r3, #3
 8001108:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800110e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001112:	4619      	mov	r1, r3
 8001114:	4824      	ldr	r0, [pc, #144]	@ (80011a8 <MX_GPIO_Init+0x294>)
 8001116:	f003 fdb5 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800111a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001120:	2303      	movs	r3, #3
 8001122:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112c:	4619      	mov	r1, r3
 800112e:	481f      	ldr	r0, [pc, #124]	@ (80011ac <MX_GPIO_Init+0x298>)
 8001130:	f003 fda8 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001134:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001142:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001146:	4619      	mov	r1, r3
 8001148:	4819      	ldr	r0, [pc, #100]	@ (80011b0 <MX_GPIO_Init+0x29c>)
 800114a:	f003 fd9b 	bl	8004c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_user_Pin;
 800114e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001154:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001158:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Button_user_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001162:	4619      	mov	r1, r3
 8001164:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <MX_GPIO_Init+0x290>)
 8001166:	f003 fd8d 	bl	8004c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2028      	movs	r0, #40	@ 0x28
 8001170:	f003 f90b 	bl	800438a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001174:	2028      	movs	r0, #40	@ 0x28
 8001176:	f003 f924 	bl	80043c2 <HAL_NVIC_EnableIRQ>

}
 800117a:	bf00      	nop
 800117c:	3740      	adds	r7, #64	@ 0x40
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40021000 	.word	0x40021000
 800118c:	40021800 	.word	0x40021800
 8001190:	40020400 	.word	0x40020400
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40020800 	.word	0x40020800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40022400 	.word	0x40022400
 80011a4:	40022000 	.word	0x40022000
 80011a8:	40022800 	.word	0x40022800
 80011ac:	40021400 	.word	0x40021400
 80011b0:	40021c00 	.word	0x40021c00

080011b4 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80011c6:	2320      	movs	r3, #32
 80011c8:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011ca:	f3bf 8f4f 	dsb	sy
}
 80011ce:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80011d0:	e00b      	b.n	80011ea <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 80011d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <SCB_CleanDCache_by_Addr+0x54>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4413      	add	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	dcf0      	bgt.n	80011d2 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011f0:	f3bf 8f4f 	dsb	sy
}
 80011f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f6:	f3bf 8f6f 	isb	sy
}
 80011fa:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f002 ff5d 	bl	80040d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001216:	f000 f8b9 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121a:	f7ff fe7b 	bl	8000f14 <MX_GPIO_Init>
  MX_DMA_Init();
 800121e:	f7ff fe5b 	bl	8000ed8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001222:	f000 fc8b 	bl	8001b3c <MX_USART1_UART_Init>
  MX_SAI1_Init();
 8001226:	f000 fa25 	bl	8001674 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize Audio Recorder */
	if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 800122a:	2202      	movs	r2, #2
 800122c:	2110      	movs	r1, #16
 800122e:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 8001232:	f002 fd03 	bl	8003c3c <BSP_AUDIO_IN_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <main+0x36>
	{
		printf("Audio input setup OK\r\n");
 800123c:	4846      	ldr	r0, [pc, #280]	@ (8001358 <main+0x14c>)
 800123e:	f008 f801 	bl	8009244 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  check_button_release(); // test
 8001242:	f000 f9fd 	bl	8001640 <check_button_release>
	  printf("Waiting for input to record...\r\n");
 8001246:	4845      	ldr	r0, [pc, #276]	@ (800135c <main+0x150>)
 8001248:	f007 fffc 	bl	8009244 <puts>
	  HAL_Delay(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001250:	f002 ff9c 	bl	800418c <HAL_Delay>
	  if (button_pressed == 1)
 8001254:	4b42      	ldr	r3, [pc, #264]	@ (8001360 <main+0x154>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d1f1      	bne.n	8001242 <main+0x36>
	  {
		  button_pressed = 0;
 800125e:	4b40      	ldr	r3, [pc, #256]	@ (8001360 <main+0x154>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
		  printf("recording...\r\n");
 8001264:	483f      	ldr	r0, [pc, #252]	@ (8001364 <main+0x158>)
 8001266:	f007 ffed 	bl	8009244 <puts>
		  /* Start Recording */
		  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 800126a:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 800126e:	483e      	ldr	r0, [pc, #248]	@ (8001368 <main+0x15c>)
 8001270:	f002 fd62 	bl	8003d38 <BSP_AUDIO_IN_Record>
		  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	e048      	b.n	800130c <main+0x100>
		  {
		    /* Wait end of half block recording */
		    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
		    {
		      printf("Waiting for BUFFER_OFFSET_HALF...\r\n");
 800127a:	483c      	ldr	r0, [pc, #240]	@ (800136c <main+0x160>)
 800127c:	f007 ffe2 	bl	8009244 <puts>
		      if (button_pressed == 1)
 8001280:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <main+0x154>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d106      	bne.n	8001298 <main+0x8c>
		      {
		    	button_pressed = 0;
 800128a:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <main+0x154>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
		        /* Stop Player before close Test */
		        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001290:	2002      	movs	r0, #2
 8001292:	f002 fac1 	bl	8003818 <BSP_AUDIO_OUT_Stop>
		        return;
 8001296:	e05b      	b.n	8001350 <main+0x144>
		    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 8001298:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <main+0x164>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d1ec      	bne.n	800127a <main+0x6e>
		      }
		    }

		    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80012a0:	4b33      	ldr	r3, [pc, #204]	@ (8001370 <main+0x164>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]

		    /* Copy recorded 1st half block in SDRAM */

		    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	03db      	lsls	r3, r3, #15
 80012ac:	1a9b      	subs	r3, r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b30      	ldr	r3, [pc, #192]	@ (8001374 <main+0x168>)
 80012b4:	4413      	add	r3, r2
 80012b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80012ba:	492b      	ldr	r1, [pc, #172]	@ (8001368 <main+0x15c>)
 80012bc:	4618      	mov	r0, r3
 80012be:	f008 f920 	bl	8009502 <memcpy>
		           internal_buffer,
		           AUDIO_BLOCK_SIZE);


		    /* Wait end of one block recording */
		    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 80012c2:	e00b      	b.n	80012dc <main+0xd0>
		    {
		      if (button_pressed == 1)
 80012c4:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <main+0x154>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d106      	bne.n	80012dc <main+0xd0>
		      {
		    	button_pressed = 0;
 80012ce:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <main+0x154>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
		        /* Stop Player before close Test */
		        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80012d4:	2002      	movs	r0, #2
 80012d6:	f002 fa9f 	bl	8003818 <BSP_AUDIO_OUT_Stop>
		        return;
 80012da:	e039      	b.n	8001350 <main+0x144>
		    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 80012dc:	4b24      	ldr	r3, [pc, #144]	@ (8001370 <main+0x164>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d1ef      	bne.n	80012c4 <main+0xb8>
		      }
		    }
		    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80012e4:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <main+0x164>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
		    /* Copy recorded 2nd half block in SDRAM */

		    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	03db      	lsls	r3, r3, #15
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <main+0x16c>)
 80012f8:	4413      	add	r3, r2
 80012fa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80012fe:	491f      	ldr	r1, [pc, #124]	@ (800137c <main+0x170>)
 8001300:	4618      	mov	r0, r3
 8001302:	f008 f8fe 	bl	8009502 <memcpy>
		  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3301      	adds	r3, #1
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d9c2      	bls.n	8001298 <main+0x8c>
		           (uint16_t *)(&internal_buffer[AUDIO_BLOCK_SIZE/2]),
		           AUDIO_BLOCK_SIZE);

		  }
		  printf("stopped recording\r\n");
 8001312:	481b      	ldr	r0, [pc, #108]	@ (8001380 <main+0x174>)
 8001314:	f007 ff96 	bl	8009244 <puts>
		  BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8001318:	2002      	movs	r0, #2
 800131a:	f002 fd25 	bl	8003d68 <BSP_AUDIO_IN_Stop>

		  if(button_pressed == 1)
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <main+0x154>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d18c      	bne.n	8001242 <main+0x36>
		  {
			button_pressed = 0;
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <main+0x154>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
			printf("playing recording...\r\n");
 800132e:	4815      	ldr	r0, [pc, #84]	@ (8001384 <main+0x178>)
 8001330:	f007 ff88 	bl	8009244 <puts>
			/* -----------Start Playback -------------- */
			/* Initialize audio IN at REC_FREQ*/
			BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 70, DEFAULT_AUDIO_IN_FREQ);
 8001334:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001338:	2146      	movs	r1, #70	@ 0x46
 800133a:	2002      	movs	r0, #2
 800133c:	f002 f9f0 	bl	8003720 <BSP_AUDIO_OUT_Init>
			BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8001340:	2005      	movs	r0, #5
 8001342:	f002 fa8b 	bl	800385c <BSP_AUDIO_OUT_SetAudioFrameSlot>

			/* Play the recorded buffer*/
			AUDIO_Start(AUDIO_REC_START_ADDR, AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS * 2);  /* Use Audio play demo to playback sound */
 8001346:	4910      	ldr	r1, [pc, #64]	@ (8001388 <main+0x17c>)
 8001348:	480a      	ldr	r0, [pc, #40]	@ (8001374 <main+0x168>)
 800134a:	f000 f89f 	bl	800148c <AUDIO_Start>
  {
 800134e:	e778      	b.n	8001242 <main+0x36>
		  }
	  }
  }
  /* USER CODE END 3 */
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0800b138 	.word	0x0800b138
 800135c:	0800b150 	.word	0x0800b150
 8001360:	20020458 	.word	0x20020458
 8001364:	0800b170 	.word	0x0800b170
 8001368:	2000023c 	.word	0x2000023c
 800136c:	0800b180 	.word	0x0800b180
 8001370:	20020454 	.word	0x20020454
 8001374:	c0115800 	.word	0xc0115800
 8001378:	c01257fe 	.word	0xc01257fe
 800137c:	2001023a 	.word	0x2001023a
 8001380:	0800b1a4 	.word	0x0800b1a4
 8001384:	0800b1b8 	.word	0x0800b1b8
 8001388:	0007fff0 	.word	0x0007fff0

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	@ 0x50
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	2230      	movs	r2, #48	@ 0x30
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f008 f832 	bl	8009404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001460 <SystemClock_Config+0xd4>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001460 <SystemClock_Config+0xd4>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b28      	ldr	r3, [pc, #160]	@ (8001460 <SystemClock_Config+0xd4>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <SystemClock_Config+0xd8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a25      	ldr	r2, [pc, #148]	@ (8001464 <SystemClock_Config+0xd8>)
 80013ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <SystemClock_Config+0xd8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013f4:	2319      	movs	r3, #25
 80013f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80013f8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80013fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fe:	2302      	movs	r3, #2
 8001400:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001402:	2309      	movs	r3, #9
 8001404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fd50 	bl	8005eb0 <HAL_RCC_OscConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001416:	f000 f927 	bl	8001668 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800141a:	f004 fcf9 	bl	8005e10 <HAL_PWREx_EnableOverDrive>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001424:	f000 f920 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001428:	230f      	movs	r3, #15
 800142a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142c:	2302      	movs	r3, #2
 800142e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001434:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001438:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800143a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2106      	movs	r1, #6
 8001446:	4618      	mov	r0, r3
 8001448:	f004 ffd6 	bl	80063f8 <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001452:	f000 f909 	bl	8001668 <Error_Handler>
  }
}
 8001456:	bf00      	nop
 8001458:	3750      	adds	r7, #80	@ 0x50
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000

08001468 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8001470:	1d39      	adds	r1, r7, #4
 8001472:	2364      	movs	r3, #100	@ 0x64
 8001474:	2201      	movs	r2, #1
 8001476:	4804      	ldr	r0, [pc, #16]	@ (8001488 <__io_putchar+0x20>)
 8001478:	f006 fcbd 	bl	8007df6 <HAL_UART_Transmit>
return ch;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20020548 	.word	0x20020548

0800148c <AUDIO_Start>:

AUDIO_ErrorTypeDef AUDIO_Start(uint32_t audio_start_address, uint32_t audio_file_size)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t bytesread;

  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <AUDIO_Start+0x68>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
  AudioStartAddress = audio_start_address;
 800149e:	4a16      	ldr	r2, [pc, #88]	@ (80014f8 <AUDIO_Start+0x6c>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6013      	str	r3, [r2, #0]
  AudioFileSize = audio_file_size;
 80014a4:	4a15      	ldr	r2, [pc, #84]	@ (80014fc <AUDIO_Start+0x70>)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6013      	str	r3, [r2, #0]
  bytesread = GetData( (void *)AudioStartAddress,
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <AUDIO_Start+0x6c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b4:	4a0f      	ldr	r2, [pc, #60]	@ (80014f4 <AUDIO_Start+0x68>)
 80014b6:	2100      	movs	r1, #0
 80014b8:	f000 f824 	bl	8001504 <GetData>
 80014bc:	60f8      	str	r0, [r7, #12]
                      0,
                      &buffer_ctl.buff[0],
                      AUDIO_BUFFER_SIZE);
  if(bytesread > 0)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d012      	beq.n	80014ea <AUDIO_Start+0x5e>
  {
    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 80014c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014c8:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <AUDIO_Start+0x68>)
 80014ca:	f7ff fe73 	bl	80011b4 <SCB_CleanDCache_by_Addr>

    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 80014ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d2:	4808      	ldr	r0, [pc, #32]	@ (80014f4 <AUDIO_Start+0x68>)
 80014d4:	f002 f976 	bl	80037c4 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <AUDIO_Start+0x74>)
 80014da:	2202      	movs	r2, #2
 80014dc:	701a      	strb	r2, [r3, #0]
    buffer_ctl.fptr = bytesread;
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <AUDIO_Start+0x68>)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return AUDIO_ERROR_NONE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <AUDIO_Start+0x60>
  }
  return AUDIO_ERROR_IO;
 80014ea:	2302      	movs	r3, #2
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20020240 	.word	0x20020240
 80014f8:	2002044c 	.word	0x2002044c
 80014fc:	20020450 	.word	0x20020450
 8001500:	20020448 	.word	0x20020448

08001504 <GetData>:

static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
  uint8_t *lptr = pdata;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	613b      	str	r3, [r7, #16]
  uint32_t ReadDataNbr;

  ReadDataNbr = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 800151a:	e00c      	b.n	8001536 <GetData+0x32>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	441a      	add	r2, r3
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	440b      	add	r3, r1
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	701a      	strb	r2, [r3, #0]
    ReadDataNbr++;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	441a      	add	r2, r3
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <GetData+0x58>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d203      	bcs.n	800154c <GetData+0x48>
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3e7      	bcc.n	800151c <GetData+0x18>
  }
  return ReadDataNbr;
 800154c:	697b      	ldr	r3, [r7, #20]
}
 800154e:	4618      	mov	r0, r3
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20020450 	.word	0x20020450

08001560 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == Button_user_Pin && button_pressed == 0)
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001570:	d10a      	bne.n	8001588 <HAL_GPIO_EXTI_Callback+0x28>
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <HAL_GPIO_EXTI_Callback+0x30>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <HAL_GPIO_EXTI_Callback+0x30>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 8001582:	4804      	ldr	r0, [pc, #16]	@ (8001594 <HAL_GPIO_EXTI_Callback+0x34>)
 8001584:	f007 fe5e 	bl	8009244 <puts>
      }

}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20020458 	.word	0x20020458
 8001594:	0800b1d0 	.word	0x0800b1d0

08001598 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  if(audio_state == AUDIO_STATE_PLAYING)
 800159c:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d103      	bne.n	80015ac <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
  }
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20020448 	.word	0x20020448
 80015bc:	20020240 	.word	0x20020240

080015c0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  if(audio_state == AUDIO_STATE_PLAYING)
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d103      	bne.n	80015d4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 80015cc:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
  }
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20020448 	.word	0x20020448
 80015e4:	20020240 	.word	0x20020240

080015e8 <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  printf("Full Transfer Callback triggered.\r\n");
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 80015ee:	f007 fe29 	bl	8009244 <puts>
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 80015f2:	4b03      	ldr	r3, [pc, #12]	@ (8001600 <BSP_AUDIO_IN_TransferComplete_CallBack+0x18>)
 80015f4:	2202      	movs	r2, #2
 80015f6:	601a      	str	r2, [r3, #0]
  return;
 80015f8:	bf00      	nop
}
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	0800b1e4 	.word	0x0800b1e4
 8001600:	20020454 	.word	0x20020454

08001604 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  printf("Half Transfer Callback triggered.\r\n");
 8001608:	4803      	ldr	r0, [pc, #12]	@ (8001618 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800160a:	f007 fe1b 	bl	8009244 <puts>
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 800160e:	4b03      	ldr	r3, [pc, #12]	@ (800161c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x18>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
  return;
 8001614:	bf00      	nop
}
 8001616:	bd80      	pop	{r7, pc}
 8001618:	0800b208 	.word	0x0800b208
 800161c:	20020454 	.word	0x20020454

08001620 <BSP_AUDIO_IN_Error_CallBack>:

void BSP_AUDIO_IN_Error_CallBack(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
  /* Display message on the LCD screen */
  printf("DMA ERROR\r\n");
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <BSP_AUDIO_IN_Error_CallBack+0x1c>)
 8001626:	f007 fe0d 	bl	8009244 <puts>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800162a:	bf00      	nop
 800162c:	2002      	movs	r0, #2
 800162e:	f001 fe93 	bl	8003358 <BSP_PB_GetState>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
  {
    return;
 8001636:	bf00      	nop
  }
  /* could also generate a system reset to recover from the error */
  /* .... */
}
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	0800b22c 	.word	0x0800b22c

08001640 <check_button_release>:


void check_button_release()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, Button_user_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 8001644:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001648:	4805      	ldr	r0, [pc, #20]	@ (8001660 <check_button_release+0x20>)
 800164a:	f003 fdd3 	bl	80051f4 <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <check_button_release+0x1a>
 8001654:	4b03      	ldr	r3, [pc, #12]	@ (8001664 <check_button_release+0x24>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000
 8001664:	20020458 	.word	0x20020458

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <Error_Handler+0x8>

08001674 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001678:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <MX_SAI1_Init+0xa4>)
 800167a:	4a28      	ldr	r2, [pc, #160]	@ (800171c <MX_SAI1_Init+0xa8>)
 800167c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800167e:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <MX_SAI1_Init+0xa4>)
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001684:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <MX_SAI1_Init+0xa4>)
 8001686:	2201      	movs	r2, #1
 8001688:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800168a:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <MX_SAI1_Init+0xa4>)
 800168c:	2240      	movs	r2, #64	@ 0x40
 800168e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <MX_SAI1_Init+0xa4>)
 8001692:	2200      	movs	r2, #0
 8001694:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001696:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <MX_SAI1_Init+0xa4>)
 8001698:	2200      	movs	r2, #0
 800169a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <MX_SAI1_Init+0xa4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 80016b4:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016b6:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80016ba:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80016bc:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80016c8:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016d0:	2208      	movs	r2, #8
 80016d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80016d4:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80016da:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <MX_SAI1_Init+0xa4>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <MX_SAI1_Init+0xa4>)
 8001700:	2200      	movs	r2, #0
 8001702:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <MX_SAI1_Init+0xa4>)
 8001706:	f005 fe99 	bl	800743c <HAL_SAI_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8001710:	f7ff ffaa 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2002045c 	.word	0x2002045c
 800171c:	40015804 	.word	0x40015804

08001720 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0aa      	sub	sp, #168	@ 0xa8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	2284      	movs	r2, #132	@ 0x84
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f007 fe67 	bl	8009404 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a42      	ldr	r2, [pc, #264]	@ (8001844 <HAL_SAI_MspInit+0x124>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d17d      	bne.n	800183c <HAL_SAI_MspInit+0x11c>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001740:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001744:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001746:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800174c:	2305      	movs	r3, #5
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001750:	2302      	movs	r3, #2
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001754:	2303      	movs	r3, #3
 8001756:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001758:	2301      	movs	r3, #1
 800175a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800175c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001760:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001762:	2300      	movs	r3, #0
 8001764:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	4618      	mov	r0, r3
 800176c:	f005 f82a 	bl	80067c4 <HAL_RCCEx_PeriphCLKConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_SAI_MspInit+0x5a>
    {
      Error_Handler();
 8001776:	f7ff ff77 	bl	8001668 <Error_Handler>
    }

    if (SAI1_client == 0)
 800177a:	4b33      	ldr	r3, [pc, #204]	@ (8001848 <HAL_SAI_MspInit+0x128>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10b      	bne.n	800179a <HAL_SAI_MspInit+0x7a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001782:	4b32      	ldr	r3, [pc, #200]	@ (800184c <HAL_SAI_MspInit+0x12c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	4a31      	ldr	r2, [pc, #196]	@ (800184c <HAL_SAI_MspInit+0x12c>)
 8001788:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800178c:	6453      	str	r3, [r2, #68]	@ 0x44
 800178e:	4b2f      	ldr	r3, [pc, #188]	@ (800184c <HAL_SAI_MspInit+0x12c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800179a:	4b2b      	ldr	r3, [pc, #172]	@ (8001848 <HAL_SAI_MspInit+0x128>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <HAL_SAI_MspInit+0x128>)
 80017a2:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017a4:	2370      	movs	r3, #112	@ 0x70
 80017a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80017bc:	2306      	movs	r3, #6
 80017be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017c6:	4619      	mov	r1, r3
 80017c8:	4821      	ldr	r0, [pc, #132]	@ (8001850 <HAL_SAI_MspInit+0x130>)
 80017ca:	f003 fa5b 	bl	8004c84 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 80017ce:	4b21      	ldr	r3, [pc, #132]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 80017d0:	4a21      	ldr	r2, [pc, #132]	@ (8001858 <HAL_SAI_MspInit+0x138>)
 80017d2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80017d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017da:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 80017e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ec:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ee:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 80017f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017f4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 80017f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017fc:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 8001800:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001804:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001806:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 8001808:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800180c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 8001810:	2200      	movs	r2, #0
 8001812:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001814:	480f      	ldr	r0, [pc, #60]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 8001816:	f002 fdef 	bl	80043f8 <HAL_DMA_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_SAI_MspInit+0x104>
    {
      Error_Handler();
 8001820:	f7ff ff22 	bl	8001668 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a0b      	ldr	r2, [pc, #44]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 8001828:	671a      	str	r2, [r3, #112]	@ 0x70
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 8001834:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001836:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_SAI_MspInit+0x134>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800183c:	bf00      	nop
 800183e:	37a8      	adds	r7, #168	@ 0xa8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40015804 	.word	0x40015804
 8001848:	20020540 	.word	0x20020540
 800184c:	40023800 	.word	0x40023800
 8001850:	40021000 	.word	0x40021000
 8001854:	200204e0 	.word	0x200204e0
 8001858:	40026428 	.word	0x40026428

0800185c <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a11      	ldr	r2, [pc, #68]	@ (80018b0 <HAL_SAI_MspDeInit+0x54>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d11c      	bne.n	80018a8 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_SAI_MspDeInit+0x58>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3b01      	subs	r3, #1
 8001874:	4a0f      	ldr	r2, [pc, #60]	@ (80018b4 <HAL_SAI_MspDeInit+0x58>)
 8001876:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001878:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_SAI_MspDeInit+0x58>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001880:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_SAI_MspDeInit+0x5c>)
 8001882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001884:	4a0c      	ldr	r2, [pc, #48]	@ (80018b8 <HAL_SAI_MspDeInit+0x5c>)
 8001886:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800188a:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 800188c:	2170      	movs	r1, #112	@ 0x70
 800188e:	480b      	ldr	r0, [pc, #44]	@ (80018bc <HAL_SAI_MspDeInit+0x60>)
 8001890:	f003 fba4 	bl	8004fdc <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001898:	4618      	mov	r0, r3
 800189a:	f002 fe5b 	bl	8004554 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fe56 	bl	8004554 <HAL_DMA_DeInit>
    }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40015804 	.word	0x40015804
 80018b4:	20020540 	.word	0x20020540
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <HAL_MspInit+0x44>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001904 <HAL_MspInit+0x44>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <HAL_MspInit+0x44>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_MspInit+0x44>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_MspInit+0x44>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_MspInit+0x44>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <NMI_Handler+0x4>

08001910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <MemManage_Handler+0x4>

08001920 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <UsageFault_Handler+0x4>

08001930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195e:	f002 fbf5 	bl	800414c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}

08001966 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_user_Pin);
 800196a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800196e:	f003 fc59 	bl	8005224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <DMA2_Stream1_IRQHandler+0x10>)
 800197e:	f002 ff17 	bl	80047b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200204e0 	.word	0x200204e0

0800198c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return 1;
 8001990:	2301      	movs	r3, #1
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_kill>:

int _kill(int pid, int sig)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019a6:	f007 fd7f 	bl	80094a8 <__errno>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2216      	movs	r2, #22
 80019ae:	601a      	str	r2, [r3, #0]
  return -1;
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_exit>:

void _exit (int status)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ffe7 	bl	800199c <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ce:	bf00      	nop
 80019d0:	e7fd      	b.n	80019ce <_exit+0x12>

080019d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e00a      	b.n	80019fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e4:	f3af 8000 	nop.w
 80019e8:	4601      	mov	r1, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	60ba      	str	r2, [r7, #8]
 80019f0:	b2ca      	uxtb	r2, r1
 80019f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dbf0      	blt.n	80019e4 <_read+0x12>
  }

  return len;
 8001a02:	687b      	ldr	r3, [r7, #4]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e009      	b.n	8001a32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fd1e 	bl	8001468 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	dbf1      	blt.n	8001a1e <_write+0x12>
  }
  return len;
 8001a3a:	687b      	ldr	r3, [r7, #4]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_close>:

int _close(int file)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_isatty>:

int _isatty(int file)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	@ (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001adc:	f007 fce4 	bl	80094a8 <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	e009      	b.n	8001b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <_sbrk+0x64>)
 8001afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20050000 	.word	0x20050000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	20020544 	.word	0x20020544
 8001b14:	20020948 	.word	0x20020948

08001b18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <SystemInit+0x20>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <SystemInit+0x20>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b42:	4a15      	ldr	r2, [pc, #84]	@ (8001b98 <MX_USART1_UART_Init+0x5c>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b46:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_USART1_UART_Init+0x58>)
 8001b80:	f006 f8eb 	bl	8007d5a <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b8a:	f7ff fd6d 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20020548 	.word	0x20020548
 8001b98:	40011000 	.word	0x40011000

08001b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0ac      	sub	sp, #176	@ 0xb0
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	2284      	movs	r2, #132	@ 0x84
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f007 fc21 	bl	8009404 <memset>
  if(uartHandle->Instance==USART1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a32      	ldr	r2, [pc, #200]	@ (8001c90 <HAL_UART_MspInit+0xf4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d15c      	bne.n	8001c86 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bcc:	2340      	movs	r3, #64	@ 0x40
 8001bce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd4:	f107 0318 	add.w	r3, r7, #24
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f004 fdf3 	bl	80067c4 <HAL_RCCEx_PeriphCLKConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001be4:	f7ff fd40 	bl	8001668 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001be8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <HAL_UART_MspInit+0xf8>)
 8001bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bec:	4a29      	ldr	r2, [pc, #164]	@ (8001c94 <HAL_UART_MspInit+0xf8>)
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf4:	4b27      	ldr	r3, [pc, #156]	@ (8001c94 <HAL_UART_MspInit+0xf8>)
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <HAL_UART_MspInit+0xf8>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c04:	4a23      	ldr	r2, [pc, #140]	@ (8001c94 <HAL_UART_MspInit+0xf8>)
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0c:	4b21      	ldr	r3, [pc, #132]	@ (8001c94 <HAL_UART_MspInit+0xf8>)
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c18:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <HAL_UART_MspInit+0xf8>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c94 <HAL_UART_MspInit+0xf8>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c24:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_UART_MspInit+0xf8>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c48:	2307      	movs	r3, #7
 8001c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c52:	4619      	mov	r1, r3
 8001c54:	4810      	ldr	r0, [pc, #64]	@ (8001c98 <HAL_UART_MspInit+0xfc>)
 8001c56:	f003 f815 	bl	8004c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c74:	2307      	movs	r3, #7
 8001c76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4806      	ldr	r0, [pc, #24]	@ (8001c9c <HAL_UART_MspInit+0x100>)
 8001c82:	f002 ffff 	bl	8004c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c86:	bf00      	nop
 8001c88:	37b0      	adds	r7, #176	@ 0xb0
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40011000 	.word	0x40011000
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ca4:	f7ff ff38 	bl	8001b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001caa:	490d      	ldr	r1, [pc, #52]	@ (8001ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cce:	f007 fbf1 	bl	80094b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd2:	f7ff fa9b 	bl	800120c <main>
  bx  lr    
 8001cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001ce4:	0800b5e0 	.word	0x0800b5e0
  ldr r2, =_sbss
 8001ce8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001cec:	20020948 	.word	0x20020948

08001cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC_IRQHandler>
	...

08001cf4 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	81fb      	strh	r3, [r7, #14]
 8001d00:	460b      	mov	r3, r1
 8001d02:	81bb      	strh	r3, [r7, #12]
 8001d04:	4613      	mov	r3, r2
 8001d06:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001d0c:	89bb      	ldrh	r3, [r7, #12]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001d12:	89bb      	ldrh	r3, [r7, #12]
 8001d14:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d18:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001d1e:	f001 fc8b 	bl	8003638 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001d22:	89fb      	ldrh	r3, [r7, #14]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2203      	movs	r2, #3
 8001d28:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 fafb 	bl	8003328 <CODEC_IO_Write>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8001d3c:	89fb      	ldrh	r3, [r7, #14]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	f640 0117 	movw	r1, #2071	@ 0x817
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 faee 	bl	8003328 <CODEC_IO_Write>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	4413      	add	r3, r2
 8001d54:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 fae1 	bl	8003328 <CODEC_IO_Write>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8001d70:	89fb      	ldrh	r3, [r7, #14]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	226c      	movs	r2, #108	@ 0x6c
 8001d76:	2139      	movs	r1, #57	@ 0x39
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 fad5 	bl	8003328 <CODEC_IO_Write>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461a      	mov	r2, r3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	4413      	add	r3, r2
 8001d86:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8001d88:	8afb      	ldrh	r3, [r7, #22]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00c      	beq.n	8001da8 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8001d8e:	89fb      	ldrh	r3, [r7, #14]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2213      	movs	r2, #19
 8001d94:	2101      	movs	r1, #1
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 fac6 	bl	8003328 <CODEC_IO_Write>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	4413      	add	r3, r2
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	e00b      	b.n	8001dc0 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8001da8:	89fb      	ldrh	r3, [r7, #14]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2203      	movs	r2, #3
 8001dae:	2101      	movs	r1, #1
 8001db0:	4618      	mov	r0, r3
 8001db2:	f001 fab9 	bl	8003328 <CODEC_IO_Write>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8001dc0:	2032      	movs	r0, #50	@ 0x32
 8001dc2:	f001 fca1 	bl	8003708 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8001dc6:	8b3b      	ldrh	r3, [r7, #24]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 815f 	beq.w	800208c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8001dce:	4bae      	ldr	r3, [pc, #696]	@ (8002088 <wm8994_Init+0x394>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8001dd4:	8b3b      	ldrh	r3, [r7, #24]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	f000 808c 	beq.w	8001ef4 <wm8994_Init+0x200>
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	f300 8111 	bgt.w	8002004 <wm8994_Init+0x310>
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d002      	beq.n	8001dec <wm8994_Init+0xf8>
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d042      	beq.n	8001e70 <wm8994_Init+0x17c>
 8001dea:	e10b      	b.n	8002004 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8001df4:	2105      	movs	r1, #5
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 fa96 	bl	8003328 <CODEC_IO_Write>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	4413      	add	r3, r2
 8001e04:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8001e06:	89fb      	ldrh	r3, [r7, #14]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f240 6101 	movw	r1, #1537	@ 0x601
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 fa89 	bl	8003328 <CODEC_IO_Write>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	f240 6102 	movw	r1, #1538	@ 0x602
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f001 fa7c 	bl	8003328 <CODEC_IO_Write>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	4413      	add	r3, r2
 8001e38:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001e3a:	89fb      	ldrh	r3, [r7, #14]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f240 6104 	movw	r1, #1540	@ 0x604
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 fa6f 	bl	8003328 <CODEC_IO_Write>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2202      	movs	r2, #2
 8001e5a:	f240 6105 	movw	r1, #1541	@ 0x605
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 fa62 	bl	8003328 <CODEC_IO_Write>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	61fb      	str	r3, [r7, #28]
      break;
 8001e6e:	e110      	b.n	8002092 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001e70:	89fb      	ldrh	r3, [r7, #14]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f240 3203 	movw	r2, #771	@ 0x303
 8001e78:	2105      	movs	r1, #5
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 fa54 	bl	8003328 <CODEC_IO_Write>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	4413      	add	r3, r2
 8001e88:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001e8a:	89fb      	ldrh	r3, [r7, #14]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f240 6101 	movw	r1, #1537	@ 0x601
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fa47 	bl	8003328 <CODEC_IO_Write>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001ea4:	89fb      	ldrh	r3, [r7, #14]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f240 6102 	movw	r1, #1538	@ 0x602
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fa3a 	bl	8003328 <CODEC_IO_Write>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	4413      	add	r3, r2
 8001ebc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001ebe:	89fb      	ldrh	r3, [r7, #14]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f240 6104 	movw	r1, #1540	@ 0x604
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 fa2d 	bl	8003328 <CODEC_IO_Write>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	f240 6105 	movw	r1, #1541	@ 0x605
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fa20 	bl	8003328 <CODEC_IO_Write>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	4413      	add	r3, r2
 8001ef0:	61fb      	str	r3, [r7, #28]
      break;
 8001ef2:	e0ce      	b.n	8002092 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001ef4:	8afb      	ldrh	r3, [r7, #22]
 8001ef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001efa:	d141      	bne.n	8001f80 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001efc:	89fb      	ldrh	r3, [r7, #14]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001f04:	2105      	movs	r1, #5
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fa0e 	bl	8003328 <CODEC_IO_Write>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	4413      	add	r3, r2
 8001f14:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8001f16:	89fb      	ldrh	r3, [r7, #14]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	f240 6101 	movw	r1, #1537	@ 0x601
 8001f20:	4618      	mov	r0, r3
 8001f22:	f001 fa01 	bl	8003328 <CODEC_IO_Write>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8001f30:	89fb      	ldrh	r3, [r7, #14]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2203      	movs	r2, #3
 8001f36:	f240 6102 	movw	r1, #1538	@ 0x602
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 f9f4 	bl	8003328 <CODEC_IO_Write>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	4413      	add	r3, r2
 8001f48:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8001f4a:	89fb      	ldrh	r3, [r7, #14]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2203      	movs	r2, #3
 8001f50:	f240 6104 	movw	r1, #1540	@ 0x604
 8001f54:	4618      	mov	r0, r3
 8001f56:	f001 f9e7 	bl	8003328 <CODEC_IO_Write>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	4413      	add	r3, r2
 8001f62:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8001f64:	89fb      	ldrh	r3, [r7, #14]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2203      	movs	r2, #3
 8001f6a:	f240 6105 	movw	r1, #1541	@ 0x605
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 f9da 	bl	8003328 <CODEC_IO_Write>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8001f7e:	e088      	b.n	8002092 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001f80:	89fb      	ldrh	r3, [r7, #14]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8001f88:	2105      	movs	r1, #5
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 f9cc 	bl	8003328 <CODEC_IO_Write>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	4413      	add	r3, r2
 8001f98:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001f9a:	89fb      	ldrh	r3, [r7, #14]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f240 6101 	movw	r1, #1537	@ 0x601
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 f9bf 	bl	8003328 <CODEC_IO_Write>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f240 6102 	movw	r1, #1538	@ 0x602
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 f9b2 	bl	8003328 <CODEC_IO_Write>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	4413      	add	r3, r2
 8001fcc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001fce:	89fb      	ldrh	r3, [r7, #14]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f240 6104 	movw	r1, #1540	@ 0x604
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f001 f9a5 	bl	8003328 <CODEC_IO_Write>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8001fe8:	89fb      	ldrh	r3, [r7, #14]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2202      	movs	r2, #2
 8001fee:	f240 6105 	movw	r1, #1541	@ 0x605
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f001 f998 	bl	8003328 <CODEC_IO_Write>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	4413      	add	r3, r2
 8002000:	61fb      	str	r3, [r7, #28]
      break;
 8002002:	e046      	b.n	8002092 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002004:	89fb      	ldrh	r3, [r7, #14]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f240 3203 	movw	r2, #771	@ 0x303
 800200c:	2105      	movs	r1, #5
 800200e:	4618      	mov	r0, r3
 8002010:	f001 f98a 	bl	8003328 <CODEC_IO_Write>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	4413      	add	r3, r2
 800201c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2201      	movs	r2, #1
 8002024:	f240 6101 	movw	r1, #1537	@ 0x601
 8002028:	4618      	mov	r0, r3
 800202a:	f001 f97d 	bl	8003328 <CODEC_IO_Write>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2201      	movs	r2, #1
 800203e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002042:	4618      	mov	r0, r3
 8002044:	f001 f970 	bl	8003328 <CODEC_IO_Write>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	4413      	add	r3, r2
 8002050:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002052:	89fb      	ldrh	r3, [r7, #14]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2200      	movs	r2, #0
 8002058:	f240 6104 	movw	r1, #1540	@ 0x604
 800205c:	4618      	mov	r0, r3
 800205e:	f001 f963 	bl	8003328 <CODEC_IO_Write>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800206c:	89fb      	ldrh	r3, [r7, #14]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2200      	movs	r2, #0
 8002072:	f240 6105 	movw	r1, #1541	@ 0x605
 8002076:	4618      	mov	r0, r3
 8002078:	f001 f956 	bl	8003328 <CODEC_IO_Write>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	4413      	add	r3, r2
 8002084:	61fb      	str	r3, [r7, #28]
      break;
 8002086:	e004      	b.n	8002092 <wm8994_Init+0x39e>
 8002088:	200205d0 	.word	0x200205d0
    }
  }
  else
  {
    outputEnabled = 0;
 800208c:	4b99      	ldr	r3, [pc, #612]	@ (80022f4 <wm8994_Init+0x600>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002092:	8afb      	ldrh	r3, [r7, #22]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 81ab 	beq.w	80023f0 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800209a:	4b97      	ldr	r3, [pc, #604]	@ (80022f8 <wm8994_Init+0x604>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80020a0:	8afb      	ldrh	r3, [r7, #22]
 80020a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020a6:	f000 8129 	beq.w	80022fc <wm8994_Init+0x608>
 80020aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020ae:	f300 819b 	bgt.w	80023e8 <wm8994_Init+0x6f4>
 80020b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020b6:	d05a      	beq.n	800216e <wm8994_Init+0x47a>
 80020b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020bc:	f300 8194 	bgt.w	80023e8 <wm8994_Init+0x6f4>
 80020c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020c4:	f000 80c6 	beq.w	8002254 <wm8994_Init+0x560>
 80020c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020cc:	f040 818c 	bne.w	80023e8 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80020d0:	89fb      	ldrh	r3, [r7, #14]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80020d8:	2104      	movs	r1, #4
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 f924 	bl	8003328 <CODEC_IO_Write>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	4413      	add	r3, r2
 80020e8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80020ea:	89fb      	ldrh	r3, [r7, #14]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	22db      	movs	r2, #219	@ 0xdb
 80020f0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80020f4:	4618      	mov	r0, r3
 80020f6:	f001 f917 	bl	8003328 <CODEC_IO_Write>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	4413      	add	r3, r2
 8002102:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002104:	89fb      	ldrh	r3, [r7, #14]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800210c:	2102      	movs	r1, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f001 f90a 	bl	8003328 <CODEC_IO_Write>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	4413      	add	r3, r2
 800211c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800211e:	89fb      	ldrh	r3, [r7, #14]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2202      	movs	r2, #2
 8002124:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002128:	4618      	mov	r0, r3
 800212a:	f001 f8fd 	bl	8003328 <CODEC_IO_Write>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002138:	89fb      	ldrh	r3, [r7, #14]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2202      	movs	r2, #2
 800213e:	f240 6109 	movw	r1, #1545	@ 0x609
 8002142:	4618      	mov	r0, r3
 8002144:	f001 f8f0 	bl	8003328 <CODEC_IO_Write>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	220e      	movs	r2, #14
 8002158:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800215c:	4618      	mov	r0, r3
 800215e:	f001 f8e3 	bl	8003328 <CODEC_IO_Write>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	61fb      	str	r3, [r7, #28]
      break;
 800216c:	e143      	b.n	80023f6 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800216e:	89fb      	ldrh	r3, [r7, #14]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2211      	movs	r2, #17
 8002174:	2128      	movs	r1, #40	@ 0x28
 8002176:	4618      	mov	r0, r3
 8002178:	f001 f8d6 	bl	8003328 <CODEC_IO_Write>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002186:	89fb      	ldrh	r3, [r7, #14]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2235      	movs	r2, #53	@ 0x35
 800218c:	2129      	movs	r1, #41	@ 0x29
 800218e:	4618      	mov	r0, r3
 8002190:	f001 f8ca 	bl	8003328 <CODEC_IO_Write>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	4413      	add	r3, r2
 800219c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800219e:	89fb      	ldrh	r3, [r7, #14]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2235      	movs	r2, #53	@ 0x35
 80021a4:	212a      	movs	r1, #42	@ 0x2a
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 f8be 	bl	8003328 <CODEC_IO_Write>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4413      	add	r3, r2
 80021b4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80021b6:	89fb      	ldrh	r3, [r7, #14]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f240 3203 	movw	r2, #771	@ 0x303
 80021be:	2104      	movs	r1, #4
 80021c0:	4618      	mov	r0, r3
 80021c2:	f001 f8b1 	bl	8003328 <CODEC_IO_Write>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	4413      	add	r3, r2
 80021ce:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80021d0:	89fb      	ldrh	r3, [r7, #14]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	22db      	movs	r2, #219	@ 0xdb
 80021d6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 f8a4 	bl	8003328 <CODEC_IO_Write>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	4413      	add	r3, r2
 80021e8:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80021ea:	89fb      	ldrh	r3, [r7, #14]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f246 3250 	movw	r2, #25424	@ 0x6350
 80021f2:	2102      	movs	r1, #2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f001 f897 	bl	8003328 <CODEC_IO_Write>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	4413      	add	r3, r2
 8002202:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002204:	89fb      	ldrh	r3, [r7, #14]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2202      	movs	r2, #2
 800220a:	f240 6106 	movw	r1, #1542	@ 0x606
 800220e:	4618      	mov	r0, r3
 8002210:	f001 f88a 	bl	8003328 <CODEC_IO_Write>
 8002214:	4603      	mov	r3, r0
 8002216:	461a      	mov	r2, r3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4413      	add	r3, r2
 800221c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800221e:	89fb      	ldrh	r3, [r7, #14]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2202      	movs	r2, #2
 8002224:	f240 6107 	movw	r1, #1543	@ 0x607
 8002228:	4618      	mov	r0, r3
 800222a:	f001 f87d 	bl	8003328 <CODEC_IO_Write>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002238:	89fb      	ldrh	r3, [r7, #14]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	220d      	movs	r2, #13
 800223e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002242:	4618      	mov	r0, r3
 8002244:	f001 f870 	bl	8003328 <CODEC_IO_Write>
 8002248:	4603      	mov	r3, r0
 800224a:	461a      	mov	r2, r3
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	61fb      	str	r3, [r7, #28]
      break;
 8002252:	e0d0      	b.n	80023f6 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8002254:	89fb      	ldrh	r3, [r7, #14]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 800225c:	2104      	movs	r1, #4
 800225e:	4618      	mov	r0, r3
 8002260:	f001 f862 	bl	8003328 <CODEC_IO_Write>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	4413      	add	r3, r2
 800226c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800226e:	89fb      	ldrh	r3, [r7, #14]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	22db      	movs	r2, #219	@ 0xdb
 8002274:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002278:	4618      	mov	r0, r3
 800227a:	f001 f855 	bl	8003328 <CODEC_IO_Write>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	4413      	add	r3, r2
 8002286:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002288:	89fb      	ldrh	r3, [r7, #14]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002290:	2102      	movs	r1, #2
 8002292:	4618      	mov	r0, r3
 8002294:	f001 f848 	bl	8003328 <CODEC_IO_Write>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	4413      	add	r3, r2
 80022a0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2202      	movs	r2, #2
 80022a8:	f240 6106 	movw	r1, #1542	@ 0x606
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 f83b 	bl	8003328 <CODEC_IO_Write>
 80022b2:	4603      	mov	r3, r0
 80022b4:	461a      	mov	r2, r3
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2202      	movs	r2, #2
 80022c2:	f240 6107 	movw	r1, #1543	@ 0x607
 80022c6:	4618      	mov	r0, r3
 80022c8:	f001 f82e 	bl	8003328 <CODEC_IO_Write>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	4413      	add	r3, r2
 80022d4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80022d6:	89fb      	ldrh	r3, [r7, #14]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	220d      	movs	r2, #13
 80022dc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 f821 	bl	8003328 <CODEC_IO_Write>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	61fb      	str	r3, [r7, #28]
      break; 
 80022f0:	e081      	b.n	80023f6 <wm8994_Init+0x702>
 80022f2:	bf00      	nop
 80022f4:	200205d0 	.word	0x200205d0
 80022f8:	200205d4 	.word	0x200205d4
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80022fc:	89fb      	ldrh	r3, [r7, #14]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002304:	2104      	movs	r1, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f001 f80e 	bl	8003328 <CODEC_IO_Write>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	4413      	add	r3, r2
 8002314:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002316:	89fb      	ldrh	r3, [r7, #14]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	22db      	movs	r2, #219	@ 0xdb
 800231c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002320:	4618      	mov	r0, r3
 8002322:	f001 f801 	bl	8003328 <CODEC_IO_Write>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002330:	89fb      	ldrh	r3, [r7, #14]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	22db      	movs	r2, #219	@ 0xdb
 8002336:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fff4 	bl	8003328 <CODEC_IO_Write>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 800234a:	89fb      	ldrh	r3, [r7, #14]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8002352:	2102      	movs	r1, #2
 8002354:	4618      	mov	r0, r3
 8002356:	f000 ffe7 	bl	8003328 <CODEC_IO_Write>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	4413      	add	r3, r2
 8002362:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002364:	89fb      	ldrh	r3, [r7, #14]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2202      	movs	r2, #2
 800236a:	f240 6106 	movw	r1, #1542	@ 0x606
 800236e:	4618      	mov	r0, r3
 8002370:	f000 ffda 	bl	8003328 <CODEC_IO_Write>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4413      	add	r3, r2
 800237c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2202      	movs	r2, #2
 8002384:	f240 6107 	movw	r1, #1543	@ 0x607
 8002388:	4618      	mov	r0, r3
 800238a:	f000 ffcd 	bl	8003328 <CODEC_IO_Write>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	4413      	add	r3, r2
 8002396:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002398:	89fb      	ldrh	r3, [r7, #14]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2202      	movs	r2, #2
 800239e:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 ffc0 	bl	8003328 <CODEC_IO_Write>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	4413      	add	r3, r2
 80023b0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2202      	movs	r2, #2
 80023b8:	f240 6109 	movw	r1, #1545	@ 0x609
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 ffb3 	bl	8003328 <CODEC_IO_Write>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	4413      	add	r3, r2
 80023ca:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	220d      	movs	r2, #13
 80023d2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 ffa6 	bl	8003328 <CODEC_IO_Write>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	4413      	add	r3, r2
 80023e4:	61fb      	str	r3, [r7, #28]
      break;    
 80023e6:	e006      	b.n	80023f6 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	3301      	adds	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
      break;
 80023ee:	e002      	b.n	80023f6 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 80023f0:	4ba4      	ldr	r3, [pc, #656]	@ (8002684 <wm8994_Init+0x990>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4aa3      	ldr	r2, [pc, #652]	@ (8002688 <wm8994_Init+0x994>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d079      	beq.n	80024f2 <wm8994_Init+0x7fe>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4aa1      	ldr	r2, [pc, #644]	@ (8002688 <wm8994_Init+0x994>)
 8002402:	4293      	cmp	r3, r2
 8002404:	f200 80ad 	bhi.w	8002562 <wm8994_Init+0x86e>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800240e:	4293      	cmp	r3, r2
 8002410:	d061      	beq.n	80024d6 <wm8994_Init+0x7e2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002418:	4293      	cmp	r3, r2
 800241a:	f200 80a2 	bhi.w	8002562 <wm8994_Init+0x86e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002424:	4293      	cmp	r3, r2
 8002426:	f000 808e 	beq.w	8002546 <wm8994_Init+0x852>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002430:	4293      	cmp	r3, r2
 8002432:	f200 8096 	bhi.w	8002562 <wm8994_Init+0x86e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800243c:	d03d      	beq.n	80024ba <wm8994_Init+0x7c6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002444:	f200 808d 	bhi.w	8002562 <wm8994_Init+0x86e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800244e:	4293      	cmp	r3, r2
 8002450:	d06b      	beq.n	800252a <wm8994_Init+0x836>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002458:	4293      	cmp	r3, r2
 800245a:	f200 8082 	bhi.w	8002562 <wm8994_Init+0x86e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002464:	d01b      	beq.n	800249e <wm8994_Init+0x7aa>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800246c:	d879      	bhi.n	8002562 <wm8994_Init+0x86e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002474:	d005      	beq.n	8002482 <wm8994_Init+0x78e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800247c:	4293      	cmp	r3, r2
 800247e:	d046      	beq.n	800250e <wm8994_Init+0x81a>
 8002480:	e06f      	b.n	8002562 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002482:	89fb      	ldrh	r3, [r7, #14]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2203      	movs	r2, #3
 8002488:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800248c:	4618      	mov	r0, r3
 800248e:	f000 ff4b 	bl	8003328 <CODEC_IO_Write>
 8002492:	4603      	mov	r3, r0
 8002494:	461a      	mov	r2, r3
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	4413      	add	r3, r2
 800249a:	61fb      	str	r3, [r7, #28]
    break;
 800249c:	e06f      	b.n	800257e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800249e:	89fb      	ldrh	r3, [r7, #14]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2233      	movs	r2, #51	@ 0x33
 80024a4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 ff3d 	bl	8003328 <CODEC_IO_Write>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	4413      	add	r3, r2
 80024b6:	61fb      	str	r3, [r7, #28]
    break;
 80024b8:	e061      	b.n	800257e <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80024ba:	89fb      	ldrh	r3, [r7, #14]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2263      	movs	r2, #99	@ 0x63
 80024c0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 ff2f 	bl	8003328 <CODEC_IO_Write>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	61fb      	str	r3, [r7, #28]
    break;
 80024d4:	e053      	b.n	800257e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80024d6:	89fb      	ldrh	r3, [r7, #14]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2283      	movs	r2, #131	@ 0x83
 80024dc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 ff21 	bl	8003328 <CODEC_IO_Write>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4413      	add	r3, r2
 80024ee:	61fb      	str	r3, [r7, #28]
    break;
 80024f0:	e045      	b.n	800257e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80024f2:	89fb      	ldrh	r3, [r7, #14]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	22a3      	movs	r2, #163	@ 0xa3
 80024f8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 ff13 	bl	8003328 <CODEC_IO_Write>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	4413      	add	r3, r2
 800250a:	61fb      	str	r3, [r7, #28]
    break;
 800250c:	e037      	b.n	800257e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800250e:	89fb      	ldrh	r3, [r7, #14]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2213      	movs	r2, #19
 8002514:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002518:	4618      	mov	r0, r3
 800251a:	f000 ff05 	bl	8003328 <CODEC_IO_Write>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	4413      	add	r3, r2
 8002526:	61fb      	str	r3, [r7, #28]
    break;
 8002528:	e029      	b.n	800257e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800252a:	89fb      	ldrh	r3, [r7, #14]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2243      	movs	r2, #67	@ 0x43
 8002530:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fef7 	bl	8003328 <CODEC_IO_Write>
 800253a:	4603      	mov	r3, r0
 800253c:	461a      	mov	r2, r3
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	4413      	add	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]
    break;
 8002544:	e01b      	b.n	800257e <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002546:	89fb      	ldrh	r3, [r7, #14]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2273      	movs	r2, #115	@ 0x73
 800254c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002550:	4618      	mov	r0, r3
 8002552:	f000 fee9 	bl	8003328 <CODEC_IO_Write>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	4413      	add	r3, r2
 800255e:	61fb      	str	r3, [r7, #28]
    break; 
 8002560:	e00d      	b.n	800257e <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002562:	89fb      	ldrh	r3, [r7, #14]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2283      	movs	r2, #131	@ 0x83
 8002568:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fedb 	bl	8003328 <CODEC_IO_Write>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	61fb      	str	r3, [r7, #28]
    break; 
 800257c:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800257e:	8afb      	ldrh	r3, [r7, #22]
 8002580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002584:	d10e      	bne.n	80025a4 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	f244 0218 	movw	r2, #16408	@ 0x4018
 800258e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fec8 	bl	8003328 <CODEC_IO_Write>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e00d      	b.n	80025c0 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80025a4:	89fb      	ldrh	r3, [r7, #14]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f244 0210 	movw	r2, #16400	@ 0x4010
 80025ac:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 feb9 	bl	8003328 <CODEC_IO_Write>
 80025b6:	4603      	mov	r3, r0
 80025b8:	461a      	mov	r2, r3
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	4413      	add	r3, r2
 80025be:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80025c0:	89fb      	ldrh	r3, [r7, #14]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2200      	movs	r2, #0
 80025c6:	f240 3102 	movw	r1, #770	@ 0x302
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 feac 	bl	8003328 <CODEC_IO_Write>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	4413      	add	r3, r2
 80025d8:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80025da:	89fb      	ldrh	r3, [r7, #14]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	220a      	movs	r2, #10
 80025e0:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fe9f 	bl	8003328 <CODEC_IO_Write>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80025f4:	89fb      	ldrh	r3, [r7, #14]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2201      	movs	r2, #1
 80025fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fe92 	bl	8003328 <CODEC_IO_Write>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	4413      	add	r3, r2
 800260c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800260e:	8b3b      	ldrh	r3, [r7, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 817b 	beq.w	800290c <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002616:	8b3b      	ldrh	r3, [r7, #24]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d157      	bne.n	80026cc <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002624:	212d      	movs	r1, #45	@ 0x2d
 8002626:	4618      	mov	r0, r3
 8002628:	f000 fe7e 	bl	8003328 <CODEC_IO_Write>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800263e:	212e      	movs	r1, #46	@ 0x2e
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fe71 	bl	8003328 <CODEC_IO_Write>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002650:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <wm8994_Init+0x998>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8002658:	89fb      	ldrh	r3, [r7, #14]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8002660:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fe5f 	bl	8003328 <CODEC_IO_Write>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <wm8994_Init+0x998>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800267a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800267e:	f001 f843 	bl	8003708 <AUDIO_IO_Delay>
 8002682:	e016      	b.n	80026b2 <wm8994_Init+0x9be>
 8002684:	200205d4 	.word	0x200205d4
 8002688:	00017700 	.word	0x00017700
 800268c:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002690:	89fb      	ldrh	r3, [r7, #14]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f248 1208 	movw	r2, #33032	@ 0x8108
 8002698:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fe43 	bl	8003328 <CODEC_IO_Write>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4413      	add	r3, r2
 80026aa:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80026ac:	2032      	movs	r0, #50	@ 0x32
 80026ae:	f001 f82b 	bl	8003708 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80026b2:	89fb      	ldrh	r3, [r7, #14]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2200      	movs	r2, #0
 80026b8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fe33 	bl	8003328 <CODEC_IO_Write>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	4413      	add	r3, r2
 80026ca:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80026cc:	89fb      	ldrh	r3, [r7, #14]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80026d4:	2103      	movs	r1, #3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fe26 	bl	8003328 <CODEC_IO_Write>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80026e6:	89fb      	ldrh	r3, [r7, #14]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2200      	movs	r2, #0
 80026ec:	2122      	movs	r1, #34	@ 0x22
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fe1a 	bl	8003328 <CODEC_IO_Write>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461a      	mov	r2, r3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80026fe:	89fb      	ldrh	r3, [r7, #14]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2200      	movs	r2, #0
 8002704:	2123      	movs	r1, #35	@ 0x23
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fe0e 	bl	8003328 <CODEC_IO_Write>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800271e:	2136      	movs	r1, #54	@ 0x36
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fe01 	bl	8003328 <CODEC_IO_Write>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002730:	89fb      	ldrh	r3, [r7, #14]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f243 0203 	movw	r2, #12291	@ 0x3003
 8002738:	2101      	movs	r1, #1
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fdf4 	bl	8003328 <CODEC_IO_Write>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800274a:	8afb      	ldrh	r3, [r7, #22]
 800274c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002750:	d10d      	bne.n	800276e <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f240 2205 	movw	r2, #517	@ 0x205
 800275a:	2151      	movs	r1, #81	@ 0x51
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fde3 	bl	8003328 <CODEC_IO_Write>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	4413      	add	r3, r2
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	e00b      	b.n	8002786 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 800276e:	89fb      	ldrh	r3, [r7, #14]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2205      	movs	r2, #5
 8002774:	2151      	movs	r1, #81	@ 0x51
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fdd6 	bl	8003328 <CODEC_IO_Write>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	4413      	add	r3, r2
 8002784:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002786:	8b7b      	ldrh	r3, [r7, #26]
 8002788:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 800278c:	f043 0303 	orr.w	r3, r3, #3
 8002790:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	8b7a      	ldrh	r2, [r7, #26]
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fdc4 	bl	8003328 <CODEC_IO_Write>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4413      	add	r3, r2
 80027a8:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80027aa:	89fb      	ldrh	r3, [r7, #14]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2222      	movs	r2, #34	@ 0x22
 80027b0:	2160      	movs	r1, #96	@ 0x60
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fdb8 	bl	8003328 <CODEC_IO_Write>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80027c2:	89fb      	ldrh	r3, [r7, #14]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f649 7225 	movw	r2, #40741	@ 0x9f25
 80027ca:	214c      	movs	r1, #76	@ 0x4c
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fdab 	bl	8003328 <CODEC_IO_Write>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80027dc:	200f      	movs	r0, #15
 80027de:	f000 ff93 	bl	8003708 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 80027e2:	89fb      	ldrh	r3, [r7, #14]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2201      	movs	r2, #1
 80027e8:	212d      	movs	r1, #45	@ 0x2d
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fd9c 	bl	8003328 <CODEC_IO_Write>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	4413      	add	r3, r2
 80027f8:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80027fa:	89fb      	ldrh	r3, [r7, #14]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2201      	movs	r2, #1
 8002800:	212e      	movs	r1, #46	@ 0x2e
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fd90 	bl	8003328 <CODEC_IO_Write>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	4413      	add	r3, r2
 8002810:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800281a:	2103      	movs	r1, #3
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fd83 	bl	8003328 <CODEC_IO_Write>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	4413      	add	r3, r2
 800282a:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2233      	movs	r2, #51	@ 0x33
 8002832:	2154      	movs	r1, #84	@ 0x54
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fd77 	bl	8003328 <CODEC_IO_Write>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002844:	f240 1001 	movw	r0, #257	@ 0x101
 8002848:	f000 ff5e 	bl	8003708 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 800284c:	89fb      	ldrh	r3, [r7, #14]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	22ee      	movs	r2, #238	@ 0xee
 8002852:	2160      	movs	r1, #96	@ 0x60
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fd67 	bl	8003328 <CODEC_IO_Write>
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002864:	89fb      	ldrh	r3, [r7, #14]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	22c0      	movs	r2, #192	@ 0xc0
 800286a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fd5a 	bl	8003328 <CODEC_IO_Write>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800287e:	89fb      	ldrh	r3, [r7, #14]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	22c0      	movs	r2, #192	@ 0xc0
 8002884:	f240 6111 	movw	r1, #1553	@ 0x611
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fd4d 	bl	8003328 <CODEC_IO_Write>
 800288e:	4603      	mov	r3, r0
 8002890:	461a      	mov	r2, r3
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4413      	add	r3, r2
 8002896:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2210      	movs	r2, #16
 800289e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fd40 	bl	8003328 <CODEC_IO_Write>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	22c0      	movs	r2, #192	@ 0xc0
 80028b8:	f240 6112 	movw	r1, #1554	@ 0x612
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fd33 	bl	8003328 <CODEC_IO_Write>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80028cc:	89fb      	ldrh	r3, [r7, #14]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	22c0      	movs	r2, #192	@ 0xc0
 80028d2:	f240 6113 	movw	r1, #1555	@ 0x613
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fd26 	bl	8003328 <CODEC_IO_Write>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80028e6:	89fb      	ldrh	r3, [r7, #14]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2210      	movs	r2, #16
 80028ec:	f240 4122 	movw	r1, #1058	@ 0x422
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 fd19 	bl	8003328 <CODEC_IO_Write>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002900:	7afa      	ldrb	r2, [r7, #11]
 8002902:	89fb      	ldrh	r3, [r7, #14]
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f984 	bl	8002c14 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 800290c:	8afb      	ldrh	r3, [r7, #22]
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80a6 	beq.w	8002a60 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002914:	8afb      	ldrh	r3, [r7, #22]
 8002916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800291a:	d003      	beq.n	8002924 <wm8994_Init+0xc30>
 800291c:	8afb      	ldrh	r3, [r7, #22]
 800291e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002922:	d12b      	bne.n	800297c <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002924:	8b7b      	ldrh	r3, [r7, #26]
 8002926:	f043 0313 	orr.w	r3, r3, #19
 800292a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800292c:	89fb      	ldrh	r3, [r7, #14]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	8b7a      	ldrh	r2, [r7, #26]
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fcf7 	bl	8003328 <CODEC_IO_Write>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	4413      	add	r3, r2
 8002942:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002944:	89fb      	ldrh	r3, [r7, #14]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2202      	movs	r2, #2
 800294a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fcea 	bl	8003328 <CODEC_IO_Write>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800295e:	89fb      	ldrh	r3, [r7, #14]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002966:	f240 4111 	movw	r1, #1041	@ 0x411
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fcdc 	bl	8003328 <CODEC_IO_Write>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	e06b      	b.n	8002a54 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800297c:	8afb      	ldrh	r3, [r7, #22]
 800297e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002982:	d139      	bne.n	80029f8 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002984:	8b7b      	ldrh	r3, [r7, #26]
 8002986:	f043 0313 	orr.w	r3, r3, #19
 800298a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800298c:	89fb      	ldrh	r3, [r7, #14]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	8b7a      	ldrh	r2, [r7, #26]
 8002992:	2101      	movs	r1, #1
 8002994:	4618      	mov	r0, r3
 8002996:	f000 fcc7 	bl	8003328 <CODEC_IO_Write>
 800299a:	4603      	mov	r3, r0
 800299c:	461a      	mov	r2, r3
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80029a4:	89fb      	ldrh	r3, [r7, #14]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2202      	movs	r2, #2
 80029aa:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fcba 	bl	8003328 <CODEC_IO_Write>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	4413      	add	r3, r2
 80029bc:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80029be:	89fb      	ldrh	r3, [r7, #14]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80029c6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fcac 	bl	8003328 <CODEC_IO_Write>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461a      	mov	r2, r3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80029da:	89fb      	ldrh	r3, [r7, #14]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80029e2:	f240 4111 	movw	r1, #1041	@ 0x411
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fc9e 	bl	8003328 <CODEC_IO_Write>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	4413      	add	r3, r2
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	e02d      	b.n	8002a54 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80029f8:	8afb      	ldrh	r3, [r7, #22]
 80029fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029fe:	d003      	beq.n	8002a08 <wm8994_Init+0xd14>
 8002a00:	8afb      	ldrh	r3, [r7, #22]
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a06:	d125      	bne.n	8002a54 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	220b      	movs	r2, #11
 8002a0e:	2118      	movs	r1, #24
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fc89 	bl	8003328 <CODEC_IO_Write>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002a20:	89fb      	ldrh	r3, [r7, #14]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	220b      	movs	r2, #11
 8002a26:	211a      	movs	r1, #26
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fc7d 	bl	8003328 <CODEC_IO_Write>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	461a      	mov	r2, r3
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002a38:	89fb      	ldrh	r3, [r7, #14]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002a40:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fc6f 	bl	8003328 <CODEC_IO_Write>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	4413      	add	r3, r2
 8002a52:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002a54:	7afa      	ldrb	r2, [r7, #11]
 8002a56:	89fb      	ldrh	r3, [r7, #14]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f8da 	bl	8002c14 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002a60:	69fb      	ldr	r3, [r7, #28]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop

08002a6c <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002a70:	f000 fdec 	bl	800364c <AUDIO_IO_DeInit>
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002a82:	f000 fdd9 	bl	8003638 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fe0f 	bl	80036b0 <AUDIO_IO_Read>
 8002a92:	4603      	mov	r3, r0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	6039      	str	r1, [r7, #0]
 8002aa6:	80fb      	strh	r3, [r7, #6]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 f9d1 	bl	8002e5c <wm8994_SetMute>
 8002aba:	4602      	mov	r2, r0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	2101      	movs	r1, #1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f9bc 	bl	8002e5c <wm8994_SetMute>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4413      	add	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2201      	movs	r2, #1
 8002af2:	2102      	movs	r1, #2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fc17 	bl	8003328 <CODEC_IO_Write>
 8002afa:	4603      	mov	r3, r0
 8002afc:	461a      	mov	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4413      	add	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002b04:	68fb      	ldr	r3, [r7, #12]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f99b 	bl	8002e5c <wm8994_SetMute>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8002b48:	4b31      	ldr	r3, [pc, #196]	@ (8002c10 <wm8994_Stop+0xd8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d05a      	beq.n	8002c06 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	2101      	movs	r1, #1
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 f981 	bl	8002e5c <wm8994_SetMute>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d04e      	beq.n	8002c06 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b70:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fbd7 	bl	8003328 <CODEC_IO_Write>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b8c:	f240 4122 	movw	r1, #1058	@ 0x422
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fbc9 	bl	8003328 <CODEC_IO_Write>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	212d      	movs	r1, #45	@ 0x2d
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fbbd 	bl	8003328 <CODEC_IO_Write>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	212e      	movs	r1, #46	@ 0x2e
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fbb1 	bl	8003328 <CODEC_IO_Write>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	2105      	movs	r1, #5
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fba5 	bl	8003328 <CODEC_IO_Write>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2200      	movs	r2, #0
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fb99 	bl	8003328 <CODEC_IO_Write>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002c00:	4b03      	ldr	r3, [pc, #12]	@ (8002c10 <wm8994_Stop+0xd8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	200205d0 	.word	0x200205d0

08002c14 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	80fb      	strh	r3, [r7, #6]
 8002c20:	4613      	mov	r3, r2
 8002c22:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002c28:	797b      	ldrb	r3, [r7, #5]
 8002c2a:	2b64      	cmp	r3, #100	@ 0x64
 8002c2c:	d80b      	bhi.n	8002c46 <wm8994_SetVolume+0x32>
 8002c2e:	797a      	ldrb	r2, [r7, #5]
 8002c30:	4613      	mov	r3, r2
 8002c32:	019b      	lsls	r3, r3, #6
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	4a86      	ldr	r2, [pc, #536]	@ (8002e50 <wm8994_SetVolume+0x23c>)
 8002c38:	fb82 1203 	smull	r1, r2, r2, r3
 8002c3c:	1152      	asrs	r2, r2, #5
 8002c3e:	17db      	asrs	r3, r3, #31
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	e000      	b.n	8002c48 <wm8994_SetVolume+0x34>
 8002c46:	2364      	movs	r3, #100	@ 0x64
 8002c48:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002c4a:	4b82      	ldr	r3, [pc, #520]	@ (8002e54 <wm8994_SetVolume+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 809b 	beq.w	8002d8a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8002c54:	7afb      	ldrb	r3, [r7, #11]
 8002c56:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c58:	d93d      	bls.n	8002cd6 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f8fc 	bl	8002e5c <wm8994_SetMute>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4413      	add	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f240 127f 	movw	r2, #383	@ 0x17f
 8002c74:	211c      	movs	r1, #28
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fb56 	bl	8003328 <CODEC_IO_Write>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f240 127f 	movw	r2, #383	@ 0x17f
 8002c8e:	211d      	movs	r1, #29
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fb49 	bl	8003328 <CODEC_IO_Write>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f240 127f 	movw	r2, #383	@ 0x17f
 8002ca8:	2126      	movs	r1, #38	@ 0x26
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fb3c 	bl	8003328 <CODEC_IO_Write>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f240 127f 	movw	r2, #383	@ 0x17f
 8002cc2:	2127      	movs	r1, #39	@ 0x27
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fb2f 	bl	8003328 <CODEC_IO_Write>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e059      	b.n	8002d8a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8002cd6:	797b      	ldrb	r3, [r7, #5]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f8bb 	bl	8002e5c <wm8994_SetMute>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	e04c      	b.n	8002d8a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 f8b1 	bl	8002e5c <wm8994_SetMute>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	b2d8      	uxtb	r0, r3
 8002d06:	7afb      	ldrb	r3, [r7, #11]
 8002d08:	b21b      	sxth	r3, r3
 8002d0a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002d0e:	b21b      	sxth	r3, r3
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	461a      	mov	r2, r3
 8002d14:	211c      	movs	r1, #28
 8002d16:	f000 fb07 	bl	8003328 <CODEC_IO_Write>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4413      	add	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	b2d8      	uxtb	r0, r3
 8002d28:	7afb      	ldrb	r3, [r7, #11]
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	211d      	movs	r1, #29
 8002d38:	f000 faf6 	bl	8003328 <CODEC_IO_Write>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4413      	add	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	b2d8      	uxtb	r0, r3
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	b21b      	sxth	r3, r3
 8002d4e:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	2126      	movs	r1, #38	@ 0x26
 8002d5a:	f000 fae5 	bl	8003328 <CODEC_IO_Write>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461a      	mov	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4413      	add	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	b2d8      	uxtb	r0, r3
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
 8002d6e:	b21b      	sxth	r3, r3
 8002d70:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2127      	movs	r1, #39	@ 0x27
 8002d7c:	f000 fad4 	bl	8003328 <CODEC_IO_Write>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8002d8a:	4b33      	ldr	r3, [pc, #204]	@ (8002e58 <wm8994_SetVolume+0x244>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d059      	beq.n	8002e46 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8002d92:	797b      	ldrb	r3, [r7, #5]
 8002d94:	2b63      	cmp	r3, #99	@ 0x63
 8002d96:	d80c      	bhi.n	8002db2 <wm8994_SetVolume+0x19e>
 8002d98:	797a      	ldrb	r2, [r7, #5]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e50 <wm8994_SetVolume+0x23c>)
 8002da4:	fb82 1203 	smull	r1, r2, r2, r3
 8002da8:	1152      	asrs	r2, r2, #5
 8002daa:	17db      	asrs	r3, r3, #31
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	e000      	b.n	8002db4 <wm8994_SetVolume+0x1a0>
 8002db2:	23ef      	movs	r3, #239	@ 0xef
 8002db4:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	b2d8      	uxtb	r0, r3
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc2:	b21b      	sxth	r3, r3
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002dcc:	f000 faac 	bl	8003328 <CODEC_IO_Write>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	b2d8      	uxtb	r0, r3
 8002dde:	7afb      	ldrb	r3, [r7, #11]
 8002de0:	b21b      	sxth	r3, r3
 8002de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de6:	b21b      	sxth	r3, r3
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	f240 4101 	movw	r1, #1025	@ 0x401
 8002df0:	f000 fa9a 	bl	8003328 <CODEC_IO_Write>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	b2d8      	uxtb	r0, r3
 8002e02:	7afb      	ldrb	r3, [r7, #11]
 8002e04:	b21b      	sxth	r3, r3
 8002e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e0a:	b21b      	sxth	r3, r3
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f240 4104 	movw	r1, #1028	@ 0x404
 8002e14:	f000 fa88 	bl	8003328 <CODEC_IO_Write>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	b2d8      	uxtb	r0, r3
 8002e26:	7afb      	ldrb	r3, [r7, #11]
 8002e28:	b21b      	sxth	r3, r3
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2e:	b21b      	sxth	r3, r3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	f240 4105 	movw	r1, #1029	@ 0x405
 8002e38:	f000 fa76 	bl	8003328 <CODEC_IO_Write>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	51eb851f 	.word	0x51eb851f
 8002e54:	200205d0 	.word	0x200205d0
 8002e58:	200205d4 	.word	0x200205d4

08002e5c <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8002e6c:	4b21      	ldr	r3, [pc, #132]	@ (8002ef4 <wm8994_SetMute+0x98>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d039      	beq.n	8002ee8 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d11c      	bne.n	8002eb4 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e82:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fa4e 	bl	8003328 <CODEC_IO_Write>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e9e:	f240 4122 	movw	r1, #1058	@ 0x422
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fa40 	bl	8003328 <CODEC_IO_Write>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e019      	b.n	8002ee8 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2210      	movs	r2, #16
 8002eba:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fa32 	bl	8003328 <CODEC_IO_Write>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	f240 4122 	movw	r1, #1058	@ 0x422
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fa25 	bl	8003328 <CODEC_IO_Write>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200205d0 	.word	0x200205d0

08002ef8 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	460a      	mov	r2, r1
 8002f02:	80fb      	strh	r3, [r7, #6]
 8002f04:	4613      	mov	r3, r2
 8002f06:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8002f0c:	797b      	ldrb	r3, [r7, #5]
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	f000 808c 	beq.w	800302c <wm8994_SetOutputMode+0x134>
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	f300 80cb 	bgt.w	80030b0 <wm8994_SetOutputMode+0x1b8>
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d002      	beq.n	8002f24 <wm8994_SetOutputMode+0x2c>
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d042      	beq.n	8002fa8 <wm8994_SetOutputMode+0xb0>
 8002f22:	e0c5      	b.n	80030b0 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002f2c:	2105      	movs	r1, #5
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f9fa 	bl	8003328 <CODEC_IO_Write>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2200      	movs	r2, #0
 8002f44:	f240 6101 	movw	r1, #1537	@ 0x601
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f9ed 	bl	8003328 <CODEC_IO_Write>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	461a      	mov	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f9e0 	bl	8003328 <CODEC_IO_Write>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2202      	movs	r2, #2
 8002f78:	f240 6104 	movw	r1, #1540	@ 0x604
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f9d3 	bl	8003328 <CODEC_IO_Write>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4413      	add	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2202      	movs	r2, #2
 8002f92:	f240 6105 	movw	r1, #1541	@ 0x605
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f9c6 	bl	8003328 <CODEC_IO_Write>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
    break;
 8002fa6:	e0c5      	b.n	8003134 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f240 3203 	movw	r2, #771	@ 0x303
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f9b8 	bl	8003328 <CODEC_IO_Write>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f240 6101 	movw	r1, #1537	@ 0x601
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 f9ab 	bl	8003328 <CODEC_IO_Write>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f240 6102 	movw	r1, #1538	@ 0x602
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f99e 	bl	8003328 <CODEC_IO_Write>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f240 6104 	movw	r1, #1540	@ 0x604
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f991 	bl	8003328 <CODEC_IO_Write>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4413      	add	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2200      	movs	r2, #0
 8003016:	f240 6105 	movw	r1, #1541	@ 0x605
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f984 	bl	8003328 <CODEC_IO_Write>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
    break;
 800302a:	e083      	b.n	8003134 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003034:	2105      	movs	r1, #5
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f976 	bl	8003328 <CODEC_IO_Write>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2201      	movs	r2, #1
 800304c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f969 	bl	8003328 <CODEC_IO_Write>
 8003056:	4603      	mov	r3, r0
 8003058:	461a      	mov	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2201      	movs	r2, #1
 8003066:	f240 6102 	movw	r1, #1538	@ 0x602
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f95c 	bl	8003328 <CODEC_IO_Write>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2202      	movs	r2, #2
 8003080:	f240 6104 	movw	r1, #1540	@ 0x604
 8003084:	4618      	mov	r0, r3
 8003086:	f000 f94f 	bl	8003328 <CODEC_IO_Write>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4413      	add	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2202      	movs	r2, #2
 800309a:	f240 6105 	movw	r1, #1541	@ 0x605
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f942 	bl	8003328 <CODEC_IO_Write>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
    break;
 80030ae:	e041      	b.n	8003134 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f240 3203 	movw	r2, #771	@ 0x303
 80030b8:	2105      	movs	r1, #5
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f934 	bl	8003328 <CODEC_IO_Write>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2201      	movs	r2, #1
 80030d0:	f240 6101 	movw	r1, #1537	@ 0x601
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f927 	bl	8003328 <CODEC_IO_Write>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4413      	add	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2201      	movs	r2, #1
 80030ea:	f240 6102 	movw	r1, #1538	@ 0x602
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f91a 	bl	8003328 <CODEC_IO_Write>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2200      	movs	r2, #0
 8003104:	f240 6104 	movw	r1, #1540	@ 0x604
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f90d 	bl	8003328 <CODEC_IO_Write>
 800310e:	4603      	mov	r3, r0
 8003110:	461a      	mov	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003118:	88fb      	ldrh	r3, [r7, #6]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2200      	movs	r2, #0
 800311e:	f240 6105 	movw	r1, #1541	@ 0x605
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f900 	bl	8003328 <CODEC_IO_Write>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
    break;    
 8003132:	bf00      	nop
  }  
  return counter;
 8003134:	68fb      	ldr	r3, [r7, #12]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4a64      	ldr	r2, [pc, #400]	@ (80032e4 <wm8994_SetFrequency+0x1a4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d079      	beq.n	800324c <wm8994_SetFrequency+0x10c>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4a62      	ldr	r2, [pc, #392]	@ (80032e4 <wm8994_SetFrequency+0x1a4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	f200 80ad 	bhi.w	80032bc <wm8994_SetFrequency+0x17c>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003168:	4293      	cmp	r3, r2
 800316a:	d061      	beq.n	8003230 <wm8994_SetFrequency+0xf0>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003172:	4293      	cmp	r3, r2
 8003174:	f200 80a2 	bhi.w	80032bc <wm8994_SetFrequency+0x17c>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800317e:	4293      	cmp	r3, r2
 8003180:	f000 808e 	beq.w	80032a0 <wm8994_SetFrequency+0x160>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800318a:	4293      	cmp	r3, r2
 800318c:	f200 8096 	bhi.w	80032bc <wm8994_SetFrequency+0x17c>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003196:	d03d      	beq.n	8003214 <wm8994_SetFrequency+0xd4>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800319e:	f200 808d 	bhi.w	80032bc <wm8994_SetFrequency+0x17c>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	f245 6222 	movw	r2, #22050	@ 0x5622
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d06b      	beq.n	8003284 <wm8994_SetFrequency+0x144>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f245 6222 	movw	r2, #22050	@ 0x5622
 80031b2:	4293      	cmp	r3, r2
 80031b4:	f200 8082 	bhi.w	80032bc <wm8994_SetFrequency+0x17c>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80031be:	d01b      	beq.n	80031f8 <wm8994_SetFrequency+0xb8>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80031c6:	d879      	bhi.n	80032bc <wm8994_SetFrequency+0x17c>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80031ce:	d005      	beq.n	80031dc <wm8994_SetFrequency+0x9c>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d046      	beq.n	8003268 <wm8994_SetFrequency+0x128>
 80031da:	e06f      	b.n	80032bc <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2203      	movs	r2, #3
 80031e2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f89e 	bl	8003328 <CODEC_IO_Write>
 80031ec:	4603      	mov	r3, r0
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
    break;
 80031f6:	e06f      	b.n	80032d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2233      	movs	r2, #51	@ 0x33
 80031fe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f890 	bl	8003328 <CODEC_IO_Write>
 8003208:	4603      	mov	r3, r0
 800320a:	461a      	mov	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
    break;
 8003212:	e061      	b.n	80032d8 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2263      	movs	r2, #99	@ 0x63
 800321a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f882 	bl	8003328 <CODEC_IO_Write>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
    break;
 800322e:	e053      	b.n	80032d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2283      	movs	r2, #131	@ 0x83
 8003236:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800323a:	4618      	mov	r0, r3
 800323c:	f000 f874 	bl	8003328 <CODEC_IO_Write>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
    break;
 800324a:	e045      	b.n	80032d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	22a3      	movs	r2, #163	@ 0xa3
 8003252:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f866 	bl	8003328 <CODEC_IO_Write>
 800325c:	4603      	mov	r3, r0
 800325e:	461a      	mov	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
    break;
 8003266:	e037      	b.n	80032d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2213      	movs	r2, #19
 800326e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f858 	bl	8003328 <CODEC_IO_Write>
 8003278:	4603      	mov	r3, r0
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
    break;
 8003282:	e029      	b.n	80032d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003284:	88fb      	ldrh	r3, [r7, #6]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2243      	movs	r2, #67	@ 0x43
 800328a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800328e:	4618      	mov	r0, r3
 8003290:	f000 f84a 	bl	8003328 <CODEC_IO_Write>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
    break;
 800329e:	e01b      	b.n	80032d8 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2273      	movs	r2, #115	@ 0x73
 80032a6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f83c 	bl	8003328 <CODEC_IO_Write>
 80032b0:	4603      	mov	r3, r0
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
    break; 
 80032ba:	e00d      	b.n	80032d8 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80032bc:	88fb      	ldrh	r3, [r7, #6]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2283      	movs	r2, #131	@ 0x83
 80032c2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f82e 	bl	8003328 <CODEC_IO_Write>
 80032cc:	4603      	mov	r3, r0
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    break; 
 80032d6:	bf00      	nop
  }
  return counter;
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	00017700 	.word	0x00017700

080032e8 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2200      	movs	r2, #0
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f812 	bl	8003328 <CODEC_IO_Write>
 8003304:	4603      	mov	r3, r0
 8003306:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <wm8994_Reset+0x38>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800330e:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <wm8994_Reset+0x3c>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

  return counter;
 8003314:	68fb      	ldr	r3, [r7, #12]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200205d0 	.word	0x200205d0
 8003324:	200205d4 	.word	0x200205d4

08003328 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
 8003332:	460b      	mov	r3, r1
 8003334:	80bb      	strh	r3, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800333e:	887a      	ldrh	r2, [r7, #2]
 8003340:	88b9      	ldrh	r1, [r7, #4]
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f989 	bl	800365c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	b2db      	uxtb	r3, r3
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	4a07      	ldr	r2, [pc, #28]	@ (8003384 <BSP_PB_GetState+0x2c>)
 8003366:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	4906      	ldr	r1, [pc, #24]	@ (8003388 <BSP_PB_GetState+0x30>)
 800336e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003372:	4619      	mov	r1, r3
 8003374:	4610      	mov	r0, r2
 8003376:	f001 ff3d 	bl	80051f4 <HAL_GPIO_ReadPin>
 800337a:	4603      	mov	r3, r0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000038 	.word	0x20000038
 8003388:	0800b250 	.word	0x0800b250

0800338c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08c      	sub	sp, #48	@ 0x30
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a51      	ldr	r2, [pc, #324]	@ (80034dc <I2Cx_MspInit+0x150>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d14d      	bne.n	8003438 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800339c:	4b50      	ldr	r3, [pc, #320]	@ (80034e0 <I2Cx_MspInit+0x154>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a0:	4a4f      	ldr	r2, [pc, #316]	@ (80034e0 <I2Cx_MspInit+0x154>)
 80033a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a8:	4b4d      	ldr	r3, [pc, #308]	@ (80034e0 <I2Cx_MspInit+0x154>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80033b4:	2380      	movs	r3, #128	@ 0x80
 80033b6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80033b8:	2312      	movs	r3, #18
 80033ba:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80033c0:	2302      	movs	r3, #2
 80033c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80033c4:	2304      	movs	r3, #4
 80033c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033c8:	f107 031c 	add.w	r3, r7, #28
 80033cc:	4619      	mov	r1, r3
 80033ce:	4845      	ldr	r0, [pc, #276]	@ (80034e4 <I2Cx_MspInit+0x158>)
 80033d0:	f001 fc58 	bl	8004c84 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80033d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033da:	f107 031c 	add.w	r3, r7, #28
 80033de:	4619      	mov	r1, r3
 80033e0:	4840      	ldr	r0, [pc, #256]	@ (80034e4 <I2Cx_MspInit+0x158>)
 80033e2:	f001 fc4f 	bl	8004c84 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80033e6:	4b3e      	ldr	r3, [pc, #248]	@ (80034e0 <I2Cx_MspInit+0x154>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4a3d      	ldr	r2, [pc, #244]	@ (80034e0 <I2Cx_MspInit+0x154>)
 80033ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f2:	4b3b      	ldr	r3, [pc, #236]	@ (80034e0 <I2Cx_MspInit+0x154>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80033fe:	4b38      	ldr	r3, [pc, #224]	@ (80034e0 <I2Cx_MspInit+0x154>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a37      	ldr	r2, [pc, #220]	@ (80034e0 <I2Cx_MspInit+0x154>)
 8003404:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003408:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800340a:	4b35      	ldr	r3, [pc, #212]	@ (80034e0 <I2Cx_MspInit+0x154>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a34      	ldr	r2, [pc, #208]	@ (80034e0 <I2Cx_MspInit+0x154>)
 8003410:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003414:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	210f      	movs	r1, #15
 800341a:	2048      	movs	r0, #72	@ 0x48
 800341c:	f000 ffb5 	bl	800438a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003420:	2048      	movs	r0, #72	@ 0x48
 8003422:	f000 ffce 	bl	80043c2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	210f      	movs	r1, #15
 800342a:	2049      	movs	r0, #73	@ 0x49
 800342c:	f000 ffad 	bl	800438a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003430:	2049      	movs	r0, #73	@ 0x49
 8003432:	f000 ffc6 	bl	80043c2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003436:	e04d      	b.n	80034d4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003438:	4b29      	ldr	r3, [pc, #164]	@ (80034e0 <I2Cx_MspInit+0x154>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	4a28      	ldr	r2, [pc, #160]	@ (80034e0 <I2Cx_MspInit+0x154>)
 800343e:	f043 0302 	orr.w	r3, r3, #2
 8003442:	6313      	str	r3, [r2, #48]	@ 0x30
 8003444:	4b26      	ldr	r3, [pc, #152]	@ (80034e0 <I2Cx_MspInit+0x154>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003450:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003454:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003456:	2312      	movs	r3, #18
 8003458:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800345e:	2302      	movs	r3, #2
 8003460:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003462:	2304      	movs	r3, #4
 8003464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003466:	f107 031c 	add.w	r3, r7, #28
 800346a:	4619      	mov	r1, r3
 800346c:	481e      	ldr	r0, [pc, #120]	@ (80034e8 <I2Cx_MspInit+0x15c>)
 800346e:	f001 fc09 	bl	8004c84 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003472:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003478:	f107 031c 	add.w	r3, r7, #28
 800347c:	4619      	mov	r1, r3
 800347e:	481a      	ldr	r0, [pc, #104]	@ (80034e8 <I2Cx_MspInit+0x15c>)
 8003480:	f001 fc00 	bl	8004c84 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003484:	4b16      	ldr	r3, [pc, #88]	@ (80034e0 <I2Cx_MspInit+0x154>)
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	4a15      	ldr	r2, [pc, #84]	@ (80034e0 <I2Cx_MspInit+0x154>)
 800348a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800348e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003490:	4b13      	ldr	r3, [pc, #76]	@ (80034e0 <I2Cx_MspInit+0x154>)
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800349c:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <I2Cx_MspInit+0x154>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4a0f      	ldr	r2, [pc, #60]	@ (80034e0 <I2Cx_MspInit+0x154>)
 80034a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80034a6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80034a8:	4b0d      	ldr	r3, [pc, #52]	@ (80034e0 <I2Cx_MspInit+0x154>)
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4a0c      	ldr	r2, [pc, #48]	@ (80034e0 <I2Cx_MspInit+0x154>)
 80034ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80034b2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	210f      	movs	r1, #15
 80034b8:	201f      	movs	r0, #31
 80034ba:	f000 ff66 	bl	800438a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80034be:	201f      	movs	r0, #31
 80034c0:	f000 ff7f 	bl	80043c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	210f      	movs	r1, #15
 80034c8:	2020      	movs	r0, #32
 80034ca:	f000 ff5e 	bl	800438a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80034ce:	2020      	movs	r0, #32
 80034d0:	f000 ff77 	bl	80043c2 <HAL_NVIC_EnableIRQ>
}
 80034d4:	bf00      	nop
 80034d6:	3730      	adds	r7, #48	@ 0x30
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	200205d8 	.word	0x200205d8
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40021c00 	.word	0x40021c00
 80034e8:	40020400 	.word	0x40020400

080034ec <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f002 f9bb 	bl	8005870 <HAL_I2C_GetState>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d125      	bne.n	800354c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a14      	ldr	r2, [pc, #80]	@ (8003554 <I2Cx_Init+0x68>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d103      	bne.n	8003510 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <I2Cx_Init+0x6c>)
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e002      	b.n	8003516 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a12      	ldr	r2, [pc, #72]	@ (800355c <I2Cx_Init+0x70>)
 8003514:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a11      	ldr	r2, [pc, #68]	@ (8003560 <I2Cx_Init+0x74>)
 800351a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff23 	bl	800338c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f001 fe84 	bl	8005254 <HAL_I2C_Init>
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	200205d8 	.word	0x200205d8
 8003558:	40005c00 	.word	0x40005c00
 800355c:	40005400 	.word	0x40005400
 8003560:	40912732 	.word	0x40912732

08003564 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	@ 0x28
 8003568:	af04      	add	r7, sp, #16
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4603      	mov	r3, r0
 8003574:	72fb      	strb	r3, [r7, #11]
 8003576:	460b      	mov	r3, r1
 8003578:	813b      	strh	r3, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003582:	7afb      	ldrb	r3, [r7, #11]
 8003584:	b299      	uxth	r1, r3
 8003586:	88f8      	ldrh	r0, [r7, #6]
 8003588:	893a      	ldrh	r2, [r7, #8]
 800358a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800358e:	9302      	str	r3, [sp, #8]
 8003590:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003592:	9301      	str	r3, [sp, #4]
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4603      	mov	r3, r0
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f002 f84e 	bl	800563c <HAL_I2C_Mem_Read>
 80035a0:	4603      	mov	r3, r0
 80035a2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d004      	beq.n	80035b4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80035aa:	7afb      	ldrb	r3, [r7, #11]
 80035ac:	4619      	mov	r1, r3
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f832 	bl	8003618 <I2Cx_Error>
  }
  return status;    
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b08a      	sub	sp, #40	@ 0x28
 80035c2:	af04      	add	r7, sp, #16
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	4608      	mov	r0, r1
 80035c8:	4611      	mov	r1, r2
 80035ca:	461a      	mov	r2, r3
 80035cc:	4603      	mov	r3, r0
 80035ce:	72fb      	strb	r3, [r7, #11]
 80035d0:	460b      	mov	r3, r1
 80035d2:	813b      	strh	r3, [r7, #8]
 80035d4:	4613      	mov	r3, r2
 80035d6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80035dc:	7afb      	ldrb	r3, [r7, #11]
 80035de:	b299      	uxth	r1, r3
 80035e0:	88f8      	ldrh	r0, [r7, #6]
 80035e2:	893a      	ldrh	r2, [r7, #8]
 80035e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035e8:	9302      	str	r3, [sp, #8]
 80035ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	4603      	mov	r3, r0
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f001 ff0d 	bl	8005414 <HAL_I2C_Mem_Write>
 80035fa:	4603      	mov	r3, r0
 80035fc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	4619      	mov	r1, r3
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f805 	bl	8003618 <I2Cx_Error>
  }
  return status;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f001 feb1 	bl	800538c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff5e 	bl	80034ec <I2Cx_Init>
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800363c:	4802      	ldr	r0, [pc, #8]	@ (8003648 <AUDIO_IO_Init+0x10>)
 800363e:	f7ff ff55 	bl	80034ec <I2Cx_Init>
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200205d8 	.word	0x200205d8

0800364c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
 8003666:	460b      	mov	r3, r1
 8003668:	80bb      	strh	r3, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800366e:	887b      	ldrh	r3, [r7, #2]
 8003670:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003672:	89fb      	ldrh	r3, [r7, #14]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	b29b      	uxth	r3, r3
 8003678:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800367a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	b21a      	sxth	r2, r3
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	b21b      	sxth	r3, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	b21b      	sxth	r3, r3
 800368a:	b29b      	uxth	r3, r3
 800368c:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800368e:	88ba      	ldrh	r2, [r7, #4]
 8003690:	79f9      	ldrb	r1, [r7, #7]
 8003692:	2302      	movs	r3, #2
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	1cbb      	adds	r3, r7, #2
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2302      	movs	r3, #2
 800369c:	4803      	ldr	r0, [pc, #12]	@ (80036ac <AUDIO_IO_Write+0x50>)
 800369e:	f7ff ff8e 	bl	80035be <I2Cx_WriteMultiple>
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200205d8 	.word	0x200205d8

080036b0 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	4603      	mov	r3, r0
 80036b8:	460a      	mov	r2, r1
 80036ba:	71fb      	strb	r3, [r7, #7]
 80036bc:	4613      	mov	r3, r2
 80036be:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	81bb      	strh	r3, [r7, #12]
 80036c4:	2300      	movs	r3, #0
 80036c6:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80036c8:	88ba      	ldrh	r2, [r7, #4]
 80036ca:	79f9      	ldrb	r1, [r7, #7]
 80036cc:	2302      	movs	r3, #2
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2302      	movs	r3, #2
 80036d8:	480a      	ldr	r0, [pc, #40]	@ (8003704 <AUDIO_IO_Read+0x54>)
 80036da:	f7ff ff43 	bl	8003564 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80036de:	89bb      	ldrh	r3, [r7, #12]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80036e4:	89bb      	ldrh	r3, [r7, #12]
 80036e6:	b21b      	sxth	r3, r3
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	b21a      	sxth	r2, r3
 80036ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	b21b      	sxth	r3, r3
 80036f4:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80036f6:	89fb      	ldrh	r3, [r7, #14]
 80036f8:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80036fa:	89bb      	ldrh	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	200205d8 	.word	0x200205d8

08003708 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fd3b 	bl	800418c <HAL_Delay>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	603a      	str	r2, [r7, #0]
 800372a:	80fb      	strh	r3, [r7, #6]
 800372c:	460b      	mov	r3, r1
 800372e:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 8003738:	f000 fa6a 	bl	8003c10 <SAIx_Out_DeInit>

  /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 800373c:	2200      	movs	r2, #0
 800373e:	6839      	ldr	r1, [r7, #0]
 8003740:	481c      	ldr	r0, [pc, #112]	@ (80037b4 <BSP_AUDIO_OUT_Init+0x94>)
 8003742:	f000 f9c3 	bl	8003acc <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003746:	4b1b      	ldr	r3, [pc, #108]	@ (80037b4 <BSP_AUDIO_OUT_Init+0x94>)
 8003748:	4a1b      	ldr	r2, [pc, #108]	@ (80037b8 <BSP_AUDIO_OUT_Init+0x98>)
 800374a:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 800374c:	4819      	ldr	r0, [pc, #100]	@ (80037b4 <BSP_AUDIO_OUT_Init+0x94>)
 800374e:	f004 f9d9 	bl	8007b04 <HAL_SAI_GetState>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d103      	bne.n	8003760 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8003758:	2100      	movs	r1, #0
 800375a:	4816      	ldr	r0, [pc, #88]	@ (80037b4 <BSP_AUDIO_OUT_Init+0x94>)
 800375c:	f000 f8e0 	bl	8003920 <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 8003760:	6838      	ldr	r0, [r7, #0]
 8003762:	f000 f9f7 	bl	8003b54 <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003766:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <BSP_AUDIO_OUT_Init+0x9c>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2034      	movs	r0, #52	@ 0x34
 800376c:	4798      	blx	r3
 800376e:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f648 1294 	movw	r2, #35220	@ 0x8994
 8003776:	4293      	cmp	r3, r2
 8003778:	d109      	bne.n	800378e <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800377a:	4b10      	ldr	r3, [pc, #64]	@ (80037bc <BSP_AUDIO_OUT_Init+0x9c>)
 800377c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377e:	2034      	movs	r0, #52	@ 0x34
 8003780:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 8003782:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <BSP_AUDIO_OUT_Init+0xa0>)
 8003784:	4a0d      	ldr	r2, [pc, #52]	@ (80037bc <BSP_AUDIO_OUT_Init+0x9c>)
 8003786:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	e001      	b.n	8003792 <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d107      	bne.n	80037a8 <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8003798:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <BSP_AUDIO_OUT_Init+0xa0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681c      	ldr	r4, [r3, #0]
 800379e:	797a      	ldrb	r2, [r7, #5]
 80037a0:	88f9      	ldrh	r1, [r7, #6]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2034      	movs	r0, #52	@ 0x34
 80037a6:	47a0      	blx	r4
  }
 
  return ret;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd90      	pop	{r4, r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20020630 	.word	0x20020630
 80037b8:	40015c04 	.word	0x40015c04
 80037bc:	20000004 	.word	0x20000004
 80037c0:	2002062c 	.word	0x2002062c

080037c4 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80037ce:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <BSP_AUDIO_OUT_Play+0x4c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b292      	uxth	r2, r2
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	2034      	movs	r0, #52	@ 0x34
 80037dc:	4798      	blx	r3
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e00f      	b.n	8003808 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037ee:	d203      	bcs.n	80037f8 <BSP_AUDIO_OUT_Play+0x34>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	e001      	b.n	80037fc <BSP_AUDIO_OUT_Play+0x38>
 80037f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037fc:	461a      	mov	r2, r3
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4804      	ldr	r0, [pc, #16]	@ (8003814 <BSP_AUDIO_OUT_Play+0x50>)
 8003802:	f004 f841 	bl	8007888 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 8003806:	2300      	movs	r3, #0
  }
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	2002062c 	.word	0x2002062c
 8003814:	20020630 	.word	0x20020630

08003818 <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_out_sai);
 8003820:	480c      	ldr	r0, [pc, #48]	@ (8003854 <BSP_AUDIO_OUT_Stop+0x3c>)
 8003822:	f003 ffbe 	bl	80077a2 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8003826:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <BSP_AUDIO_OUT_Stop+0x40>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	2034      	movs	r0, #52	@ 0x34
 8003830:	4798      	blx	r3
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <BSP_AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e006      	b.n	800384a <BSP_AUDIO_OUT_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d102      	bne.n	8003848 <BSP_AUDIO_OUT_Stop+0x30>
    { 
      /* Wait at least 100us */
      HAL_Delay(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f000 fca2 	bl	800418c <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8003848:	2300      	movs	r3, #0
  }
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20020630 	.word	0x20020630
 8003858:	2002062c 	.word	0x2002062c

0800385c <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003864:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4b0b      	ldr	r3, [pc, #44]	@ (8003898 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003872:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8003874:	4a08      	ldr	r2, [pc, #32]	@ (8003898 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6613      	str	r3, [r2, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800387a:	4807      	ldr	r0, [pc, #28]	@ (8003898 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800387c:	f003 fdde 	bl	800743c <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8003880:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800388e:	601a      	str	r2, [r3, #0]
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20020630 	.word	0x20020630

0800389c <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80038a4:	f7fd fe78 	bl	8001598 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80038b8:	f7fd fe82 	bl	80015c0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80038cc:	480e      	ldr	r0, [pc, #56]	@ (8003908 <HAL_SAI_ErrorCallback+0x44>)
 80038ce:	f004 f919 	bl	8007b04 <HAL_SAI_GetState>
 80038d2:	4603      	mov	r3, r0
 80038d4:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80038d6:	480d      	ldr	r0, [pc, #52]	@ (800390c <HAL_SAI_ErrorCallback+0x48>)
 80038d8:	f004 f914 	bl	8007b04 <HAL_SAI_GetState>
 80038dc:	4603      	mov	r3, r0
 80038de:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d002      	beq.n	80038ec <HAL_SAI_ErrorCallback+0x28>
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2b12      	cmp	r3, #18
 80038ea:	d101      	bne.n	80038f0 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80038ec:	f000 f810 	bl	8003910 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 80038f0:	7bbb      	ldrb	r3, [r7, #14]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d002      	beq.n	80038fc <HAL_SAI_ErrorCallback+0x38>
 80038f6:	7bbb      	ldrb	r3, [r7, #14]
 80038f8:	2b22      	cmp	r3, #34	@ 0x22
 80038fa:	d101      	bne.n	8003900 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 80038fc:	f7fd fe90 	bl	8001620 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20020630 	.word	0x20020630
 800390c:	200206b4 	.word	0x200206b4

08003910 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	@ 0x30
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800392a:	4b63      	ldr	r3, [pc, #396]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	4a62      	ldr	r2, [pc, #392]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003930:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003934:	6453      	str	r3, [r2, #68]	@ 0x44
 8003936:	4b60      	ldr	r3, [pc, #384]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003942:	4b5d      	ldr	r3, [pc, #372]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003946:	4a5c      	ldr	r2, [pc, #368]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800394c:	6313      	str	r3, [r2, #48]	@ 0x30
 800394e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 800395a:	4b57      	ldr	r3, [pc, #348]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	4a56      	ldr	r2, [pc, #344]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003964:	6313      	str	r3, [r2, #48]	@ 0x30
 8003966:	4b54      	ldr	r3, [pc, #336]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8003972:	4b51      	ldr	r3, [pc, #324]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	4a50      	ldr	r2, [pc, #320]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800397c:	6313      	str	r3, [r2, #48]	@ 0x30
 800397e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800398e:	2302      	movs	r3, #2
 8003990:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003996:	2303      	movs	r3, #3
 8003998:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800399a:	230a      	movs	r3, #10
 800399c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800399e:	f107 031c 	add.w	r3, r7, #28
 80039a2:	4619      	mov	r1, r3
 80039a4:	4845      	ldr	r0, [pc, #276]	@ (8003abc <BSP_AUDIO_OUT_MspInit+0x19c>)
 80039a6:	f001 f96d 	bl	8004c84 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80039aa:	2320      	movs	r3, #32
 80039ac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80039ae:	2302      	movs	r3, #2
 80039b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80039b6:	2303      	movs	r3, #3
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80039ba:	230a      	movs	r3, #10
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80039be:	f107 031c 	add.w	r3, r7, #28
 80039c2:	4619      	mov	r1, r3
 80039c4:	483d      	ldr	r0, [pc, #244]	@ (8003abc <BSP_AUDIO_OUT_MspInit+0x19c>)
 80039c6:	f001 f95d 	bl	8004c84 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80039ca:	2340      	movs	r3, #64	@ 0x40
 80039cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80039ce:	2302      	movs	r3, #2
 80039d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80039d6:	2303      	movs	r3, #3
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80039da:	230a      	movs	r3, #10
 80039dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80039de:	f107 031c 	add.w	r3, r7, #28
 80039e2:	4619      	mov	r1, r3
 80039e4:	4835      	ldr	r0, [pc, #212]	@ (8003abc <BSP_AUDIO_OUT_MspInit+0x19c>)
 80039e6:	f001 f94d 	bl	8004c84 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80039ea:	2310      	movs	r3, #16
 80039ec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80039f6:	2303      	movs	r3, #3
 80039f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80039fa:	230a      	movs	r3, #10
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80039fe:	f107 031c 	add.w	r3, r7, #28
 8003a02:	4619      	mov	r1, r3
 8003a04:	482d      	ldr	r0, [pc, #180]	@ (8003abc <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003a06:	f001 f93d 	bl	8004c84 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a16:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a26      	ldr	r2, [pc, #152]	@ (8003ac0 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d138      	bne.n	8003a9e <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003a2c:	4b25      	ldr	r3, [pc, #148]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a2e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003a32:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003a34:	4b23      	ldr	r3, [pc, #140]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a36:	2240      	movs	r2, #64	@ 0x40
 8003a38:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003a3a:	4b22      	ldr	r3, [pc, #136]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003a40:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a46:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003a48:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a4e:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003a50:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a56:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003a58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a5e:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a60:	4b18      	ldr	r3, [pc, #96]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a66:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003a68:	4b16      	ldr	r3, [pc, #88]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a70:	2203      	movs	r2, #3
 8003a72:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a74:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003a7a:	4b12      	ldr	r3, [pc, #72]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003a80:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a82:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003a84:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a8a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8003a92:	480c      	ldr	r0, [pc, #48]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a94:	f000 fd5e 	bl	8004554 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003a98:	480a      	ldr	r0, [pc, #40]	@ (8003ac4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003a9a:	f000 fcad 	bl	80043f8 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	210e      	movs	r1, #14
 8003aa2:	203c      	movs	r0, #60	@ 0x3c
 8003aa4:	f000 fc71 	bl	800438a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003aa8:	203c      	movs	r0, #60	@ 0x3c
 8003aaa:	f000 fc8a 	bl	80043c2 <HAL_NVIC_EnableIRQ>
}
 8003aae:	bf00      	nop
 8003ab0:	3730      	adds	r7, #48	@ 0x30
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40022000 	.word	0x40022000
 8003ac0:	40015c04 	.word	0x40015c04
 8003ac4:	20020738 	.word	0x20020738
 8003ac8:	40026470 	.word	0x40026470

08003acc <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b0a6      	sub	sp, #152	@ 0x98
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	4618      	mov	r0, r3
 8003ade:	f003 fa61 	bl	8006fa4 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d009      	beq.n	8003b00 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d112      	bne.n	8003b26 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003b00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b04:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003b06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b0a:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8003b0c:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8003b10:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8003b12:	2302      	movs	r3, #2
 8003b14:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003b16:	2313      	movs	r3, #19
 8003b18:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003b1a:	f107 0314 	add.w	r3, r7, #20
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 fe50 	bl	80067c4 <HAL_RCCEx_PeriphCLKConfig>
 8003b24:	e012      	b.n	8003b4c <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003b26:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b2a:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003b2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b30:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8003b32:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8003b36:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003b38:	2307      	movs	r3, #7
 8003b3a:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4618      	mov	r0, r3
 8003b46:	f002 fe3d 	bl	80067c4 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	3798      	adds	r7, #152	@ 0x98
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8003c0c <SAIx_Out_Init+0xb8>)
 8003b60:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003b62:	4b29      	ldr	r3, [pc, #164]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b27      	ldr	r3, [pc, #156]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b70:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8003b72:	4a25      	ldr	r2, [pc, #148]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8003b78:	4b23      	ldr	r3, [pc, #140]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003b7e:	4b22      	ldr	r3, [pc, #136]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003b84:	4b20      	ldr	r3, [pc, #128]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b8c:	2280      	movs	r2, #128	@ 0x80
 8003b8e:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003b90:	4b1d      	ldr	r3, [pc, #116]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003b96:	4b1c      	ldr	r3, [pc, #112]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8003ba2:	4b19      	ldr	r3, [pc, #100]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003ba4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ba8:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003baa:	4b17      	ldr	r3, [pc, #92]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 64; 
 8003bb0:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bb2:	2240      	movs	r2, #64	@ 0x40
 8003bb4:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8003bb6:	4b14      	ldr	r3, [pc, #80]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bb8:	2220      	movs	r2, #32
 8003bba:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003bbc:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003bc2:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003bc4:	4b10      	ldr	r3, [pc, #64]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003bca:	4b0f      	ldr	r3, [pc, #60]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bcc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003bd0:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8003bde:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003be0:	2204      	movs	r2, #4
 8003be2:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8003be4:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003be6:	220f      	movs	r2, #15
 8003be8:	661a      	str	r2, [r3, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8003bea:	4807      	ldr	r0, [pc, #28]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bec:	f003 fc26 	bl	800743c <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8003bf0:	4b05      	ldr	r3, [pc, #20]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <SAIx_Out_Init+0xb4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003bfe:	601a      	str	r2, [r3, #0]
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20020630 	.word	0x20020630
 8003c0c:	40015c04 	.word	0x40015c04

08003c10 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003c14:	4b07      	ldr	r3, [pc, #28]	@ (8003c34 <SAIx_Out_DeInit+0x24>)
 8003c16:	4a08      	ldr	r2, [pc, #32]	@ (8003c38 <SAIx_Out_DeInit+0x28>)
 8003c18:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003c1a:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <SAIx_Out_DeInit+0x24>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b04      	ldr	r3, [pc, #16]	@ (8003c34 <SAIx_Out_DeInit+0x24>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c28:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8003c2a:	4802      	ldr	r0, [pc, #8]	@ (8003c34 <SAIx_Out_DeInit+0x24>)
 8003c2c:	f003 fd84 	bl	8007738 <HAL_SAI_DeInit>
}
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20020630 	.word	0x20020630
 8003c38:	40015c04 	.word	0x40015c04

08003c3c <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	68f9      	ldr	r1, [r7, #12]
 8003c4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003c52:	f000 f805 	bl	8003c60 <BSP_AUDIO_IN_InitEx>
 8003c56:	4603      	mov	r3, r0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b089      	sub	sp, #36	@ 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8003c78:	89fb      	ldrh	r3, [r7, #14]
 8003c7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c7e:	d006      	beq.n	8003c8e <BSP_AUDIO_IN_InitEx+0x2e>
 8003c80:	89fb      	ldrh	r3, [r7, #14]
 8003c82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c86:	d002      	beq.n	8003c8e <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e046      	b.n	8003d1c <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8003c8e:	f000 fa09 	bl	80040a4 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8003c92:	2200      	movs	r2, #0
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	4824      	ldr	r0, [pc, #144]	@ (8003d28 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003c98:	f7ff ff18 	bl	8003acc <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003c9c:	4b22      	ldr	r3, [pc, #136]	@ (8003d28 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003c9e:	4a23      	ldr	r2, [pc, #140]	@ (8003d2c <BSP_AUDIO_IN_InitEx+0xcc>)
 8003ca0:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8003ca2:	4821      	ldr	r0, [pc, #132]	@ (8003d28 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003ca4:	f003 ff2e 	bl	8007b04 <HAL_SAI_GetState>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d107      	bne.n	8003cbe <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8003cae:	2100      	movs	r1, #0
 8003cb0:	481d      	ldr	r0, [pc, #116]	@ (8003d28 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003cb2:	f7ff fe35 	bl	8003920 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	481b      	ldr	r0, [pc, #108]	@ (8003d28 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003cba:	f000 f88b 	bl	8003dd4 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8003cbe:	89fb      	ldrh	r3, [r7, #14]
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc4:	d102      	bne.n	8003ccc <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	e001      	b.n	8003cd0 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8003ccc:	2305      	movs	r3, #5
 8003cce:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	69b9      	ldr	r1, [r7, #24]
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	f000 f92f 	bl	8003f38 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003cda:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2034      	movs	r0, #52	@ 0x34
 8003ce0:	4798      	blx	r3
 8003ce2:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f648 1294 	movw	r2, #35220	@ 0x8994
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d109      	bne.n	8003d02 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003cee:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	2034      	movs	r0, #52	@ 0x34
 8003cf4:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <BSP_AUDIO_IN_InitEx+0xd4>)
 8003cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d30 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003cfa:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e001      	b.n	8003d06 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8003d06:	7ffb      	ldrb	r3, [r7, #31]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8003d0c:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <BSP_AUDIO_IN_InitEx+0xd4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681c      	ldr	r4, [r3, #0]
 8003d12:	89f9      	ldrh	r1, [r7, #14]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2264      	movs	r2, #100	@ 0x64
 8003d18:	2034      	movs	r0, #52	@ 0x34
 8003d1a:	47a0      	blx	r4
    }
  }
  return ret;
 8003d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3724      	adds	r7, #36	@ 0x24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd90      	pop	{r4, r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200206b4 	.word	0x200206b4
 8003d2c:	40015c24 	.word	0x40015c24
 8003d30:	20000004 	.word	0x20000004
 8003d34:	2002062c 	.word	0x2002062c

08003d38 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4805      	ldr	r0, [pc, #20]	@ (8003d64 <BSP_AUDIO_IN_Record+0x2c>)
 8003d50:	f003 fe4a 	bl	80079e8 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	b2db      	uxtb	r3, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	200206b4 	.word	0x200206b4

08003d68 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8003d70:	480c      	ldr	r0, [pc, #48]	@ (8003da4 <BSP_AUDIO_IN_Stop+0x3c>)
 8003d72:	f003 fd16 	bl	80077a2 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8003d76:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <BSP_AUDIO_IN_Stop+0x40>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	2034      	movs	r0, #52	@ 0x34
 8003d80:	4798      	blx	r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e006      	b.n	8003d9a <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d102      	bne.n	8003d98 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8003d92:	2001      	movs	r0, #1
 8003d94:	f000 f9fa 	bl	800418c <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8003d98:	2300      	movs	r3, #0
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	200206b4 	.word	0x200206b4
 8003da8:	2002062c 	.word	0x2002062c

08003dac <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8003db4:	f7fd fc18 	bl	80015e8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8003db8:	bf00      	nop
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8003dc8:	f7fd fc1c 	bl	8001604 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08c      	sub	sp, #48	@ 0x30
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8003dde:	4b50      	ldr	r3, [pc, #320]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	4a4f      	ldr	r2, [pc, #316]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003de4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dea:	4b4d      	ldr	r3, [pc, #308]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8003df6:	4b4a      	ldr	r3, [pc, #296]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfa:	4a49      	ldr	r2, [pc, #292]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e02:	4b47      	ldr	r3, [pc, #284]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8003e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e12:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003e14:	2302      	movs	r3, #2
 8003e16:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8003e20:	230a      	movs	r3, #10
 8003e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8003e24:	f107 031c 	add.w	r3, r7, #28
 8003e28:	4619      	mov	r1, r3
 8003e2a:	483e      	ldr	r0, [pc, #248]	@ (8003f24 <BSP_AUDIO_IN_MspInit+0x150>)
 8003e2c:	f000 ff2a 	bl	8004c84 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8003e30:	4b3b      	ldr	r3, [pc, #236]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e34:	4a3a      	ldr	r2, [pc, #232]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e3c:	4b38      	ldr	r3, [pc, #224]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8003e48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e4c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003e56:	2302      	movs	r3, #2
 8003e58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8003e5a:	f107 031c 	add.w	r3, r7, #28
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4831      	ldr	r0, [pc, #196]	@ (8003f28 <BSP_AUDIO_IN_MspInit+0x154>)
 8003e62:	f000 ff0f 	bl	8004c84 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8003e66:	4b2e      	ldr	r3, [pc, #184]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e72:	4b2b      	ldr	r3, [pc, #172]	@ (8003f20 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2a      	ldr	r2, [pc, #168]	@ (8003f2c <BSP_AUDIO_IN_MspInit+0x158>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d137      	bne.n	8003ef8 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8003e88:	4b29      	ldr	r3, [pc, #164]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003e8e:	4b28      	ldr	r3, [pc, #160]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003e94:	4b26      	ldr	r3, [pc, #152]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8003e9a:	4b25      	ldr	r3, [pc, #148]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003e9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ea0:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003ea2:	4b23      	ldr	r3, [pc, #140]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ea4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ea8:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8003eaa:	4b21      	ldr	r3, [pc, #132]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003eac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003eb0:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8003eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003eb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eb8:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003eba:	4b1d      	ldr	r3, [pc, #116]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ebc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ec0:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003ec8:	4b19      	ldr	r3, [pc, #100]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003eca:	2203      	movs	r2, #3
 8003ecc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ece:	4b18      	ldr	r3, [pc, #96]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8003ed4:	4b16      	ldr	r3, [pc, #88]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8003eda:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003edc:	4a15      	ldr	r2, [pc, #84]	@ (8003f34 <BSP_AUDIO_IN_MspInit+0x160>)
 8003ede:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a13      	ldr	r2, [pc, #76]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ee4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003ee6:	4a12      	ldr	r2, [pc, #72]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8003eec:	4810      	ldr	r0, [pc, #64]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003eee:	f000 fb31 	bl	8004554 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8003ef2:	480f      	ldr	r0, [pc, #60]	@ (8003f30 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003ef4:	f000 fa80 	bl	80043f8 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	210f      	movs	r1, #15
 8003efc:	2046      	movs	r0, #70	@ 0x46
 8003efe:	f000 fa44 	bl	800438a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8003f02:	2046      	movs	r0, #70	@ 0x46
 8003f04:	f000 fa5d 	bl	80043c2 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003f08:	2200      	movs	r2, #0
 8003f0a:	210f      	movs	r1, #15
 8003f0c:	2028      	movs	r0, #40	@ 0x28
 8003f0e:	f000 fa3c 	bl	800438a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8003f12:	2028      	movs	r0, #40	@ 0x28
 8003f14:	f000 fa55 	bl	80043c2 <HAL_NVIC_EnableIRQ>
}
 8003f18:	bf00      	nop
 8003f1a:	3730      	adds	r7, #48	@ 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40021800 	.word	0x40021800
 8003f28:	40021c00 	.word	0x40021c00
 8003f2c:	40015c24 	.word	0x40015c24
 8003f30:	20020798 	.word	0x20020798
 8003f34:	400264b8 	.word	0x400264b8

08003f38 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003f44:	4b53      	ldr	r3, [pc, #332]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f46:	4a54      	ldr	r2, [pc, #336]	@ (8004098 <SAIx_In_Init+0x160>)
 8003f48:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003f4a:	4b52      	ldr	r3, [pc, #328]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b50      	ldr	r3, [pc, #320]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f58:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8003f5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8003f60:	4a4c      	ldr	r2, [pc, #304]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003f66:	4b4b      	ldr	r3, [pc, #300]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003f6c:	4b49      	ldr	r3, [pc, #292]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003f72:	4b48      	ldr	r3, [pc, #288]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f74:	2280      	movs	r2, #128	@ 0x80
 8003f76:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003f78:	4b46      	ldr	r3, [pc, #280]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003f7e:	4b45      	ldr	r3, [pc, #276]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003f84:	4b43      	ldr	r3, [pc, #268]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8003f8a:	4b42      	ldr	r3, [pc, #264]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f90:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003f92:	4b40      	ldr	r3, [pc, #256]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8003f98:	4b3e      	ldr	r3, [pc, #248]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003f9a:	2240      	movs	r2, #64	@ 0x40
 8003f9c:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8003f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003fa6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003faa:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003fac:	4b39      	ldr	r3, [pc, #228]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003fb2:	4b38      	ldr	r3, [pc, #224]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003fb4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003fb8:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8003fba:	4b36      	ldr	r3, [pc, #216]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003fc0:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8003fc6:	4b33      	ldr	r3, [pc, #204]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003fc8:	2204      	movs	r2, #4
 8003fca:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8003fcc:	4a31      	ldr	r2, [pc, #196]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8003fd2:	4830      	ldr	r0, [pc, #192]	@ (8004094 <SAIx_In_Init+0x15c>)
 8003fd4:	f003 fa32 	bl	800743c <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003fd8:	4b30      	ldr	r3, [pc, #192]	@ (800409c <SAIx_In_Init+0x164>)
 8003fda:	4a31      	ldr	r2, [pc, #196]	@ (80040a0 <SAIx_In_Init+0x168>)
 8003fdc:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8003fde:	4b2f      	ldr	r3, [pc, #188]	@ (800409c <SAIx_In_Init+0x164>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800409c <SAIx_In_Init+0x164>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003fec:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8003fee:	4a2b      	ldr	r2, [pc, #172]	@ (800409c <SAIx_In_Init+0x164>)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8003ff4:	4b29      	ldr	r3, [pc, #164]	@ (800409c <SAIx_In_Init+0x164>)
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003ffa:	4b28      	ldr	r3, [pc, #160]	@ (800409c <SAIx_In_Init+0x164>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004000:	4b26      	ldr	r3, [pc, #152]	@ (800409c <SAIx_In_Init+0x164>)
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8004006:	4b25      	ldr	r3, [pc, #148]	@ (800409c <SAIx_In_Init+0x164>)
 8004008:	2280      	movs	r2, #128	@ 0x80
 800400a:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800400c:	4b23      	ldr	r3, [pc, #140]	@ (800409c <SAIx_In_Init+0x164>)
 800400e:	2200      	movs	r2, #0
 8004010:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004012:	4b22      	ldr	r3, [pc, #136]	@ (800409c <SAIx_In_Init+0x164>)
 8004014:	2201      	movs	r2, #1
 8004016:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8004018:	4b20      	ldr	r3, [pc, #128]	@ (800409c <SAIx_In_Init+0x164>)
 800401a:	2201      	movs	r2, #1
 800401c:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800401e:	4b1f      	ldr	r3, [pc, #124]	@ (800409c <SAIx_In_Init+0x164>)
 8004020:	2200      	movs	r2, #0
 8004022:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004024:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <SAIx_In_Init+0x164>)
 8004026:	2201      	movs	r2, #1
 8004028:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 800402a:	4b1c      	ldr	r3, [pc, #112]	@ (800409c <SAIx_In_Init+0x164>)
 800402c:	2240      	movs	r2, #64	@ 0x40
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004030:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <SAIx_In_Init+0x164>)
 8004032:	2220      	movs	r2, #32
 8004034:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004036:	4b19      	ldr	r3, [pc, #100]	@ (800409c <SAIx_In_Init+0x164>)
 8004038:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800403c:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800403e:	4b17      	ldr	r3, [pc, #92]	@ (800409c <SAIx_In_Init+0x164>)
 8004040:	2200      	movs	r2, #0
 8004042:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004044:	4b15      	ldr	r3, [pc, #84]	@ (800409c <SAIx_In_Init+0x164>)
 8004046:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800404a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 800404c:	4b13      	ldr	r3, [pc, #76]	@ (800409c <SAIx_In_Init+0x164>)
 800404e:	2200      	movs	r2, #0
 8004050:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004052:	4b12      	ldr	r3, [pc, #72]	@ (800409c <SAIx_In_Init+0x164>)
 8004054:	2200      	movs	r2, #0
 8004056:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004058:	4b10      	ldr	r3, [pc, #64]	@ (800409c <SAIx_In_Init+0x164>)
 800405a:	2204      	movs	r2, #4
 800405c:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800405e:	4a0f      	ldr	r2, [pc, #60]	@ (800409c <SAIx_In_Init+0x164>)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004064:	480d      	ldr	r0, [pc, #52]	@ (800409c <SAIx_In_Init+0x164>)
 8004066:	f003 f9e9 	bl	800743c <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800406a:	4b0a      	ldr	r3, [pc, #40]	@ (8004094 <SAIx_In_Init+0x15c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <SAIx_In_Init+0x15c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004078:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800407a:	4b08      	ldr	r3, [pc, #32]	@ (800409c <SAIx_In_Init+0x164>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b06      	ldr	r3, [pc, #24]	@ (800409c <SAIx_In_Init+0x164>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20020630 	.word	0x20020630
 8004098:	40015c04 	.word	0x40015c04
 800409c:	200206b4 	.word	0x200206b4
 80040a0:	40015c24 	.word	0x40015c24

080040a4 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80040a8:	4b07      	ldr	r3, [pc, #28]	@ (80040c8 <SAIx_In_DeInit+0x24>)
 80040aa:	4a08      	ldr	r2, [pc, #32]	@ (80040cc <SAIx_In_DeInit+0x28>)
 80040ac:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80040ae:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <SAIx_In_DeInit+0x24>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b04      	ldr	r3, [pc, #16]	@ (80040c8 <SAIx_In_DeInit+0x24>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80040bc:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 80040be:	4802      	ldr	r0, [pc, #8]	@ (80040c8 <SAIx_In_DeInit+0x24>)
 80040c0:	f003 fb3a 	bl	8007738 <HAL_SAI_DeInit>
}
 80040c4:	bf00      	nop
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	200206b4 	.word	0x200206b4
 80040cc:	40015c24 	.word	0x40015c24

080040d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040d4:	2003      	movs	r0, #3
 80040d6:	f000 f94d 	bl	8004374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040da:	200f      	movs	r0, #15
 80040dc:	f000 f806 	bl	80040ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040e0:	f7fd fbee 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040f4:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <HAL_InitTick+0x54>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <HAL_InitTick+0x58>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004102:	fbb3 f3f1 	udiv	r3, r3, r1
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f967 	bl	80043de <HAL_SYSTICK_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e00e      	b.n	8004138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b0f      	cmp	r3, #15
 800411e:	d80a      	bhi.n	8004136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004120:	2200      	movs	r2, #0
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	f000 f92f 	bl	800438a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800412c:	4a06      	ldr	r2, [pc, #24]	@ (8004148 <HAL_InitTick+0x5c>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	e000      	b.n	8004138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000000 	.word	0x20000000
 8004144:	20000048 	.word	0x20000048
 8004148:	20000044 	.word	0x20000044

0800414c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004150:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_IncTick+0x20>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	4b06      	ldr	r3, [pc, #24]	@ (8004170 <HAL_IncTick+0x24>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4413      	add	r3, r2
 800415c:	4a04      	ldr	r2, [pc, #16]	@ (8004170 <HAL_IncTick+0x24>)
 800415e:	6013      	str	r3, [r2, #0]
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000048 	.word	0x20000048
 8004170:	200207f8 	.word	0x200207f8

08004174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  return uwTick;
 8004178:	4b03      	ldr	r3, [pc, #12]	@ (8004188 <HAL_GetTick+0x14>)
 800417a:	681b      	ldr	r3, [r3, #0]
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	200207f8 	.word	0x200207f8

0800418c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004194:	f7ff ffee 	bl	8004174 <HAL_GetTick>
 8004198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d005      	beq.n	80041b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041a6:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <HAL_Delay+0x44>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4413      	add	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041b2:	bf00      	nop
 80041b4:	f7ff ffde 	bl	8004174 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d8f7      	bhi.n	80041b4 <HAL_Delay+0x28>
  {
  }
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000048 	.word	0x20000048

080041d4 <__NVIC_SetPriorityGrouping>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004214 <__NVIC_SetPriorityGrouping+0x40>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041f0:	4013      	ands	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80041fc:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <__NVIC_SetPriorityGrouping+0x44>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004202:	4a04      	ldr	r2, [pc, #16]	@ (8004214 <__NVIC_SetPriorityGrouping+0x40>)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	60d3      	str	r3, [r2, #12]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000ed00 	.word	0xe000ed00
 8004218:	05fa0000 	.word	0x05fa0000

0800421c <__NVIC_GetPriorityGrouping>:
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004220:	4b04      	ldr	r3, [pc, #16]	@ (8004234 <__NVIC_GetPriorityGrouping+0x18>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	0a1b      	lsrs	r3, r3, #8
 8004226:	f003 0307 	and.w	r3, r3, #7
}
 800422a:	4618      	mov	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <__NVIC_EnableIRQ>:
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004246:	2b00      	cmp	r3, #0
 8004248:	db0b      	blt.n	8004262 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	f003 021f 	and.w	r2, r3, #31
 8004250:	4907      	ldr	r1, [pc, #28]	@ (8004270 <__NVIC_EnableIRQ+0x38>)
 8004252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	2001      	movs	r0, #1
 800425a:	fa00 f202 	lsl.w	r2, r0, r2
 800425e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000e100 	.word	0xe000e100

08004274 <__NVIC_SetPriority>:
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	6039      	str	r1, [r7, #0]
 800427e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004284:	2b00      	cmp	r3, #0
 8004286:	db0a      	blt.n	800429e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	b2da      	uxtb	r2, r3
 800428c:	490c      	ldr	r1, [pc, #48]	@ (80042c0 <__NVIC_SetPriority+0x4c>)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	0112      	lsls	r2, r2, #4
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	440b      	add	r3, r1
 8004298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800429c:	e00a      	b.n	80042b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4908      	ldr	r1, [pc, #32]	@ (80042c4 <__NVIC_SetPriority+0x50>)
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	3b04      	subs	r3, #4
 80042ac:	0112      	lsls	r2, r2, #4
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	440b      	add	r3, r1
 80042b2:	761a      	strb	r2, [r3, #24]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	e000e100 	.word	0xe000e100
 80042c4:	e000ed00 	.word	0xe000ed00

080042c8 <NVIC_EncodePriority>:
{
 80042c8:	b480      	push	{r7}
 80042ca:	b089      	sub	sp, #36	@ 0x24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f1c3 0307 	rsb	r3, r3, #7
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	bf28      	it	cs
 80042e6:	2304      	movcs	r3, #4
 80042e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3304      	adds	r3, #4
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d902      	bls.n	80042f8 <NVIC_EncodePriority+0x30>
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3b03      	subs	r3, #3
 80042f6:	e000      	b.n	80042fa <NVIC_EncodePriority+0x32>
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43da      	mvns	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	401a      	ands	r2, r3
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004310:	f04f 31ff 	mov.w	r1, #4294967295
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	fa01 f303 	lsl.w	r3, r1, r3
 800431a:	43d9      	mvns	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004320:	4313      	orrs	r3, r2
}
 8004322:	4618      	mov	r0, r3
 8004324:	3724      	adds	r7, #36	@ 0x24
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3b01      	subs	r3, #1
 800433c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004340:	d301      	bcc.n	8004346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004342:	2301      	movs	r3, #1
 8004344:	e00f      	b.n	8004366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004346:	4a0a      	ldr	r2, [pc, #40]	@ (8004370 <SysTick_Config+0x40>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3b01      	subs	r3, #1
 800434c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800434e:	210f      	movs	r1, #15
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	f7ff ff8e 	bl	8004274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004358:	4b05      	ldr	r3, [pc, #20]	@ (8004370 <SysTick_Config+0x40>)
 800435a:	2200      	movs	r2, #0
 800435c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800435e:	4b04      	ldr	r3, [pc, #16]	@ (8004370 <SysTick_Config+0x40>)
 8004360:	2207      	movs	r2, #7
 8004362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	e000e010 	.word	0xe000e010

08004374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff ff29 	bl	80041d4 <__NVIC_SetPriorityGrouping>
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800438a:	b580      	push	{r7, lr}
 800438c:	b086      	sub	sp, #24
 800438e:	af00      	add	r7, sp, #0
 8004390:	4603      	mov	r3, r0
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800439c:	f7ff ff3e 	bl	800421c <__NVIC_GetPriorityGrouping>
 80043a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	6978      	ldr	r0, [r7, #20]
 80043a8:	f7ff ff8e 	bl	80042c8 <NVIC_EncodePriority>
 80043ac:	4602      	mov	r2, r0
 80043ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b2:	4611      	mov	r1, r2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff ff5d 	bl	8004274 <__NVIC_SetPriority>
}
 80043ba:	bf00      	nop
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	4603      	mov	r3, r0
 80043ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff ff31 	bl	8004238 <__NVIC_EnableIRQ>
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff ffa2 	bl	8004330 <SysTick_Config>
 80043ec:	4603      	mov	r3, r0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004404:	f7ff feb6 	bl	8004174 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e099      	b.n	8004548 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004434:	e00f      	b.n	8004456 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004436:	f7ff fe9d 	bl	8004174 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b05      	cmp	r3, #5
 8004442:	d908      	bls.n	8004456 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2203      	movs	r2, #3
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e078      	b.n	8004548 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e8      	bne.n	8004436 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4b38      	ldr	r3, [pc, #224]	@ (8004550 <HAL_DMA_Init+0x158>)
 8004470:	4013      	ands	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800448e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800449a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d107      	bne.n	80044c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b8:	4313      	orrs	r3, r2
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0307 	bic.w	r3, r3, #7
 80044d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d117      	bne.n	800451a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fb45 	bl	8004b8c <DMA_CheckFifoParam>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2240      	movs	r2, #64	@ 0x40
 800450c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004516:	2301      	movs	r3, #1
 8004518:	e016      	b.n	8004548 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fafc 	bl	8004b20 <DMA_CalcBaseAndBitshift>
 8004528:	4603      	mov	r3, r0
 800452a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004530:	223f      	movs	r2, #63	@ 0x3f
 8004532:	409a      	lsls	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	f010803f 	.word	0xf010803f

08004554 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e050      	b.n	8004608 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d101      	bne.n	8004576 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004572:	2302      	movs	r3, #2
 8004574:	e048      	b.n	8004608 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2200      	movs	r2, #0
 8004594:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2221      	movs	r2, #33	@ 0x21
 80045b4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fab2 	bl	8004b20 <DMA_CalcBaseAndBitshift>
 80045bc:	4603      	mov	r3, r0
 80045be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c4:	223f      	movs	r2, #63	@ 0x3f
 80045c6:	409a      	lsls	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004626:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_DMA_Start_IT+0x26>
 8004632:	2302      	movs	r3, #2
 8004634:	e048      	b.n	80046c8 <HAL_DMA_Start_IT+0xb8>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b01      	cmp	r3, #1
 8004648:	d137      	bne.n	80046ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fa30 	bl	8004ac4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004668:	223f      	movs	r2, #63	@ 0x3f
 800466a:	409a      	lsls	r2, r3
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0216 	orr.w	r2, r2, #22
 800467e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800468e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0208 	orr.w	r2, r2, #8
 80046a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e005      	b.n	80046c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
 80046c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046de:	f7ff fd49 	bl	8004174 <HAL_GetTick>
 80046e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d008      	beq.n	8004702 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2280      	movs	r2, #128	@ 0x80
 80046f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e052      	b.n	80047a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0216 	bic.w	r2, r2, #22
 8004710:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004720:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <HAL_DMA_Abort+0x62>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0208 	bic.w	r2, r2, #8
 8004740:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004752:	e013      	b.n	800477c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004754:	f7ff fd0e 	bl	8004174 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b05      	cmp	r3, #5
 8004760:	d90c      	bls.n	800477c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2203      	movs	r2, #3
 800476c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e015      	b.n	80047a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e4      	bne.n	8004754 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478e:	223f      	movs	r2, #63	@ 0x3f
 8004790:	409a      	lsls	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80047bc:	4b8e      	ldr	r3, [pc, #568]	@ (80049f8 <HAL_DMA_IRQHandler+0x248>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a8e      	ldr	r2, [pc, #568]	@ (80049fc <HAL_DMA_IRQHandler+0x24c>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	0a9b      	lsrs	r3, r3, #10
 80047c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047da:	2208      	movs	r2, #8
 80047dc:	409a      	lsls	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01a      	beq.n	800481c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d013      	beq.n	800481c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0204 	bic.w	r2, r2, #4
 8004802:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004808:	2208      	movs	r2, #8
 800480a:	409a      	lsls	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004814:	f043 0201 	orr.w	r2, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004820:	2201      	movs	r2, #1
 8004822:	409a      	lsls	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d012      	beq.n	8004852 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483e:	2201      	movs	r2, #1
 8004840:	409a      	lsls	r2, r3
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484a:	f043 0202 	orr.w	r2, r3, #2
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004856:	2204      	movs	r2, #4
 8004858:	409a      	lsls	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d012      	beq.n	8004888 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00b      	beq.n	8004888 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004874:	2204      	movs	r2, #4
 8004876:	409a      	lsls	r2, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004880:	f043 0204 	orr.w	r2, r3, #4
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488c:	2210      	movs	r2, #16
 800488e:	409a      	lsls	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4013      	ands	r3, r2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d043      	beq.n	8004920 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03c      	beq.n	8004920 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048aa:	2210      	movs	r2, #16
 80048ac:	409a      	lsls	r2, r3
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d018      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d108      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d024      	beq.n	8004920 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	4798      	blx	r3
 80048de:	e01f      	b.n	8004920 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01b      	beq.n	8004920 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
 80048f0:	e016      	b.n	8004920 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0208 	bic.w	r2, r2, #8
 800490e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004924:	2220      	movs	r2, #32
 8004926:	409a      	lsls	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 808f 	beq.w	8004a50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8087 	beq.w	8004a50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004946:	2220      	movs	r2, #32
 8004948:	409a      	lsls	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b05      	cmp	r3, #5
 8004958:	d136      	bne.n	80049c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0216 	bic.w	r2, r2, #22
 8004968:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004978:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <HAL_DMA_IRQHandler+0x1da>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0208 	bic.w	r2, r2, #8
 8004998:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499e:	223f      	movs	r2, #63	@ 0x3f
 80049a0:	409a      	lsls	r2, r3
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d07e      	beq.n	8004abc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	4798      	blx	r3
        }
        return;
 80049c6:	e079      	b.n	8004abc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01d      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10d      	bne.n	8004a00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d031      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	4798      	blx	r3
 80049f4:	e02c      	b.n	8004a50 <HAL_DMA_IRQHandler+0x2a0>
 80049f6:	bf00      	nop
 80049f8:	20000000 	.word	0x20000000
 80049fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d023      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4798      	blx	r3
 8004a10:	e01e      	b.n	8004a50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10f      	bne.n	8004a40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0210 	bic.w	r2, r2, #16
 8004a2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d032      	beq.n	8004abe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d022      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2205      	movs	r2, #5
 8004a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0201 	bic.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d307      	bcc.n	8004a98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f2      	bne.n	8004a7c <HAL_DMA_IRQHandler+0x2cc>
 8004a96:	e000      	b.n	8004a9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
 8004aba:	e000      	b.n	8004abe <HAL_DMA_IRQHandler+0x30e>
        return;
 8004abc:	bf00      	nop
    }
  }
}
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b40      	cmp	r3, #64	@ 0x40
 8004af0:	d108      	bne.n	8004b04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b02:	e007      	b.n	8004b14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	60da      	str	r2, [r3, #12]
}
 8004b14:	bf00      	nop
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	3b10      	subs	r3, #16
 8004b30:	4a13      	ldr	r2, [pc, #76]	@ (8004b80 <DMA_CalcBaseAndBitshift+0x60>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b3a:	4a12      	ldr	r2, [pc, #72]	@ (8004b84 <DMA_CalcBaseAndBitshift+0x64>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d908      	bls.n	8004b60 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <DMA_CalcBaseAndBitshift+0x68>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	1d1a      	adds	r2, r3, #4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b5e:	e006      	b.n	8004b6e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	4b08      	ldr	r3, [pc, #32]	@ (8004b88 <DMA_CalcBaseAndBitshift+0x68>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	aaaaaaab 	.word	0xaaaaaaab
 8004b84:	0800b258 	.word	0x0800b258
 8004b88:	fffffc00 	.word	0xfffffc00

08004b8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d11f      	bne.n	8004be6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d856      	bhi.n	8004c5a <DMA_CheckFifoParam+0xce>
 8004bac:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb4 <DMA_CheckFifoParam+0x28>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bd7 	.word	0x08004bd7
 8004bbc:	08004bc5 	.word	0x08004bc5
 8004bc0:	08004c5b 	.word	0x08004c5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d046      	beq.n	8004c5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bd4:	e043      	b.n	8004c5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bde:	d140      	bne.n	8004c62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be4:	e03d      	b.n	8004c62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bee:	d121      	bne.n	8004c34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d837      	bhi.n	8004c66 <DMA_CheckFifoParam+0xda>
 8004bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <DMA_CheckFifoParam+0x70>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c13 	.word	0x08004c13
 8004c04:	08004c0d 	.word	0x08004c0d
 8004c08:	08004c25 	.word	0x08004c25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c10:	e030      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d025      	beq.n	8004c6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c22:	e022      	b.n	8004c6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c2c:	d11f      	bne.n	8004c6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c32:	e01c      	b.n	8004c6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d903      	bls.n	8004c42 <DMA_CheckFifoParam+0xb6>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d003      	beq.n	8004c48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c40:	e018      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	73fb      	strb	r3, [r7, #15]
      break;
 8004c46:	e015      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00e      	beq.n	8004c72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e00b      	b.n	8004c72 <DMA_CheckFifoParam+0xe6>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e00a      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e008      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
      break;
 8004c62:	bf00      	nop
 8004c64:	e006      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
      break;
 8004c66:	bf00      	nop
 8004c68:	e004      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e002      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c6e:	bf00      	nop
 8004c70:	e000      	b.n	8004c74 <DMA_CheckFifoParam+0xe8>
      break;
 8004c72:	bf00      	nop
    }
  } 
  
  return status; 
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop

08004c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	@ 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004c96:	2300      	movs	r3, #0
 8004c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	e175      	b.n	8004f90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	f040 8164 	bne.w	8004f8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d005      	beq.n	8004cda <HAL_GPIO_Init+0x56>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d130      	bne.n	8004d3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43db      	mvns	r3, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d10:	2201      	movs	r2, #1
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 0201 	and.w	r2, r3, #1
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d017      	beq.n	8004d78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	2203      	movs	r2, #3
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d123      	bne.n	8004dcc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	08da      	lsrs	r2, r3, #3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3208      	adds	r2, #8
 8004d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	220f      	movs	r2, #15
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	08da      	lsrs	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3208      	adds	r2, #8
 8004dc6:	69b9      	ldr	r1, [r7, #24]
 8004dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0203 	and.w	r2, r3, #3
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 80be 	beq.w	8004f8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e0e:	4b66      	ldr	r3, [pc, #408]	@ (8004fa8 <HAL_GPIO_Init+0x324>)
 8004e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e12:	4a65      	ldr	r2, [pc, #404]	@ (8004fa8 <HAL_GPIO_Init+0x324>)
 8004e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e1a:	4b63      	ldr	r3, [pc, #396]	@ (8004fa8 <HAL_GPIO_Init+0x324>)
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e26:	4a61      	ldr	r2, [pc, #388]	@ (8004fac <HAL_GPIO_Init+0x328>)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	089b      	lsrs	r3, r3, #2
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	220f      	movs	r2, #15
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a58      	ldr	r2, [pc, #352]	@ (8004fb0 <HAL_GPIO_Init+0x32c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d037      	beq.n	8004ec2 <HAL_GPIO_Init+0x23e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a57      	ldr	r2, [pc, #348]	@ (8004fb4 <HAL_GPIO_Init+0x330>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d031      	beq.n	8004ebe <HAL_GPIO_Init+0x23a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a56      	ldr	r2, [pc, #344]	@ (8004fb8 <HAL_GPIO_Init+0x334>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d02b      	beq.n	8004eba <HAL_GPIO_Init+0x236>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a55      	ldr	r2, [pc, #340]	@ (8004fbc <HAL_GPIO_Init+0x338>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d025      	beq.n	8004eb6 <HAL_GPIO_Init+0x232>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a54      	ldr	r2, [pc, #336]	@ (8004fc0 <HAL_GPIO_Init+0x33c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01f      	beq.n	8004eb2 <HAL_GPIO_Init+0x22e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a53      	ldr	r2, [pc, #332]	@ (8004fc4 <HAL_GPIO_Init+0x340>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d019      	beq.n	8004eae <HAL_GPIO_Init+0x22a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a52      	ldr	r2, [pc, #328]	@ (8004fc8 <HAL_GPIO_Init+0x344>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_GPIO_Init+0x226>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a51      	ldr	r2, [pc, #324]	@ (8004fcc <HAL_GPIO_Init+0x348>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00d      	beq.n	8004ea6 <HAL_GPIO_Init+0x222>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a50      	ldr	r2, [pc, #320]	@ (8004fd0 <HAL_GPIO_Init+0x34c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <HAL_GPIO_Init+0x21e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a4f      	ldr	r2, [pc, #316]	@ (8004fd4 <HAL_GPIO_Init+0x350>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d101      	bne.n	8004e9e <HAL_GPIO_Init+0x21a>
 8004e9a:	2309      	movs	r3, #9
 8004e9c:	e012      	b.n	8004ec4 <HAL_GPIO_Init+0x240>
 8004e9e:	230a      	movs	r3, #10
 8004ea0:	e010      	b.n	8004ec4 <HAL_GPIO_Init+0x240>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	e00e      	b.n	8004ec4 <HAL_GPIO_Init+0x240>
 8004ea6:	2307      	movs	r3, #7
 8004ea8:	e00c      	b.n	8004ec4 <HAL_GPIO_Init+0x240>
 8004eaa:	2306      	movs	r3, #6
 8004eac:	e00a      	b.n	8004ec4 <HAL_GPIO_Init+0x240>
 8004eae:	2305      	movs	r3, #5
 8004eb0:	e008      	b.n	8004ec4 <HAL_GPIO_Init+0x240>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e006      	b.n	8004ec4 <HAL_GPIO_Init+0x240>
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e004      	b.n	8004ec4 <HAL_GPIO_Init+0x240>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e002      	b.n	8004ec4 <HAL_GPIO_Init+0x240>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_GPIO_Init+0x240>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	f002 0203 	and.w	r2, r2, #3
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	4093      	lsls	r3, r2
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ed4:	4935      	ldr	r1, [pc, #212]	@ (8004fac <HAL_GPIO_Init+0x328>)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	3302      	adds	r3, #2
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fd8 <HAL_GPIO_Init+0x354>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f06:	4a34      	ldr	r2, [pc, #208]	@ (8004fd8 <HAL_GPIO_Init+0x354>)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f0c:	4b32      	ldr	r3, [pc, #200]	@ (8004fd8 <HAL_GPIO_Init+0x354>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f30:	4a29      	ldr	r2, [pc, #164]	@ (8004fd8 <HAL_GPIO_Init+0x354>)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f36:	4b28      	ldr	r3, [pc, #160]	@ (8004fd8 <HAL_GPIO_Init+0x354>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4013      	ands	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd8 <HAL_GPIO_Init+0x354>)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f60:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd8 <HAL_GPIO_Init+0x354>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f84:	4a14      	ldr	r2, [pc, #80]	@ (8004fd8 <HAL_GPIO_Init+0x354>)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	f67f ae86 	bls.w	8004ca4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	3724      	adds	r7, #36	@ 0x24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40013800 	.word	0x40013800
 8004fb0:	40020000 	.word	0x40020000
 8004fb4:	40020400 	.word	0x40020400
 8004fb8:	40020800 	.word	0x40020800
 8004fbc:	40020c00 	.word	0x40020c00
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40021400 	.word	0x40021400
 8004fc8:	40021800 	.word	0x40021800
 8004fcc:	40021c00 	.word	0x40021c00
 8004fd0:	40022000 	.word	0x40022000
 8004fd4:	40022400 	.word	0x40022400
 8004fd8:	40013c00 	.word	0x40013c00

08004fdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e0d9      	b.n	80051ac <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4013      	ands	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	429a      	cmp	r2, r3
 8005010:	f040 80c9 	bne.w	80051a6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005014:	4a6b      	ldr	r2, [pc, #428]	@ (80051c4 <HAL_GPIO_DeInit+0x1e8>)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	089b      	lsrs	r3, r3, #2
 800501a:	3302      	adds	r3, #2
 800501c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005020:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	220f      	movs	r2, #15
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	4013      	ands	r3, r2
 8005034:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a63      	ldr	r2, [pc, #396]	@ (80051c8 <HAL_GPIO_DeInit+0x1ec>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d037      	beq.n	80050ae <HAL_GPIO_DeInit+0xd2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a62      	ldr	r2, [pc, #392]	@ (80051cc <HAL_GPIO_DeInit+0x1f0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d031      	beq.n	80050aa <HAL_GPIO_DeInit+0xce>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a61      	ldr	r2, [pc, #388]	@ (80051d0 <HAL_GPIO_DeInit+0x1f4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d02b      	beq.n	80050a6 <HAL_GPIO_DeInit+0xca>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a60      	ldr	r2, [pc, #384]	@ (80051d4 <HAL_GPIO_DeInit+0x1f8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d025      	beq.n	80050a2 <HAL_GPIO_DeInit+0xc6>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a5f      	ldr	r2, [pc, #380]	@ (80051d8 <HAL_GPIO_DeInit+0x1fc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01f      	beq.n	800509e <HAL_GPIO_DeInit+0xc2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a5e      	ldr	r2, [pc, #376]	@ (80051dc <HAL_GPIO_DeInit+0x200>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d019      	beq.n	800509a <HAL_GPIO_DeInit+0xbe>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a5d      	ldr	r2, [pc, #372]	@ (80051e0 <HAL_GPIO_DeInit+0x204>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <HAL_GPIO_DeInit+0xba>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a5c      	ldr	r2, [pc, #368]	@ (80051e4 <HAL_GPIO_DeInit+0x208>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00d      	beq.n	8005092 <HAL_GPIO_DeInit+0xb6>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a5b      	ldr	r2, [pc, #364]	@ (80051e8 <HAL_GPIO_DeInit+0x20c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d007      	beq.n	800508e <HAL_GPIO_DeInit+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a5a      	ldr	r2, [pc, #360]	@ (80051ec <HAL_GPIO_DeInit+0x210>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d101      	bne.n	800508a <HAL_GPIO_DeInit+0xae>
 8005086:	2309      	movs	r3, #9
 8005088:	e012      	b.n	80050b0 <HAL_GPIO_DeInit+0xd4>
 800508a:	230a      	movs	r3, #10
 800508c:	e010      	b.n	80050b0 <HAL_GPIO_DeInit+0xd4>
 800508e:	2308      	movs	r3, #8
 8005090:	e00e      	b.n	80050b0 <HAL_GPIO_DeInit+0xd4>
 8005092:	2307      	movs	r3, #7
 8005094:	e00c      	b.n	80050b0 <HAL_GPIO_DeInit+0xd4>
 8005096:	2306      	movs	r3, #6
 8005098:	e00a      	b.n	80050b0 <HAL_GPIO_DeInit+0xd4>
 800509a:	2305      	movs	r3, #5
 800509c:	e008      	b.n	80050b0 <HAL_GPIO_DeInit+0xd4>
 800509e:	2304      	movs	r3, #4
 80050a0:	e006      	b.n	80050b0 <HAL_GPIO_DeInit+0xd4>
 80050a2:	2303      	movs	r3, #3
 80050a4:	e004      	b.n	80050b0 <HAL_GPIO_DeInit+0xd4>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e002      	b.n	80050b0 <HAL_GPIO_DeInit+0xd4>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <HAL_GPIO_DeInit+0xd4>
 80050ae:	2300      	movs	r3, #0
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	f002 0203 	and.w	r2, r2, #3
 80050b6:	0092      	lsls	r2, r2, #2
 80050b8:	4093      	lsls	r3, r2
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d132      	bne.n	8005126 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80050c0:	4b4b      	ldr	r3, [pc, #300]	@ (80051f0 <HAL_GPIO_DeInit+0x214>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	43db      	mvns	r3, r3
 80050c8:	4949      	ldr	r1, [pc, #292]	@ (80051f0 <HAL_GPIO_DeInit+0x214>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80050ce:	4b48      	ldr	r3, [pc, #288]	@ (80051f0 <HAL_GPIO_DeInit+0x214>)
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	4946      	ldr	r1, [pc, #280]	@ (80051f0 <HAL_GPIO_DeInit+0x214>)
 80050d8:	4013      	ands	r3, r2
 80050da:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80050dc:	4b44      	ldr	r3, [pc, #272]	@ (80051f0 <HAL_GPIO_DeInit+0x214>)
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	4942      	ldr	r1, [pc, #264]	@ (80051f0 <HAL_GPIO_DeInit+0x214>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80050ea:	4b41      	ldr	r3, [pc, #260]	@ (80051f0 <HAL_GPIO_DeInit+0x214>)
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	43db      	mvns	r3, r3
 80050f2:	493f      	ldr	r1, [pc, #252]	@ (80051f0 <HAL_GPIO_DeInit+0x214>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	220f      	movs	r2, #15
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005108:	4a2e      	ldr	r2, [pc, #184]	@ (80051c4 <HAL_GPIO_DeInit+0x1e8>)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	089b      	lsrs	r3, r3, #2
 800510e:	3302      	adds	r3, #2
 8005110:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	43da      	mvns	r2, r3
 8005118:	482a      	ldr	r0, [pc, #168]	@ (80051c4 <HAL_GPIO_DeInit+0x1e8>)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	400a      	ands	r2, r1
 8005120:	3302      	adds	r3, #2
 8005122:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	2103      	movs	r1, #3
 8005130:	fa01 f303 	lsl.w	r3, r1, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	401a      	ands	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	08da      	lsrs	r2, r3, #3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3208      	adds	r2, #8
 8005144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	220f      	movs	r2, #15
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	08d2      	lsrs	r2, r2, #3
 800515c:	4019      	ands	r1, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3208      	adds	r2, #8
 8005162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	2103      	movs	r1, #3
 8005170:	fa01 f303 	lsl.w	r3, r1, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	401a      	ands	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	2101      	movs	r1, #1
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	fa01 f303 	lsl.w	r3, r1, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	401a      	ands	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	2103      	movs	r1, #3
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	401a      	ands	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	3301      	adds	r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	f67f af22 	bls.w	8004ff8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40013800 	.word	0x40013800
 80051c8:	40020000 	.word	0x40020000
 80051cc:	40020400 	.word	0x40020400
 80051d0:	40020800 	.word	0x40020800
 80051d4:	40020c00 	.word	0x40020c00
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40021400 	.word	0x40021400
 80051e0:	40021800 	.word	0x40021800
 80051e4:	40021c00 	.word	0x40021c00
 80051e8:	40022000 	.word	0x40022000
 80051ec:	40022400 	.word	0x40022400
 80051f0:	40013c00 	.word	0x40013c00

080051f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	887b      	ldrh	r3, [r7, #2]
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
 8005210:	e001      	b.n	8005216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005216:	7bfb      	ldrb	r3, [r7, #15]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800522e:	4b08      	ldr	r3, [pc, #32]	@ (8005250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	4013      	ands	r3, r2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d006      	beq.n	8005248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800523a:	4a05      	ldr	r2, [pc, #20]	@ (8005250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fc f98c 	bl	8001560 <HAL_GPIO_EXTI_Callback>
  }
}
 8005248:	bf00      	nop
 800524a:	3708      	adds	r7, #8
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40013c00 	.word	0x40013c00

08005254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e08b      	b.n	800537e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f8b5 	bl	80053ea <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2224      	movs	r2, #36	@ 0x24
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d107      	bne.n	80052ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	e006      	b.n	80052dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80052da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d108      	bne.n	80052f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f2:	605a      	str	r2, [r3, #4]
 80052f4:	e007      	b.n	8005306 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005304:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6859      	ldr	r1, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b1d      	ldr	r3, [pc, #116]	@ (8005388 <HAL_I2C_Init+0x134>)
 8005312:	430b      	orrs	r3, r1
 8005314:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005324:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69d9      	ldr	r1, [r3, #28]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	02008000 	.word	0x02008000

0800538c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e021      	b.n	80053e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2224      	movs	r2, #36	@ 0x24
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f821 	bl	80053fe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	461a      	mov	r2, r3
 8005422:	4603      	mov	r3, r0
 8005424:	817b      	strh	r3, [r7, #10]
 8005426:	460b      	mov	r3, r1
 8005428:	813b      	strh	r3, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b20      	cmp	r3, #32
 8005438:	f040 80f9 	bne.w	800562e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_I2C_Mem_Write+0x34>
 8005442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800544e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0ed      	b.n	8005630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_I2C_Mem_Write+0x4e>
 800545e:	2302      	movs	r3, #2
 8005460:	e0e6      	b.n	8005630 <HAL_I2C_Mem_Write+0x21c>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800546a:	f7fe fe83 	bl	8004174 <HAL_GetTick>
 800546e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2319      	movs	r3, #25
 8005476:	2201      	movs	r2, #1
 8005478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fad1 	bl	8005a24 <I2C_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0d1      	b.n	8005630 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2221      	movs	r2, #33	@ 0x21
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2240      	movs	r2, #64	@ 0x40
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054b4:	88f8      	ldrh	r0, [r7, #6]
 80054b6:	893a      	ldrh	r2, [r7, #8]
 80054b8:	8979      	ldrh	r1, [r7, #10]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	4603      	mov	r3, r0
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f9e1 	bl	800588c <I2C_RequestMemoryWrite>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0a9      	b.n	8005630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2bff      	cmp	r3, #255	@ 0xff
 80054e4:	d90e      	bls.n	8005504 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	22ff      	movs	r2, #255	@ 0xff
 80054ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	8979      	ldrh	r1, [r7, #10]
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fc55 	bl	8005dac <I2C_TransferConfig>
 8005502:	e00f      	b.n	8005524 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005512:	b2da      	uxtb	r2, r3
 8005514:	8979      	ldrh	r1, [r7, #10]
 8005516:	2300      	movs	r3, #0
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fc44 	bl	8005dac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fad4 	bl	8005ad6 <I2C_WaitOnTXISFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e07b      	b.n	8005630 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	781a      	ldrb	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d034      	beq.n	80055dc <HAL_I2C_Mem_Write+0x1c8>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d130      	bne.n	80055dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005580:	2200      	movs	r2, #0
 8005582:	2180      	movs	r1, #128	@ 0x80
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fa4d 	bl	8005a24 <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e04d      	b.n	8005630 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	2bff      	cmp	r3, #255	@ 0xff
 800559c:	d90e      	bls.n	80055bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	22ff      	movs	r2, #255	@ 0xff
 80055a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	8979      	ldrh	r1, [r7, #10]
 80055ac:	2300      	movs	r3, #0
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fbf9 	bl	8005dac <I2C_TransferConfig>
 80055ba:	e00f      	b.n	80055dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	8979      	ldrh	r1, [r7, #10]
 80055ce:	2300      	movs	r3, #0
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fbe8 	bl	8005dac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d19e      	bne.n	8005524 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 faba 	bl	8005b64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e01a      	b.n	8005630 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2220      	movs	r2, #32
 8005600:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6859      	ldr	r1, [r3, #4]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b0a      	ldr	r3, [pc, #40]	@ (8005638 <HAL_I2C_Mem_Write+0x224>)
 800560e:	400b      	ands	r3, r1
 8005610:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	fe00e800 	.word	0xfe00e800

0800563c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	4608      	mov	r0, r1
 8005646:	4611      	mov	r1, r2
 8005648:	461a      	mov	r2, r3
 800564a:	4603      	mov	r3, r0
 800564c:	817b      	strh	r3, [r7, #10]
 800564e:	460b      	mov	r3, r1
 8005650:	813b      	strh	r3, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b20      	cmp	r3, #32
 8005660:	f040 80fd 	bne.w	800585e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_I2C_Mem_Read+0x34>
 800566a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	d105      	bne.n	800567c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005676:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0f1      	b.n	8005860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_I2C_Mem_Read+0x4e>
 8005686:	2302      	movs	r3, #2
 8005688:	e0ea      	b.n	8005860 <HAL_I2C_Mem_Read+0x224>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005692:	f7fe fd6f 	bl	8004174 <HAL_GetTick>
 8005696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	2319      	movs	r3, #25
 800569e:	2201      	movs	r2, #1
 80056a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f9bd 	bl	8005a24 <I2C_WaitOnFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0d5      	b.n	8005860 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2222      	movs	r2, #34	@ 0x22
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2240      	movs	r2, #64	@ 0x40
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a3a      	ldr	r2, [r7, #32]
 80056ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80056d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056dc:	88f8      	ldrh	r0, [r7, #6]
 80056de:	893a      	ldrh	r2, [r7, #8]
 80056e0:	8979      	ldrh	r1, [r7, #10]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	9301      	str	r3, [sp, #4]
 80056e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	4603      	mov	r3, r0
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f921 	bl	8005934 <I2C_RequestMemoryRead>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0ad      	b.n	8005860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	2bff      	cmp	r3, #255	@ 0xff
 800570c:	d90e      	bls.n	800572c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005718:	b2da      	uxtb	r2, r3
 800571a:	8979      	ldrh	r1, [r7, #10]
 800571c:	4b52      	ldr	r3, [pc, #328]	@ (8005868 <HAL_I2C_Mem_Read+0x22c>)
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fb41 	bl	8005dac <I2C_TransferConfig>
 800572a:	e00f      	b.n	800574c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573a:	b2da      	uxtb	r2, r3
 800573c:	8979      	ldrh	r1, [r7, #10]
 800573e:	4b4a      	ldr	r3, [pc, #296]	@ (8005868 <HAL_I2C_Mem_Read+0x22c>)
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fb30 	bl	8005dac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005752:	2200      	movs	r2, #0
 8005754:	2104      	movs	r1, #4
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f964 	bl	8005a24 <I2C_WaitOnFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e07c      	b.n	8005860 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d034      	beq.n	800580c <HAL_I2C_Mem_Read+0x1d0>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d130      	bne.n	800580c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b0:	2200      	movs	r2, #0
 80057b2:	2180      	movs	r1, #128	@ 0x80
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f935 	bl	8005a24 <I2C_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e04d      	b.n	8005860 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2bff      	cmp	r3, #255	@ 0xff
 80057cc:	d90e      	bls.n	80057ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	8979      	ldrh	r1, [r7, #10]
 80057dc:	2300      	movs	r3, #0
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fae1 	bl	8005dac <I2C_TransferConfig>
 80057ea:	e00f      	b.n	800580c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	8979      	ldrh	r1, [r7, #10]
 80057fe:	2300      	movs	r3, #0
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fad0 	bl	8005dac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d19a      	bne.n	800574c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f9a2 	bl	8005b64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e01a      	b.n	8005860 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2220      	movs	r2, #32
 8005830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6859      	ldr	r1, [r3, #4]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <HAL_I2C_Mem_Read+0x230>)
 800583e:	400b      	ands	r3, r1
 8005840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	e000      	b.n	8005860 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800585e:	2302      	movs	r3, #2
  }
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	80002400 	.word	0x80002400
 800586c:	fe00e800 	.word	0xfe00e800

08005870 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587e:	b2db      	uxtb	r3, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af02      	add	r7, sp, #8
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	4608      	mov	r0, r1
 8005896:	4611      	mov	r1, r2
 8005898:	461a      	mov	r2, r3
 800589a:	4603      	mov	r3, r0
 800589c:	817b      	strh	r3, [r7, #10]
 800589e:	460b      	mov	r3, r1
 80058a0:	813b      	strh	r3, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	8979      	ldrh	r1, [r7, #10]
 80058ac:	4b20      	ldr	r3, [pc, #128]	@ (8005930 <I2C_RequestMemoryWrite+0xa4>)
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fa79 	bl	8005dac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	69b9      	ldr	r1, [r7, #24]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f909 	bl	8005ad6 <I2C_WaitOnTXISFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e02c      	b.n	8005928 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d105      	bne.n	80058e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058d4:	893b      	ldrh	r3, [r7, #8]
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80058de:	e015      	b.n	800590c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058e0:	893b      	ldrh	r3, [r7, #8]
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f8ef 	bl	8005ad6 <I2C_WaitOnTXISFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e012      	b.n	8005928 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005902:	893b      	ldrh	r3, [r7, #8]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2200      	movs	r2, #0
 8005914:	2180      	movs	r1, #128	@ 0x80
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f884 	bl	8005a24 <I2C_WaitOnFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	80002000 	.word	0x80002000

08005934 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	4608      	mov	r0, r1
 800593e:	4611      	mov	r1, r2
 8005940:	461a      	mov	r2, r3
 8005942:	4603      	mov	r3, r0
 8005944:	817b      	strh	r3, [r7, #10]
 8005946:	460b      	mov	r3, r1
 8005948:	813b      	strh	r3, [r7, #8]
 800594a:	4613      	mov	r3, r2
 800594c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	b2da      	uxtb	r2, r3
 8005952:	8979      	ldrh	r1, [r7, #10]
 8005954:	4b20      	ldr	r3, [pc, #128]	@ (80059d8 <I2C_RequestMemoryRead+0xa4>)
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	2300      	movs	r3, #0
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 fa26 	bl	8005dac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	69b9      	ldr	r1, [r7, #24]
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f8b6 	bl	8005ad6 <I2C_WaitOnTXISFlagUntilTimeout>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e02c      	b.n	80059ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d105      	bne.n	8005986 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800597a:	893b      	ldrh	r3, [r7, #8]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	629a      	str	r2, [r3, #40]	@ 0x28
 8005984:	e015      	b.n	80059b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005986:	893b      	ldrh	r3, [r7, #8]
 8005988:	0a1b      	lsrs	r3, r3, #8
 800598a:	b29b      	uxth	r3, r3
 800598c:	b2da      	uxtb	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	69b9      	ldr	r1, [r7, #24]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f89c 	bl	8005ad6 <I2C_WaitOnTXISFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e012      	b.n	80059ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059a8:	893b      	ldrh	r3, [r7, #8]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2200      	movs	r2, #0
 80059ba:	2140      	movs	r1, #64	@ 0x40
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f831 	bl	8005a24 <I2C_WaitOnFlagUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	80002000 	.word	0x80002000

080059dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d103      	bne.n	80059fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d007      	beq.n	8005a18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	619a      	str	r2, [r3, #24]
  }
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a34:	e03b      	b.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 f8d6 	bl	8005bec <I2C_IsErrorOccurred>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e041      	b.n	8005ace <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d02d      	beq.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a52:	f7fe fb8f 	bl	8004174 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d122      	bne.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d113      	bne.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8a:	f043 0220 	orr.w	r2, r3, #32
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e00f      	b.n	8005ace <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	bf0c      	ite	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	2300      	movne	r3, #0
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d0b4      	beq.n	8005a36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ae2:	e033      	b.n	8005b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f87f 	bl	8005bec <I2C_IsErrorOccurred>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e031      	b.n	8005b5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afe:	d025      	beq.n	8005b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b00:	f7fe fb38 	bl	8004174 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d302      	bcc.n	8005b16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d11a      	bne.n	8005b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d013      	beq.n	8005b4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b28:	f043 0220 	orr.w	r2, r3, #32
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e007      	b.n	8005b5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d1c4      	bne.n	8005ae4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b70:	e02f      	b.n	8005bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f838 	bl	8005bec <I2C_IsErrorOccurred>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e02d      	b.n	8005be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b86:	f7fe faf5 	bl	8004174 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d302      	bcc.n	8005b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11a      	bne.n	8005bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d013      	beq.n	8005bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bae:	f043 0220 	orr.w	r2, r3, #32
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e007      	b.n	8005be2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d1c8      	bne.n	8005b72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08a      	sub	sp, #40	@ 0x28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d068      	beq.n	8005cea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c20:	e049      	b.n	8005cb6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c28:	d045      	beq.n	8005cb6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c2a:	f7fe faa3 	bl	8004174 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d302      	bcc.n	8005c40 <I2C_IsErrorOccurred+0x54>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d13a      	bne.n	8005cb6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c52:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c62:	d121      	bne.n	8005ca8 <I2C_IsErrorOccurred+0xbc>
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c6a:	d01d      	beq.n	8005ca8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005c6c:	7cfb      	ldrb	r3, [r7, #19]
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d01a      	beq.n	8005ca8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c80:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c82:	f7fe fa77 	bl	8004174 <HAL_GetTick>
 8005c86:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c88:	e00e      	b.n	8005ca8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c8a:	f7fe fa73 	bl	8004174 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b19      	cmp	r3, #25
 8005c96:	d907      	bls.n	8005ca8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	f043 0320 	orr.w	r3, r3, #32
 8005c9e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005ca6:	e006      	b.n	8005cb6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d1e9      	bne.n	8005c8a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d003      	beq.n	8005ccc <I2C_IsErrorOccurred+0xe0>
 8005cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0aa      	beq.n	8005c22 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d103      	bne.n	8005cdc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	f043 0304 	orr.w	r3, r3, #4
 8005ce2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00b      	beq.n	8005d14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	f043 0308 	orr.w	r3, r3, #8
 8005d24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	f043 0302 	orr.w	r3, r3, #2
 8005d46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01c      	beq.n	8005d9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f7ff fe3b 	bl	80059dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6859      	ldr	r1, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <I2C_IsErrorOccurred+0x1bc>)
 8005d72:	400b      	ands	r3, r1
 8005d74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3728      	adds	r7, #40	@ 0x28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	fe00e800 	.word	0xfe00e800

08005dac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	607b      	str	r3, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	817b      	strh	r3, [r7, #10]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dbe:	897b      	ldrh	r3, [r7, #10]
 8005dc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005dc4:	7a7b      	ldrb	r3, [r7, #9]
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dcc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	0d5b      	lsrs	r3, r3, #21
 8005de6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005dea:	4b08      	ldr	r3, [pc, #32]	@ (8005e0c <I2C_TransferConfig+0x60>)
 8005dec:	430b      	orrs	r3, r1
 8005dee:	43db      	mvns	r3, r3
 8005df0:	ea02 0103 	and.w	r1, r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	03ff63ff 	.word	0x03ff63ff

08005e10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e1a:	4b23      	ldr	r3, [pc, #140]	@ (8005ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1e:	4a22      	ldr	r2, [pc, #136]	@ (8005ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e26:	4b20      	ldr	r3, [pc, #128]	@ (8005ea8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e32:	4b1e      	ldr	r3, [pc, #120]	@ (8005eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1d      	ldr	r2, [pc, #116]	@ (8005eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e3e:	f7fe f999 	bl	8004174 <HAL_GetTick>
 8005e42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e44:	e009      	b.n	8005e5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e46:	f7fe f995 	bl	8004174 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e54:	d901      	bls.n	8005e5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e022      	b.n	8005ea0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e5a:	4b14      	ldr	r3, [pc, #80]	@ (8005eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e66:	d1ee      	bne.n	8005e46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e68:	4b10      	ldr	r3, [pc, #64]	@ (8005eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a0f      	ldr	r2, [pc, #60]	@ (8005eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e74:	f7fe f97e 	bl	8004174 <HAL_GetTick>
 8005e78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e7a:	e009      	b.n	8005e90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e7c:	f7fe f97a 	bl	8004174 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e8a:	d901      	bls.n	8005e90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e007      	b.n	8005ea0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e90:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e9c:	d1ee      	bne.n	8005e7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40007000 	.word	0x40007000

08005eb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e291      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8087 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ed4:	4b96      	ldr	r3, [pc, #600]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 030c 	and.w	r3, r3, #12
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d00c      	beq.n	8005efa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ee0:	4b93      	ldr	r3, [pc, #588]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 030c 	and.w	r3, r3, #12
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d112      	bne.n	8005f12 <HAL_RCC_OscConfig+0x62>
 8005eec:	4b90      	ldr	r3, [pc, #576]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ef4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ef8:	d10b      	bne.n	8005f12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005efa:	4b8d      	ldr	r3, [pc, #564]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d06c      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x130>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d168      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e26b      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1a:	d106      	bne.n	8005f2a <HAL_RCC_OscConfig+0x7a>
 8005f1c:	4b84      	ldr	r3, [pc, #528]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a83      	ldr	r2, [pc, #524]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	e02e      	b.n	8005f88 <HAL_RCC_OscConfig+0xd8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCC_OscConfig+0x9c>
 8005f32:	4b7f      	ldr	r3, [pc, #508]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a7e      	ldr	r2, [pc, #504]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a7b      	ldr	r2, [pc, #492]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	e01d      	b.n	8005f88 <HAL_RCC_OscConfig+0xd8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f54:	d10c      	bne.n	8005f70 <HAL_RCC_OscConfig+0xc0>
 8005f56:	4b76      	ldr	r3, [pc, #472]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a75      	ldr	r2, [pc, #468]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	4b73      	ldr	r3, [pc, #460]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a72      	ldr	r2, [pc, #456]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	e00b      	b.n	8005f88 <HAL_RCC_OscConfig+0xd8>
 8005f70:	4b6f      	ldr	r3, [pc, #444]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a6e      	ldr	r2, [pc, #440]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	4b6c      	ldr	r3, [pc, #432]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a6b      	ldr	r2, [pc, #428]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d013      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f90:	f7fe f8f0 	bl	8004174 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f98:	f7fe f8ec 	bl	8004174 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b64      	cmp	r3, #100	@ 0x64
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e21f      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005faa:	4b61      	ldr	r3, [pc, #388]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0f0      	beq.n	8005f98 <HAL_RCC_OscConfig+0xe8>
 8005fb6:	e014      	b.n	8005fe2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fe f8dc 	bl	8004174 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc0:	f7fe f8d8 	bl	8004174 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b64      	cmp	r3, #100	@ 0x64
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e20b      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd2:	4b57      	ldr	r3, [pc, #348]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x110>
 8005fde:	e000      	b.n	8005fe2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d069      	beq.n	80060c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fee:	4b50      	ldr	r3, [pc, #320]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 030c 	and.w	r3, r3, #12
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ffa:	4b4d      	ldr	r3, [pc, #308]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	2b08      	cmp	r3, #8
 8006004:	d11c      	bne.n	8006040 <HAL_RCC_OscConfig+0x190>
 8006006:	4b4a      	ldr	r3, [pc, #296]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d116      	bne.n	8006040 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006012:	4b47      	ldr	r3, [pc, #284]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d005      	beq.n	800602a <HAL_RCC_OscConfig+0x17a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d001      	beq.n	800602a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e1df      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800602a:	4b41      	ldr	r3, [pc, #260]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	493d      	ldr	r1, [pc, #244]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 800603a:	4313      	orrs	r3, r2
 800603c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800603e:	e040      	b.n	80060c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d023      	beq.n	8006090 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006048:	4b39      	ldr	r3, [pc, #228]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a38      	ldr	r2, [pc, #224]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fe f88e 	bl	8004174 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800605c:	f7fe f88a 	bl	8004174 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e1bd      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800606e:	4b30      	ldr	r3, [pc, #192]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800607a:	4b2d      	ldr	r3, [pc, #180]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4929      	ldr	r1, [pc, #164]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 800608a:	4313      	orrs	r3, r2
 800608c:	600b      	str	r3, [r1, #0]
 800608e:	e018      	b.n	80060c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006090:	4b27      	ldr	r3, [pc, #156]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a26      	ldr	r2, [pc, #152]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8006096:	f023 0301 	bic.w	r3, r3, #1
 800609a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609c:	f7fe f86a 	bl	8004174 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060a4:	f7fe f866 	bl	8004174 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e199      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060b6:	4b1e      	ldr	r3, [pc, #120]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f0      	bne.n	80060a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d038      	beq.n	8006140 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d019      	beq.n	800610a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060d6:	4b16      	ldr	r3, [pc, #88]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 80060d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060da:	4a15      	ldr	r2, [pc, #84]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e2:	f7fe f847 	bl	8004174 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060ea:	f7fe f843 	bl	8004174 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e176      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 80060fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f0      	beq.n	80060ea <HAL_RCC_OscConfig+0x23a>
 8006108:	e01a      	b.n	8006140 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800610a:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 800610c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800610e:	4a08      	ldr	r2, [pc, #32]	@ (8006130 <HAL_RCC_OscConfig+0x280>)
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006116:	f7fe f82d 	bl	8004174 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800611c:	e00a      	b.n	8006134 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800611e:	f7fe f829 	bl	8004174 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d903      	bls.n	8006134 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e15c      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
 8006130:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006134:	4b91      	ldr	r3, [pc, #580]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1ee      	bne.n	800611e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80a4 	beq.w	8006296 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800614e:	4b8b      	ldr	r3, [pc, #556]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10d      	bne.n	8006176 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800615a:	4b88      	ldr	r3, [pc, #544]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	4a87      	ldr	r2, [pc, #540]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006164:	6413      	str	r3, [r2, #64]	@ 0x40
 8006166:	4b85      	ldr	r3, [pc, #532]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800616e:	60bb      	str	r3, [r7, #8]
 8006170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006172:	2301      	movs	r3, #1
 8006174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006176:	4b82      	ldr	r3, [pc, #520]	@ (8006380 <HAL_RCC_OscConfig+0x4d0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617e:	2b00      	cmp	r3, #0
 8006180:	d118      	bne.n	80061b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006182:	4b7f      	ldr	r3, [pc, #508]	@ (8006380 <HAL_RCC_OscConfig+0x4d0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a7e      	ldr	r2, [pc, #504]	@ (8006380 <HAL_RCC_OscConfig+0x4d0>)
 8006188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800618c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618e:	f7fd fff1 	bl	8004174 <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006196:	f7fd ffed 	bl	8004174 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b64      	cmp	r3, #100	@ 0x64
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e120      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061a8:	4b75      	ldr	r3, [pc, #468]	@ (8006380 <HAL_RCC_OscConfig+0x4d0>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0f0      	beq.n	8006196 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d106      	bne.n	80061ca <HAL_RCC_OscConfig+0x31a>
 80061bc:	4b6f      	ldr	r3, [pc, #444]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80061be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c0:	4a6e      	ldr	r2, [pc, #440]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80061c2:	f043 0301 	orr.w	r3, r3, #1
 80061c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061c8:	e02d      	b.n	8006226 <HAL_RCC_OscConfig+0x376>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10c      	bne.n	80061ec <HAL_RCC_OscConfig+0x33c>
 80061d2:	4b6a      	ldr	r3, [pc, #424]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d6:	4a69      	ldr	r2, [pc, #420]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80061d8:	f023 0301 	bic.w	r3, r3, #1
 80061dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80061de:	4b67      	ldr	r3, [pc, #412]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e2:	4a66      	ldr	r2, [pc, #408]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80061e4:	f023 0304 	bic.w	r3, r3, #4
 80061e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ea:	e01c      	b.n	8006226 <HAL_RCC_OscConfig+0x376>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b05      	cmp	r3, #5
 80061f2:	d10c      	bne.n	800620e <HAL_RCC_OscConfig+0x35e>
 80061f4:	4b61      	ldr	r3, [pc, #388]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f8:	4a60      	ldr	r2, [pc, #384]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80061fa:	f043 0304 	orr.w	r3, r3, #4
 80061fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006200:	4b5e      	ldr	r3, [pc, #376]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006204:	4a5d      	ldr	r2, [pc, #372]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	6713      	str	r3, [r2, #112]	@ 0x70
 800620c:	e00b      	b.n	8006226 <HAL_RCC_OscConfig+0x376>
 800620e:	4b5b      	ldr	r3, [pc, #364]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006212:	4a5a      	ldr	r2, [pc, #360]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	6713      	str	r3, [r2, #112]	@ 0x70
 800621a:	4b58      	ldr	r3, [pc, #352]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621e:	4a57      	ldr	r2, [pc, #348]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006220:	f023 0304 	bic.w	r3, r3, #4
 8006224:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d015      	beq.n	800625a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622e:	f7fd ffa1 	bl	8004174 <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006234:	e00a      	b.n	800624c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006236:	f7fd ff9d 	bl	8004174 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006244:	4293      	cmp	r3, r2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e0ce      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624c:	4b4b      	ldr	r3, [pc, #300]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0ee      	beq.n	8006236 <HAL_RCC_OscConfig+0x386>
 8006258:	e014      	b.n	8006284 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625a:	f7fd ff8b 	bl	8004174 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006260:	e00a      	b.n	8006278 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006262:	f7fd ff87 	bl	8004174 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006270:	4293      	cmp	r3, r2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e0b8      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006278:	4b40      	ldr	r3, [pc, #256]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 800627a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1ee      	bne.n	8006262 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d105      	bne.n	8006296 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800628a:	4b3c      	ldr	r3, [pc, #240]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	4a3b      	ldr	r2, [pc, #236]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006294:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 80a4 	beq.w	80063e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062a0:	4b36      	ldr	r3, [pc, #216]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f003 030c 	and.w	r3, r3, #12
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d06b      	beq.n	8006384 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d149      	bne.n	8006348 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b4:	4b31      	ldr	r3, [pc, #196]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a30      	ldr	r2, [pc, #192]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80062ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c0:	f7fd ff58 	bl	8004174 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c8:	f7fd ff54 	bl	8004174 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e087      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062da:	4b28      	ldr	r3, [pc, #160]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f4:	019b      	lsls	r3, r3, #6
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	3b01      	subs	r3, #1
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006308:	061b      	lsls	r3, r3, #24
 800630a:	4313      	orrs	r3, r2
 800630c:	4a1b      	ldr	r2, [pc, #108]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 800630e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006312:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006314:	4b19      	ldr	r3, [pc, #100]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a18      	ldr	r2, [pc, #96]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 800631a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800631e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fd ff28 	bl	8004174 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006328:	f7fd ff24 	bl	8004174 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e057      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800633a:	4b10      	ldr	r3, [pc, #64]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0x478>
 8006346:	e04f      	b.n	80063e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006348:	4b0c      	ldr	r3, [pc, #48]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a0b      	ldr	r2, [pc, #44]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 800634e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fd ff0e 	bl	8004174 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635c:	f7fd ff0a 	bl	8004174 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e03d      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800636e:	4b03      	ldr	r3, [pc, #12]	@ (800637c <HAL_RCC_OscConfig+0x4cc>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f0      	bne.n	800635c <HAL_RCC_OscConfig+0x4ac>
 800637a:	e035      	b.n	80063e8 <HAL_RCC_OscConfig+0x538>
 800637c:	40023800 	.word	0x40023800
 8006380:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006384:	4b1b      	ldr	r3, [pc, #108]	@ (80063f4 <HAL_RCC_OscConfig+0x544>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d028      	beq.n	80063e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800639c:	429a      	cmp	r2, r3
 800639e:	d121      	bne.n	80063e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d11a      	bne.n	80063e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063b4:	4013      	ands	r3, r2
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063bc:	4293      	cmp	r3, r2
 80063be:	d111      	bne.n	80063e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	3b01      	subs	r3, #1
 80063ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d107      	bne.n	80063e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d001      	beq.n	80063e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40023800 	.word	0x40023800

080063f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e0d0      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006410:	4b6a      	ldr	r3, [pc, #424]	@ (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d910      	bls.n	8006440 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641e:	4b67      	ldr	r3, [pc, #412]	@ (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f023 020f 	bic.w	r2, r3, #15
 8006426:	4965      	ldr	r1, [pc, #404]	@ (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	4b63      	ldr	r3, [pc, #396]	@ (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d001      	beq.n	8006440 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e0b8      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d020      	beq.n	800648e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006458:	4b59      	ldr	r3, [pc, #356]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	4a58      	ldr	r2, [pc, #352]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800645e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006462:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006470:	4b53      	ldr	r3, [pc, #332]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	4a52      	ldr	r2, [pc, #328]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006476:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800647a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800647c:	4b50      	ldr	r3, [pc, #320]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	494d      	ldr	r1, [pc, #308]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800648a:	4313      	orrs	r3, r2
 800648c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d040      	beq.n	800651c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d107      	bne.n	80064b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064a2:	4b47      	ldr	r3, [pc, #284]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d115      	bne.n	80064da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e07f      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d107      	bne.n	80064ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ba:	4b41      	ldr	r3, [pc, #260]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e073      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ca:	4b3d      	ldr	r3, [pc, #244]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e06b      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064da:	4b39      	ldr	r3, [pc, #228]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f023 0203 	bic.w	r2, r3, #3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	4936      	ldr	r1, [pc, #216]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ec:	f7fd fe42 	bl	8004174 <HAL_GetTick>
 80064f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	e00a      	b.n	800650a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f4:	f7fd fe3e 	bl	8004174 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e053      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800650a:	4b2d      	ldr	r3, [pc, #180]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 020c 	and.w	r2, r3, #12
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	429a      	cmp	r2, r3
 800651a:	d1eb      	bne.n	80064f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800651c:	4b27      	ldr	r3, [pc, #156]	@ (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d210      	bcs.n	800654c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652a:	4b24      	ldr	r3, [pc, #144]	@ (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 020f 	bic.w	r2, r3, #15
 8006532:	4922      	ldr	r1, [pc, #136]	@ (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	4313      	orrs	r3, r2
 8006538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800653a:	4b20      	ldr	r3, [pc, #128]	@ (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e032      	b.n	80065b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006558:	4b19      	ldr	r3, [pc, #100]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4916      	ldr	r1, [pc, #88]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006566:	4313      	orrs	r3, r2
 8006568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006576:	4b12      	ldr	r3, [pc, #72]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	490e      	ldr	r1, [pc, #56]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006586:	4313      	orrs	r3, r2
 8006588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800658a:	f000 f821 	bl	80065d0 <HAL_RCC_GetSysClockFreq>
 800658e:	4602      	mov	r2, r0
 8006590:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	091b      	lsrs	r3, r3, #4
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	490a      	ldr	r1, [pc, #40]	@ (80065c4 <HAL_RCC_ClockConfig+0x1cc>)
 800659c:	5ccb      	ldrb	r3, [r1, r3]
 800659e:	fa22 f303 	lsr.w	r3, r2, r3
 80065a2:	4a09      	ldr	r2, [pc, #36]	@ (80065c8 <HAL_RCC_ClockConfig+0x1d0>)
 80065a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065a6:	4b09      	ldr	r3, [pc, #36]	@ (80065cc <HAL_RCC_ClockConfig+0x1d4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fd fd9e 	bl	80040ec <HAL_InitTick>

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40023c00 	.word	0x40023c00
 80065c0:	40023800 	.word	0x40023800
 80065c4:	0800b238 	.word	0x0800b238
 80065c8:	20000000 	.word	0x20000000
 80065cc:	20000044 	.word	0x20000044

080065d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d4:	b090      	sub	sp, #64	@ 0x40
 80065d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	637b      	str	r3, [r7, #52]	@ 0x34
 80065dc:	2300      	movs	r3, #0
 80065de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065e0:	2300      	movs	r3, #0
 80065e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065e8:	4b59      	ldr	r3, [pc, #356]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 030c 	and.w	r3, r3, #12
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d00d      	beq.n	8006610 <HAL_RCC_GetSysClockFreq+0x40>
 80065f4:	2b08      	cmp	r3, #8
 80065f6:	f200 80a1 	bhi.w	800673c <HAL_RCC_GetSysClockFreq+0x16c>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_RCC_GetSysClockFreq+0x34>
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d003      	beq.n	800660a <HAL_RCC_GetSysClockFreq+0x3a>
 8006602:	e09b      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006604:	4b53      	ldr	r3, [pc, #332]	@ (8006754 <HAL_RCC_GetSysClockFreq+0x184>)
 8006606:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006608:	e09b      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800660a:	4b53      	ldr	r3, [pc, #332]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x188>)
 800660c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800660e:	e098      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006610:	4b4f      	ldr	r3, [pc, #316]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006618:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800661a:	4b4d      	ldr	r3, [pc, #308]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d028      	beq.n	8006678 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006626:	4b4a      	ldr	r3, [pc, #296]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	099b      	lsrs	r3, r3, #6
 800662c:	2200      	movs	r2, #0
 800662e:	623b      	str	r3, [r7, #32]
 8006630:	627a      	str	r2, [r7, #36]	@ 0x24
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006638:	2100      	movs	r1, #0
 800663a:	4b47      	ldr	r3, [pc, #284]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x188>)
 800663c:	fb03 f201 	mul.w	r2, r3, r1
 8006640:	2300      	movs	r3, #0
 8006642:	fb00 f303 	mul.w	r3, r0, r3
 8006646:	4413      	add	r3, r2
 8006648:	4a43      	ldr	r2, [pc, #268]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x188>)
 800664a:	fba0 1202 	umull	r1, r2, r0, r2
 800664e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006650:	460a      	mov	r2, r1
 8006652:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006656:	4413      	add	r3, r2
 8006658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800665a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665c:	2200      	movs	r2, #0
 800665e:	61bb      	str	r3, [r7, #24]
 8006660:	61fa      	str	r2, [r7, #28]
 8006662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006666:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800666a:	f7fa fabd 	bl	8000be8 <__aeabi_uldivmod>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4613      	mov	r3, r2
 8006674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006676:	e053      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006678:	4b35      	ldr	r3, [pc, #212]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	099b      	lsrs	r3, r3, #6
 800667e:	2200      	movs	r2, #0
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	617a      	str	r2, [r7, #20]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800668a:	f04f 0b00 	mov.w	fp, #0
 800668e:	4652      	mov	r2, sl
 8006690:	465b      	mov	r3, fp
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f04f 0100 	mov.w	r1, #0
 800669a:	0159      	lsls	r1, r3, #5
 800669c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066a0:	0150      	lsls	r0, r2, #5
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	ebb2 080a 	subs.w	r8, r2, sl
 80066aa:	eb63 090b 	sbc.w	r9, r3, fp
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80066ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80066c2:	ebb2 0408 	subs.w	r4, r2, r8
 80066c6:	eb63 0509 	sbc.w	r5, r3, r9
 80066ca:	f04f 0200 	mov.w	r2, #0
 80066ce:	f04f 0300 	mov.w	r3, #0
 80066d2:	00eb      	lsls	r3, r5, #3
 80066d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066d8:	00e2      	lsls	r2, r4, #3
 80066da:	4614      	mov	r4, r2
 80066dc:	461d      	mov	r5, r3
 80066de:	eb14 030a 	adds.w	r3, r4, sl
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	eb45 030b 	adc.w	r3, r5, fp
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066f6:	4629      	mov	r1, r5
 80066f8:	028b      	lsls	r3, r1, #10
 80066fa:	4621      	mov	r1, r4
 80066fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006700:	4621      	mov	r1, r4
 8006702:	028a      	lsls	r2, r1, #10
 8006704:	4610      	mov	r0, r2
 8006706:	4619      	mov	r1, r3
 8006708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670a:	2200      	movs	r2, #0
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	60fa      	str	r2, [r7, #12]
 8006710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006714:	f7fa fa68 	bl	8000be8 <__aeabi_uldivmod>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4613      	mov	r3, r2
 800671e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006720:	4b0b      	ldr	r3, [pc, #44]	@ (8006750 <HAL_RCC_GetSysClockFreq+0x180>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	3301      	adds	r3, #1
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006730:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800673a:	e002      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800673c:	4b05      	ldr	r3, [pc, #20]	@ (8006754 <HAL_RCC_GetSysClockFreq+0x184>)
 800673e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006744:	4618      	mov	r0, r3
 8006746:	3740      	adds	r7, #64	@ 0x40
 8006748:	46bd      	mov	sp, r7
 800674a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800674e:	bf00      	nop
 8006750:	40023800 	.word	0x40023800
 8006754:	00f42400 	.word	0x00f42400
 8006758:	017d7840 	.word	0x017d7840

0800675c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006760:	4b03      	ldr	r3, [pc, #12]	@ (8006770 <HAL_RCC_GetHCLKFreq+0x14>)
 8006762:	681b      	ldr	r3, [r3, #0]
}
 8006764:	4618      	mov	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	20000000 	.word	0x20000000

08006774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006778:	f7ff fff0 	bl	800675c <HAL_RCC_GetHCLKFreq>
 800677c:	4602      	mov	r2, r0
 800677e:	4b05      	ldr	r3, [pc, #20]	@ (8006794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	0a9b      	lsrs	r3, r3, #10
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	4903      	ldr	r1, [pc, #12]	@ (8006798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800678a:	5ccb      	ldrb	r3, [r1, r3]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40023800 	.word	0x40023800
 8006798:	0800b248 	.word	0x0800b248

0800679c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067a0:	f7ff ffdc 	bl	800675c <HAL_RCC_GetHCLKFreq>
 80067a4:	4602      	mov	r2, r0
 80067a6:	4b05      	ldr	r3, [pc, #20]	@ (80067bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	0b5b      	lsrs	r3, r3, #13
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	4903      	ldr	r1, [pc, #12]	@ (80067c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067b2:	5ccb      	ldrb	r3, [r1, r3]
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40023800 	.word	0x40023800
 80067c0:	0800b248 	.word	0x0800b248

080067c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d012      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067ec:	4b69      	ldr	r3, [pc, #420]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4a68      	ldr	r2, [pc, #416]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80067f6:	6093      	str	r3, [r2, #8]
 80067f8:	4b66      	ldr	r3, [pc, #408]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006800:	4964      	ldr	r1, [pc, #400]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006802:	4313      	orrs	r3, r2
 8006804:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800680e:	2301      	movs	r3, #1
 8006810:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d017      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800681e:	4b5d      	ldr	r3, [pc, #372]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006820:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006824:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800682c:	4959      	ldr	r1, [pc, #356]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800683c:	d101      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800683e:	2301      	movs	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800684a:	2301      	movs	r3, #1
 800684c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d017      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800685a:	4b4e      	ldr	r3, [pc, #312]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800685c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006860:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006868:	494a      	ldr	r1, [pc, #296]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006874:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006878:	d101      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800687a:	2301      	movs	r3, #1
 800687c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006886:	2301      	movs	r3, #1
 8006888:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006896:	2301      	movs	r3, #1
 8006898:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 808b 	beq.w	80069be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068a8:	4b3a      	ldr	r3, [pc, #232]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ac:	4a39      	ldr	r2, [pc, #228]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80068b4:	4b37      	ldr	r3, [pc, #220]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068c0:	4b35      	ldr	r3, [pc, #212]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a34      	ldr	r2, [pc, #208]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068cc:	f7fd fc52 	bl	8004174 <HAL_GetTick>
 80068d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80068d2:	e008      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068d4:	f7fd fc4e 	bl	8004174 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	2b64      	cmp	r3, #100	@ 0x64
 80068e0:	d901      	bls.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e357      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80068e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0f0      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068f2:	4b28      	ldr	r3, [pc, #160]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d035      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	429a      	cmp	r2, r3
 800690e:	d02e      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006910:	4b20      	ldr	r3, [pc, #128]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006918:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800691a:	4b1e      	ldr	r3, [pc, #120]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800691c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691e:	4a1d      	ldr	r2, [pc, #116]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006924:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006926:	4b1b      	ldr	r3, [pc, #108]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692a:	4a1a      	ldr	r2, [pc, #104]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800692c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006930:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006932:	4a18      	ldr	r2, [pc, #96]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006938:	4b16      	ldr	r3, [pc, #88]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	d114      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fd fc16 	bl	8004174 <HAL_GetTick>
 8006948:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800694a:	e00a      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fd fc12 	bl	8004174 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e319      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006962:	4b0c      	ldr	r3, [pc, #48]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0ee      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800697a:	d111      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800697c:	4b05      	ldr	r3, [pc, #20]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006988:	4b04      	ldr	r3, [pc, #16]	@ (800699c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800698a:	400b      	ands	r3, r1
 800698c:	4901      	ldr	r1, [pc, #4]	@ (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800698e:	4313      	orrs	r3, r2
 8006990:	608b      	str	r3, [r1, #8]
 8006992:	e00b      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006994:	40023800 	.word	0x40023800
 8006998:	40007000 	.word	0x40007000
 800699c:	0ffffcff 	.word	0x0ffffcff
 80069a0:	4baa      	ldr	r3, [pc, #680]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	4aa9      	ldr	r2, [pc, #676]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80069aa:	6093      	str	r3, [r2, #8]
 80069ac:	4ba7      	ldr	r3, [pc, #668]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b8:	49a4      	ldr	r1, [pc, #656]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d010      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069ca:	4ba0      	ldr	r3, [pc, #640]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069d0:	4a9e      	ldr	r2, [pc, #632]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80069da:	4b9c      	ldr	r3, [pc, #624]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e4:	4999      	ldr	r1, [pc, #612]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069f8:	4b94      	ldr	r3, [pc, #592]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a06:	4991      	ldr	r1, [pc, #580]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a1a:	4b8c      	ldr	r3, [pc, #560]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a28:	4988      	ldr	r1, [pc, #544]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a3c:	4b83      	ldr	r3, [pc, #524]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a4a:	4980      	ldr	r1, [pc, #512]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6c:	4977      	ldr	r1, [pc, #476]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a80:	4b72      	ldr	r3, [pc, #456]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a86:	f023 0203 	bic.w	r2, r3, #3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8e:	496f      	ldr	r1, [pc, #444]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa8:	f023 020c 	bic.w	r2, r3, #12
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ab0:	4966      	ldr	r1, [pc, #408]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ac4:	4b61      	ldr	r3, [pc, #388]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ad2:	495e      	ldr	r1, [pc, #376]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ae6:	4b59      	ldr	r3, [pc, #356]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af4:	4955      	ldr	r1, [pc, #340]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b08:	4b50      	ldr	r3, [pc, #320]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b16:	494d      	ldr	r1, [pc, #308]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006b2a:	4b48      	ldr	r3, [pc, #288]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b30:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b38:	4944      	ldr	r1, [pc, #272]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006b4c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b52:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b5a:	493c      	ldr	r1, [pc, #240]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006b6e:	4b37      	ldr	r3, [pc, #220]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b7c:	4933      	ldr	r1, [pc, #204]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b90:	4b2e      	ldr	r3, [pc, #184]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b96:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b9e:	492b      	ldr	r1, [pc, #172]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d011      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006bb2:	4b26      	ldr	r3, [pc, #152]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bc0:	4922      	ldr	r1, [pc, #136]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bd0:	d101      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006be2:	2301      	movs	r3, #1
 8006be4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bf2:	4b16      	ldr	r3, [pc, #88]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c00:	4912      	ldr	r1, [pc, #72]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00b      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c14:	4b0d      	ldr	r3, [pc, #52]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c24:	4909      	ldr	r1, [pc, #36]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d006      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80d9 	beq.w	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c40:	4b02      	ldr	r3, [pc, #8]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a01      	ldr	r2, [pc, #4]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c4a:	e001      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c52:	f7fd fa8f 	bl	8004174 <HAL_GetTick>
 8006c56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c58:	e008      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c5a:	f7fd fa8b 	bl	8004174 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b64      	cmp	r3, #100	@ 0x64
 8006c66:	d901      	bls.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e194      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f0      	bne.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d021      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d11d      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006c8c:	4b64      	ldr	r3, [pc, #400]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c92:	0c1b      	lsrs	r3, r3, #16
 8006c94:	f003 0303 	and.w	r3, r3, #3
 8006c98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006c9a:	4b61      	ldr	r3, [pc, #388]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ca0:	0e1b      	lsrs	r3, r3, #24
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	019a      	lsls	r2, r3, #6
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	041b      	lsls	r3, r3, #16
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	061b      	lsls	r3, r3, #24
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	071b      	lsls	r3, r3, #28
 8006cc0:	4957      	ldr	r1, [pc, #348]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cdc:	d00a      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d02e      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cf2:	d129      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cfa:	0c1b      	lsrs	r3, r3, #16
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d02:	4b47      	ldr	r3, [pc, #284]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d08:	0f1b      	lsrs	r3, r3, #28
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	019a      	lsls	r2, r3, #6
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	041b      	lsls	r3, r3, #16
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	061b      	lsls	r3, r3, #24
 8006d22:	431a      	orrs	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	071b      	lsls	r3, r3, #28
 8006d28:	493d      	ldr	r1, [pc, #244]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006d30:	4b3b      	ldr	r3, [pc, #236]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d36:	f023 021f 	bic.w	r2, r3, #31
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4937      	ldr	r1, [pc, #220]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01d      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d54:	4b32      	ldr	r3, [pc, #200]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d5a:	0e1b      	lsrs	r3, r3, #24
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d62:	4b2f      	ldr	r3, [pc, #188]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d68:	0f1b      	lsrs	r3, r3, #28
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	019a      	lsls	r2, r3, #6
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	041b      	lsls	r3, r3, #16
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	061b      	lsls	r3, r3, #24
 8006d82:	431a      	orrs	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	071b      	lsls	r3, r3, #28
 8006d88:	4925      	ldr	r1, [pc, #148]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d011      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	019a      	lsls	r2, r3, #6
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	041b      	lsls	r3, r3, #16
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	061b      	lsls	r3, r3, #24
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	071b      	lsls	r3, r3, #28
 8006db8:	4919      	ldr	r1, [pc, #100]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006dc0:	4b17      	ldr	r3, [pc, #92]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a16      	ldr	r2, [pc, #88]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dcc:	f7fd f9d2 	bl	8004174 <HAL_GetTick>
 8006dd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006dd4:	f7fd f9ce 	bl	8004174 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b64      	cmp	r3, #100	@ 0x64
 8006de0:	d901      	bls.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e0d7      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006de6:	4b0e      	ldr	r3, [pc, #56]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f0      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	f040 80cd 	bne.w	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006dfa:	4b09      	ldr	r3, [pc, #36]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a08      	ldr	r2, [pc, #32]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e06:	f7fd f9b5 	bl	8004174 <HAL_GetTick>
 8006e0a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e0c:	e00a      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e0e:	f7fd f9b1 	bl	8004174 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b64      	cmp	r3, #100	@ 0x64
 8006e1a:	d903      	bls.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e0ba      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006e20:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e24:	4b5e      	ldr	r3, [pc, #376]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e30:	d0ed      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d009      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d02e      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d12a      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006e5a:	4b51      	ldr	r3, [pc, #324]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e60:	0c1b      	lsrs	r3, r3, #16
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e68:	4b4d      	ldr	r3, [pc, #308]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6e:	0f1b      	lsrs	r3, r3, #28
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	019a      	lsls	r2, r3, #6
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	041b      	lsls	r3, r3, #16
 8006e80:	431a      	orrs	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	061b      	lsls	r3, r3, #24
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	071b      	lsls	r3, r3, #28
 8006e8e:	4944      	ldr	r1, [pc, #272]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006e96:	4b42      	ldr	r3, [pc, #264]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e9c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	021b      	lsls	r3, r3, #8
 8006ea8:	493d      	ldr	r1, [pc, #244]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d022      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ec0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ec4:	d11d      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ec6:	4b36      	ldr	r3, [pc, #216]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ecc:	0e1b      	lsrs	r3, r3, #24
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ed4:	4b32      	ldr	r3, [pc, #200]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eda:	0f1b      	lsrs	r3, r3, #28
 8006edc:	f003 0307 	and.w	r3, r3, #7
 8006ee0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	019a      	lsls	r2, r3, #6
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	041b      	lsls	r3, r3, #16
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	061b      	lsls	r3, r3, #24
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	071b      	lsls	r3, r3, #28
 8006efa:	4929      	ldr	r1, [pc, #164]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d028      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f0e:	4b24      	ldr	r3, [pc, #144]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f14:	0e1b      	lsrs	r3, r3, #24
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006f1c:	4b20      	ldr	r3, [pc, #128]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f22:	0c1b      	lsrs	r3, r3, #16
 8006f24:	f003 0303 	and.w	r3, r3, #3
 8006f28:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	019a      	lsls	r2, r3, #6
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	041b      	lsls	r3, r3, #16
 8006f34:	431a      	orrs	r2, r3
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	061b      	lsls	r3, r3, #24
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	071b      	lsls	r3, r3, #28
 8006f42:	4917      	ldr	r1, [pc, #92]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006f4a:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f58:	4911      	ldr	r1, [pc, #68]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f60:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a0e      	ldr	r2, [pc, #56]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f6c:	f7fd f902 	bl	8004174 <HAL_GetTick>
 8006f70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f72:	e008      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f74:	f7fd f8fe 	bl	8004174 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b64      	cmp	r3, #100	@ 0x64
 8006f80:	d901      	bls.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e007      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f86:	4b06      	ldr	r3, [pc, #24]	@ (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f92:	d1ef      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3720      	adds	r7, #32
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40023800 	.word	0x40023800

08006fa4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a80      	ldr	r2, [pc, #512]	@ (80071b4 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8006fb4:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006fb6:	4b80      	ldr	r3, [pc, #512]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fbc:	099b      	lsrs	r3, r3, #6
 8006fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fcc:	0c1b      	lsrs	r3, r3, #16
 8006fce:	f003 0203 	and.w	r2, r3, #3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006fd6:	4b78      	ldr	r3, [pc, #480]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fdc:	0e1b      	lsrs	r3, r3, #24
 8006fde:	f003 020f 	and.w	r2, r3, #15
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fe6:	4b74      	ldr	r3, [pc, #464]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fec:	0f1b      	lsrs	r3, r3, #28
 8006fee:	f003 0207 	and.w	r2, r3, #7
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8006ff6:	4b70      	ldr	r3, [pc, #448]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffc:	099b      	lsrs	r3, r3, #6
 8006ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007006:	4b6c      	ldr	r3, [pc, #432]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	f003 0203 	and.w	r2, r3, #3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007016:	4b68      	ldr	r3, [pc, #416]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701c:	0e1b      	lsrs	r3, r3, #24
 800701e:	f003 020f 	and.w	r2, r3, #15
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007026:	4b64      	ldr	r3, [pc, #400]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800702c:	0f1b      	lsrs	r3, r3, #28
 800702e:	f003 0207 	and.w	r2, r3, #7
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8007036:	4b60      	ldr	r3, [pc, #384]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800703c:	f003 021f 	and.w	r2, r3, #31
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8007044:	4b5c      	ldr	r3, [pc, #368]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800704a:	0a1b      	lsrs	r3, r3, #8
 800704c:	f003 021f 	and.w	r2, r3, #31
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8007054:	4b58      	ldr	r3, [pc, #352]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007056:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800705a:	0c1b      	lsrs	r3, r3, #16
 800705c:	f003 0203 	and.w	r2, r3, #3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8007064:	4b54      	ldr	r3, [pc, #336]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007066:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800706a:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8007072:	4b51      	ldr	r3, [pc, #324]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007078:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007080:	4b4d      	ldr	r3, [pc, #308]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800708c:	4b4a      	ldr	r3, [pc, #296]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800708e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007092:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800709a:	4b47      	ldr	r3, [pc, #284]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800709c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a0:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80070a8:	4b43      	ldr	r3, [pc, #268]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ae:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80070b6:	4b40      	ldr	r3, [pc, #256]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070bc:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80070c4:	4b3c      	ldr	r3, [pc, #240]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ca:	f003 0203 	and.w	r2, r3, #3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80070d2:	4b39      	ldr	r3, [pc, #228]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d8:	f003 020c 	and.w	r2, r3, #12
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80070e0:	4b35      	ldr	r3, [pc, #212]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e6:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80070ee:	4b32      	ldr	r3, [pc, #200]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f4:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80070fc:	4b2e      	ldr	r3, [pc, #184]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80070fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007102:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800710a:	4b2b      	ldr	r3, [pc, #172]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007110:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007118:	4b27      	ldr	r3, [pc, #156]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800711a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800711e:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8007126:	4b24      	ldr	r3, [pc, #144]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800712c:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007134:	4b20      	ldr	r3, [pc, #128]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800713a:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8007142:	4b1d      	ldr	r3, [pc, #116]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007148:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007150:	4b19      	ldr	r3, [pc, #100]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007156:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800715e:	4b16      	ldr	r3, [pc, #88]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007164:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800716e:	4b12      	ldr	r3, [pc, #72]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007176:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007178:	4b0f      	ldr	r3, [pc, #60]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800717c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007188:	4b0b      	ldr	r3, [pc, #44]	@ (80071b8 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800718a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800718e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d103      	bne.n	800719e <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800719c:	e003      	b.n	80071a6 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071a4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80071a6:	bf00      	nop
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	00fffff1 	.word	0x00fffff1
 80071b8:	40023800 	.word	0x40023800

080071bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80071da:	f040 808d 	bne.w	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 80071de:	4b93      	ldr	r3, [pc, #588]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80071e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071e4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80071ec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071f4:	d07c      	beq.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071fc:	d87b      	bhi.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800720a:	d039      	beq.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800720c:	e073      	b.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800720e:	4b87      	ldr	r3, [pc, #540]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d108      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800721a:	4b84      	ldr	r3, [pc, #528]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007222:	4a83      	ldr	r2, [pc, #524]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007224:	fbb2 f3f3 	udiv	r3, r2, r3
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	e007      	b.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800722c:	4b7f      	ldr	r3, [pc, #508]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007234:	4a7f      	ldr	r2, [pc, #508]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800723c:	4b7b      	ldr	r3, [pc, #492]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007242:	0e1b      	lsrs	r3, r3, #24
 8007244:	f003 030f 	and.w	r3, r3, #15
 8007248:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800724a:	4b78      	ldr	r3, [pc, #480]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800724c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007250:	099b      	lsrs	r3, r3, #6
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	fb03 f202 	mul.w	r2, r3, r2
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007262:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007264:	4b71      	ldr	r3, [pc, #452]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007266:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	3301      	adds	r3, #1
 8007272:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	fbb2 f3f3 	udiv	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]
        break;
 800727e:	e03b      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007280:	4b6a      	ldr	r3, [pc, #424]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d108      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800728c:	4b67      	ldr	r3, [pc, #412]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007294:	4a66      	ldr	r2, [pc, #408]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007296:	fbb2 f3f3 	udiv	r3, r2, r3
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	e007      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800729e:	4b63      	ldr	r3, [pc, #396]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072a6:	4a63      	ldr	r2, [pc, #396]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80072a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80072ae:	4b5f      	ldr	r3, [pc, #380]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80072b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072b4:	0e1b      	lsrs	r3, r3, #24
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80072bc:	4b5b      	ldr	r3, [pc, #364]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80072be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072c2:	099b      	lsrs	r3, r3, #6
 80072c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	fb03 f202 	mul.w	r2, r3, r2
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80072d6:	4b55      	ldr	r3, [pc, #340]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80072d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	3301      	adds	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ec:	617b      	str	r3, [r7, #20]
        break;
 80072ee:	e003      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80072f0:	4b51      	ldr	r3, [pc, #324]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80072f2:	617b      	str	r3, [r7, #20]
        break;
 80072f4:	e000      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80072f6:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072fe:	f040 808d 	bne.w	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007302:	4b4a      	ldr	r3, [pc, #296]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007308:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007310:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007318:	d07c      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007320:	d87b      	bhi.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d004      	beq.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800732e:	d039      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007330:	e073      	b.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007332:	4b3e      	ldr	r3, [pc, #248]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d108      	bne.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800733e:	4b3b      	ldr	r3, [pc, #236]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007346:	4a3a      	ldr	r2, [pc, #232]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007348:	fbb2 f3f3 	udiv	r3, r2, r3
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	e007      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007350:	4b36      	ldr	r3, [pc, #216]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007358:	4a36      	ldr	r2, [pc, #216]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800735a:	fbb2 f3f3 	udiv	r3, r2, r3
 800735e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007360:	4b32      	ldr	r3, [pc, #200]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007366:	0e1b      	lsrs	r3, r3, #24
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800736e:	4b2f      	ldr	r3, [pc, #188]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007374:	099b      	lsrs	r3, r3, #6
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	fb03 f202 	mul.w	r2, r3, r2
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	fbb2 f3f3 	udiv	r3, r2, r3
 8007386:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007388:	4b28      	ldr	r3, [pc, #160]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800738a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800738e:	0a1b      	lsrs	r3, r3, #8
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	3301      	adds	r3, #1
 8007396:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a0:	617b      	str	r3, [r7, #20]
        break;
 80073a2:	e03b      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80073a4:	4b21      	ldr	r3, [pc, #132]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d108      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073b0:	4b1e      	ldr	r3, [pc, #120]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80073ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	e007      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80073c2:	4b1a      	ldr	r3, [pc, #104]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80073cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80073d2:	4b16      	ldr	r3, [pc, #88]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d8:	0e1b      	lsrs	r3, r3, #24
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80073e0:	4b12      	ldr	r3, [pc, #72]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073e6:	099b      	lsrs	r3, r3, #6
 80073e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	fb03 f202 	mul.w	r2, r3, r2
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80073fa:	4b0c      	ldr	r3, [pc, #48]	@ (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007410:	617b      	str	r3, [r7, #20]
        break;
 8007412:	e003      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007414:	4b08      	ldr	r3, [pc, #32]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007416:	617b      	str	r3, [r7, #20]
        break;
 8007418:	e000      	b.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800741a:	bf00      	nop
      }
    }
  }

  return frequency;
 800741c:	697b      	ldr	r3, [r7, #20]
}
 800741e:	4618      	mov	r0, r3
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40023800 	.word	0x40023800
 8007430:	00f42400 	.word	0x00f42400
 8007434:	017d7840 	.word	0x017d7840
 8007438:	00bb8000 	.word	0x00bb8000

0800743c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e156      	b.n	8007708 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fa f956 	bl	8001720 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fb85 	bl	8007b8c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d00c      	beq.n	80074a4 <HAL_SAI_Init+0x68>
 800748a:	2b02      	cmp	r3, #2
 800748c:	d80d      	bhi.n	80074aa <HAL_SAI_Init+0x6e>
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <HAL_SAI_Init+0x5c>
 8007492:	2b01      	cmp	r3, #1
 8007494:	d003      	beq.n	800749e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007496:	e008      	b.n	80074aa <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	61fb      	str	r3, [r7, #28]
      break;
 800749c:	e006      	b.n	80074ac <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800749e:	2310      	movs	r3, #16
 80074a0:	61fb      	str	r3, [r7, #28]
      break;
 80074a2:	e003      	b.n	80074ac <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80074a4:	2320      	movs	r3, #32
 80074a6:	61fb      	str	r3, [r7, #28]
      break;
 80074a8:	e000      	b.n	80074ac <HAL_SAI_Init+0x70>
      break;
 80074aa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d81e      	bhi.n	80074f2 <HAL_SAI_Init+0xb6>
 80074b4:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <HAL_SAI_Init+0x80>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074d3 	.word	0x080074d3
 80074c4:	080074db 	.word	0x080074db
 80074c8:	080074e3 	.word	0x080074e3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]
    }
    break;
 80074d0:	e010      	b.n	80074f4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80074d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074d6:	617b      	str	r3, [r7, #20]
    }
    break;
 80074d8:	e00c      	b.n	80074f4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80074da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80074de:	617b      	str	r3, [r7, #20]
    }
    break;
 80074e0:	e008      	b.n	80074f4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80074e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80074e6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	61fb      	str	r3, [r7, #28]
    }
    break;
 80074f0:	e000      	b.n	80074f4 <HAL_SAI_Init+0xb8>
    default:
      break;
 80074f2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a85      	ldr	r2, [pc, #532]	@ (8007710 <HAL_SAI_Init+0x2d4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d004      	beq.n	8007508 <HAL_SAI_Init+0xcc>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a84      	ldr	r2, [pc, #528]	@ (8007714 <HAL_SAI_Init+0x2d8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d103      	bne.n	8007510 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007508:	4a83      	ldr	r2, [pc, #524]	@ (8007718 <HAL_SAI_Init+0x2dc>)
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	e002      	b.n	8007516 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007510:	4a82      	ldr	r2, [pc, #520]	@ (800771c <HAL_SAI_Init+0x2e0>)
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d04c      	beq.n	80075b8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a7a      	ldr	r2, [pc, #488]	@ (8007710 <HAL_SAI_Init+0x2d4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d004      	beq.n	8007536 <HAL_SAI_Init+0xfa>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a78      	ldr	r2, [pc, #480]	@ (8007714 <HAL_SAI_Init+0x2d8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d104      	bne.n	8007540 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007536:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800753a:	f7ff fe3f 	bl	80071bc <HAL_RCCEx_GetPeriphCLKFreq>
 800753e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a76      	ldr	r2, [pc, #472]	@ (8007720 <HAL_SAI_Init+0x2e4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_SAI_Init+0x118>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a75      	ldr	r2, [pc, #468]	@ (8007724 <HAL_SAI_Init+0x2e8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d104      	bne.n	800755e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007554:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007558:	f7ff fe30 	bl	80071bc <HAL_RCCEx_GetPeriphCLKFreq>
 800755c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	461a      	mov	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69db      	ldr	r3, [r3, #28]
 800756e:	025b      	lsls	r3, r3, #9
 8007570:	fbb2 f3f3 	udiv	r3, r2, r3
 8007574:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4a6b      	ldr	r2, [pc, #428]	@ (8007728 <HAL_SAI_Init+0x2ec>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	08da      	lsrs	r2, r3, #3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007584:	68f9      	ldr	r1, [r7, #12]
 8007586:	4b68      	ldr	r3, [pc, #416]	@ (8007728 <HAL_SAI_Init+0x2ec>)
 8007588:	fba3 2301 	umull	r2, r3, r3, r1
 800758c:	08da      	lsrs	r2, r3, #3
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	1aca      	subs	r2, r1, r3
 8007598:	2a08      	cmp	r2, #8
 800759a:	d904      	bls.n	80075a6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d104      	bne.n	80075b8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	085a      	lsrs	r2, r3, #1
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <HAL_SAI_Init+0x18c>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d109      	bne.n	80075dc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d101      	bne.n	80075d4 <HAL_SAI_Init+0x198>
 80075d0:	2300      	movs	r3, #0
 80075d2:	e001      	b.n	80075d8 <HAL_SAI_Init+0x19c>
 80075d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075d8:	61bb      	str	r3, [r7, #24]
 80075da:	e008      	b.n	80075ee <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d102      	bne.n	80075ea <HAL_SAI_Init+0x1ae>
 80075e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075e8:	e000      	b.n	80075ec <HAL_SAI_Init+0x1b0>
 80075ea:	2300      	movs	r3, #0
 80075ec:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6819      	ldr	r1, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	4b4c      	ldr	r3, [pc, #304]	@ (800772c <HAL_SAI_Init+0x2f0>)
 80075fa:	400b      	ands	r3, r1
 80075fc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6819      	ldr	r1, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007612:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007618:	431a      	orrs	r2, r3
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8007626:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007632:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	051b      	lsls	r3, r3, #20
 800763a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6859      	ldr	r1, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b38      	ldr	r3, [pc, #224]	@ (8007730 <HAL_SAI_Init+0x2f4>)
 8007650:	400b      	ands	r3, r1
 8007652:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6859      	ldr	r1, [r3, #4]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6899      	ldr	r1, [r3, #8]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	4b2d      	ldr	r3, [pc, #180]	@ (8007734 <HAL_SAI_Init+0x2f8>)
 800767e:	400b      	ands	r3, r1
 8007680:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6899      	ldr	r1, [r3, #8]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007692:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007698:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800769e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a4:	3b01      	subs	r3, #1
 80076a6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80076a8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68d9      	ldr	r1, [r3, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80076c0:	400b      	ands	r3, r1
 80076c2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68d9      	ldr	r1, [r3, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076d8:	041b      	lsls	r3, r3, #16
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076e0:	3b01      	subs	r3, #1
 80076e2:	021b      	lsls	r3, r3, #8
 80076e4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3720      	adds	r7, #32
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40015804 	.word	0x40015804
 8007714:	40015824 	.word	0x40015824
 8007718:	40015800 	.word	0x40015800
 800771c:	40015c00 	.word	0x40015c00
 8007720:	40015c04 	.word	0x40015c04
 8007724:	40015c24 	.word	0x40015c24
 8007728:	cccccccd 	.word	0xcccccccd
 800772c:	ff05c010 	.word	0xff05c010
 8007730:	ffff1ff0 	.word	0xffff1ff0
 8007734:	fff88000 	.word	0xfff88000

08007738 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e027      	b.n	800779a <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2200      	movs	r2, #0
 8007758:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f04f 32ff 	mov.w	r2, #4294967295
 8007762:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fa11 	bl	8007b8c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f042 0208 	orr.w	r2, r2, #8
 8007778:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7fa f86e 	bl	800185c <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_SAI_DMAStop+0x1a>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e061      	b.n	8007880 <HAL_SAI_DMAStop+0xde>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f9e1 	bl	8007b8c <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80077d8:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d01c      	beq.n	800781c <HAL_SAI_DMAStop+0x7a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b12      	cmp	r3, #18
 80077ec:	d116      	bne.n	800781c <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fc ff6c 	bl	80046d0 <HAL_DMA_Abort>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00e      	beq.n	800781c <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007804:	2b80      	cmp	r3, #128	@ 0x80
 8007806:	d009      	beq.n	800781c <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007812:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01c      	beq.n	800785e <HAL_SAI_DMAStop+0xbc>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b22      	cmp	r3, #34	@ 0x22
 800782e:	d116      	bne.n	800785e <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007834:	4618      	mov	r0, r3
 8007836:	f7fc ff4b 	bl	80046d0 <HAL_DMA_Abort>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00e      	beq.n	800785e <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007846:	2b80      	cmp	r3, #128	@ 0x80
 8007848:	d009      	beq.n	800785e <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007854:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f042 0208 	orr.w	r2, r2, #8
 800786c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 800787e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007896:	f7fc fc6d 	bl	8004174 <HAL_GetTick>
 800789a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_SAI_Transmit_DMA+0x20>
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e093      	b.n	80079d4 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	f040 808c 	bne.w	80079d2 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_SAI_Transmit_DMA+0x40>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e085      	b.n	80079d4 <HAL_SAI_Transmit_DMA+0x14c>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	88fa      	ldrh	r2, [r7, #6]
 80078e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2212      	movs	r2, #18
 80078f2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078fa:	4a38      	ldr	r2, [pc, #224]	@ (80079dc <HAL_SAI_Transmit_DMA+0x154>)
 80078fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007902:	4a37      	ldr	r2, [pc, #220]	@ (80079e0 <HAL_SAI_Transmit_DMA+0x158>)
 8007904:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800790a:	4a36      	ldr	r2, [pc, #216]	@ (80079e4 <HAL_SAI_Transmit_DMA+0x15c>)
 800790c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007912:	2200      	movs	r2, #0
 8007914:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800791e:	4619      	mov	r1, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	331c      	adds	r3, #28
 8007926:	461a      	mov	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800792e:	f7fc fe6f 	bl	8004610 <HAL_DMA_Start_IT>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e047      	b.n	80079d4 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007944:	2100      	movs	r1, #0
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f8ea 	bl	8007b20 <SAI_InterruptFlag>
 800794c:	4601      	mov	r1, r0
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800796a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800796c:	e015      	b.n	800799a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800796e:	f7fc fc01 	bl	8004174 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800797c:	d90d      	bls.n	800799a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007984:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e01c      	b.n	80079d4 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0e2      	beq.n	800796e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d107      	bne.n	80079c6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80079c4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	e000      	b.n	80079d4 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80079d2:	2302      	movs	r3, #2
  }
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	08007c5d 	.word	0x08007c5d
 80079e0:	08007bfd 	.word	0x08007bfd
 80079e4:	08007cf5 	.word	0x08007cf5

080079e8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <HAL_SAI_Receive_DMA+0x1a>
 80079fc:	88fb      	ldrh	r3, [r7, #6]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e074      	b.n	8007af0 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d16d      	bne.n	8007aee <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d101      	bne.n	8007a20 <HAL_SAI_Receive_DMA+0x38>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e067      	b.n	8007af0 <HAL_SAI_Receive_DMA+0x108>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	88fa      	ldrh	r2, [r7, #6]
 8007a32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	88fa      	ldrh	r2, [r7, #6]
 8007a3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2222      	movs	r2, #34	@ 0x22
 8007a4a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a52:	4a29      	ldr	r2, [pc, #164]	@ (8007af8 <HAL_SAI_Receive_DMA+0x110>)
 8007a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a5a:	4a28      	ldr	r2, [pc, #160]	@ (8007afc <HAL_SAI_Receive_DMA+0x114>)
 8007a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a62:	4a27      	ldr	r2, [pc, #156]	@ (8007b00 <HAL_SAI_Receive_DMA+0x118>)
 8007a64:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	331c      	adds	r3, #28
 8007a78:	4619      	mov	r1, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7e:	461a      	mov	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a86:	f7fc fdc3 	bl	8004610 <HAL_DMA_Start_IT>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e029      	b.n	8007af0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 f83e 	bl	8007b20 <SAI_InterruptFlag>
 8007aa4:	4601      	mov	r1, r0
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	691a      	ldr	r2, [r3, #16]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007ac2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d107      	bne.n	8007ae2 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007ae0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	e000      	b.n	8007af0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8007aee:	2302      	movs	r3, #2
  }
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	08007cd9 	.word	0x08007cd9
 8007afc:	08007c79 	.word	0x08007c79
 8007b00:	08007cf5 	.word	0x08007cf5

08007b04 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007b12:	b2db      	uxtb	r3, r3
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d103      	bne.n	8007b3c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f043 0308 	orr.w	r3, r3, #8
 8007b3a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d10b      	bne.n	8007b5c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d003      	beq.n	8007b54 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d103      	bne.n	8007b5c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f043 0310 	orr.w	r3, r3, #16
 8007b5a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d003      	beq.n	8007b6c <SAI_InterruptFlag+0x4c>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d104      	bne.n	8007b76 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	e003      	b.n	8007b7e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f043 0304 	orr.w	r3, r3, #4
 8007b7c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8007b94:	4b17      	ldr	r3, [pc, #92]	@ (8007bf4 <SAI_Disable+0x68>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a17      	ldr	r2, [pc, #92]	@ (8007bf8 <SAI_Disable+0x6c>)
 8007b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9e:	0b1b      	lsrs	r3, r3, #12
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007bb6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	1e5a      	subs	r2, r3, #1
 8007bbc:	60fa      	str	r2, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	72fb      	strb	r3, [r7, #11]
      break;
 8007bd6:	e006      	b.n	8007be6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e8      	bne.n	8007bb8 <SAI_Disable+0x2c>

  return status;
 8007be6:	7afb      	ldrb	r3, [r7, #11]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	20000000 	.word	0x20000000
 8007bf8:	95cbec1b 	.word	0x95cbec1b

08007bfc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c08:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c12:	d01c      	beq.n	8007c4e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007c2a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7ff ff76 	bl	8007b20 <SAI_InterruptFlag>
 8007c34:	4603      	mov	r3, r0
 8007c36:	43d9      	mvns	r1, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	691a      	ldr	r2, [r3, #16]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	400a      	ands	r2, r1
 8007c44:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7fb fe24 	bl	800389c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7fb fe20 	bl	80038b0 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c84:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c8e:	d01c      	beq.n	8007cca <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007c9e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007ca8:	2100      	movs	r1, #0
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f7ff ff38 	bl	8007b20 <SAI_InterruptFlag>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	43d9      	mvns	r1, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	400a      	ands	r2, r1
 8007cc0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7fc f86e 	bl	8003dac <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7fc f86a 	bl	8003dc0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007cec:	bf00      	nop
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d004      	beq.n	8007d26 <SAI_DMAError+0x32>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d112      	bne.n	8007d4c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007d34:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff ff28 	bl	8007b8c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7fb fdb9 	bl	80038c4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e040      	b.n	8007dee <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7f9 ff0d 	bl	8001b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2224      	movs	r2, #36	@ 0x24
 8007d86:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0201 	bic.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fb15 	bl	80083d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f8ae 	bl	8007f08 <UART_SetConfig>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d101      	bne.n	8007db6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e01b      	b.n	8007dee <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0201 	orr.w	r2, r2, #1
 8007de4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fb94 	bl	8008514 <UART_CheckIdleState>
 8007dec:	4603      	mov	r3, r0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b08a      	sub	sp, #40	@ 0x28
 8007dfa:	af02      	add	r7, sp, #8
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	603b      	str	r3, [r7, #0]
 8007e02:	4613      	mov	r3, r2
 8007e04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d177      	bne.n	8007efe <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <HAL_UART_Transmit+0x24>
 8007e14:	88fb      	ldrh	r3, [r7, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e070      	b.n	8007f00 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2221      	movs	r2, #33	@ 0x21
 8007e2a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e2c:	f7fc f9a2 	bl	8004174 <HAL_GetTick>
 8007e30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	88fa      	ldrh	r2, [r7, #6]
 8007e36:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	88fa      	ldrh	r2, [r7, #6]
 8007e3e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e4a:	d108      	bne.n	8007e5e <HAL_UART_Transmit+0x68>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	61bb      	str	r3, [r7, #24]
 8007e5c:	e003      	b.n	8007e66 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e66:	e02f      	b.n	8007ec8 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2180      	movs	r1, #128	@ 0x80
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fba5 	bl	80085c2 <UART_WaitOnFlagUntilTimeout>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2220      	movs	r2, #32
 8007e82:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e03b      	b.n	8007f00 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10b      	bne.n	8007ea6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	3302      	adds	r3, #2
 8007ea2:	61bb      	str	r3, [r7, #24]
 8007ea4:	e007      	b.n	8007eb6 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1c9      	bne.n	8007e68 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2200      	movs	r2, #0
 8007edc:	2140      	movs	r1, #64	@ 0x40
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 fb6f 	bl	80085c2 <UART_WaitOnFlagUntilTimeout>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2220      	movs	r2, #32
 8007eee:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e005      	b.n	8007f00 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	e000      	b.n	8007f00 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007efe:	2302      	movs	r3, #2
  }
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3720      	adds	r7, #32
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	4ba6      	ldr	r3, [pc, #664]	@ (80081cc <UART_SetConfig+0x2c4>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a94      	ldr	r2, [pc, #592]	@ (80081d0 <UART_SetConfig+0x2c8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d120      	bne.n	8007fc6 <UART_SetConfig+0xbe>
 8007f84:	4b93      	ldr	r3, [pc, #588]	@ (80081d4 <UART_SetConfig+0x2cc>)
 8007f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d816      	bhi.n	8007fc0 <UART_SetConfig+0xb8>
 8007f92:	a201      	add	r2, pc, #4	@ (adr r2, 8007f98 <UART_SetConfig+0x90>)
 8007f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007fb5 	.word	0x08007fb5
 8007fa0:	08007faf 	.word	0x08007faf
 8007fa4:	08007fbb 	.word	0x08007fbb
 8007fa8:	2301      	movs	r3, #1
 8007faa:	77fb      	strb	r3, [r7, #31]
 8007fac:	e150      	b.n	8008250 <UART_SetConfig+0x348>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	77fb      	strb	r3, [r7, #31]
 8007fb2:	e14d      	b.n	8008250 <UART_SetConfig+0x348>
 8007fb4:	2304      	movs	r3, #4
 8007fb6:	77fb      	strb	r3, [r7, #31]
 8007fb8:	e14a      	b.n	8008250 <UART_SetConfig+0x348>
 8007fba:	2308      	movs	r3, #8
 8007fbc:	77fb      	strb	r3, [r7, #31]
 8007fbe:	e147      	b.n	8008250 <UART_SetConfig+0x348>
 8007fc0:	2310      	movs	r3, #16
 8007fc2:	77fb      	strb	r3, [r7, #31]
 8007fc4:	e144      	b.n	8008250 <UART_SetConfig+0x348>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a83      	ldr	r2, [pc, #524]	@ (80081d8 <UART_SetConfig+0x2d0>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d132      	bne.n	8008036 <UART_SetConfig+0x12e>
 8007fd0:	4b80      	ldr	r3, [pc, #512]	@ (80081d4 <UART_SetConfig+0x2cc>)
 8007fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd6:	f003 030c 	and.w	r3, r3, #12
 8007fda:	2b0c      	cmp	r3, #12
 8007fdc:	d828      	bhi.n	8008030 <UART_SetConfig+0x128>
 8007fde:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe4 <UART_SetConfig+0xdc>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08008019 	.word	0x08008019
 8007fe8:	08008031 	.word	0x08008031
 8007fec:	08008031 	.word	0x08008031
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008025 	.word	0x08008025
 8007ff8:	08008031 	.word	0x08008031
 8007ffc:	08008031 	.word	0x08008031
 8008000:	08008031 	.word	0x08008031
 8008004:	0800801f 	.word	0x0800801f
 8008008:	08008031 	.word	0x08008031
 800800c:	08008031 	.word	0x08008031
 8008010:	08008031 	.word	0x08008031
 8008014:	0800802b 	.word	0x0800802b
 8008018:	2300      	movs	r3, #0
 800801a:	77fb      	strb	r3, [r7, #31]
 800801c:	e118      	b.n	8008250 <UART_SetConfig+0x348>
 800801e:	2302      	movs	r3, #2
 8008020:	77fb      	strb	r3, [r7, #31]
 8008022:	e115      	b.n	8008250 <UART_SetConfig+0x348>
 8008024:	2304      	movs	r3, #4
 8008026:	77fb      	strb	r3, [r7, #31]
 8008028:	e112      	b.n	8008250 <UART_SetConfig+0x348>
 800802a:	2308      	movs	r3, #8
 800802c:	77fb      	strb	r3, [r7, #31]
 800802e:	e10f      	b.n	8008250 <UART_SetConfig+0x348>
 8008030:	2310      	movs	r3, #16
 8008032:	77fb      	strb	r3, [r7, #31]
 8008034:	e10c      	b.n	8008250 <UART_SetConfig+0x348>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a68      	ldr	r2, [pc, #416]	@ (80081dc <UART_SetConfig+0x2d4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d120      	bne.n	8008082 <UART_SetConfig+0x17a>
 8008040:	4b64      	ldr	r3, [pc, #400]	@ (80081d4 <UART_SetConfig+0x2cc>)
 8008042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008046:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800804a:	2b30      	cmp	r3, #48	@ 0x30
 800804c:	d013      	beq.n	8008076 <UART_SetConfig+0x16e>
 800804e:	2b30      	cmp	r3, #48	@ 0x30
 8008050:	d814      	bhi.n	800807c <UART_SetConfig+0x174>
 8008052:	2b20      	cmp	r3, #32
 8008054:	d009      	beq.n	800806a <UART_SetConfig+0x162>
 8008056:	2b20      	cmp	r3, #32
 8008058:	d810      	bhi.n	800807c <UART_SetConfig+0x174>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <UART_SetConfig+0x15c>
 800805e:	2b10      	cmp	r3, #16
 8008060:	d006      	beq.n	8008070 <UART_SetConfig+0x168>
 8008062:	e00b      	b.n	800807c <UART_SetConfig+0x174>
 8008064:	2300      	movs	r3, #0
 8008066:	77fb      	strb	r3, [r7, #31]
 8008068:	e0f2      	b.n	8008250 <UART_SetConfig+0x348>
 800806a:	2302      	movs	r3, #2
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	e0ef      	b.n	8008250 <UART_SetConfig+0x348>
 8008070:	2304      	movs	r3, #4
 8008072:	77fb      	strb	r3, [r7, #31]
 8008074:	e0ec      	b.n	8008250 <UART_SetConfig+0x348>
 8008076:	2308      	movs	r3, #8
 8008078:	77fb      	strb	r3, [r7, #31]
 800807a:	e0e9      	b.n	8008250 <UART_SetConfig+0x348>
 800807c:	2310      	movs	r3, #16
 800807e:	77fb      	strb	r3, [r7, #31]
 8008080:	e0e6      	b.n	8008250 <UART_SetConfig+0x348>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a56      	ldr	r2, [pc, #344]	@ (80081e0 <UART_SetConfig+0x2d8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d120      	bne.n	80080ce <UART_SetConfig+0x1c6>
 800808c:	4b51      	ldr	r3, [pc, #324]	@ (80081d4 <UART_SetConfig+0x2cc>)
 800808e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008092:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008096:	2bc0      	cmp	r3, #192	@ 0xc0
 8008098:	d013      	beq.n	80080c2 <UART_SetConfig+0x1ba>
 800809a:	2bc0      	cmp	r3, #192	@ 0xc0
 800809c:	d814      	bhi.n	80080c8 <UART_SetConfig+0x1c0>
 800809e:	2b80      	cmp	r3, #128	@ 0x80
 80080a0:	d009      	beq.n	80080b6 <UART_SetConfig+0x1ae>
 80080a2:	2b80      	cmp	r3, #128	@ 0x80
 80080a4:	d810      	bhi.n	80080c8 <UART_SetConfig+0x1c0>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <UART_SetConfig+0x1a8>
 80080aa:	2b40      	cmp	r3, #64	@ 0x40
 80080ac:	d006      	beq.n	80080bc <UART_SetConfig+0x1b4>
 80080ae:	e00b      	b.n	80080c8 <UART_SetConfig+0x1c0>
 80080b0:	2300      	movs	r3, #0
 80080b2:	77fb      	strb	r3, [r7, #31]
 80080b4:	e0cc      	b.n	8008250 <UART_SetConfig+0x348>
 80080b6:	2302      	movs	r3, #2
 80080b8:	77fb      	strb	r3, [r7, #31]
 80080ba:	e0c9      	b.n	8008250 <UART_SetConfig+0x348>
 80080bc:	2304      	movs	r3, #4
 80080be:	77fb      	strb	r3, [r7, #31]
 80080c0:	e0c6      	b.n	8008250 <UART_SetConfig+0x348>
 80080c2:	2308      	movs	r3, #8
 80080c4:	77fb      	strb	r3, [r7, #31]
 80080c6:	e0c3      	b.n	8008250 <UART_SetConfig+0x348>
 80080c8:	2310      	movs	r3, #16
 80080ca:	77fb      	strb	r3, [r7, #31]
 80080cc:	e0c0      	b.n	8008250 <UART_SetConfig+0x348>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a44      	ldr	r2, [pc, #272]	@ (80081e4 <UART_SetConfig+0x2dc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d125      	bne.n	8008124 <UART_SetConfig+0x21c>
 80080d8:	4b3e      	ldr	r3, [pc, #248]	@ (80081d4 <UART_SetConfig+0x2cc>)
 80080da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080e6:	d017      	beq.n	8008118 <UART_SetConfig+0x210>
 80080e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080ec:	d817      	bhi.n	800811e <UART_SetConfig+0x216>
 80080ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f2:	d00b      	beq.n	800810c <UART_SetConfig+0x204>
 80080f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f8:	d811      	bhi.n	800811e <UART_SetConfig+0x216>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <UART_SetConfig+0x1fe>
 80080fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008102:	d006      	beq.n	8008112 <UART_SetConfig+0x20a>
 8008104:	e00b      	b.n	800811e <UART_SetConfig+0x216>
 8008106:	2300      	movs	r3, #0
 8008108:	77fb      	strb	r3, [r7, #31]
 800810a:	e0a1      	b.n	8008250 <UART_SetConfig+0x348>
 800810c:	2302      	movs	r3, #2
 800810e:	77fb      	strb	r3, [r7, #31]
 8008110:	e09e      	b.n	8008250 <UART_SetConfig+0x348>
 8008112:	2304      	movs	r3, #4
 8008114:	77fb      	strb	r3, [r7, #31]
 8008116:	e09b      	b.n	8008250 <UART_SetConfig+0x348>
 8008118:	2308      	movs	r3, #8
 800811a:	77fb      	strb	r3, [r7, #31]
 800811c:	e098      	b.n	8008250 <UART_SetConfig+0x348>
 800811e:	2310      	movs	r3, #16
 8008120:	77fb      	strb	r3, [r7, #31]
 8008122:	e095      	b.n	8008250 <UART_SetConfig+0x348>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2f      	ldr	r2, [pc, #188]	@ (80081e8 <UART_SetConfig+0x2e0>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d125      	bne.n	800817a <UART_SetConfig+0x272>
 800812e:	4b29      	ldr	r3, [pc, #164]	@ (80081d4 <UART_SetConfig+0x2cc>)
 8008130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008134:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008138:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800813c:	d017      	beq.n	800816e <UART_SetConfig+0x266>
 800813e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008142:	d817      	bhi.n	8008174 <UART_SetConfig+0x26c>
 8008144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008148:	d00b      	beq.n	8008162 <UART_SetConfig+0x25a>
 800814a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800814e:	d811      	bhi.n	8008174 <UART_SetConfig+0x26c>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <UART_SetConfig+0x254>
 8008154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008158:	d006      	beq.n	8008168 <UART_SetConfig+0x260>
 800815a:	e00b      	b.n	8008174 <UART_SetConfig+0x26c>
 800815c:	2301      	movs	r3, #1
 800815e:	77fb      	strb	r3, [r7, #31]
 8008160:	e076      	b.n	8008250 <UART_SetConfig+0x348>
 8008162:	2302      	movs	r3, #2
 8008164:	77fb      	strb	r3, [r7, #31]
 8008166:	e073      	b.n	8008250 <UART_SetConfig+0x348>
 8008168:	2304      	movs	r3, #4
 800816a:	77fb      	strb	r3, [r7, #31]
 800816c:	e070      	b.n	8008250 <UART_SetConfig+0x348>
 800816e:	2308      	movs	r3, #8
 8008170:	77fb      	strb	r3, [r7, #31]
 8008172:	e06d      	b.n	8008250 <UART_SetConfig+0x348>
 8008174:	2310      	movs	r3, #16
 8008176:	77fb      	strb	r3, [r7, #31]
 8008178:	e06a      	b.n	8008250 <UART_SetConfig+0x348>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a1b      	ldr	r2, [pc, #108]	@ (80081ec <UART_SetConfig+0x2e4>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d138      	bne.n	80081f6 <UART_SetConfig+0x2ee>
 8008184:	4b13      	ldr	r3, [pc, #76]	@ (80081d4 <UART_SetConfig+0x2cc>)
 8008186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800818a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800818e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008192:	d017      	beq.n	80081c4 <UART_SetConfig+0x2bc>
 8008194:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008198:	d82a      	bhi.n	80081f0 <UART_SetConfig+0x2e8>
 800819a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800819e:	d00b      	beq.n	80081b8 <UART_SetConfig+0x2b0>
 80081a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081a4:	d824      	bhi.n	80081f0 <UART_SetConfig+0x2e8>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <UART_SetConfig+0x2aa>
 80081aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ae:	d006      	beq.n	80081be <UART_SetConfig+0x2b6>
 80081b0:	e01e      	b.n	80081f0 <UART_SetConfig+0x2e8>
 80081b2:	2300      	movs	r3, #0
 80081b4:	77fb      	strb	r3, [r7, #31]
 80081b6:	e04b      	b.n	8008250 <UART_SetConfig+0x348>
 80081b8:	2302      	movs	r3, #2
 80081ba:	77fb      	strb	r3, [r7, #31]
 80081bc:	e048      	b.n	8008250 <UART_SetConfig+0x348>
 80081be:	2304      	movs	r3, #4
 80081c0:	77fb      	strb	r3, [r7, #31]
 80081c2:	e045      	b.n	8008250 <UART_SetConfig+0x348>
 80081c4:	2308      	movs	r3, #8
 80081c6:	77fb      	strb	r3, [r7, #31]
 80081c8:	e042      	b.n	8008250 <UART_SetConfig+0x348>
 80081ca:	bf00      	nop
 80081cc:	efff69f3 	.word	0xefff69f3
 80081d0:	40011000 	.word	0x40011000
 80081d4:	40023800 	.word	0x40023800
 80081d8:	40004400 	.word	0x40004400
 80081dc:	40004800 	.word	0x40004800
 80081e0:	40004c00 	.word	0x40004c00
 80081e4:	40005000 	.word	0x40005000
 80081e8:	40011400 	.word	0x40011400
 80081ec:	40007800 	.word	0x40007800
 80081f0:	2310      	movs	r3, #16
 80081f2:	77fb      	strb	r3, [r7, #31]
 80081f4:	e02c      	b.n	8008250 <UART_SetConfig+0x348>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a72      	ldr	r2, [pc, #456]	@ (80083c4 <UART_SetConfig+0x4bc>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d125      	bne.n	800824c <UART_SetConfig+0x344>
 8008200:	4b71      	ldr	r3, [pc, #452]	@ (80083c8 <UART_SetConfig+0x4c0>)
 8008202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008206:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800820a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800820e:	d017      	beq.n	8008240 <UART_SetConfig+0x338>
 8008210:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008214:	d817      	bhi.n	8008246 <UART_SetConfig+0x33e>
 8008216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800821a:	d00b      	beq.n	8008234 <UART_SetConfig+0x32c>
 800821c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008220:	d811      	bhi.n	8008246 <UART_SetConfig+0x33e>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <UART_SetConfig+0x326>
 8008226:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800822a:	d006      	beq.n	800823a <UART_SetConfig+0x332>
 800822c:	e00b      	b.n	8008246 <UART_SetConfig+0x33e>
 800822e:	2300      	movs	r3, #0
 8008230:	77fb      	strb	r3, [r7, #31]
 8008232:	e00d      	b.n	8008250 <UART_SetConfig+0x348>
 8008234:	2302      	movs	r3, #2
 8008236:	77fb      	strb	r3, [r7, #31]
 8008238:	e00a      	b.n	8008250 <UART_SetConfig+0x348>
 800823a:	2304      	movs	r3, #4
 800823c:	77fb      	strb	r3, [r7, #31]
 800823e:	e007      	b.n	8008250 <UART_SetConfig+0x348>
 8008240:	2308      	movs	r3, #8
 8008242:	77fb      	strb	r3, [r7, #31]
 8008244:	e004      	b.n	8008250 <UART_SetConfig+0x348>
 8008246:	2310      	movs	r3, #16
 8008248:	77fb      	strb	r3, [r7, #31]
 800824a:	e001      	b.n	8008250 <UART_SetConfig+0x348>
 800824c:	2310      	movs	r3, #16
 800824e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008258:	d15b      	bne.n	8008312 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800825a:	7ffb      	ldrb	r3, [r7, #31]
 800825c:	2b08      	cmp	r3, #8
 800825e:	d828      	bhi.n	80082b2 <UART_SetConfig+0x3aa>
 8008260:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <UART_SetConfig+0x360>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	0800828d 	.word	0x0800828d
 800826c:	08008295 	.word	0x08008295
 8008270:	0800829d 	.word	0x0800829d
 8008274:	080082b3 	.word	0x080082b3
 8008278:	080082a3 	.word	0x080082a3
 800827c:	080082b3 	.word	0x080082b3
 8008280:	080082b3 	.word	0x080082b3
 8008284:	080082b3 	.word	0x080082b3
 8008288:	080082ab 	.word	0x080082ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800828c:	f7fe fa72 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
 8008290:	61b8      	str	r0, [r7, #24]
        break;
 8008292:	e013      	b.n	80082bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008294:	f7fe fa82 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 8008298:	61b8      	str	r0, [r7, #24]
        break;
 800829a:	e00f      	b.n	80082bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800829c:	4b4b      	ldr	r3, [pc, #300]	@ (80083cc <UART_SetConfig+0x4c4>)
 800829e:	61bb      	str	r3, [r7, #24]
        break;
 80082a0:	e00c      	b.n	80082bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082a2:	f7fe f995 	bl	80065d0 <HAL_RCC_GetSysClockFreq>
 80082a6:	61b8      	str	r0, [r7, #24]
        break;
 80082a8:	e008      	b.n	80082bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082ae:	61bb      	str	r3, [r7, #24]
        break;
 80082b0:	e004      	b.n	80082bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	77bb      	strb	r3, [r7, #30]
        break;
 80082ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d074      	beq.n	80083ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	005a      	lsls	r2, r3, #1
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	085b      	lsrs	r3, r3, #1
 80082cc:	441a      	add	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	2b0f      	cmp	r3, #15
 80082dc:	d916      	bls.n	800830c <UART_SetConfig+0x404>
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082e4:	d212      	bcs.n	800830c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f023 030f 	bic.w	r3, r3, #15
 80082ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	085b      	lsrs	r3, r3, #1
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	89fb      	ldrh	r3, [r7, #14]
 80082fe:	4313      	orrs	r3, r2
 8008300:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	89fa      	ldrh	r2, [r7, #14]
 8008308:	60da      	str	r2, [r3, #12]
 800830a:	e04f      	b.n	80083ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	77bb      	strb	r3, [r7, #30]
 8008310:	e04c      	b.n	80083ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008312:	7ffb      	ldrb	r3, [r7, #31]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d828      	bhi.n	800836a <UART_SetConfig+0x462>
 8008318:	a201      	add	r2, pc, #4	@ (adr r2, 8008320 <UART_SetConfig+0x418>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008345 	.word	0x08008345
 8008324:	0800834d 	.word	0x0800834d
 8008328:	08008355 	.word	0x08008355
 800832c:	0800836b 	.word	0x0800836b
 8008330:	0800835b 	.word	0x0800835b
 8008334:	0800836b 	.word	0x0800836b
 8008338:	0800836b 	.word	0x0800836b
 800833c:	0800836b 	.word	0x0800836b
 8008340:	08008363 	.word	0x08008363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008344:	f7fe fa16 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
 8008348:	61b8      	str	r0, [r7, #24]
        break;
 800834a:	e013      	b.n	8008374 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800834c:	f7fe fa26 	bl	800679c <HAL_RCC_GetPCLK2Freq>
 8008350:	61b8      	str	r0, [r7, #24]
        break;
 8008352:	e00f      	b.n	8008374 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008354:	4b1d      	ldr	r3, [pc, #116]	@ (80083cc <UART_SetConfig+0x4c4>)
 8008356:	61bb      	str	r3, [r7, #24]
        break;
 8008358:	e00c      	b.n	8008374 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800835a:	f7fe f939 	bl	80065d0 <HAL_RCC_GetSysClockFreq>
 800835e:	61b8      	str	r0, [r7, #24]
        break;
 8008360:	e008      	b.n	8008374 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008366:	61bb      	str	r3, [r7, #24]
        break;
 8008368:	e004      	b.n	8008374 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	77bb      	strb	r3, [r7, #30]
        break;
 8008372:	bf00      	nop
    }

    if (pclk != 0U)
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d018      	beq.n	80083ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	085a      	lsrs	r2, r3, #1
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	441a      	add	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	fbb2 f3f3 	udiv	r3, r2, r3
 800838c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	2b0f      	cmp	r3, #15
 8008392:	d909      	bls.n	80083a8 <UART_SetConfig+0x4a0>
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800839a:	d205      	bcs.n	80083a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	b29a      	uxth	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	60da      	str	r2, [r3, #12]
 80083a6:	e001      	b.n	80083ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80083b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3720      	adds	r7, #32
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	40007c00 	.word	0x40007c00
 80083c8:	40023800 	.word	0x40023800
 80083cc:	00f42400 	.word	0x00f42400

080083d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083dc:	f003 0308 	and.w	r3, r3, #8
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00a      	beq.n	80083fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008420:	f003 0302 	and.w	r3, r3, #2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00a      	beq.n	800843e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008442:	f003 0304 	and.w	r3, r3, #4
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00a      	beq.n	8008460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	430a      	orrs	r2, r1
 800845e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00a      	beq.n	8008482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008486:	f003 0320 	and.w	r3, r3, #32
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00a      	beq.n	80084a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	430a      	orrs	r2, r1
 80084a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01a      	beq.n	80084e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ce:	d10a      	bne.n	80084e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	605a      	str	r2, [r3, #4]
  }
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08c      	sub	sp, #48	@ 0x30
 8008518:	af02      	add	r7, sp, #8
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008524:	f7fb fe26 	bl	8004174 <HAL_GetTick>
 8008528:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b08      	cmp	r3, #8
 8008536:	d12e      	bne.n	8008596 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	2200      	movs	r2, #0
 8008542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f83b 	bl	80085c2 <UART_WaitOnFlagUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d021      	beq.n	8008596 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	e853 3f00 	ldrex	r3, [r3]
 800855e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008566:	623b      	str	r3, [r7, #32]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	61fb      	str	r3, [r7, #28]
 8008572:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	69b9      	ldr	r1, [r7, #24]
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	e841 2300 	strex	r3, r2, [r1]
 800857c:	617b      	str	r3, [r7, #20]
   return(result);
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e6      	bne.n	8008552 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2220      	movs	r2, #32
 8008588:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e011      	b.n	80085ba <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2220      	movs	r2, #32
 80085a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3728      	adds	r7, #40	@ 0x28
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	603b      	str	r3, [r7, #0]
 80085ce:	4613      	mov	r3, r2
 80085d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085d2:	e04f      	b.n	8008674 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085da:	d04b      	beq.n	8008674 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085dc:	f7fb fdca 	bl	8004174 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d302      	bcc.n	80085f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e04e      	b.n	8008694 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	2b00      	cmp	r3, #0
 8008602:	d037      	beq.n	8008674 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b80      	cmp	r3, #128	@ 0x80
 8008608:	d034      	beq.n	8008674 <UART_WaitOnFlagUntilTimeout+0xb2>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b40      	cmp	r3, #64	@ 0x40
 800860e:	d031      	beq.n	8008674 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f003 0308 	and.w	r3, r3, #8
 800861a:	2b08      	cmp	r3, #8
 800861c:	d110      	bne.n	8008640 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2208      	movs	r2, #8
 8008624:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 f838 	bl	800869c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2208      	movs	r2, #8
 8008630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e029      	b.n	8008694 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800864a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800864e:	d111      	bne.n	8008674 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008658:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 f81e 	bl	800869c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2220      	movs	r2, #32
 8008664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e00f      	b.n	8008694 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69da      	ldr	r2, [r3, #28]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4013      	ands	r3, r2
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	429a      	cmp	r2, r3
 8008682:	bf0c      	ite	eq
 8008684:	2301      	moveq	r3, #1
 8008686:	2300      	movne	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	429a      	cmp	r2, r3
 8008690:	d0a0      	beq.n	80085d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b095      	sub	sp, #84	@ 0x54
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80086c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e6      	bne.n	80086a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3308      	adds	r3, #8
 80086dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	f023 0301 	bic.w	r3, r3, #1
 80086ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3308      	adds	r3, #8
 80086f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e5      	bne.n	80086d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800870e:	2b01      	cmp	r3, #1
 8008710:	d118      	bne.n	8008744 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	e853 3f00 	ldrex	r3, [r3]
 800871e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f023 0310 	bic.w	r3, r3, #16
 8008726:	647b      	str	r3, [r7, #68]	@ 0x44
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	461a      	mov	r2, r3
 800872e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008730:	61bb      	str	r3, [r7, #24]
 8008732:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	6979      	ldr	r1, [r7, #20]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	e841 2300 	strex	r3, r2, [r1]
 800873c:	613b      	str	r3, [r7, #16]
   return(result);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e6      	bne.n	8008712 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008758:	bf00      	nop
 800875a:	3754      	adds	r7, #84	@ 0x54
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <__cvt>:
 8008764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	ec57 6b10 	vmov	r6, r7, d0
 800876c:	2f00      	cmp	r7, #0
 800876e:	460c      	mov	r4, r1
 8008770:	4619      	mov	r1, r3
 8008772:	463b      	mov	r3, r7
 8008774:	bfbb      	ittet	lt
 8008776:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800877a:	461f      	movlt	r7, r3
 800877c:	2300      	movge	r3, #0
 800877e:	232d      	movlt	r3, #45	@ 0x2d
 8008780:	700b      	strb	r3, [r1, #0]
 8008782:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008784:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008788:	4691      	mov	r9, r2
 800878a:	f023 0820 	bic.w	r8, r3, #32
 800878e:	bfbc      	itt	lt
 8008790:	4632      	movlt	r2, r6
 8008792:	4616      	movlt	r6, r2
 8008794:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008798:	d005      	beq.n	80087a6 <__cvt+0x42>
 800879a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800879e:	d100      	bne.n	80087a2 <__cvt+0x3e>
 80087a0:	3401      	adds	r4, #1
 80087a2:	2102      	movs	r1, #2
 80087a4:	e000      	b.n	80087a8 <__cvt+0x44>
 80087a6:	2103      	movs	r1, #3
 80087a8:	ab03      	add	r3, sp, #12
 80087aa:	9301      	str	r3, [sp, #4]
 80087ac:	ab02      	add	r3, sp, #8
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	ec47 6b10 	vmov	d0, r6, r7
 80087b4:	4653      	mov	r3, sl
 80087b6:	4622      	mov	r2, r4
 80087b8:	f000 ff3a 	bl	8009630 <_dtoa_r>
 80087bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80087c0:	4605      	mov	r5, r0
 80087c2:	d119      	bne.n	80087f8 <__cvt+0x94>
 80087c4:	f019 0f01 	tst.w	r9, #1
 80087c8:	d00e      	beq.n	80087e8 <__cvt+0x84>
 80087ca:	eb00 0904 	add.w	r9, r0, r4
 80087ce:	2200      	movs	r2, #0
 80087d0:	2300      	movs	r3, #0
 80087d2:	4630      	mov	r0, r6
 80087d4:	4639      	mov	r1, r7
 80087d6:	f7f8 f997 	bl	8000b08 <__aeabi_dcmpeq>
 80087da:	b108      	cbz	r0, 80087e0 <__cvt+0x7c>
 80087dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80087e0:	2230      	movs	r2, #48	@ 0x30
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	454b      	cmp	r3, r9
 80087e6:	d31e      	bcc.n	8008826 <__cvt+0xc2>
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ec:	1b5b      	subs	r3, r3, r5
 80087ee:	4628      	mov	r0, r5
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	b004      	add	sp, #16
 80087f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087fc:	eb00 0904 	add.w	r9, r0, r4
 8008800:	d1e5      	bne.n	80087ce <__cvt+0x6a>
 8008802:	7803      	ldrb	r3, [r0, #0]
 8008804:	2b30      	cmp	r3, #48	@ 0x30
 8008806:	d10a      	bne.n	800881e <__cvt+0xba>
 8008808:	2200      	movs	r2, #0
 800880a:	2300      	movs	r3, #0
 800880c:	4630      	mov	r0, r6
 800880e:	4639      	mov	r1, r7
 8008810:	f7f8 f97a 	bl	8000b08 <__aeabi_dcmpeq>
 8008814:	b918      	cbnz	r0, 800881e <__cvt+0xba>
 8008816:	f1c4 0401 	rsb	r4, r4, #1
 800881a:	f8ca 4000 	str.w	r4, [sl]
 800881e:	f8da 3000 	ldr.w	r3, [sl]
 8008822:	4499      	add	r9, r3
 8008824:	e7d3      	b.n	80087ce <__cvt+0x6a>
 8008826:	1c59      	adds	r1, r3, #1
 8008828:	9103      	str	r1, [sp, #12]
 800882a:	701a      	strb	r2, [r3, #0]
 800882c:	e7d9      	b.n	80087e2 <__cvt+0x7e>

0800882e <__exponent>:
 800882e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008830:	2900      	cmp	r1, #0
 8008832:	bfba      	itte	lt
 8008834:	4249      	neglt	r1, r1
 8008836:	232d      	movlt	r3, #45	@ 0x2d
 8008838:	232b      	movge	r3, #43	@ 0x2b
 800883a:	2909      	cmp	r1, #9
 800883c:	7002      	strb	r2, [r0, #0]
 800883e:	7043      	strb	r3, [r0, #1]
 8008840:	dd29      	ble.n	8008896 <__exponent+0x68>
 8008842:	f10d 0307 	add.w	r3, sp, #7
 8008846:	461d      	mov	r5, r3
 8008848:	270a      	movs	r7, #10
 800884a:	461a      	mov	r2, r3
 800884c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008850:	fb07 1416 	mls	r4, r7, r6, r1
 8008854:	3430      	adds	r4, #48	@ 0x30
 8008856:	f802 4c01 	strb.w	r4, [r2, #-1]
 800885a:	460c      	mov	r4, r1
 800885c:	2c63      	cmp	r4, #99	@ 0x63
 800885e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008862:	4631      	mov	r1, r6
 8008864:	dcf1      	bgt.n	800884a <__exponent+0x1c>
 8008866:	3130      	adds	r1, #48	@ 0x30
 8008868:	1e94      	subs	r4, r2, #2
 800886a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800886e:	1c41      	adds	r1, r0, #1
 8008870:	4623      	mov	r3, r4
 8008872:	42ab      	cmp	r3, r5
 8008874:	d30a      	bcc.n	800888c <__exponent+0x5e>
 8008876:	f10d 0309 	add.w	r3, sp, #9
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	42ac      	cmp	r4, r5
 800887e:	bf88      	it	hi
 8008880:	2300      	movhi	r3, #0
 8008882:	3302      	adds	r3, #2
 8008884:	4403      	add	r3, r0
 8008886:	1a18      	subs	r0, r3, r0
 8008888:	b003      	add	sp, #12
 800888a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800888c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008890:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008894:	e7ed      	b.n	8008872 <__exponent+0x44>
 8008896:	2330      	movs	r3, #48	@ 0x30
 8008898:	3130      	adds	r1, #48	@ 0x30
 800889a:	7083      	strb	r3, [r0, #2]
 800889c:	70c1      	strb	r1, [r0, #3]
 800889e:	1d03      	adds	r3, r0, #4
 80088a0:	e7f1      	b.n	8008886 <__exponent+0x58>
	...

080088a4 <_printf_float>:
 80088a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	b08d      	sub	sp, #52	@ 0x34
 80088aa:	460c      	mov	r4, r1
 80088ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80088b0:	4616      	mov	r6, r2
 80088b2:	461f      	mov	r7, r3
 80088b4:	4605      	mov	r5, r0
 80088b6:	f000 fdad 	bl	8009414 <_localeconv_r>
 80088ba:	6803      	ldr	r3, [r0, #0]
 80088bc:	9304      	str	r3, [sp, #16]
 80088be:	4618      	mov	r0, r3
 80088c0:	f7f7 fcf6 	bl	80002b0 <strlen>
 80088c4:	2300      	movs	r3, #0
 80088c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80088c8:	f8d8 3000 	ldr.w	r3, [r8]
 80088cc:	9005      	str	r0, [sp, #20]
 80088ce:	3307      	adds	r3, #7
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	f103 0208 	add.w	r2, r3, #8
 80088d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088dc:	f8d4 b000 	ldr.w	fp, [r4]
 80088e0:	f8c8 2000 	str.w	r2, [r8]
 80088e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80088ec:	9307      	str	r3, [sp, #28]
 80088ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80088f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80088f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088fa:	4b9c      	ldr	r3, [pc, #624]	@ (8008b6c <_printf_float+0x2c8>)
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	f7f8 f934 	bl	8000b6c <__aeabi_dcmpun>
 8008904:	bb70      	cbnz	r0, 8008964 <_printf_float+0xc0>
 8008906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800890a:	4b98      	ldr	r3, [pc, #608]	@ (8008b6c <_printf_float+0x2c8>)
 800890c:	f04f 32ff 	mov.w	r2, #4294967295
 8008910:	f7f8 f90e 	bl	8000b30 <__aeabi_dcmple>
 8008914:	bb30      	cbnz	r0, 8008964 <_printf_float+0xc0>
 8008916:	2200      	movs	r2, #0
 8008918:	2300      	movs	r3, #0
 800891a:	4640      	mov	r0, r8
 800891c:	4649      	mov	r1, r9
 800891e:	f7f8 f8fd 	bl	8000b1c <__aeabi_dcmplt>
 8008922:	b110      	cbz	r0, 800892a <_printf_float+0x86>
 8008924:	232d      	movs	r3, #45	@ 0x2d
 8008926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800892a:	4a91      	ldr	r2, [pc, #580]	@ (8008b70 <_printf_float+0x2cc>)
 800892c:	4b91      	ldr	r3, [pc, #580]	@ (8008b74 <_printf_float+0x2d0>)
 800892e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008932:	bf94      	ite	ls
 8008934:	4690      	movls	r8, r2
 8008936:	4698      	movhi	r8, r3
 8008938:	2303      	movs	r3, #3
 800893a:	6123      	str	r3, [r4, #16]
 800893c:	f02b 0304 	bic.w	r3, fp, #4
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	f04f 0900 	mov.w	r9, #0
 8008946:	9700      	str	r7, [sp, #0]
 8008948:	4633      	mov	r3, r6
 800894a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800894c:	4621      	mov	r1, r4
 800894e:	4628      	mov	r0, r5
 8008950:	f000 f9d2 	bl	8008cf8 <_printf_common>
 8008954:	3001      	adds	r0, #1
 8008956:	f040 808d 	bne.w	8008a74 <_printf_float+0x1d0>
 800895a:	f04f 30ff 	mov.w	r0, #4294967295
 800895e:	b00d      	add	sp, #52	@ 0x34
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	4642      	mov	r2, r8
 8008966:	464b      	mov	r3, r9
 8008968:	4640      	mov	r0, r8
 800896a:	4649      	mov	r1, r9
 800896c:	f7f8 f8fe 	bl	8000b6c <__aeabi_dcmpun>
 8008970:	b140      	cbz	r0, 8008984 <_printf_float+0xe0>
 8008972:	464b      	mov	r3, r9
 8008974:	2b00      	cmp	r3, #0
 8008976:	bfbc      	itt	lt
 8008978:	232d      	movlt	r3, #45	@ 0x2d
 800897a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800897e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b78 <_printf_float+0x2d4>)
 8008980:	4b7e      	ldr	r3, [pc, #504]	@ (8008b7c <_printf_float+0x2d8>)
 8008982:	e7d4      	b.n	800892e <_printf_float+0x8a>
 8008984:	6863      	ldr	r3, [r4, #4]
 8008986:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800898a:	9206      	str	r2, [sp, #24]
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	d13b      	bne.n	8008a08 <_printf_float+0x164>
 8008990:	2306      	movs	r3, #6
 8008992:	6063      	str	r3, [r4, #4]
 8008994:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008998:	2300      	movs	r3, #0
 800899a:	6022      	str	r2, [r4, #0]
 800899c:	9303      	str	r3, [sp, #12]
 800899e:	ab0a      	add	r3, sp, #40	@ 0x28
 80089a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80089a4:	ab09      	add	r3, sp, #36	@ 0x24
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	6861      	ldr	r1, [r4, #4]
 80089aa:	ec49 8b10 	vmov	d0, r8, r9
 80089ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80089b2:	4628      	mov	r0, r5
 80089b4:	f7ff fed6 	bl	8008764 <__cvt>
 80089b8:	9b06      	ldr	r3, [sp, #24]
 80089ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089bc:	2b47      	cmp	r3, #71	@ 0x47
 80089be:	4680      	mov	r8, r0
 80089c0:	d129      	bne.n	8008a16 <_printf_float+0x172>
 80089c2:	1cc8      	adds	r0, r1, #3
 80089c4:	db02      	blt.n	80089cc <_printf_float+0x128>
 80089c6:	6863      	ldr	r3, [r4, #4]
 80089c8:	4299      	cmp	r1, r3
 80089ca:	dd41      	ble.n	8008a50 <_printf_float+0x1ac>
 80089cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80089d0:	fa5f fa8a 	uxtb.w	sl, sl
 80089d4:	3901      	subs	r1, #1
 80089d6:	4652      	mov	r2, sl
 80089d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80089dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80089de:	f7ff ff26 	bl	800882e <__exponent>
 80089e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089e4:	1813      	adds	r3, r2, r0
 80089e6:	2a01      	cmp	r2, #1
 80089e8:	4681      	mov	r9, r0
 80089ea:	6123      	str	r3, [r4, #16]
 80089ec:	dc02      	bgt.n	80089f4 <_printf_float+0x150>
 80089ee:	6822      	ldr	r2, [r4, #0]
 80089f0:	07d2      	lsls	r2, r2, #31
 80089f2:	d501      	bpl.n	80089f8 <_printf_float+0x154>
 80089f4:	3301      	adds	r3, #1
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0a2      	beq.n	8008946 <_printf_float+0xa2>
 8008a00:	232d      	movs	r3, #45	@ 0x2d
 8008a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a06:	e79e      	b.n	8008946 <_printf_float+0xa2>
 8008a08:	9a06      	ldr	r2, [sp, #24]
 8008a0a:	2a47      	cmp	r2, #71	@ 0x47
 8008a0c:	d1c2      	bne.n	8008994 <_printf_float+0xf0>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1c0      	bne.n	8008994 <_printf_float+0xf0>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e7bd      	b.n	8008992 <_printf_float+0xee>
 8008a16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a1a:	d9db      	bls.n	80089d4 <_printf_float+0x130>
 8008a1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a20:	d118      	bne.n	8008a54 <_printf_float+0x1b0>
 8008a22:	2900      	cmp	r1, #0
 8008a24:	6863      	ldr	r3, [r4, #4]
 8008a26:	dd0b      	ble.n	8008a40 <_printf_float+0x19c>
 8008a28:	6121      	str	r1, [r4, #16]
 8008a2a:	b913      	cbnz	r3, 8008a32 <_printf_float+0x18e>
 8008a2c:	6822      	ldr	r2, [r4, #0]
 8008a2e:	07d0      	lsls	r0, r2, #31
 8008a30:	d502      	bpl.n	8008a38 <_printf_float+0x194>
 8008a32:	3301      	adds	r3, #1
 8008a34:	440b      	add	r3, r1
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a3a:	f04f 0900 	mov.w	r9, #0
 8008a3e:	e7db      	b.n	80089f8 <_printf_float+0x154>
 8008a40:	b913      	cbnz	r3, 8008a48 <_printf_float+0x1a4>
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	07d2      	lsls	r2, r2, #31
 8008a46:	d501      	bpl.n	8008a4c <_printf_float+0x1a8>
 8008a48:	3302      	adds	r3, #2
 8008a4a:	e7f4      	b.n	8008a36 <_printf_float+0x192>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e7f2      	b.n	8008a36 <_printf_float+0x192>
 8008a50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a56:	4299      	cmp	r1, r3
 8008a58:	db05      	blt.n	8008a66 <_printf_float+0x1c2>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	6121      	str	r1, [r4, #16]
 8008a5e:	07d8      	lsls	r0, r3, #31
 8008a60:	d5ea      	bpl.n	8008a38 <_printf_float+0x194>
 8008a62:	1c4b      	adds	r3, r1, #1
 8008a64:	e7e7      	b.n	8008a36 <_printf_float+0x192>
 8008a66:	2900      	cmp	r1, #0
 8008a68:	bfd4      	ite	le
 8008a6a:	f1c1 0202 	rsble	r2, r1, #2
 8008a6e:	2201      	movgt	r2, #1
 8008a70:	4413      	add	r3, r2
 8008a72:	e7e0      	b.n	8008a36 <_printf_float+0x192>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	055a      	lsls	r2, r3, #21
 8008a78:	d407      	bmi.n	8008a8a <_printf_float+0x1e6>
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	4642      	mov	r2, r8
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b8      	blx	r7
 8008a84:	3001      	adds	r0, #1
 8008a86:	d12b      	bne.n	8008ae0 <_printf_float+0x23c>
 8008a88:	e767      	b.n	800895a <_printf_float+0xb6>
 8008a8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a8e:	f240 80dd 	bls.w	8008c4c <_printf_float+0x3a8>
 8008a92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a96:	2200      	movs	r2, #0
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f7f8 f835 	bl	8000b08 <__aeabi_dcmpeq>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d033      	beq.n	8008b0a <_printf_float+0x266>
 8008aa2:	4a37      	ldr	r2, [pc, #220]	@ (8008b80 <_printf_float+0x2dc>)
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4631      	mov	r1, r6
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	47b8      	blx	r7
 8008aac:	3001      	adds	r0, #1
 8008aae:	f43f af54 	beq.w	800895a <_printf_float+0xb6>
 8008ab2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008ab6:	4543      	cmp	r3, r8
 8008ab8:	db02      	blt.n	8008ac0 <_printf_float+0x21c>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	07d8      	lsls	r0, r3, #31
 8008abe:	d50f      	bpl.n	8008ae0 <_printf_float+0x23c>
 8008ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	f43f af45 	beq.w	800895a <_printf_float+0xb6>
 8008ad0:	f04f 0900 	mov.w	r9, #0
 8008ad4:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ad8:	f104 0a1a 	add.w	sl, r4, #26
 8008adc:	45c8      	cmp	r8, r9
 8008ade:	dc09      	bgt.n	8008af4 <_printf_float+0x250>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	079b      	lsls	r3, r3, #30
 8008ae4:	f100 8103 	bmi.w	8008cee <_printf_float+0x44a>
 8008ae8:	68e0      	ldr	r0, [r4, #12]
 8008aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aec:	4298      	cmp	r0, r3
 8008aee:	bfb8      	it	lt
 8008af0:	4618      	movlt	r0, r3
 8008af2:	e734      	b.n	800895e <_printf_float+0xba>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4652      	mov	r2, sl
 8008af8:	4631      	mov	r1, r6
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	f43f af2b 	beq.w	800895a <_printf_float+0xb6>
 8008b04:	f109 0901 	add.w	r9, r9, #1
 8008b08:	e7e8      	b.n	8008adc <_printf_float+0x238>
 8008b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	dc39      	bgt.n	8008b84 <_printf_float+0x2e0>
 8008b10:	4a1b      	ldr	r2, [pc, #108]	@ (8008b80 <_printf_float+0x2dc>)
 8008b12:	2301      	movs	r3, #1
 8008b14:	4631      	mov	r1, r6
 8008b16:	4628      	mov	r0, r5
 8008b18:	47b8      	blx	r7
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	f43f af1d 	beq.w	800895a <_printf_float+0xb6>
 8008b20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b24:	ea59 0303 	orrs.w	r3, r9, r3
 8008b28:	d102      	bne.n	8008b30 <_printf_float+0x28c>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	07d9      	lsls	r1, r3, #31
 8008b2e:	d5d7      	bpl.n	8008ae0 <_printf_float+0x23c>
 8008b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b34:	4631      	mov	r1, r6
 8008b36:	4628      	mov	r0, r5
 8008b38:	47b8      	blx	r7
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	f43f af0d 	beq.w	800895a <_printf_float+0xb6>
 8008b40:	f04f 0a00 	mov.w	sl, #0
 8008b44:	f104 0b1a 	add.w	fp, r4, #26
 8008b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4a:	425b      	negs	r3, r3
 8008b4c:	4553      	cmp	r3, sl
 8008b4e:	dc01      	bgt.n	8008b54 <_printf_float+0x2b0>
 8008b50:	464b      	mov	r3, r9
 8008b52:	e793      	b.n	8008a7c <_printf_float+0x1d8>
 8008b54:	2301      	movs	r3, #1
 8008b56:	465a      	mov	r2, fp
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f43f aefb 	beq.w	800895a <_printf_float+0xb6>
 8008b64:	f10a 0a01 	add.w	sl, sl, #1
 8008b68:	e7ee      	b.n	8008b48 <_printf_float+0x2a4>
 8008b6a:	bf00      	nop
 8008b6c:	7fefffff 	.word	0x7fefffff
 8008b70:	0800b260 	.word	0x0800b260
 8008b74:	0800b264 	.word	0x0800b264
 8008b78:	0800b268 	.word	0x0800b268
 8008b7c:	0800b26c 	.word	0x0800b26c
 8008b80:	0800b270 	.word	0x0800b270
 8008b84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b8a:	4553      	cmp	r3, sl
 8008b8c:	bfa8      	it	ge
 8008b8e:	4653      	movge	r3, sl
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	4699      	mov	r9, r3
 8008b94:	dc36      	bgt.n	8008c04 <_printf_float+0x360>
 8008b96:	f04f 0b00 	mov.w	fp, #0
 8008b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b9e:	f104 021a 	add.w	r2, r4, #26
 8008ba2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ba4:	9306      	str	r3, [sp, #24]
 8008ba6:	eba3 0309 	sub.w	r3, r3, r9
 8008baa:	455b      	cmp	r3, fp
 8008bac:	dc31      	bgt.n	8008c12 <_printf_float+0x36e>
 8008bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb0:	459a      	cmp	sl, r3
 8008bb2:	dc3a      	bgt.n	8008c2a <_printf_float+0x386>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	07da      	lsls	r2, r3, #31
 8008bb8:	d437      	bmi.n	8008c2a <_printf_float+0x386>
 8008bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bbc:	ebaa 0903 	sub.w	r9, sl, r3
 8008bc0:	9b06      	ldr	r3, [sp, #24]
 8008bc2:	ebaa 0303 	sub.w	r3, sl, r3
 8008bc6:	4599      	cmp	r9, r3
 8008bc8:	bfa8      	it	ge
 8008bca:	4699      	movge	r9, r3
 8008bcc:	f1b9 0f00 	cmp.w	r9, #0
 8008bd0:	dc33      	bgt.n	8008c3a <_printf_float+0x396>
 8008bd2:	f04f 0800 	mov.w	r8, #0
 8008bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bda:	f104 0b1a 	add.w	fp, r4, #26
 8008bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be0:	ebaa 0303 	sub.w	r3, sl, r3
 8008be4:	eba3 0309 	sub.w	r3, r3, r9
 8008be8:	4543      	cmp	r3, r8
 8008bea:	f77f af79 	ble.w	8008ae0 <_printf_float+0x23c>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	465a      	mov	r2, fp
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	47b8      	blx	r7
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	f43f aeae 	beq.w	800895a <_printf_float+0xb6>
 8008bfe:	f108 0801 	add.w	r8, r8, #1
 8008c02:	e7ec      	b.n	8008bde <_printf_float+0x33a>
 8008c04:	4642      	mov	r2, r8
 8008c06:	4631      	mov	r1, r6
 8008c08:	4628      	mov	r0, r5
 8008c0a:	47b8      	blx	r7
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d1c2      	bne.n	8008b96 <_printf_float+0x2f2>
 8008c10:	e6a3      	b.n	800895a <_printf_float+0xb6>
 8008c12:	2301      	movs	r3, #1
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	9206      	str	r2, [sp, #24]
 8008c1a:	47b8      	blx	r7
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	f43f ae9c 	beq.w	800895a <_printf_float+0xb6>
 8008c22:	9a06      	ldr	r2, [sp, #24]
 8008c24:	f10b 0b01 	add.w	fp, fp, #1
 8008c28:	e7bb      	b.n	8008ba2 <_printf_float+0x2fe>
 8008c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	d1c0      	bne.n	8008bba <_printf_float+0x316>
 8008c38:	e68f      	b.n	800895a <_printf_float+0xb6>
 8008c3a:	9a06      	ldr	r2, [sp, #24]
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	4442      	add	r2, r8
 8008c40:	4631      	mov	r1, r6
 8008c42:	4628      	mov	r0, r5
 8008c44:	47b8      	blx	r7
 8008c46:	3001      	adds	r0, #1
 8008c48:	d1c3      	bne.n	8008bd2 <_printf_float+0x32e>
 8008c4a:	e686      	b.n	800895a <_printf_float+0xb6>
 8008c4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c50:	f1ba 0f01 	cmp.w	sl, #1
 8008c54:	dc01      	bgt.n	8008c5a <_printf_float+0x3b6>
 8008c56:	07db      	lsls	r3, r3, #31
 8008c58:	d536      	bpl.n	8008cc8 <_printf_float+0x424>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	f43f ae78 	beq.w	800895a <_printf_float+0xb6>
 8008c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	f43f ae70 	beq.w	800895a <_printf_float+0xb6>
 8008c7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2300      	movs	r3, #0
 8008c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c86:	f7f7 ff3f 	bl	8000b08 <__aeabi_dcmpeq>
 8008c8a:	b9c0      	cbnz	r0, 8008cbe <_printf_float+0x41a>
 8008c8c:	4653      	mov	r3, sl
 8008c8e:	f108 0201 	add.w	r2, r8, #1
 8008c92:	4631      	mov	r1, r6
 8008c94:	4628      	mov	r0, r5
 8008c96:	47b8      	blx	r7
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d10c      	bne.n	8008cb6 <_printf_float+0x412>
 8008c9c:	e65d      	b.n	800895a <_printf_float+0xb6>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	465a      	mov	r2, fp
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	f43f ae56 	beq.w	800895a <_printf_float+0xb6>
 8008cae:	f108 0801 	add.w	r8, r8, #1
 8008cb2:	45d0      	cmp	r8, sl
 8008cb4:	dbf3      	blt.n	8008c9e <_printf_float+0x3fa>
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008cbc:	e6df      	b.n	8008a7e <_printf_float+0x1da>
 8008cbe:	f04f 0800 	mov.w	r8, #0
 8008cc2:	f104 0b1a 	add.w	fp, r4, #26
 8008cc6:	e7f4      	b.n	8008cb2 <_printf_float+0x40e>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	4642      	mov	r2, r8
 8008ccc:	e7e1      	b.n	8008c92 <_printf_float+0x3ee>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	464a      	mov	r2, r9
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f43f ae3e 	beq.w	800895a <_printf_float+0xb6>
 8008cde:	f108 0801 	add.w	r8, r8, #1
 8008ce2:	68e3      	ldr	r3, [r4, #12]
 8008ce4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ce6:	1a5b      	subs	r3, r3, r1
 8008ce8:	4543      	cmp	r3, r8
 8008cea:	dcf0      	bgt.n	8008cce <_printf_float+0x42a>
 8008cec:	e6fc      	b.n	8008ae8 <_printf_float+0x244>
 8008cee:	f04f 0800 	mov.w	r8, #0
 8008cf2:	f104 0919 	add.w	r9, r4, #25
 8008cf6:	e7f4      	b.n	8008ce2 <_printf_float+0x43e>

08008cf8 <_printf_common>:
 8008cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfc:	4616      	mov	r6, r2
 8008cfe:	4698      	mov	r8, r3
 8008d00:	688a      	ldr	r2, [r1, #8]
 8008d02:	690b      	ldr	r3, [r1, #16]
 8008d04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	bfb8      	it	lt
 8008d0c:	4613      	movlt	r3, r2
 8008d0e:	6033      	str	r3, [r6, #0]
 8008d10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d14:	4607      	mov	r7, r0
 8008d16:	460c      	mov	r4, r1
 8008d18:	b10a      	cbz	r2, 8008d1e <_printf_common+0x26>
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	6033      	str	r3, [r6, #0]
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	0699      	lsls	r1, r3, #26
 8008d22:	bf42      	ittt	mi
 8008d24:	6833      	ldrmi	r3, [r6, #0]
 8008d26:	3302      	addmi	r3, #2
 8008d28:	6033      	strmi	r3, [r6, #0]
 8008d2a:	6825      	ldr	r5, [r4, #0]
 8008d2c:	f015 0506 	ands.w	r5, r5, #6
 8008d30:	d106      	bne.n	8008d40 <_printf_common+0x48>
 8008d32:	f104 0a19 	add.w	sl, r4, #25
 8008d36:	68e3      	ldr	r3, [r4, #12]
 8008d38:	6832      	ldr	r2, [r6, #0]
 8008d3a:	1a9b      	subs	r3, r3, r2
 8008d3c:	42ab      	cmp	r3, r5
 8008d3e:	dc26      	bgt.n	8008d8e <_printf_common+0x96>
 8008d40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d44:	6822      	ldr	r2, [r4, #0]
 8008d46:	3b00      	subs	r3, #0
 8008d48:	bf18      	it	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	0692      	lsls	r2, r2, #26
 8008d4e:	d42b      	bmi.n	8008da8 <_printf_common+0xb0>
 8008d50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d54:	4641      	mov	r1, r8
 8008d56:	4638      	mov	r0, r7
 8008d58:	47c8      	blx	r9
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	d01e      	beq.n	8008d9c <_printf_common+0xa4>
 8008d5e:	6823      	ldr	r3, [r4, #0]
 8008d60:	6922      	ldr	r2, [r4, #16]
 8008d62:	f003 0306 	and.w	r3, r3, #6
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	bf02      	ittt	eq
 8008d6a:	68e5      	ldreq	r5, [r4, #12]
 8008d6c:	6833      	ldreq	r3, [r6, #0]
 8008d6e:	1aed      	subeq	r5, r5, r3
 8008d70:	68a3      	ldr	r3, [r4, #8]
 8008d72:	bf0c      	ite	eq
 8008d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d78:	2500      	movne	r5, #0
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	bfc4      	itt	gt
 8008d7e:	1a9b      	subgt	r3, r3, r2
 8008d80:	18ed      	addgt	r5, r5, r3
 8008d82:	2600      	movs	r6, #0
 8008d84:	341a      	adds	r4, #26
 8008d86:	42b5      	cmp	r5, r6
 8008d88:	d11a      	bne.n	8008dc0 <_printf_common+0xc8>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	e008      	b.n	8008da0 <_printf_common+0xa8>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4652      	mov	r2, sl
 8008d92:	4641      	mov	r1, r8
 8008d94:	4638      	mov	r0, r7
 8008d96:	47c8      	blx	r9
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d103      	bne.n	8008da4 <_printf_common+0xac>
 8008d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da4:	3501      	adds	r5, #1
 8008da6:	e7c6      	b.n	8008d36 <_printf_common+0x3e>
 8008da8:	18e1      	adds	r1, r4, r3
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	2030      	movs	r0, #48	@ 0x30
 8008dae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008db2:	4422      	add	r2, r4
 8008db4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008db8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	e7c7      	b.n	8008d50 <_printf_common+0x58>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	4641      	mov	r1, r8
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	47c8      	blx	r9
 8008dca:	3001      	adds	r0, #1
 8008dcc:	d0e6      	beq.n	8008d9c <_printf_common+0xa4>
 8008dce:	3601      	adds	r6, #1
 8008dd0:	e7d9      	b.n	8008d86 <_printf_common+0x8e>
	...

08008dd4 <_printf_i>:
 8008dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	7e0f      	ldrb	r7, [r1, #24]
 8008dda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ddc:	2f78      	cmp	r7, #120	@ 0x78
 8008dde:	4691      	mov	r9, r2
 8008de0:	4680      	mov	r8, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	469a      	mov	sl, r3
 8008de6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dea:	d807      	bhi.n	8008dfc <_printf_i+0x28>
 8008dec:	2f62      	cmp	r7, #98	@ 0x62
 8008dee:	d80a      	bhi.n	8008e06 <_printf_i+0x32>
 8008df0:	2f00      	cmp	r7, #0
 8008df2:	f000 80d2 	beq.w	8008f9a <_printf_i+0x1c6>
 8008df6:	2f58      	cmp	r7, #88	@ 0x58
 8008df8:	f000 80b9 	beq.w	8008f6e <_printf_i+0x19a>
 8008dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e04:	e03a      	b.n	8008e7c <_printf_i+0xa8>
 8008e06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e0a:	2b15      	cmp	r3, #21
 8008e0c:	d8f6      	bhi.n	8008dfc <_printf_i+0x28>
 8008e0e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e14 <_printf_i+0x40>)
 8008e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e14:	08008e6d 	.word	0x08008e6d
 8008e18:	08008e81 	.word	0x08008e81
 8008e1c:	08008dfd 	.word	0x08008dfd
 8008e20:	08008dfd 	.word	0x08008dfd
 8008e24:	08008dfd 	.word	0x08008dfd
 8008e28:	08008dfd 	.word	0x08008dfd
 8008e2c:	08008e81 	.word	0x08008e81
 8008e30:	08008dfd 	.word	0x08008dfd
 8008e34:	08008dfd 	.word	0x08008dfd
 8008e38:	08008dfd 	.word	0x08008dfd
 8008e3c:	08008dfd 	.word	0x08008dfd
 8008e40:	08008f81 	.word	0x08008f81
 8008e44:	08008eab 	.word	0x08008eab
 8008e48:	08008f3b 	.word	0x08008f3b
 8008e4c:	08008dfd 	.word	0x08008dfd
 8008e50:	08008dfd 	.word	0x08008dfd
 8008e54:	08008fa3 	.word	0x08008fa3
 8008e58:	08008dfd 	.word	0x08008dfd
 8008e5c:	08008eab 	.word	0x08008eab
 8008e60:	08008dfd 	.word	0x08008dfd
 8008e64:	08008dfd 	.word	0x08008dfd
 8008e68:	08008f43 	.word	0x08008f43
 8008e6c:	6833      	ldr	r3, [r6, #0]
 8008e6e:	1d1a      	adds	r2, r3, #4
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6032      	str	r2, [r6, #0]
 8008e74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e09d      	b.n	8008fbc <_printf_i+0x1e8>
 8008e80:	6833      	ldr	r3, [r6, #0]
 8008e82:	6820      	ldr	r0, [r4, #0]
 8008e84:	1d19      	adds	r1, r3, #4
 8008e86:	6031      	str	r1, [r6, #0]
 8008e88:	0606      	lsls	r6, r0, #24
 8008e8a:	d501      	bpl.n	8008e90 <_printf_i+0xbc>
 8008e8c:	681d      	ldr	r5, [r3, #0]
 8008e8e:	e003      	b.n	8008e98 <_printf_i+0xc4>
 8008e90:	0645      	lsls	r5, r0, #25
 8008e92:	d5fb      	bpl.n	8008e8c <_printf_i+0xb8>
 8008e94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e98:	2d00      	cmp	r5, #0
 8008e9a:	da03      	bge.n	8008ea4 <_printf_i+0xd0>
 8008e9c:	232d      	movs	r3, #45	@ 0x2d
 8008e9e:	426d      	negs	r5, r5
 8008ea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ea4:	4859      	ldr	r0, [pc, #356]	@ (800900c <_printf_i+0x238>)
 8008ea6:	230a      	movs	r3, #10
 8008ea8:	e011      	b.n	8008ece <_printf_i+0xfa>
 8008eaa:	6821      	ldr	r1, [r4, #0]
 8008eac:	6833      	ldr	r3, [r6, #0]
 8008eae:	0608      	lsls	r0, r1, #24
 8008eb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008eb4:	d402      	bmi.n	8008ebc <_printf_i+0xe8>
 8008eb6:	0649      	lsls	r1, r1, #25
 8008eb8:	bf48      	it	mi
 8008eba:	b2ad      	uxthmi	r5, r5
 8008ebc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ebe:	4853      	ldr	r0, [pc, #332]	@ (800900c <_printf_i+0x238>)
 8008ec0:	6033      	str	r3, [r6, #0]
 8008ec2:	bf14      	ite	ne
 8008ec4:	230a      	movne	r3, #10
 8008ec6:	2308      	moveq	r3, #8
 8008ec8:	2100      	movs	r1, #0
 8008eca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ece:	6866      	ldr	r6, [r4, #4]
 8008ed0:	60a6      	str	r6, [r4, #8]
 8008ed2:	2e00      	cmp	r6, #0
 8008ed4:	bfa2      	ittt	ge
 8008ed6:	6821      	ldrge	r1, [r4, #0]
 8008ed8:	f021 0104 	bicge.w	r1, r1, #4
 8008edc:	6021      	strge	r1, [r4, #0]
 8008ede:	b90d      	cbnz	r5, 8008ee4 <_printf_i+0x110>
 8008ee0:	2e00      	cmp	r6, #0
 8008ee2:	d04b      	beq.n	8008f7c <_printf_i+0x1a8>
 8008ee4:	4616      	mov	r6, r2
 8008ee6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008eea:	fb03 5711 	mls	r7, r3, r1, r5
 8008eee:	5dc7      	ldrb	r7, [r0, r7]
 8008ef0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ef4:	462f      	mov	r7, r5
 8008ef6:	42bb      	cmp	r3, r7
 8008ef8:	460d      	mov	r5, r1
 8008efa:	d9f4      	bls.n	8008ee6 <_printf_i+0x112>
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d10b      	bne.n	8008f18 <_printf_i+0x144>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	07df      	lsls	r7, r3, #31
 8008f04:	d508      	bpl.n	8008f18 <_printf_i+0x144>
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	6861      	ldr	r1, [r4, #4]
 8008f0a:	4299      	cmp	r1, r3
 8008f0c:	bfde      	ittt	le
 8008f0e:	2330      	movle	r3, #48	@ 0x30
 8008f10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f18:	1b92      	subs	r2, r2, r6
 8008f1a:	6122      	str	r2, [r4, #16]
 8008f1c:	f8cd a000 	str.w	sl, [sp]
 8008f20:	464b      	mov	r3, r9
 8008f22:	aa03      	add	r2, sp, #12
 8008f24:	4621      	mov	r1, r4
 8008f26:	4640      	mov	r0, r8
 8008f28:	f7ff fee6 	bl	8008cf8 <_printf_common>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d14a      	bne.n	8008fc6 <_printf_i+0x1f2>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	b004      	add	sp, #16
 8008f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	f043 0320 	orr.w	r3, r3, #32
 8008f40:	6023      	str	r3, [r4, #0]
 8008f42:	4833      	ldr	r0, [pc, #204]	@ (8009010 <_printf_i+0x23c>)
 8008f44:	2778      	movs	r7, #120	@ 0x78
 8008f46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	6831      	ldr	r1, [r6, #0]
 8008f4e:	061f      	lsls	r7, r3, #24
 8008f50:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f54:	d402      	bmi.n	8008f5c <_printf_i+0x188>
 8008f56:	065f      	lsls	r7, r3, #25
 8008f58:	bf48      	it	mi
 8008f5a:	b2ad      	uxthmi	r5, r5
 8008f5c:	6031      	str	r1, [r6, #0]
 8008f5e:	07d9      	lsls	r1, r3, #31
 8008f60:	bf44      	itt	mi
 8008f62:	f043 0320 	orrmi.w	r3, r3, #32
 8008f66:	6023      	strmi	r3, [r4, #0]
 8008f68:	b11d      	cbz	r5, 8008f72 <_printf_i+0x19e>
 8008f6a:	2310      	movs	r3, #16
 8008f6c:	e7ac      	b.n	8008ec8 <_printf_i+0xf4>
 8008f6e:	4827      	ldr	r0, [pc, #156]	@ (800900c <_printf_i+0x238>)
 8008f70:	e7e9      	b.n	8008f46 <_printf_i+0x172>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	f023 0320 	bic.w	r3, r3, #32
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	e7f6      	b.n	8008f6a <_printf_i+0x196>
 8008f7c:	4616      	mov	r6, r2
 8008f7e:	e7bd      	b.n	8008efc <_printf_i+0x128>
 8008f80:	6833      	ldr	r3, [r6, #0]
 8008f82:	6825      	ldr	r5, [r4, #0]
 8008f84:	6961      	ldr	r1, [r4, #20]
 8008f86:	1d18      	adds	r0, r3, #4
 8008f88:	6030      	str	r0, [r6, #0]
 8008f8a:	062e      	lsls	r6, r5, #24
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	d501      	bpl.n	8008f94 <_printf_i+0x1c0>
 8008f90:	6019      	str	r1, [r3, #0]
 8008f92:	e002      	b.n	8008f9a <_printf_i+0x1c6>
 8008f94:	0668      	lsls	r0, r5, #25
 8008f96:	d5fb      	bpl.n	8008f90 <_printf_i+0x1bc>
 8008f98:	8019      	strh	r1, [r3, #0]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6123      	str	r3, [r4, #16]
 8008f9e:	4616      	mov	r6, r2
 8008fa0:	e7bc      	b.n	8008f1c <_printf_i+0x148>
 8008fa2:	6833      	ldr	r3, [r6, #0]
 8008fa4:	1d1a      	adds	r2, r3, #4
 8008fa6:	6032      	str	r2, [r6, #0]
 8008fa8:	681e      	ldr	r6, [r3, #0]
 8008faa:	6862      	ldr	r2, [r4, #4]
 8008fac:	2100      	movs	r1, #0
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f7f7 f92e 	bl	8000210 <memchr>
 8008fb4:	b108      	cbz	r0, 8008fba <_printf_i+0x1e6>
 8008fb6:	1b80      	subs	r0, r0, r6
 8008fb8:	6060      	str	r0, [r4, #4]
 8008fba:	6863      	ldr	r3, [r4, #4]
 8008fbc:	6123      	str	r3, [r4, #16]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fc4:	e7aa      	b.n	8008f1c <_printf_i+0x148>
 8008fc6:	6923      	ldr	r3, [r4, #16]
 8008fc8:	4632      	mov	r2, r6
 8008fca:	4649      	mov	r1, r9
 8008fcc:	4640      	mov	r0, r8
 8008fce:	47d0      	blx	sl
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	d0ad      	beq.n	8008f30 <_printf_i+0x15c>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	079b      	lsls	r3, r3, #30
 8008fd8:	d413      	bmi.n	8009002 <_printf_i+0x22e>
 8008fda:	68e0      	ldr	r0, [r4, #12]
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	4298      	cmp	r0, r3
 8008fe0:	bfb8      	it	lt
 8008fe2:	4618      	movlt	r0, r3
 8008fe4:	e7a6      	b.n	8008f34 <_printf_i+0x160>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	4632      	mov	r2, r6
 8008fea:	4649      	mov	r1, r9
 8008fec:	4640      	mov	r0, r8
 8008fee:	47d0      	blx	sl
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d09d      	beq.n	8008f30 <_printf_i+0x15c>
 8008ff4:	3501      	adds	r5, #1
 8008ff6:	68e3      	ldr	r3, [r4, #12]
 8008ff8:	9903      	ldr	r1, [sp, #12]
 8008ffa:	1a5b      	subs	r3, r3, r1
 8008ffc:	42ab      	cmp	r3, r5
 8008ffe:	dcf2      	bgt.n	8008fe6 <_printf_i+0x212>
 8009000:	e7eb      	b.n	8008fda <_printf_i+0x206>
 8009002:	2500      	movs	r5, #0
 8009004:	f104 0619 	add.w	r6, r4, #25
 8009008:	e7f5      	b.n	8008ff6 <_printf_i+0x222>
 800900a:	bf00      	nop
 800900c:	0800b272 	.word	0x0800b272
 8009010:	0800b283 	.word	0x0800b283

08009014 <std>:
 8009014:	2300      	movs	r3, #0
 8009016:	b510      	push	{r4, lr}
 8009018:	4604      	mov	r4, r0
 800901a:	e9c0 3300 	strd	r3, r3, [r0]
 800901e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009022:	6083      	str	r3, [r0, #8]
 8009024:	8181      	strh	r1, [r0, #12]
 8009026:	6643      	str	r3, [r0, #100]	@ 0x64
 8009028:	81c2      	strh	r2, [r0, #14]
 800902a:	6183      	str	r3, [r0, #24]
 800902c:	4619      	mov	r1, r3
 800902e:	2208      	movs	r2, #8
 8009030:	305c      	adds	r0, #92	@ 0x5c
 8009032:	f000 f9e7 	bl	8009404 <memset>
 8009036:	4b0d      	ldr	r3, [pc, #52]	@ (800906c <std+0x58>)
 8009038:	6263      	str	r3, [r4, #36]	@ 0x24
 800903a:	4b0d      	ldr	r3, [pc, #52]	@ (8009070 <std+0x5c>)
 800903c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800903e:	4b0d      	ldr	r3, [pc, #52]	@ (8009074 <std+0x60>)
 8009040:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009042:	4b0d      	ldr	r3, [pc, #52]	@ (8009078 <std+0x64>)
 8009044:	6323      	str	r3, [r4, #48]	@ 0x30
 8009046:	4b0d      	ldr	r3, [pc, #52]	@ (800907c <std+0x68>)
 8009048:	6224      	str	r4, [r4, #32]
 800904a:	429c      	cmp	r4, r3
 800904c:	d006      	beq.n	800905c <std+0x48>
 800904e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009052:	4294      	cmp	r4, r2
 8009054:	d002      	beq.n	800905c <std+0x48>
 8009056:	33d0      	adds	r3, #208	@ 0xd0
 8009058:	429c      	cmp	r4, r3
 800905a:	d105      	bne.n	8009068 <std+0x54>
 800905c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009064:	f000 ba4a 	b.w	80094fc <__retarget_lock_init_recursive>
 8009068:	bd10      	pop	{r4, pc}
 800906a:	bf00      	nop
 800906c:	08009255 	.word	0x08009255
 8009070:	08009277 	.word	0x08009277
 8009074:	080092af 	.word	0x080092af
 8009078:	080092d3 	.word	0x080092d3
 800907c:	200207fc 	.word	0x200207fc

08009080 <stdio_exit_handler>:
 8009080:	4a02      	ldr	r2, [pc, #8]	@ (800908c <stdio_exit_handler+0xc>)
 8009082:	4903      	ldr	r1, [pc, #12]	@ (8009090 <stdio_exit_handler+0x10>)
 8009084:	4803      	ldr	r0, [pc, #12]	@ (8009094 <stdio_exit_handler+0x14>)
 8009086:	f000 b869 	b.w	800915c <_fwalk_sglue>
 800908a:	bf00      	nop
 800908c:	2000004c 	.word	0x2000004c
 8009090:	0800abc5 	.word	0x0800abc5
 8009094:	2000005c 	.word	0x2000005c

08009098 <cleanup_stdio>:
 8009098:	6841      	ldr	r1, [r0, #4]
 800909a:	4b0c      	ldr	r3, [pc, #48]	@ (80090cc <cleanup_stdio+0x34>)
 800909c:	4299      	cmp	r1, r3
 800909e:	b510      	push	{r4, lr}
 80090a0:	4604      	mov	r4, r0
 80090a2:	d001      	beq.n	80090a8 <cleanup_stdio+0x10>
 80090a4:	f001 fd8e 	bl	800abc4 <_fflush_r>
 80090a8:	68a1      	ldr	r1, [r4, #8]
 80090aa:	4b09      	ldr	r3, [pc, #36]	@ (80090d0 <cleanup_stdio+0x38>)
 80090ac:	4299      	cmp	r1, r3
 80090ae:	d002      	beq.n	80090b6 <cleanup_stdio+0x1e>
 80090b0:	4620      	mov	r0, r4
 80090b2:	f001 fd87 	bl	800abc4 <_fflush_r>
 80090b6:	68e1      	ldr	r1, [r4, #12]
 80090b8:	4b06      	ldr	r3, [pc, #24]	@ (80090d4 <cleanup_stdio+0x3c>)
 80090ba:	4299      	cmp	r1, r3
 80090bc:	d004      	beq.n	80090c8 <cleanup_stdio+0x30>
 80090be:	4620      	mov	r0, r4
 80090c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c4:	f001 bd7e 	b.w	800abc4 <_fflush_r>
 80090c8:	bd10      	pop	{r4, pc}
 80090ca:	bf00      	nop
 80090cc:	200207fc 	.word	0x200207fc
 80090d0:	20020864 	.word	0x20020864
 80090d4:	200208cc 	.word	0x200208cc

080090d8 <global_stdio_init.part.0>:
 80090d8:	b510      	push	{r4, lr}
 80090da:	4b0b      	ldr	r3, [pc, #44]	@ (8009108 <global_stdio_init.part.0+0x30>)
 80090dc:	4c0b      	ldr	r4, [pc, #44]	@ (800910c <global_stdio_init.part.0+0x34>)
 80090de:	4a0c      	ldr	r2, [pc, #48]	@ (8009110 <global_stdio_init.part.0+0x38>)
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	4620      	mov	r0, r4
 80090e4:	2200      	movs	r2, #0
 80090e6:	2104      	movs	r1, #4
 80090e8:	f7ff ff94 	bl	8009014 <std>
 80090ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090f0:	2201      	movs	r2, #1
 80090f2:	2109      	movs	r1, #9
 80090f4:	f7ff ff8e 	bl	8009014 <std>
 80090f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090fc:	2202      	movs	r2, #2
 80090fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009102:	2112      	movs	r1, #18
 8009104:	f7ff bf86 	b.w	8009014 <std>
 8009108:	20020934 	.word	0x20020934
 800910c:	200207fc 	.word	0x200207fc
 8009110:	08009081 	.word	0x08009081

08009114 <__sfp_lock_acquire>:
 8009114:	4801      	ldr	r0, [pc, #4]	@ (800911c <__sfp_lock_acquire+0x8>)
 8009116:	f000 b9f2 	b.w	80094fe <__retarget_lock_acquire_recursive>
 800911a:	bf00      	nop
 800911c:	2002093d 	.word	0x2002093d

08009120 <__sfp_lock_release>:
 8009120:	4801      	ldr	r0, [pc, #4]	@ (8009128 <__sfp_lock_release+0x8>)
 8009122:	f000 b9ed 	b.w	8009500 <__retarget_lock_release_recursive>
 8009126:	bf00      	nop
 8009128:	2002093d 	.word	0x2002093d

0800912c <__sinit>:
 800912c:	b510      	push	{r4, lr}
 800912e:	4604      	mov	r4, r0
 8009130:	f7ff fff0 	bl	8009114 <__sfp_lock_acquire>
 8009134:	6a23      	ldr	r3, [r4, #32]
 8009136:	b11b      	cbz	r3, 8009140 <__sinit+0x14>
 8009138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800913c:	f7ff bff0 	b.w	8009120 <__sfp_lock_release>
 8009140:	4b04      	ldr	r3, [pc, #16]	@ (8009154 <__sinit+0x28>)
 8009142:	6223      	str	r3, [r4, #32]
 8009144:	4b04      	ldr	r3, [pc, #16]	@ (8009158 <__sinit+0x2c>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1f5      	bne.n	8009138 <__sinit+0xc>
 800914c:	f7ff ffc4 	bl	80090d8 <global_stdio_init.part.0>
 8009150:	e7f2      	b.n	8009138 <__sinit+0xc>
 8009152:	bf00      	nop
 8009154:	08009099 	.word	0x08009099
 8009158:	20020934 	.word	0x20020934

0800915c <_fwalk_sglue>:
 800915c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009160:	4607      	mov	r7, r0
 8009162:	4688      	mov	r8, r1
 8009164:	4614      	mov	r4, r2
 8009166:	2600      	movs	r6, #0
 8009168:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800916c:	f1b9 0901 	subs.w	r9, r9, #1
 8009170:	d505      	bpl.n	800917e <_fwalk_sglue+0x22>
 8009172:	6824      	ldr	r4, [r4, #0]
 8009174:	2c00      	cmp	r4, #0
 8009176:	d1f7      	bne.n	8009168 <_fwalk_sglue+0xc>
 8009178:	4630      	mov	r0, r6
 800917a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d907      	bls.n	8009194 <_fwalk_sglue+0x38>
 8009184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009188:	3301      	adds	r3, #1
 800918a:	d003      	beq.n	8009194 <_fwalk_sglue+0x38>
 800918c:	4629      	mov	r1, r5
 800918e:	4638      	mov	r0, r7
 8009190:	47c0      	blx	r8
 8009192:	4306      	orrs	r6, r0
 8009194:	3568      	adds	r5, #104	@ 0x68
 8009196:	e7e9      	b.n	800916c <_fwalk_sglue+0x10>

08009198 <_puts_r>:
 8009198:	6a03      	ldr	r3, [r0, #32]
 800919a:	b570      	push	{r4, r5, r6, lr}
 800919c:	6884      	ldr	r4, [r0, #8]
 800919e:	4605      	mov	r5, r0
 80091a0:	460e      	mov	r6, r1
 80091a2:	b90b      	cbnz	r3, 80091a8 <_puts_r+0x10>
 80091a4:	f7ff ffc2 	bl	800912c <__sinit>
 80091a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091aa:	07db      	lsls	r3, r3, #31
 80091ac:	d405      	bmi.n	80091ba <_puts_r+0x22>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	0598      	lsls	r0, r3, #22
 80091b2:	d402      	bmi.n	80091ba <_puts_r+0x22>
 80091b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091b6:	f000 f9a2 	bl	80094fe <__retarget_lock_acquire_recursive>
 80091ba:	89a3      	ldrh	r3, [r4, #12]
 80091bc:	0719      	lsls	r1, r3, #28
 80091be:	d502      	bpl.n	80091c6 <_puts_r+0x2e>
 80091c0:	6923      	ldr	r3, [r4, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d135      	bne.n	8009232 <_puts_r+0x9a>
 80091c6:	4621      	mov	r1, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	f000 f8c5 	bl	8009358 <__swsetup_r>
 80091ce:	b380      	cbz	r0, 8009232 <_puts_r+0x9a>
 80091d0:	f04f 35ff 	mov.w	r5, #4294967295
 80091d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091d6:	07da      	lsls	r2, r3, #31
 80091d8:	d405      	bmi.n	80091e6 <_puts_r+0x4e>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	059b      	lsls	r3, r3, #22
 80091de:	d402      	bmi.n	80091e6 <_puts_r+0x4e>
 80091e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091e2:	f000 f98d 	bl	8009500 <__retarget_lock_release_recursive>
 80091e6:	4628      	mov	r0, r5
 80091e8:	bd70      	pop	{r4, r5, r6, pc}
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	da04      	bge.n	80091f8 <_puts_r+0x60>
 80091ee:	69a2      	ldr	r2, [r4, #24]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	dc17      	bgt.n	8009224 <_puts_r+0x8c>
 80091f4:	290a      	cmp	r1, #10
 80091f6:	d015      	beq.n	8009224 <_puts_r+0x8c>
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	6022      	str	r2, [r4, #0]
 80091fe:	7019      	strb	r1, [r3, #0]
 8009200:	68a3      	ldr	r3, [r4, #8]
 8009202:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009206:	3b01      	subs	r3, #1
 8009208:	60a3      	str	r3, [r4, #8]
 800920a:	2900      	cmp	r1, #0
 800920c:	d1ed      	bne.n	80091ea <_puts_r+0x52>
 800920e:	2b00      	cmp	r3, #0
 8009210:	da11      	bge.n	8009236 <_puts_r+0x9e>
 8009212:	4622      	mov	r2, r4
 8009214:	210a      	movs	r1, #10
 8009216:	4628      	mov	r0, r5
 8009218:	f000 f85f 	bl	80092da <__swbuf_r>
 800921c:	3001      	adds	r0, #1
 800921e:	d0d7      	beq.n	80091d0 <_puts_r+0x38>
 8009220:	250a      	movs	r5, #10
 8009222:	e7d7      	b.n	80091d4 <_puts_r+0x3c>
 8009224:	4622      	mov	r2, r4
 8009226:	4628      	mov	r0, r5
 8009228:	f000 f857 	bl	80092da <__swbuf_r>
 800922c:	3001      	adds	r0, #1
 800922e:	d1e7      	bne.n	8009200 <_puts_r+0x68>
 8009230:	e7ce      	b.n	80091d0 <_puts_r+0x38>
 8009232:	3e01      	subs	r6, #1
 8009234:	e7e4      	b.n	8009200 <_puts_r+0x68>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	6022      	str	r2, [r4, #0]
 800923c:	220a      	movs	r2, #10
 800923e:	701a      	strb	r2, [r3, #0]
 8009240:	e7ee      	b.n	8009220 <_puts_r+0x88>
	...

08009244 <puts>:
 8009244:	4b02      	ldr	r3, [pc, #8]	@ (8009250 <puts+0xc>)
 8009246:	4601      	mov	r1, r0
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f7ff bfa5 	b.w	8009198 <_puts_r>
 800924e:	bf00      	nop
 8009250:	20000058 	.word	0x20000058

08009254 <__sread>:
 8009254:	b510      	push	{r4, lr}
 8009256:	460c      	mov	r4, r1
 8009258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925c:	f000 f900 	bl	8009460 <_read_r>
 8009260:	2800      	cmp	r0, #0
 8009262:	bfab      	itete	ge
 8009264:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009266:	89a3      	ldrhlt	r3, [r4, #12]
 8009268:	181b      	addge	r3, r3, r0
 800926a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800926e:	bfac      	ite	ge
 8009270:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009272:	81a3      	strhlt	r3, [r4, #12]
 8009274:	bd10      	pop	{r4, pc}

08009276 <__swrite>:
 8009276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927a:	461f      	mov	r7, r3
 800927c:	898b      	ldrh	r3, [r1, #12]
 800927e:	05db      	lsls	r3, r3, #23
 8009280:	4605      	mov	r5, r0
 8009282:	460c      	mov	r4, r1
 8009284:	4616      	mov	r6, r2
 8009286:	d505      	bpl.n	8009294 <__swrite+0x1e>
 8009288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928c:	2302      	movs	r3, #2
 800928e:	2200      	movs	r2, #0
 8009290:	f000 f8d4 	bl	800943c <_lseek_r>
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800929a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800929e:	81a3      	strh	r3, [r4, #12]
 80092a0:	4632      	mov	r2, r6
 80092a2:	463b      	mov	r3, r7
 80092a4:	4628      	mov	r0, r5
 80092a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092aa:	f000 b8eb 	b.w	8009484 <_write_r>

080092ae <__sseek>:
 80092ae:	b510      	push	{r4, lr}
 80092b0:	460c      	mov	r4, r1
 80092b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b6:	f000 f8c1 	bl	800943c <_lseek_r>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	bf15      	itete	ne
 80092c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80092c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80092ca:	81a3      	strheq	r3, [r4, #12]
 80092cc:	bf18      	it	ne
 80092ce:	81a3      	strhne	r3, [r4, #12]
 80092d0:	bd10      	pop	{r4, pc}

080092d2 <__sclose>:
 80092d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d6:	f000 b8a1 	b.w	800941c <_close_r>

080092da <__swbuf_r>:
 80092da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092dc:	460e      	mov	r6, r1
 80092de:	4614      	mov	r4, r2
 80092e0:	4605      	mov	r5, r0
 80092e2:	b118      	cbz	r0, 80092ec <__swbuf_r+0x12>
 80092e4:	6a03      	ldr	r3, [r0, #32]
 80092e6:	b90b      	cbnz	r3, 80092ec <__swbuf_r+0x12>
 80092e8:	f7ff ff20 	bl	800912c <__sinit>
 80092ec:	69a3      	ldr	r3, [r4, #24]
 80092ee:	60a3      	str	r3, [r4, #8]
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	071a      	lsls	r2, r3, #28
 80092f4:	d501      	bpl.n	80092fa <__swbuf_r+0x20>
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	b943      	cbnz	r3, 800930c <__swbuf_r+0x32>
 80092fa:	4621      	mov	r1, r4
 80092fc:	4628      	mov	r0, r5
 80092fe:	f000 f82b 	bl	8009358 <__swsetup_r>
 8009302:	b118      	cbz	r0, 800930c <__swbuf_r+0x32>
 8009304:	f04f 37ff 	mov.w	r7, #4294967295
 8009308:	4638      	mov	r0, r7
 800930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	6922      	ldr	r2, [r4, #16]
 8009310:	1a98      	subs	r0, r3, r2
 8009312:	6963      	ldr	r3, [r4, #20]
 8009314:	b2f6      	uxtb	r6, r6
 8009316:	4283      	cmp	r3, r0
 8009318:	4637      	mov	r7, r6
 800931a:	dc05      	bgt.n	8009328 <__swbuf_r+0x4e>
 800931c:	4621      	mov	r1, r4
 800931e:	4628      	mov	r0, r5
 8009320:	f001 fc50 	bl	800abc4 <_fflush_r>
 8009324:	2800      	cmp	r0, #0
 8009326:	d1ed      	bne.n	8009304 <__swbuf_r+0x2a>
 8009328:	68a3      	ldr	r3, [r4, #8]
 800932a:	3b01      	subs	r3, #1
 800932c:	60a3      	str	r3, [r4, #8]
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	6022      	str	r2, [r4, #0]
 8009334:	701e      	strb	r6, [r3, #0]
 8009336:	6962      	ldr	r2, [r4, #20]
 8009338:	1c43      	adds	r3, r0, #1
 800933a:	429a      	cmp	r2, r3
 800933c:	d004      	beq.n	8009348 <__swbuf_r+0x6e>
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	07db      	lsls	r3, r3, #31
 8009342:	d5e1      	bpl.n	8009308 <__swbuf_r+0x2e>
 8009344:	2e0a      	cmp	r6, #10
 8009346:	d1df      	bne.n	8009308 <__swbuf_r+0x2e>
 8009348:	4621      	mov	r1, r4
 800934a:	4628      	mov	r0, r5
 800934c:	f001 fc3a 	bl	800abc4 <_fflush_r>
 8009350:	2800      	cmp	r0, #0
 8009352:	d0d9      	beq.n	8009308 <__swbuf_r+0x2e>
 8009354:	e7d6      	b.n	8009304 <__swbuf_r+0x2a>
	...

08009358 <__swsetup_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4b29      	ldr	r3, [pc, #164]	@ (8009400 <__swsetup_r+0xa8>)
 800935c:	4605      	mov	r5, r0
 800935e:	6818      	ldr	r0, [r3, #0]
 8009360:	460c      	mov	r4, r1
 8009362:	b118      	cbz	r0, 800936c <__swsetup_r+0x14>
 8009364:	6a03      	ldr	r3, [r0, #32]
 8009366:	b90b      	cbnz	r3, 800936c <__swsetup_r+0x14>
 8009368:	f7ff fee0 	bl	800912c <__sinit>
 800936c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009370:	0719      	lsls	r1, r3, #28
 8009372:	d422      	bmi.n	80093ba <__swsetup_r+0x62>
 8009374:	06da      	lsls	r2, r3, #27
 8009376:	d407      	bmi.n	8009388 <__swsetup_r+0x30>
 8009378:	2209      	movs	r2, #9
 800937a:	602a      	str	r2, [r5, #0]
 800937c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	f04f 30ff 	mov.w	r0, #4294967295
 8009386:	e033      	b.n	80093f0 <__swsetup_r+0x98>
 8009388:	0758      	lsls	r0, r3, #29
 800938a:	d512      	bpl.n	80093b2 <__swsetup_r+0x5a>
 800938c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800938e:	b141      	cbz	r1, 80093a2 <__swsetup_r+0x4a>
 8009390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009394:	4299      	cmp	r1, r3
 8009396:	d002      	beq.n	800939e <__swsetup_r+0x46>
 8009398:	4628      	mov	r0, r5
 800939a:	f000 ff0d 	bl	800a1b8 <_free_r>
 800939e:	2300      	movs	r3, #0
 80093a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	2300      	movs	r3, #0
 80093ac:	6063      	str	r3, [r4, #4]
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	f043 0308 	orr.w	r3, r3, #8
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	6923      	ldr	r3, [r4, #16]
 80093bc:	b94b      	cbnz	r3, 80093d2 <__swsetup_r+0x7a>
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093c8:	d003      	beq.n	80093d2 <__swsetup_r+0x7a>
 80093ca:	4621      	mov	r1, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	f001 fc47 	bl	800ac60 <__smakebuf_r>
 80093d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d6:	f013 0201 	ands.w	r2, r3, #1
 80093da:	d00a      	beq.n	80093f2 <__swsetup_r+0x9a>
 80093dc:	2200      	movs	r2, #0
 80093de:	60a2      	str	r2, [r4, #8]
 80093e0:	6962      	ldr	r2, [r4, #20]
 80093e2:	4252      	negs	r2, r2
 80093e4:	61a2      	str	r2, [r4, #24]
 80093e6:	6922      	ldr	r2, [r4, #16]
 80093e8:	b942      	cbnz	r2, 80093fc <__swsetup_r+0xa4>
 80093ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093ee:	d1c5      	bne.n	800937c <__swsetup_r+0x24>
 80093f0:	bd38      	pop	{r3, r4, r5, pc}
 80093f2:	0799      	lsls	r1, r3, #30
 80093f4:	bf58      	it	pl
 80093f6:	6962      	ldrpl	r2, [r4, #20]
 80093f8:	60a2      	str	r2, [r4, #8]
 80093fa:	e7f4      	b.n	80093e6 <__swsetup_r+0x8e>
 80093fc:	2000      	movs	r0, #0
 80093fe:	e7f7      	b.n	80093f0 <__swsetup_r+0x98>
 8009400:	20000058 	.word	0x20000058

08009404 <memset>:
 8009404:	4402      	add	r2, r0
 8009406:	4603      	mov	r3, r0
 8009408:	4293      	cmp	r3, r2
 800940a:	d100      	bne.n	800940e <memset+0xa>
 800940c:	4770      	bx	lr
 800940e:	f803 1b01 	strb.w	r1, [r3], #1
 8009412:	e7f9      	b.n	8009408 <memset+0x4>

08009414 <_localeconv_r>:
 8009414:	4800      	ldr	r0, [pc, #0]	@ (8009418 <_localeconv_r+0x4>)
 8009416:	4770      	bx	lr
 8009418:	20000198 	.word	0x20000198

0800941c <_close_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4d06      	ldr	r5, [pc, #24]	@ (8009438 <_close_r+0x1c>)
 8009420:	2300      	movs	r3, #0
 8009422:	4604      	mov	r4, r0
 8009424:	4608      	mov	r0, r1
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	f7f8 fb0c 	bl	8001a44 <_close>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_close_r+0x1a>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	b103      	cbz	r3, 8009436 <_close_r+0x1a>
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	20020938 	.word	0x20020938

0800943c <_lseek_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4d07      	ldr	r5, [pc, #28]	@ (800945c <_lseek_r+0x20>)
 8009440:	4604      	mov	r4, r0
 8009442:	4608      	mov	r0, r1
 8009444:	4611      	mov	r1, r2
 8009446:	2200      	movs	r2, #0
 8009448:	602a      	str	r2, [r5, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	f7f8 fb21 	bl	8001a92 <_lseek>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_lseek_r+0x1e>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b103      	cbz	r3, 800945a <_lseek_r+0x1e>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	20020938 	.word	0x20020938

08009460 <_read_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4d07      	ldr	r5, [pc, #28]	@ (8009480 <_read_r+0x20>)
 8009464:	4604      	mov	r4, r0
 8009466:	4608      	mov	r0, r1
 8009468:	4611      	mov	r1, r2
 800946a:	2200      	movs	r2, #0
 800946c:	602a      	str	r2, [r5, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	f7f8 faaf 	bl	80019d2 <_read>
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	d102      	bne.n	800947e <_read_r+0x1e>
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	b103      	cbz	r3, 800947e <_read_r+0x1e>
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	20020938 	.word	0x20020938

08009484 <_write_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4d07      	ldr	r5, [pc, #28]	@ (80094a4 <_write_r+0x20>)
 8009488:	4604      	mov	r4, r0
 800948a:	4608      	mov	r0, r1
 800948c:	4611      	mov	r1, r2
 800948e:	2200      	movs	r2, #0
 8009490:	602a      	str	r2, [r5, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	f7f8 faba 	bl	8001a0c <_write>
 8009498:	1c43      	adds	r3, r0, #1
 800949a:	d102      	bne.n	80094a2 <_write_r+0x1e>
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	b103      	cbz	r3, 80094a2 <_write_r+0x1e>
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	bd38      	pop	{r3, r4, r5, pc}
 80094a4:	20020938 	.word	0x20020938

080094a8 <__errno>:
 80094a8:	4b01      	ldr	r3, [pc, #4]	@ (80094b0 <__errno+0x8>)
 80094aa:	6818      	ldr	r0, [r3, #0]
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	20000058 	.word	0x20000058

080094b4 <__libc_init_array>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	4d0d      	ldr	r5, [pc, #52]	@ (80094ec <__libc_init_array+0x38>)
 80094b8:	4c0d      	ldr	r4, [pc, #52]	@ (80094f0 <__libc_init_array+0x3c>)
 80094ba:	1b64      	subs	r4, r4, r5
 80094bc:	10a4      	asrs	r4, r4, #2
 80094be:	2600      	movs	r6, #0
 80094c0:	42a6      	cmp	r6, r4
 80094c2:	d109      	bne.n	80094d8 <__libc_init_array+0x24>
 80094c4:	4d0b      	ldr	r5, [pc, #44]	@ (80094f4 <__libc_init_array+0x40>)
 80094c6:	4c0c      	ldr	r4, [pc, #48]	@ (80094f8 <__libc_init_array+0x44>)
 80094c8:	f001 fe28 	bl	800b11c <_init>
 80094cc:	1b64      	subs	r4, r4, r5
 80094ce:	10a4      	asrs	r4, r4, #2
 80094d0:	2600      	movs	r6, #0
 80094d2:	42a6      	cmp	r6, r4
 80094d4:	d105      	bne.n	80094e2 <__libc_init_array+0x2e>
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094dc:	4798      	blx	r3
 80094de:	3601      	adds	r6, #1
 80094e0:	e7ee      	b.n	80094c0 <__libc_init_array+0xc>
 80094e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e6:	4798      	blx	r3
 80094e8:	3601      	adds	r6, #1
 80094ea:	e7f2      	b.n	80094d2 <__libc_init_array+0x1e>
 80094ec:	0800b5d8 	.word	0x0800b5d8
 80094f0:	0800b5d8 	.word	0x0800b5d8
 80094f4:	0800b5d8 	.word	0x0800b5d8
 80094f8:	0800b5dc 	.word	0x0800b5dc

080094fc <__retarget_lock_init_recursive>:
 80094fc:	4770      	bx	lr

080094fe <__retarget_lock_acquire_recursive>:
 80094fe:	4770      	bx	lr

08009500 <__retarget_lock_release_recursive>:
 8009500:	4770      	bx	lr

08009502 <memcpy>:
 8009502:	440a      	add	r2, r1
 8009504:	4291      	cmp	r1, r2
 8009506:	f100 33ff 	add.w	r3, r0, #4294967295
 800950a:	d100      	bne.n	800950e <memcpy+0xc>
 800950c:	4770      	bx	lr
 800950e:	b510      	push	{r4, lr}
 8009510:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009518:	4291      	cmp	r1, r2
 800951a:	d1f9      	bne.n	8009510 <memcpy+0xe>
 800951c:	bd10      	pop	{r4, pc}

0800951e <quorem>:
 800951e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009522:	6903      	ldr	r3, [r0, #16]
 8009524:	690c      	ldr	r4, [r1, #16]
 8009526:	42a3      	cmp	r3, r4
 8009528:	4607      	mov	r7, r0
 800952a:	db7e      	blt.n	800962a <quorem+0x10c>
 800952c:	3c01      	subs	r4, #1
 800952e:	f101 0814 	add.w	r8, r1, #20
 8009532:	00a3      	lsls	r3, r4, #2
 8009534:	f100 0514 	add.w	r5, r0, #20
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009544:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009548:	3301      	adds	r3, #1
 800954a:	429a      	cmp	r2, r3
 800954c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009550:	fbb2 f6f3 	udiv	r6, r2, r3
 8009554:	d32e      	bcc.n	80095b4 <quorem+0x96>
 8009556:	f04f 0a00 	mov.w	sl, #0
 800955a:	46c4      	mov	ip, r8
 800955c:	46ae      	mov	lr, r5
 800955e:	46d3      	mov	fp, sl
 8009560:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009564:	b298      	uxth	r0, r3
 8009566:	fb06 a000 	mla	r0, r6, r0, sl
 800956a:	0c02      	lsrs	r2, r0, #16
 800956c:	0c1b      	lsrs	r3, r3, #16
 800956e:	fb06 2303 	mla	r3, r6, r3, r2
 8009572:	f8de 2000 	ldr.w	r2, [lr]
 8009576:	b280      	uxth	r0, r0
 8009578:	b292      	uxth	r2, r2
 800957a:	1a12      	subs	r2, r2, r0
 800957c:	445a      	add	r2, fp
 800957e:	f8de 0000 	ldr.w	r0, [lr]
 8009582:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009586:	b29b      	uxth	r3, r3
 8009588:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800958c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009590:	b292      	uxth	r2, r2
 8009592:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009596:	45e1      	cmp	r9, ip
 8009598:	f84e 2b04 	str.w	r2, [lr], #4
 800959c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095a0:	d2de      	bcs.n	8009560 <quorem+0x42>
 80095a2:	9b00      	ldr	r3, [sp, #0]
 80095a4:	58eb      	ldr	r3, [r5, r3]
 80095a6:	b92b      	cbnz	r3, 80095b4 <quorem+0x96>
 80095a8:	9b01      	ldr	r3, [sp, #4]
 80095aa:	3b04      	subs	r3, #4
 80095ac:	429d      	cmp	r5, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	d32f      	bcc.n	8009612 <quorem+0xf4>
 80095b2:	613c      	str	r4, [r7, #16]
 80095b4:	4638      	mov	r0, r7
 80095b6:	f001 f979 	bl	800a8ac <__mcmp>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	db25      	blt.n	800960a <quorem+0xec>
 80095be:	4629      	mov	r1, r5
 80095c0:	2000      	movs	r0, #0
 80095c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80095c6:	f8d1 c000 	ldr.w	ip, [r1]
 80095ca:	fa1f fe82 	uxth.w	lr, r2
 80095ce:	fa1f f38c 	uxth.w	r3, ip
 80095d2:	eba3 030e 	sub.w	r3, r3, lr
 80095d6:	4403      	add	r3, r0
 80095d8:	0c12      	lsrs	r2, r2, #16
 80095da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80095de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095e8:	45c1      	cmp	r9, r8
 80095ea:	f841 3b04 	str.w	r3, [r1], #4
 80095ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095f2:	d2e6      	bcs.n	80095c2 <quorem+0xa4>
 80095f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095fc:	b922      	cbnz	r2, 8009608 <quorem+0xea>
 80095fe:	3b04      	subs	r3, #4
 8009600:	429d      	cmp	r5, r3
 8009602:	461a      	mov	r2, r3
 8009604:	d30b      	bcc.n	800961e <quorem+0x100>
 8009606:	613c      	str	r4, [r7, #16]
 8009608:	3601      	adds	r6, #1
 800960a:	4630      	mov	r0, r6
 800960c:	b003      	add	sp, #12
 800960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	3b04      	subs	r3, #4
 8009616:	2a00      	cmp	r2, #0
 8009618:	d1cb      	bne.n	80095b2 <quorem+0x94>
 800961a:	3c01      	subs	r4, #1
 800961c:	e7c6      	b.n	80095ac <quorem+0x8e>
 800961e:	6812      	ldr	r2, [r2, #0]
 8009620:	3b04      	subs	r3, #4
 8009622:	2a00      	cmp	r2, #0
 8009624:	d1ef      	bne.n	8009606 <quorem+0xe8>
 8009626:	3c01      	subs	r4, #1
 8009628:	e7ea      	b.n	8009600 <quorem+0xe2>
 800962a:	2000      	movs	r0, #0
 800962c:	e7ee      	b.n	800960c <quorem+0xee>
	...

08009630 <_dtoa_r>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	69c7      	ldr	r7, [r0, #28]
 8009636:	b099      	sub	sp, #100	@ 0x64
 8009638:	ed8d 0b02 	vstr	d0, [sp, #8]
 800963c:	ec55 4b10 	vmov	r4, r5, d0
 8009640:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009642:	9109      	str	r1, [sp, #36]	@ 0x24
 8009644:	4683      	mov	fp, r0
 8009646:	920e      	str	r2, [sp, #56]	@ 0x38
 8009648:	9313      	str	r3, [sp, #76]	@ 0x4c
 800964a:	b97f      	cbnz	r7, 800966c <_dtoa_r+0x3c>
 800964c:	2010      	movs	r0, #16
 800964e:	f000 fdfd 	bl	800a24c <malloc>
 8009652:	4602      	mov	r2, r0
 8009654:	f8cb 001c 	str.w	r0, [fp, #28]
 8009658:	b920      	cbnz	r0, 8009664 <_dtoa_r+0x34>
 800965a:	4ba7      	ldr	r3, [pc, #668]	@ (80098f8 <_dtoa_r+0x2c8>)
 800965c:	21ef      	movs	r1, #239	@ 0xef
 800965e:	48a7      	ldr	r0, [pc, #668]	@ (80098fc <_dtoa_r+0x2cc>)
 8009660:	f001 fb6c 	bl	800ad3c <__assert_func>
 8009664:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009668:	6007      	str	r7, [r0, #0]
 800966a:	60c7      	str	r7, [r0, #12]
 800966c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009670:	6819      	ldr	r1, [r3, #0]
 8009672:	b159      	cbz	r1, 800968c <_dtoa_r+0x5c>
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	604a      	str	r2, [r1, #4]
 8009678:	2301      	movs	r3, #1
 800967a:	4093      	lsls	r3, r2
 800967c:	608b      	str	r3, [r1, #8]
 800967e:	4658      	mov	r0, fp
 8009680:	f000 feda 	bl	800a438 <_Bfree>
 8009684:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009688:	2200      	movs	r2, #0
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	1e2b      	subs	r3, r5, #0
 800968e:	bfb9      	ittee	lt
 8009690:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009694:	9303      	strlt	r3, [sp, #12]
 8009696:	2300      	movge	r3, #0
 8009698:	6033      	strge	r3, [r6, #0]
 800969a:	9f03      	ldr	r7, [sp, #12]
 800969c:	4b98      	ldr	r3, [pc, #608]	@ (8009900 <_dtoa_r+0x2d0>)
 800969e:	bfbc      	itt	lt
 80096a0:	2201      	movlt	r2, #1
 80096a2:	6032      	strlt	r2, [r6, #0]
 80096a4:	43bb      	bics	r3, r7
 80096a6:	d112      	bne.n	80096ce <_dtoa_r+0x9e>
 80096a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096b4:	4323      	orrs	r3, r4
 80096b6:	f000 854d 	beq.w	800a154 <_dtoa_r+0xb24>
 80096ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009914 <_dtoa_r+0x2e4>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 854f 	beq.w	800a164 <_dtoa_r+0xb34>
 80096c6:	f10a 0303 	add.w	r3, sl, #3
 80096ca:	f000 bd49 	b.w	800a160 <_dtoa_r+0xb30>
 80096ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096d2:	2200      	movs	r2, #0
 80096d4:	ec51 0b17 	vmov	r0, r1, d7
 80096d8:	2300      	movs	r3, #0
 80096da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80096de:	f7f7 fa13 	bl	8000b08 <__aeabi_dcmpeq>
 80096e2:	4680      	mov	r8, r0
 80096e4:	b158      	cbz	r0, 80096fe <_dtoa_r+0xce>
 80096e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096e8:	2301      	movs	r3, #1
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096ee:	b113      	cbz	r3, 80096f6 <_dtoa_r+0xc6>
 80096f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80096f2:	4b84      	ldr	r3, [pc, #528]	@ (8009904 <_dtoa_r+0x2d4>)
 80096f4:	6013      	str	r3, [r2, #0]
 80096f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009918 <_dtoa_r+0x2e8>
 80096fa:	f000 bd33 	b.w	800a164 <_dtoa_r+0xb34>
 80096fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009702:	aa16      	add	r2, sp, #88	@ 0x58
 8009704:	a917      	add	r1, sp, #92	@ 0x5c
 8009706:	4658      	mov	r0, fp
 8009708:	f001 f980 	bl	800aa0c <__d2b>
 800970c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009710:	4681      	mov	r9, r0
 8009712:	2e00      	cmp	r6, #0
 8009714:	d077      	beq.n	8009806 <_dtoa_r+0x1d6>
 8009716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009718:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800971c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009724:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009728:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800972c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009730:	4619      	mov	r1, r3
 8009732:	2200      	movs	r2, #0
 8009734:	4b74      	ldr	r3, [pc, #464]	@ (8009908 <_dtoa_r+0x2d8>)
 8009736:	f7f6 fdc7 	bl	80002c8 <__aeabi_dsub>
 800973a:	a369      	add	r3, pc, #420	@ (adr r3, 80098e0 <_dtoa_r+0x2b0>)
 800973c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009740:	f7f6 ff7a 	bl	8000638 <__aeabi_dmul>
 8009744:	a368      	add	r3, pc, #416	@ (adr r3, 80098e8 <_dtoa_r+0x2b8>)
 8009746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974a:	f7f6 fdbf 	bl	80002cc <__adddf3>
 800974e:	4604      	mov	r4, r0
 8009750:	4630      	mov	r0, r6
 8009752:	460d      	mov	r5, r1
 8009754:	f7f6 ff06 	bl	8000564 <__aeabi_i2d>
 8009758:	a365      	add	r3, pc, #404	@ (adr r3, 80098f0 <_dtoa_r+0x2c0>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f7f6 ff6b 	bl	8000638 <__aeabi_dmul>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4620      	mov	r0, r4
 8009768:	4629      	mov	r1, r5
 800976a:	f7f6 fdaf 	bl	80002cc <__adddf3>
 800976e:	4604      	mov	r4, r0
 8009770:	460d      	mov	r5, r1
 8009772:	f7f7 fa11 	bl	8000b98 <__aeabi_d2iz>
 8009776:	2200      	movs	r2, #0
 8009778:	4607      	mov	r7, r0
 800977a:	2300      	movs	r3, #0
 800977c:	4620      	mov	r0, r4
 800977e:	4629      	mov	r1, r5
 8009780:	f7f7 f9cc 	bl	8000b1c <__aeabi_dcmplt>
 8009784:	b140      	cbz	r0, 8009798 <_dtoa_r+0x168>
 8009786:	4638      	mov	r0, r7
 8009788:	f7f6 feec 	bl	8000564 <__aeabi_i2d>
 800978c:	4622      	mov	r2, r4
 800978e:	462b      	mov	r3, r5
 8009790:	f7f7 f9ba 	bl	8000b08 <__aeabi_dcmpeq>
 8009794:	b900      	cbnz	r0, 8009798 <_dtoa_r+0x168>
 8009796:	3f01      	subs	r7, #1
 8009798:	2f16      	cmp	r7, #22
 800979a:	d851      	bhi.n	8009840 <_dtoa_r+0x210>
 800979c:	4b5b      	ldr	r3, [pc, #364]	@ (800990c <_dtoa_r+0x2dc>)
 800979e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097aa:	f7f7 f9b7 	bl	8000b1c <__aeabi_dcmplt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d048      	beq.n	8009844 <_dtoa_r+0x214>
 80097b2:	3f01      	subs	r7, #1
 80097b4:	2300      	movs	r3, #0
 80097b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80097b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097ba:	1b9b      	subs	r3, r3, r6
 80097bc:	1e5a      	subs	r2, r3, #1
 80097be:	bf44      	itt	mi
 80097c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80097c4:	2300      	movmi	r3, #0
 80097c6:	9208      	str	r2, [sp, #32]
 80097c8:	bf54      	ite	pl
 80097ca:	f04f 0800 	movpl.w	r8, #0
 80097ce:	9308      	strmi	r3, [sp, #32]
 80097d0:	2f00      	cmp	r7, #0
 80097d2:	db39      	blt.n	8009848 <_dtoa_r+0x218>
 80097d4:	9b08      	ldr	r3, [sp, #32]
 80097d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80097d8:	443b      	add	r3, r7
 80097da:	9308      	str	r3, [sp, #32]
 80097dc:	2300      	movs	r3, #0
 80097de:	930a      	str	r3, [sp, #40]	@ 0x28
 80097e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e2:	2b09      	cmp	r3, #9
 80097e4:	d864      	bhi.n	80098b0 <_dtoa_r+0x280>
 80097e6:	2b05      	cmp	r3, #5
 80097e8:	bfc4      	itt	gt
 80097ea:	3b04      	subgt	r3, #4
 80097ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80097ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f0:	f1a3 0302 	sub.w	r3, r3, #2
 80097f4:	bfcc      	ite	gt
 80097f6:	2400      	movgt	r4, #0
 80097f8:	2401      	movle	r4, #1
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d863      	bhi.n	80098c6 <_dtoa_r+0x296>
 80097fe:	e8df f003 	tbb	[pc, r3]
 8009802:	372a      	.short	0x372a
 8009804:	5535      	.short	0x5535
 8009806:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800980a:	441e      	add	r6, r3
 800980c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009810:	2b20      	cmp	r3, #32
 8009812:	bfc1      	itttt	gt
 8009814:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009818:	409f      	lslgt	r7, r3
 800981a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800981e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009822:	bfd6      	itet	le
 8009824:	f1c3 0320 	rsble	r3, r3, #32
 8009828:	ea47 0003 	orrgt.w	r0, r7, r3
 800982c:	fa04 f003 	lslle.w	r0, r4, r3
 8009830:	f7f6 fe88 	bl	8000544 <__aeabi_ui2d>
 8009834:	2201      	movs	r2, #1
 8009836:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800983a:	3e01      	subs	r6, #1
 800983c:	9214      	str	r2, [sp, #80]	@ 0x50
 800983e:	e777      	b.n	8009730 <_dtoa_r+0x100>
 8009840:	2301      	movs	r3, #1
 8009842:	e7b8      	b.n	80097b6 <_dtoa_r+0x186>
 8009844:	9012      	str	r0, [sp, #72]	@ 0x48
 8009846:	e7b7      	b.n	80097b8 <_dtoa_r+0x188>
 8009848:	427b      	negs	r3, r7
 800984a:	930a      	str	r3, [sp, #40]	@ 0x28
 800984c:	2300      	movs	r3, #0
 800984e:	eba8 0807 	sub.w	r8, r8, r7
 8009852:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009854:	e7c4      	b.n	80097e0 <_dtoa_r+0x1b0>
 8009856:	2300      	movs	r3, #0
 8009858:	930b      	str	r3, [sp, #44]	@ 0x2c
 800985a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800985c:	2b00      	cmp	r3, #0
 800985e:	dc35      	bgt.n	80098cc <_dtoa_r+0x29c>
 8009860:	2301      	movs	r3, #1
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	9307      	str	r3, [sp, #28]
 8009866:	461a      	mov	r2, r3
 8009868:	920e      	str	r2, [sp, #56]	@ 0x38
 800986a:	e00b      	b.n	8009884 <_dtoa_r+0x254>
 800986c:	2301      	movs	r3, #1
 800986e:	e7f3      	b.n	8009858 <_dtoa_r+0x228>
 8009870:	2300      	movs	r3, #0
 8009872:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009876:	18fb      	adds	r3, r7, r3
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	3301      	adds	r3, #1
 800987c:	2b01      	cmp	r3, #1
 800987e:	9307      	str	r3, [sp, #28]
 8009880:	bfb8      	it	lt
 8009882:	2301      	movlt	r3, #1
 8009884:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009888:	2100      	movs	r1, #0
 800988a:	2204      	movs	r2, #4
 800988c:	f102 0514 	add.w	r5, r2, #20
 8009890:	429d      	cmp	r5, r3
 8009892:	d91f      	bls.n	80098d4 <_dtoa_r+0x2a4>
 8009894:	6041      	str	r1, [r0, #4]
 8009896:	4658      	mov	r0, fp
 8009898:	f000 fd8e 	bl	800a3b8 <_Balloc>
 800989c:	4682      	mov	sl, r0
 800989e:	2800      	cmp	r0, #0
 80098a0:	d13c      	bne.n	800991c <_dtoa_r+0x2ec>
 80098a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009910 <_dtoa_r+0x2e0>)
 80098a4:	4602      	mov	r2, r0
 80098a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80098aa:	e6d8      	b.n	800965e <_dtoa_r+0x2e>
 80098ac:	2301      	movs	r3, #1
 80098ae:	e7e0      	b.n	8009872 <_dtoa_r+0x242>
 80098b0:	2401      	movs	r4, #1
 80098b2:	2300      	movs	r3, #0
 80098b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80098b8:	f04f 33ff 	mov.w	r3, #4294967295
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	9307      	str	r3, [sp, #28]
 80098c0:	2200      	movs	r2, #0
 80098c2:	2312      	movs	r3, #18
 80098c4:	e7d0      	b.n	8009868 <_dtoa_r+0x238>
 80098c6:	2301      	movs	r3, #1
 80098c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098ca:	e7f5      	b.n	80098b8 <_dtoa_r+0x288>
 80098cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	9307      	str	r3, [sp, #28]
 80098d2:	e7d7      	b.n	8009884 <_dtoa_r+0x254>
 80098d4:	3101      	adds	r1, #1
 80098d6:	0052      	lsls	r2, r2, #1
 80098d8:	e7d8      	b.n	800988c <_dtoa_r+0x25c>
 80098da:	bf00      	nop
 80098dc:	f3af 8000 	nop.w
 80098e0:	636f4361 	.word	0x636f4361
 80098e4:	3fd287a7 	.word	0x3fd287a7
 80098e8:	8b60c8b3 	.word	0x8b60c8b3
 80098ec:	3fc68a28 	.word	0x3fc68a28
 80098f0:	509f79fb 	.word	0x509f79fb
 80098f4:	3fd34413 	.word	0x3fd34413
 80098f8:	0800b2a1 	.word	0x0800b2a1
 80098fc:	0800b2b8 	.word	0x0800b2b8
 8009900:	7ff00000 	.word	0x7ff00000
 8009904:	0800b271 	.word	0x0800b271
 8009908:	3ff80000 	.word	0x3ff80000
 800990c:	0800b3b0 	.word	0x0800b3b0
 8009910:	0800b310 	.word	0x0800b310
 8009914:	0800b29d 	.word	0x0800b29d
 8009918:	0800b270 	.word	0x0800b270
 800991c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009920:	6018      	str	r0, [r3, #0]
 8009922:	9b07      	ldr	r3, [sp, #28]
 8009924:	2b0e      	cmp	r3, #14
 8009926:	f200 80a4 	bhi.w	8009a72 <_dtoa_r+0x442>
 800992a:	2c00      	cmp	r4, #0
 800992c:	f000 80a1 	beq.w	8009a72 <_dtoa_r+0x442>
 8009930:	2f00      	cmp	r7, #0
 8009932:	dd33      	ble.n	800999c <_dtoa_r+0x36c>
 8009934:	4bad      	ldr	r3, [pc, #692]	@ (8009bec <_dtoa_r+0x5bc>)
 8009936:	f007 020f 	and.w	r2, r7, #15
 800993a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800993e:	ed93 7b00 	vldr	d7, [r3]
 8009942:	05f8      	lsls	r0, r7, #23
 8009944:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009948:	ea4f 1427 	mov.w	r4, r7, asr #4
 800994c:	d516      	bpl.n	800997c <_dtoa_r+0x34c>
 800994e:	4ba8      	ldr	r3, [pc, #672]	@ (8009bf0 <_dtoa_r+0x5c0>)
 8009950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009954:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009958:	f7f6 ff98 	bl	800088c <__aeabi_ddiv>
 800995c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009960:	f004 040f 	and.w	r4, r4, #15
 8009964:	2603      	movs	r6, #3
 8009966:	4da2      	ldr	r5, [pc, #648]	@ (8009bf0 <_dtoa_r+0x5c0>)
 8009968:	b954      	cbnz	r4, 8009980 <_dtoa_r+0x350>
 800996a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800996e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009972:	f7f6 ff8b 	bl	800088c <__aeabi_ddiv>
 8009976:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800997a:	e028      	b.n	80099ce <_dtoa_r+0x39e>
 800997c:	2602      	movs	r6, #2
 800997e:	e7f2      	b.n	8009966 <_dtoa_r+0x336>
 8009980:	07e1      	lsls	r1, r4, #31
 8009982:	d508      	bpl.n	8009996 <_dtoa_r+0x366>
 8009984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009988:	e9d5 2300 	ldrd	r2, r3, [r5]
 800998c:	f7f6 fe54 	bl	8000638 <__aeabi_dmul>
 8009990:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009994:	3601      	adds	r6, #1
 8009996:	1064      	asrs	r4, r4, #1
 8009998:	3508      	adds	r5, #8
 800999a:	e7e5      	b.n	8009968 <_dtoa_r+0x338>
 800999c:	f000 80d2 	beq.w	8009b44 <_dtoa_r+0x514>
 80099a0:	427c      	negs	r4, r7
 80099a2:	4b92      	ldr	r3, [pc, #584]	@ (8009bec <_dtoa_r+0x5bc>)
 80099a4:	4d92      	ldr	r5, [pc, #584]	@ (8009bf0 <_dtoa_r+0x5c0>)
 80099a6:	f004 020f 	and.w	r2, r4, #15
 80099aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099b6:	f7f6 fe3f 	bl	8000638 <__aeabi_dmul>
 80099ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099be:	1124      	asrs	r4, r4, #4
 80099c0:	2300      	movs	r3, #0
 80099c2:	2602      	movs	r6, #2
 80099c4:	2c00      	cmp	r4, #0
 80099c6:	f040 80b2 	bne.w	8009b2e <_dtoa_r+0x4fe>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1d3      	bne.n	8009976 <_dtoa_r+0x346>
 80099ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 80b7 	beq.w	8009b48 <_dtoa_r+0x518>
 80099da:	4b86      	ldr	r3, [pc, #536]	@ (8009bf4 <_dtoa_r+0x5c4>)
 80099dc:	2200      	movs	r2, #0
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f7 f89b 	bl	8000b1c <__aeabi_dcmplt>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f000 80ae 	beq.w	8009b48 <_dtoa_r+0x518>
 80099ec:	9b07      	ldr	r3, [sp, #28]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 80aa 	beq.w	8009b48 <_dtoa_r+0x518>
 80099f4:	9b00      	ldr	r3, [sp, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	dd37      	ble.n	8009a6a <_dtoa_r+0x43a>
 80099fa:	1e7b      	subs	r3, r7, #1
 80099fc:	9304      	str	r3, [sp, #16]
 80099fe:	4620      	mov	r0, r4
 8009a00:	4b7d      	ldr	r3, [pc, #500]	@ (8009bf8 <_dtoa_r+0x5c8>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	4629      	mov	r1, r5
 8009a06:	f7f6 fe17 	bl	8000638 <__aeabi_dmul>
 8009a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a0e:	9c00      	ldr	r4, [sp, #0]
 8009a10:	3601      	adds	r6, #1
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7f6 fda6 	bl	8000564 <__aeabi_i2d>
 8009a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a1c:	f7f6 fe0c 	bl	8000638 <__aeabi_dmul>
 8009a20:	4b76      	ldr	r3, [pc, #472]	@ (8009bfc <_dtoa_r+0x5cc>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	f7f6 fc52 	bl	80002cc <__adddf3>
 8009a28:	4605      	mov	r5, r0
 8009a2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a2e:	2c00      	cmp	r4, #0
 8009a30:	f040 808d 	bne.w	8009b4e <_dtoa_r+0x51e>
 8009a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a38:	4b71      	ldr	r3, [pc, #452]	@ (8009c00 <_dtoa_r+0x5d0>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f7f6 fc44 	bl	80002c8 <__aeabi_dsub>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a48:	462a      	mov	r2, r5
 8009a4a:	4633      	mov	r3, r6
 8009a4c:	f7f7 f884 	bl	8000b58 <__aeabi_dcmpgt>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f040 828b 	bne.w	8009f6c <_dtoa_r+0x93c>
 8009a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a60:	f7f7 f85c 	bl	8000b1c <__aeabi_dcmplt>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	f040 8128 	bne.w	8009cba <_dtoa_r+0x68a>
 8009a6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009a6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f2c0 815a 	blt.w	8009d2e <_dtoa_r+0x6fe>
 8009a7a:	2f0e      	cmp	r7, #14
 8009a7c:	f300 8157 	bgt.w	8009d2e <_dtoa_r+0x6fe>
 8009a80:	4b5a      	ldr	r3, [pc, #360]	@ (8009bec <_dtoa_r+0x5bc>)
 8009a82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a86:	ed93 7b00 	vldr	d7, [r3]
 8009a8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	ed8d 7b00 	vstr	d7, [sp]
 8009a92:	da03      	bge.n	8009a9c <_dtoa_r+0x46c>
 8009a94:	9b07      	ldr	r3, [sp, #28]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f340 8101 	ble.w	8009c9e <_dtoa_r+0x66e>
 8009a9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009aa0:	4656      	mov	r6, sl
 8009aa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	f7f6 feef 	bl	800088c <__aeabi_ddiv>
 8009aae:	f7f7 f873 	bl	8000b98 <__aeabi_d2iz>
 8009ab2:	4680      	mov	r8, r0
 8009ab4:	f7f6 fd56 	bl	8000564 <__aeabi_i2d>
 8009ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009abc:	f7f6 fdbc 	bl	8000638 <__aeabi_dmul>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009acc:	f7f6 fbfc 	bl	80002c8 <__aeabi_dsub>
 8009ad0:	f806 4b01 	strb.w	r4, [r6], #1
 8009ad4:	9d07      	ldr	r5, [sp, #28]
 8009ad6:	eba6 040a 	sub.w	r4, r6, sl
 8009ada:	42a5      	cmp	r5, r4
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	f040 8117 	bne.w	8009d12 <_dtoa_r+0x6e2>
 8009ae4:	f7f6 fbf2 	bl	80002cc <__adddf3>
 8009ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aec:	4604      	mov	r4, r0
 8009aee:	460d      	mov	r5, r1
 8009af0:	f7f7 f832 	bl	8000b58 <__aeabi_dcmpgt>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	f040 80f9 	bne.w	8009cec <_dtoa_r+0x6bc>
 8009afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009afe:	4620      	mov	r0, r4
 8009b00:	4629      	mov	r1, r5
 8009b02:	f7f7 f801 	bl	8000b08 <__aeabi_dcmpeq>
 8009b06:	b118      	cbz	r0, 8009b10 <_dtoa_r+0x4e0>
 8009b08:	f018 0f01 	tst.w	r8, #1
 8009b0c:	f040 80ee 	bne.w	8009cec <_dtoa_r+0x6bc>
 8009b10:	4649      	mov	r1, r9
 8009b12:	4658      	mov	r0, fp
 8009b14:	f000 fc90 	bl	800a438 <_Bfree>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	7033      	strb	r3, [r6, #0]
 8009b1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b1e:	3701      	adds	r7, #1
 8009b20:	601f      	str	r7, [r3, #0]
 8009b22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 831d 	beq.w	800a164 <_dtoa_r+0xb34>
 8009b2a:	601e      	str	r6, [r3, #0]
 8009b2c:	e31a      	b.n	800a164 <_dtoa_r+0xb34>
 8009b2e:	07e2      	lsls	r2, r4, #31
 8009b30:	d505      	bpl.n	8009b3e <_dtoa_r+0x50e>
 8009b32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b36:	f7f6 fd7f 	bl	8000638 <__aeabi_dmul>
 8009b3a:	3601      	adds	r6, #1
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	1064      	asrs	r4, r4, #1
 8009b40:	3508      	adds	r5, #8
 8009b42:	e73f      	b.n	80099c4 <_dtoa_r+0x394>
 8009b44:	2602      	movs	r6, #2
 8009b46:	e742      	b.n	80099ce <_dtoa_r+0x39e>
 8009b48:	9c07      	ldr	r4, [sp, #28]
 8009b4a:	9704      	str	r7, [sp, #16]
 8009b4c:	e761      	b.n	8009a12 <_dtoa_r+0x3e2>
 8009b4e:	4b27      	ldr	r3, [pc, #156]	@ (8009bec <_dtoa_r+0x5bc>)
 8009b50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b5a:	4454      	add	r4, sl
 8009b5c:	2900      	cmp	r1, #0
 8009b5e:	d053      	beq.n	8009c08 <_dtoa_r+0x5d8>
 8009b60:	4928      	ldr	r1, [pc, #160]	@ (8009c04 <_dtoa_r+0x5d4>)
 8009b62:	2000      	movs	r0, #0
 8009b64:	f7f6 fe92 	bl	800088c <__aeabi_ddiv>
 8009b68:	4633      	mov	r3, r6
 8009b6a:	462a      	mov	r2, r5
 8009b6c:	f7f6 fbac 	bl	80002c8 <__aeabi_dsub>
 8009b70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b74:	4656      	mov	r6, sl
 8009b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b7a:	f7f7 f80d 	bl	8000b98 <__aeabi_d2iz>
 8009b7e:	4605      	mov	r5, r0
 8009b80:	f7f6 fcf0 	bl	8000564 <__aeabi_i2d>
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b8c:	f7f6 fb9c 	bl	80002c8 <__aeabi_dsub>
 8009b90:	3530      	adds	r5, #48	@ 0x30
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b9a:	f806 5b01 	strb.w	r5, [r6], #1
 8009b9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ba2:	f7f6 ffbb 	bl	8000b1c <__aeabi_dcmplt>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d171      	bne.n	8009c8e <_dtoa_r+0x65e>
 8009baa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bae:	4911      	ldr	r1, [pc, #68]	@ (8009bf4 <_dtoa_r+0x5c4>)
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	f7f6 fb89 	bl	80002c8 <__aeabi_dsub>
 8009bb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bba:	f7f6 ffaf 	bl	8000b1c <__aeabi_dcmplt>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	f040 8095 	bne.w	8009cee <_dtoa_r+0x6be>
 8009bc4:	42a6      	cmp	r6, r4
 8009bc6:	f43f af50 	beq.w	8009a6a <_dtoa_r+0x43a>
 8009bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009bce:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf8 <_dtoa_r+0x5c8>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f7f6 fd31 	bl	8000638 <__aeabi_dmul>
 8009bd6:	4b08      	ldr	r3, [pc, #32]	@ (8009bf8 <_dtoa_r+0x5c8>)
 8009bd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bdc:	2200      	movs	r2, #0
 8009bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009be2:	f7f6 fd29 	bl	8000638 <__aeabi_dmul>
 8009be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bea:	e7c4      	b.n	8009b76 <_dtoa_r+0x546>
 8009bec:	0800b3b0 	.word	0x0800b3b0
 8009bf0:	0800b388 	.word	0x0800b388
 8009bf4:	3ff00000 	.word	0x3ff00000
 8009bf8:	40240000 	.word	0x40240000
 8009bfc:	401c0000 	.word	0x401c0000
 8009c00:	40140000 	.word	0x40140000
 8009c04:	3fe00000 	.word	0x3fe00000
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	f7f6 fd14 	bl	8000638 <__aeabi_dmul>
 8009c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c14:	9415      	str	r4, [sp, #84]	@ 0x54
 8009c16:	4656      	mov	r6, sl
 8009c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c1c:	f7f6 ffbc 	bl	8000b98 <__aeabi_d2iz>
 8009c20:	4605      	mov	r5, r0
 8009c22:	f7f6 fc9f 	bl	8000564 <__aeabi_i2d>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c2e:	f7f6 fb4b 	bl	80002c8 <__aeabi_dsub>
 8009c32:	3530      	adds	r5, #48	@ 0x30
 8009c34:	f806 5b01 	strb.w	r5, [r6], #1
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	42a6      	cmp	r6, r4
 8009c3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c42:	f04f 0200 	mov.w	r2, #0
 8009c46:	d124      	bne.n	8009c92 <_dtoa_r+0x662>
 8009c48:	4bac      	ldr	r3, [pc, #688]	@ (8009efc <_dtoa_r+0x8cc>)
 8009c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c4e:	f7f6 fb3d 	bl	80002cc <__adddf3>
 8009c52:	4602      	mov	r2, r0
 8009c54:	460b      	mov	r3, r1
 8009c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c5a:	f7f6 ff7d 	bl	8000b58 <__aeabi_dcmpgt>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d145      	bne.n	8009cee <_dtoa_r+0x6be>
 8009c62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c66:	49a5      	ldr	r1, [pc, #660]	@ (8009efc <_dtoa_r+0x8cc>)
 8009c68:	2000      	movs	r0, #0
 8009c6a:	f7f6 fb2d 	bl	80002c8 <__aeabi_dsub>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c76:	f7f6 ff51 	bl	8000b1c <__aeabi_dcmplt>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	f43f aef5 	beq.w	8009a6a <_dtoa_r+0x43a>
 8009c80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009c82:	1e73      	subs	r3, r6, #1
 8009c84:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c8a:	2b30      	cmp	r3, #48	@ 0x30
 8009c8c:	d0f8      	beq.n	8009c80 <_dtoa_r+0x650>
 8009c8e:	9f04      	ldr	r7, [sp, #16]
 8009c90:	e73e      	b.n	8009b10 <_dtoa_r+0x4e0>
 8009c92:	4b9b      	ldr	r3, [pc, #620]	@ (8009f00 <_dtoa_r+0x8d0>)
 8009c94:	f7f6 fcd0 	bl	8000638 <__aeabi_dmul>
 8009c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c9c:	e7bc      	b.n	8009c18 <_dtoa_r+0x5e8>
 8009c9e:	d10c      	bne.n	8009cba <_dtoa_r+0x68a>
 8009ca0:	4b98      	ldr	r3, [pc, #608]	@ (8009f04 <_dtoa_r+0x8d4>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ca8:	f7f6 fcc6 	bl	8000638 <__aeabi_dmul>
 8009cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cb0:	f7f6 ff48 	bl	8000b44 <__aeabi_dcmpge>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f000 8157 	beq.w	8009f68 <_dtoa_r+0x938>
 8009cba:	2400      	movs	r4, #0
 8009cbc:	4625      	mov	r5, r4
 8009cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cc0:	43db      	mvns	r3, r3
 8009cc2:	9304      	str	r3, [sp, #16]
 8009cc4:	4656      	mov	r6, sl
 8009cc6:	2700      	movs	r7, #0
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4658      	mov	r0, fp
 8009ccc:	f000 fbb4 	bl	800a438 <_Bfree>
 8009cd0:	2d00      	cmp	r5, #0
 8009cd2:	d0dc      	beq.n	8009c8e <_dtoa_r+0x65e>
 8009cd4:	b12f      	cbz	r7, 8009ce2 <_dtoa_r+0x6b2>
 8009cd6:	42af      	cmp	r7, r5
 8009cd8:	d003      	beq.n	8009ce2 <_dtoa_r+0x6b2>
 8009cda:	4639      	mov	r1, r7
 8009cdc:	4658      	mov	r0, fp
 8009cde:	f000 fbab 	bl	800a438 <_Bfree>
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	4658      	mov	r0, fp
 8009ce6:	f000 fba7 	bl	800a438 <_Bfree>
 8009cea:	e7d0      	b.n	8009c8e <_dtoa_r+0x65e>
 8009cec:	9704      	str	r7, [sp, #16]
 8009cee:	4633      	mov	r3, r6
 8009cf0:	461e      	mov	r6, r3
 8009cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cf6:	2a39      	cmp	r2, #57	@ 0x39
 8009cf8:	d107      	bne.n	8009d0a <_dtoa_r+0x6da>
 8009cfa:	459a      	cmp	sl, r3
 8009cfc:	d1f8      	bne.n	8009cf0 <_dtoa_r+0x6c0>
 8009cfe:	9a04      	ldr	r2, [sp, #16]
 8009d00:	3201      	adds	r2, #1
 8009d02:	9204      	str	r2, [sp, #16]
 8009d04:	2230      	movs	r2, #48	@ 0x30
 8009d06:	f88a 2000 	strb.w	r2, [sl]
 8009d0a:	781a      	ldrb	r2, [r3, #0]
 8009d0c:	3201      	adds	r2, #1
 8009d0e:	701a      	strb	r2, [r3, #0]
 8009d10:	e7bd      	b.n	8009c8e <_dtoa_r+0x65e>
 8009d12:	4b7b      	ldr	r3, [pc, #492]	@ (8009f00 <_dtoa_r+0x8d0>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	f7f6 fc8f 	bl	8000638 <__aeabi_dmul>
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4604      	mov	r4, r0
 8009d20:	460d      	mov	r5, r1
 8009d22:	f7f6 fef1 	bl	8000b08 <__aeabi_dcmpeq>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	f43f aebb 	beq.w	8009aa2 <_dtoa_r+0x472>
 8009d2c:	e6f0      	b.n	8009b10 <_dtoa_r+0x4e0>
 8009d2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	f000 80db 	beq.w	8009eec <_dtoa_r+0x8bc>
 8009d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d38:	2a01      	cmp	r2, #1
 8009d3a:	f300 80bf 	bgt.w	8009ebc <_dtoa_r+0x88c>
 8009d3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009d40:	2a00      	cmp	r2, #0
 8009d42:	f000 80b7 	beq.w	8009eb4 <_dtoa_r+0x884>
 8009d46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d4c:	4646      	mov	r6, r8
 8009d4e:	9a08      	ldr	r2, [sp, #32]
 8009d50:	2101      	movs	r1, #1
 8009d52:	441a      	add	r2, r3
 8009d54:	4658      	mov	r0, fp
 8009d56:	4498      	add	r8, r3
 8009d58:	9208      	str	r2, [sp, #32]
 8009d5a:	f000 fc21 	bl	800a5a0 <__i2b>
 8009d5e:	4605      	mov	r5, r0
 8009d60:	b15e      	cbz	r6, 8009d7a <_dtoa_r+0x74a>
 8009d62:	9b08      	ldr	r3, [sp, #32]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dd08      	ble.n	8009d7a <_dtoa_r+0x74a>
 8009d68:	42b3      	cmp	r3, r6
 8009d6a:	9a08      	ldr	r2, [sp, #32]
 8009d6c:	bfa8      	it	ge
 8009d6e:	4633      	movge	r3, r6
 8009d70:	eba8 0803 	sub.w	r8, r8, r3
 8009d74:	1af6      	subs	r6, r6, r3
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	9308      	str	r3, [sp, #32]
 8009d7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d7c:	b1f3      	cbz	r3, 8009dbc <_dtoa_r+0x78c>
 8009d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 80b7 	beq.w	8009ef4 <_dtoa_r+0x8c4>
 8009d86:	b18c      	cbz	r4, 8009dac <_dtoa_r+0x77c>
 8009d88:	4629      	mov	r1, r5
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	4658      	mov	r0, fp
 8009d8e:	f000 fcc7 	bl	800a720 <__pow5mult>
 8009d92:	464a      	mov	r2, r9
 8009d94:	4601      	mov	r1, r0
 8009d96:	4605      	mov	r5, r0
 8009d98:	4658      	mov	r0, fp
 8009d9a:	f000 fc17 	bl	800a5cc <__multiply>
 8009d9e:	4649      	mov	r1, r9
 8009da0:	9004      	str	r0, [sp, #16]
 8009da2:	4658      	mov	r0, fp
 8009da4:	f000 fb48 	bl	800a438 <_Bfree>
 8009da8:	9b04      	ldr	r3, [sp, #16]
 8009daa:	4699      	mov	r9, r3
 8009dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dae:	1b1a      	subs	r2, r3, r4
 8009db0:	d004      	beq.n	8009dbc <_dtoa_r+0x78c>
 8009db2:	4649      	mov	r1, r9
 8009db4:	4658      	mov	r0, fp
 8009db6:	f000 fcb3 	bl	800a720 <__pow5mult>
 8009dba:	4681      	mov	r9, r0
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	4658      	mov	r0, fp
 8009dc0:	f000 fbee 	bl	800a5a0 <__i2b>
 8009dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 81cf 	beq.w	800a16c <_dtoa_r+0xb3c>
 8009dce:	461a      	mov	r2, r3
 8009dd0:	4601      	mov	r1, r0
 8009dd2:	4658      	mov	r0, fp
 8009dd4:	f000 fca4 	bl	800a720 <__pow5mult>
 8009dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	4604      	mov	r4, r0
 8009dde:	f300 8095 	bgt.w	8009f0c <_dtoa_r+0x8dc>
 8009de2:	9b02      	ldr	r3, [sp, #8]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f040 8087 	bne.w	8009ef8 <_dtoa_r+0x8c8>
 8009dea:	9b03      	ldr	r3, [sp, #12]
 8009dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f040 8089 	bne.w	8009f08 <_dtoa_r+0x8d8>
 8009df6:	9b03      	ldr	r3, [sp, #12]
 8009df8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009dfc:	0d1b      	lsrs	r3, r3, #20
 8009dfe:	051b      	lsls	r3, r3, #20
 8009e00:	b12b      	cbz	r3, 8009e0e <_dtoa_r+0x7de>
 8009e02:	9b08      	ldr	r3, [sp, #32]
 8009e04:	3301      	adds	r3, #1
 8009e06:	9308      	str	r3, [sp, #32]
 8009e08:	f108 0801 	add.w	r8, r8, #1
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 81b0 	beq.w	800a178 <_dtoa_r+0xb48>
 8009e18:	6923      	ldr	r3, [r4, #16]
 8009e1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e1e:	6918      	ldr	r0, [r3, #16]
 8009e20:	f000 fb72 	bl	800a508 <__hi0bits>
 8009e24:	f1c0 0020 	rsb	r0, r0, #32
 8009e28:	9b08      	ldr	r3, [sp, #32]
 8009e2a:	4418      	add	r0, r3
 8009e2c:	f010 001f 	ands.w	r0, r0, #31
 8009e30:	d077      	beq.n	8009f22 <_dtoa_r+0x8f2>
 8009e32:	f1c0 0320 	rsb	r3, r0, #32
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	dd6b      	ble.n	8009f12 <_dtoa_r+0x8e2>
 8009e3a:	9b08      	ldr	r3, [sp, #32]
 8009e3c:	f1c0 001c 	rsb	r0, r0, #28
 8009e40:	4403      	add	r3, r0
 8009e42:	4480      	add	r8, r0
 8009e44:	4406      	add	r6, r0
 8009e46:	9308      	str	r3, [sp, #32]
 8009e48:	f1b8 0f00 	cmp.w	r8, #0
 8009e4c:	dd05      	ble.n	8009e5a <_dtoa_r+0x82a>
 8009e4e:	4649      	mov	r1, r9
 8009e50:	4642      	mov	r2, r8
 8009e52:	4658      	mov	r0, fp
 8009e54:	f000 fcbe 	bl	800a7d4 <__lshift>
 8009e58:	4681      	mov	r9, r0
 8009e5a:	9b08      	ldr	r3, [sp, #32]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dd05      	ble.n	8009e6c <_dtoa_r+0x83c>
 8009e60:	4621      	mov	r1, r4
 8009e62:	461a      	mov	r2, r3
 8009e64:	4658      	mov	r0, fp
 8009e66:	f000 fcb5 	bl	800a7d4 <__lshift>
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d059      	beq.n	8009f26 <_dtoa_r+0x8f6>
 8009e72:	4621      	mov	r1, r4
 8009e74:	4648      	mov	r0, r9
 8009e76:	f000 fd19 	bl	800a8ac <__mcmp>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	da53      	bge.n	8009f26 <_dtoa_r+0x8f6>
 8009e7e:	1e7b      	subs	r3, r7, #1
 8009e80:	9304      	str	r3, [sp, #16]
 8009e82:	4649      	mov	r1, r9
 8009e84:	2300      	movs	r3, #0
 8009e86:	220a      	movs	r2, #10
 8009e88:	4658      	mov	r0, fp
 8009e8a:	f000 faf7 	bl	800a47c <__multadd>
 8009e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e90:	4681      	mov	r9, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f000 8172 	beq.w	800a17c <_dtoa_r+0xb4c>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	220a      	movs	r2, #10
 8009e9e:	4658      	mov	r0, fp
 8009ea0:	f000 faec 	bl	800a47c <__multadd>
 8009ea4:	9b00      	ldr	r3, [sp, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	4605      	mov	r5, r0
 8009eaa:	dc67      	bgt.n	8009f7c <_dtoa_r+0x94c>
 8009eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	dc41      	bgt.n	8009f36 <_dtoa_r+0x906>
 8009eb2:	e063      	b.n	8009f7c <_dtoa_r+0x94c>
 8009eb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009eb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009eba:	e746      	b.n	8009d4a <_dtoa_r+0x71a>
 8009ebc:	9b07      	ldr	r3, [sp, #28]
 8009ebe:	1e5c      	subs	r4, r3, #1
 8009ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ec2:	42a3      	cmp	r3, r4
 8009ec4:	bfbf      	itttt	lt
 8009ec6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ec8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009eca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009ecc:	1ae3      	sublt	r3, r4, r3
 8009ece:	bfb4      	ite	lt
 8009ed0:	18d2      	addlt	r2, r2, r3
 8009ed2:	1b1c      	subge	r4, r3, r4
 8009ed4:	9b07      	ldr	r3, [sp, #28]
 8009ed6:	bfbc      	itt	lt
 8009ed8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009eda:	2400      	movlt	r4, #0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfb5      	itete	lt
 8009ee0:	eba8 0603 	sublt.w	r6, r8, r3
 8009ee4:	9b07      	ldrge	r3, [sp, #28]
 8009ee6:	2300      	movlt	r3, #0
 8009ee8:	4646      	movge	r6, r8
 8009eea:	e730      	b.n	8009d4e <_dtoa_r+0x71e>
 8009eec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009eee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ef0:	4646      	mov	r6, r8
 8009ef2:	e735      	b.n	8009d60 <_dtoa_r+0x730>
 8009ef4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ef6:	e75c      	b.n	8009db2 <_dtoa_r+0x782>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e788      	b.n	8009e0e <_dtoa_r+0x7de>
 8009efc:	3fe00000 	.word	0x3fe00000
 8009f00:	40240000 	.word	0x40240000
 8009f04:	40140000 	.word	0x40140000
 8009f08:	9b02      	ldr	r3, [sp, #8]
 8009f0a:	e780      	b.n	8009e0e <_dtoa_r+0x7de>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f10:	e782      	b.n	8009e18 <_dtoa_r+0x7e8>
 8009f12:	d099      	beq.n	8009e48 <_dtoa_r+0x818>
 8009f14:	9a08      	ldr	r2, [sp, #32]
 8009f16:	331c      	adds	r3, #28
 8009f18:	441a      	add	r2, r3
 8009f1a:	4498      	add	r8, r3
 8009f1c:	441e      	add	r6, r3
 8009f1e:	9208      	str	r2, [sp, #32]
 8009f20:	e792      	b.n	8009e48 <_dtoa_r+0x818>
 8009f22:	4603      	mov	r3, r0
 8009f24:	e7f6      	b.n	8009f14 <_dtoa_r+0x8e4>
 8009f26:	9b07      	ldr	r3, [sp, #28]
 8009f28:	9704      	str	r7, [sp, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	dc20      	bgt.n	8009f70 <_dtoa_r+0x940>
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	dd1e      	ble.n	8009f74 <_dtoa_r+0x944>
 8009f36:	9b00      	ldr	r3, [sp, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f47f aec0 	bne.w	8009cbe <_dtoa_r+0x68e>
 8009f3e:	4621      	mov	r1, r4
 8009f40:	2205      	movs	r2, #5
 8009f42:	4658      	mov	r0, fp
 8009f44:	f000 fa9a 	bl	800a47c <__multadd>
 8009f48:	4601      	mov	r1, r0
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4648      	mov	r0, r9
 8009f4e:	f000 fcad 	bl	800a8ac <__mcmp>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	f77f aeb3 	ble.w	8009cbe <_dtoa_r+0x68e>
 8009f58:	4656      	mov	r6, sl
 8009f5a:	2331      	movs	r3, #49	@ 0x31
 8009f5c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f60:	9b04      	ldr	r3, [sp, #16]
 8009f62:	3301      	adds	r3, #1
 8009f64:	9304      	str	r3, [sp, #16]
 8009f66:	e6ae      	b.n	8009cc6 <_dtoa_r+0x696>
 8009f68:	9c07      	ldr	r4, [sp, #28]
 8009f6a:	9704      	str	r7, [sp, #16]
 8009f6c:	4625      	mov	r5, r4
 8009f6e:	e7f3      	b.n	8009f58 <_dtoa_r+0x928>
 8009f70:	9b07      	ldr	r3, [sp, #28]
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 8104 	beq.w	800a184 <_dtoa_r+0xb54>
 8009f7c:	2e00      	cmp	r6, #0
 8009f7e:	dd05      	ble.n	8009f8c <_dtoa_r+0x95c>
 8009f80:	4629      	mov	r1, r5
 8009f82:	4632      	mov	r2, r6
 8009f84:	4658      	mov	r0, fp
 8009f86:	f000 fc25 	bl	800a7d4 <__lshift>
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d05a      	beq.n	800a048 <_dtoa_r+0xa18>
 8009f92:	6869      	ldr	r1, [r5, #4]
 8009f94:	4658      	mov	r0, fp
 8009f96:	f000 fa0f 	bl	800a3b8 <_Balloc>
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	b928      	cbnz	r0, 8009faa <_dtoa_r+0x97a>
 8009f9e:	4b84      	ldr	r3, [pc, #528]	@ (800a1b0 <_dtoa_r+0xb80>)
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fa6:	f7ff bb5a 	b.w	800965e <_dtoa_r+0x2e>
 8009faa:	692a      	ldr	r2, [r5, #16]
 8009fac:	3202      	adds	r2, #2
 8009fae:	0092      	lsls	r2, r2, #2
 8009fb0:	f105 010c 	add.w	r1, r5, #12
 8009fb4:	300c      	adds	r0, #12
 8009fb6:	f7ff faa4 	bl	8009502 <memcpy>
 8009fba:	2201      	movs	r2, #1
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4658      	mov	r0, fp
 8009fc0:	f000 fc08 	bl	800a7d4 <__lshift>
 8009fc4:	f10a 0301 	add.w	r3, sl, #1
 8009fc8:	9307      	str	r3, [sp, #28]
 8009fca:	9b00      	ldr	r3, [sp, #0]
 8009fcc:	4453      	add	r3, sl
 8009fce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fd0:	9b02      	ldr	r3, [sp, #8]
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	462f      	mov	r7, r5
 8009fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fda:	4605      	mov	r5, r0
 8009fdc:	9b07      	ldr	r3, [sp, #28]
 8009fde:	4621      	mov	r1, r4
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	4648      	mov	r0, r9
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	f7ff fa9a 	bl	800951e <quorem>
 8009fea:	4639      	mov	r1, r7
 8009fec:	9002      	str	r0, [sp, #8]
 8009fee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ff2:	4648      	mov	r0, r9
 8009ff4:	f000 fc5a 	bl	800a8ac <__mcmp>
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	9008      	str	r0, [sp, #32]
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4658      	mov	r0, fp
 800a000:	f000 fc70 	bl	800a8e4 <__mdiff>
 800a004:	68c2      	ldr	r2, [r0, #12]
 800a006:	4606      	mov	r6, r0
 800a008:	bb02      	cbnz	r2, 800a04c <_dtoa_r+0xa1c>
 800a00a:	4601      	mov	r1, r0
 800a00c:	4648      	mov	r0, r9
 800a00e:	f000 fc4d 	bl	800a8ac <__mcmp>
 800a012:	4602      	mov	r2, r0
 800a014:	4631      	mov	r1, r6
 800a016:	4658      	mov	r0, fp
 800a018:	920e      	str	r2, [sp, #56]	@ 0x38
 800a01a:	f000 fa0d 	bl	800a438 <_Bfree>
 800a01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a020:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a022:	9e07      	ldr	r6, [sp, #28]
 800a024:	ea43 0102 	orr.w	r1, r3, r2
 800a028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a02a:	4319      	orrs	r1, r3
 800a02c:	d110      	bne.n	800a050 <_dtoa_r+0xa20>
 800a02e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a032:	d029      	beq.n	800a088 <_dtoa_r+0xa58>
 800a034:	9b08      	ldr	r3, [sp, #32]
 800a036:	2b00      	cmp	r3, #0
 800a038:	dd02      	ble.n	800a040 <_dtoa_r+0xa10>
 800a03a:	9b02      	ldr	r3, [sp, #8]
 800a03c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a040:	9b00      	ldr	r3, [sp, #0]
 800a042:	f883 8000 	strb.w	r8, [r3]
 800a046:	e63f      	b.n	8009cc8 <_dtoa_r+0x698>
 800a048:	4628      	mov	r0, r5
 800a04a:	e7bb      	b.n	8009fc4 <_dtoa_r+0x994>
 800a04c:	2201      	movs	r2, #1
 800a04e:	e7e1      	b.n	800a014 <_dtoa_r+0x9e4>
 800a050:	9b08      	ldr	r3, [sp, #32]
 800a052:	2b00      	cmp	r3, #0
 800a054:	db04      	blt.n	800a060 <_dtoa_r+0xa30>
 800a056:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a058:	430b      	orrs	r3, r1
 800a05a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a05c:	430b      	orrs	r3, r1
 800a05e:	d120      	bne.n	800a0a2 <_dtoa_r+0xa72>
 800a060:	2a00      	cmp	r2, #0
 800a062:	dded      	ble.n	800a040 <_dtoa_r+0xa10>
 800a064:	4649      	mov	r1, r9
 800a066:	2201      	movs	r2, #1
 800a068:	4658      	mov	r0, fp
 800a06a:	f000 fbb3 	bl	800a7d4 <__lshift>
 800a06e:	4621      	mov	r1, r4
 800a070:	4681      	mov	r9, r0
 800a072:	f000 fc1b 	bl	800a8ac <__mcmp>
 800a076:	2800      	cmp	r0, #0
 800a078:	dc03      	bgt.n	800a082 <_dtoa_r+0xa52>
 800a07a:	d1e1      	bne.n	800a040 <_dtoa_r+0xa10>
 800a07c:	f018 0f01 	tst.w	r8, #1
 800a080:	d0de      	beq.n	800a040 <_dtoa_r+0xa10>
 800a082:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a086:	d1d8      	bne.n	800a03a <_dtoa_r+0xa0a>
 800a088:	9a00      	ldr	r2, [sp, #0]
 800a08a:	2339      	movs	r3, #57	@ 0x39
 800a08c:	7013      	strb	r3, [r2, #0]
 800a08e:	4633      	mov	r3, r6
 800a090:	461e      	mov	r6, r3
 800a092:	3b01      	subs	r3, #1
 800a094:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a098:	2a39      	cmp	r2, #57	@ 0x39
 800a09a:	d052      	beq.n	800a142 <_dtoa_r+0xb12>
 800a09c:	3201      	adds	r2, #1
 800a09e:	701a      	strb	r2, [r3, #0]
 800a0a0:	e612      	b.n	8009cc8 <_dtoa_r+0x698>
 800a0a2:	2a00      	cmp	r2, #0
 800a0a4:	dd07      	ble.n	800a0b6 <_dtoa_r+0xa86>
 800a0a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0aa:	d0ed      	beq.n	800a088 <_dtoa_r+0xa58>
 800a0ac:	9a00      	ldr	r2, [sp, #0]
 800a0ae:	f108 0301 	add.w	r3, r8, #1
 800a0b2:	7013      	strb	r3, [r2, #0]
 800a0b4:	e608      	b.n	8009cc8 <_dtoa_r+0x698>
 800a0b6:	9b07      	ldr	r3, [sp, #28]
 800a0b8:	9a07      	ldr	r2, [sp, #28]
 800a0ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a0be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d028      	beq.n	800a116 <_dtoa_r+0xae6>
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	220a      	movs	r2, #10
 800a0ca:	4658      	mov	r0, fp
 800a0cc:	f000 f9d6 	bl	800a47c <__multadd>
 800a0d0:	42af      	cmp	r7, r5
 800a0d2:	4681      	mov	r9, r0
 800a0d4:	f04f 0300 	mov.w	r3, #0
 800a0d8:	f04f 020a 	mov.w	r2, #10
 800a0dc:	4639      	mov	r1, r7
 800a0de:	4658      	mov	r0, fp
 800a0e0:	d107      	bne.n	800a0f2 <_dtoa_r+0xac2>
 800a0e2:	f000 f9cb 	bl	800a47c <__multadd>
 800a0e6:	4607      	mov	r7, r0
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	9b07      	ldr	r3, [sp, #28]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	9307      	str	r3, [sp, #28]
 800a0f0:	e774      	b.n	8009fdc <_dtoa_r+0x9ac>
 800a0f2:	f000 f9c3 	bl	800a47c <__multadd>
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	220a      	movs	r2, #10
 800a0fe:	4658      	mov	r0, fp
 800a100:	f000 f9bc 	bl	800a47c <__multadd>
 800a104:	4605      	mov	r5, r0
 800a106:	e7f0      	b.n	800a0ea <_dtoa_r+0xaba>
 800a108:	9b00      	ldr	r3, [sp, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bfcc      	ite	gt
 800a10e:	461e      	movgt	r6, r3
 800a110:	2601      	movle	r6, #1
 800a112:	4456      	add	r6, sl
 800a114:	2700      	movs	r7, #0
 800a116:	4649      	mov	r1, r9
 800a118:	2201      	movs	r2, #1
 800a11a:	4658      	mov	r0, fp
 800a11c:	f000 fb5a 	bl	800a7d4 <__lshift>
 800a120:	4621      	mov	r1, r4
 800a122:	4681      	mov	r9, r0
 800a124:	f000 fbc2 	bl	800a8ac <__mcmp>
 800a128:	2800      	cmp	r0, #0
 800a12a:	dcb0      	bgt.n	800a08e <_dtoa_r+0xa5e>
 800a12c:	d102      	bne.n	800a134 <_dtoa_r+0xb04>
 800a12e:	f018 0f01 	tst.w	r8, #1
 800a132:	d1ac      	bne.n	800a08e <_dtoa_r+0xa5e>
 800a134:	4633      	mov	r3, r6
 800a136:	461e      	mov	r6, r3
 800a138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a13c:	2a30      	cmp	r2, #48	@ 0x30
 800a13e:	d0fa      	beq.n	800a136 <_dtoa_r+0xb06>
 800a140:	e5c2      	b.n	8009cc8 <_dtoa_r+0x698>
 800a142:	459a      	cmp	sl, r3
 800a144:	d1a4      	bne.n	800a090 <_dtoa_r+0xa60>
 800a146:	9b04      	ldr	r3, [sp, #16]
 800a148:	3301      	adds	r3, #1
 800a14a:	9304      	str	r3, [sp, #16]
 800a14c:	2331      	movs	r3, #49	@ 0x31
 800a14e:	f88a 3000 	strb.w	r3, [sl]
 800a152:	e5b9      	b.n	8009cc8 <_dtoa_r+0x698>
 800a154:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a156:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a1b4 <_dtoa_r+0xb84>
 800a15a:	b11b      	cbz	r3, 800a164 <_dtoa_r+0xb34>
 800a15c:	f10a 0308 	add.w	r3, sl, #8
 800a160:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	4650      	mov	r0, sl
 800a166:	b019      	add	sp, #100	@ 0x64
 800a168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a16e:	2b01      	cmp	r3, #1
 800a170:	f77f ae37 	ble.w	8009de2 <_dtoa_r+0x7b2>
 800a174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a176:	930a      	str	r3, [sp, #40]	@ 0x28
 800a178:	2001      	movs	r0, #1
 800a17a:	e655      	b.n	8009e28 <_dtoa_r+0x7f8>
 800a17c:	9b00      	ldr	r3, [sp, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f77f aed6 	ble.w	8009f30 <_dtoa_r+0x900>
 800a184:	4656      	mov	r6, sl
 800a186:	4621      	mov	r1, r4
 800a188:	4648      	mov	r0, r9
 800a18a:	f7ff f9c8 	bl	800951e <quorem>
 800a18e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a192:	f806 8b01 	strb.w	r8, [r6], #1
 800a196:	9b00      	ldr	r3, [sp, #0]
 800a198:	eba6 020a 	sub.w	r2, r6, sl
 800a19c:	4293      	cmp	r3, r2
 800a19e:	ddb3      	ble.n	800a108 <_dtoa_r+0xad8>
 800a1a0:	4649      	mov	r1, r9
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	220a      	movs	r2, #10
 800a1a6:	4658      	mov	r0, fp
 800a1a8:	f000 f968 	bl	800a47c <__multadd>
 800a1ac:	4681      	mov	r9, r0
 800a1ae:	e7ea      	b.n	800a186 <_dtoa_r+0xb56>
 800a1b0:	0800b310 	.word	0x0800b310
 800a1b4:	0800b294 	.word	0x0800b294

0800a1b8 <_free_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	d041      	beq.n	800a244 <_free_r+0x8c>
 800a1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c4:	1f0c      	subs	r4, r1, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bfb8      	it	lt
 800a1ca:	18e4      	addlt	r4, r4, r3
 800a1cc:	f000 f8e8 	bl	800a3a0 <__malloc_lock>
 800a1d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a248 <_free_r+0x90>)
 800a1d2:	6813      	ldr	r3, [r2, #0]
 800a1d4:	b933      	cbnz	r3, 800a1e4 <_free_r+0x2c>
 800a1d6:	6063      	str	r3, [r4, #4]
 800a1d8:	6014      	str	r4, [r2, #0]
 800a1da:	4628      	mov	r0, r5
 800a1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e0:	f000 b8e4 	b.w	800a3ac <__malloc_unlock>
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	d908      	bls.n	800a1fa <_free_r+0x42>
 800a1e8:	6820      	ldr	r0, [r4, #0]
 800a1ea:	1821      	adds	r1, r4, r0
 800a1ec:	428b      	cmp	r3, r1
 800a1ee:	bf01      	itttt	eq
 800a1f0:	6819      	ldreq	r1, [r3, #0]
 800a1f2:	685b      	ldreq	r3, [r3, #4]
 800a1f4:	1809      	addeq	r1, r1, r0
 800a1f6:	6021      	streq	r1, [r4, #0]
 800a1f8:	e7ed      	b.n	800a1d6 <_free_r+0x1e>
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	b10b      	cbz	r3, 800a204 <_free_r+0x4c>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d9fa      	bls.n	800a1fa <_free_r+0x42>
 800a204:	6811      	ldr	r1, [r2, #0]
 800a206:	1850      	adds	r0, r2, r1
 800a208:	42a0      	cmp	r0, r4
 800a20a:	d10b      	bne.n	800a224 <_free_r+0x6c>
 800a20c:	6820      	ldr	r0, [r4, #0]
 800a20e:	4401      	add	r1, r0
 800a210:	1850      	adds	r0, r2, r1
 800a212:	4283      	cmp	r3, r0
 800a214:	6011      	str	r1, [r2, #0]
 800a216:	d1e0      	bne.n	800a1da <_free_r+0x22>
 800a218:	6818      	ldr	r0, [r3, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	6053      	str	r3, [r2, #4]
 800a21e:	4408      	add	r0, r1
 800a220:	6010      	str	r0, [r2, #0]
 800a222:	e7da      	b.n	800a1da <_free_r+0x22>
 800a224:	d902      	bls.n	800a22c <_free_r+0x74>
 800a226:	230c      	movs	r3, #12
 800a228:	602b      	str	r3, [r5, #0]
 800a22a:	e7d6      	b.n	800a1da <_free_r+0x22>
 800a22c:	6820      	ldr	r0, [r4, #0]
 800a22e:	1821      	adds	r1, r4, r0
 800a230:	428b      	cmp	r3, r1
 800a232:	bf04      	itt	eq
 800a234:	6819      	ldreq	r1, [r3, #0]
 800a236:	685b      	ldreq	r3, [r3, #4]
 800a238:	6063      	str	r3, [r4, #4]
 800a23a:	bf04      	itt	eq
 800a23c:	1809      	addeq	r1, r1, r0
 800a23e:	6021      	streq	r1, [r4, #0]
 800a240:	6054      	str	r4, [r2, #4]
 800a242:	e7ca      	b.n	800a1da <_free_r+0x22>
 800a244:	bd38      	pop	{r3, r4, r5, pc}
 800a246:	bf00      	nop
 800a248:	20020944 	.word	0x20020944

0800a24c <malloc>:
 800a24c:	4b02      	ldr	r3, [pc, #8]	@ (800a258 <malloc+0xc>)
 800a24e:	4601      	mov	r1, r0
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	f000 b825 	b.w	800a2a0 <_malloc_r>
 800a256:	bf00      	nop
 800a258:	20000058 	.word	0x20000058

0800a25c <sbrk_aligned>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	4e0f      	ldr	r6, [pc, #60]	@ (800a29c <sbrk_aligned+0x40>)
 800a260:	460c      	mov	r4, r1
 800a262:	6831      	ldr	r1, [r6, #0]
 800a264:	4605      	mov	r5, r0
 800a266:	b911      	cbnz	r1, 800a26e <sbrk_aligned+0x12>
 800a268:	f000 fd58 	bl	800ad1c <_sbrk_r>
 800a26c:	6030      	str	r0, [r6, #0]
 800a26e:	4621      	mov	r1, r4
 800a270:	4628      	mov	r0, r5
 800a272:	f000 fd53 	bl	800ad1c <_sbrk_r>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	d103      	bne.n	800a282 <sbrk_aligned+0x26>
 800a27a:	f04f 34ff 	mov.w	r4, #4294967295
 800a27e:	4620      	mov	r0, r4
 800a280:	bd70      	pop	{r4, r5, r6, pc}
 800a282:	1cc4      	adds	r4, r0, #3
 800a284:	f024 0403 	bic.w	r4, r4, #3
 800a288:	42a0      	cmp	r0, r4
 800a28a:	d0f8      	beq.n	800a27e <sbrk_aligned+0x22>
 800a28c:	1a21      	subs	r1, r4, r0
 800a28e:	4628      	mov	r0, r5
 800a290:	f000 fd44 	bl	800ad1c <_sbrk_r>
 800a294:	3001      	adds	r0, #1
 800a296:	d1f2      	bne.n	800a27e <sbrk_aligned+0x22>
 800a298:	e7ef      	b.n	800a27a <sbrk_aligned+0x1e>
 800a29a:	bf00      	nop
 800a29c:	20020940 	.word	0x20020940

0800a2a0 <_malloc_r>:
 800a2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a4:	1ccd      	adds	r5, r1, #3
 800a2a6:	f025 0503 	bic.w	r5, r5, #3
 800a2aa:	3508      	adds	r5, #8
 800a2ac:	2d0c      	cmp	r5, #12
 800a2ae:	bf38      	it	cc
 800a2b0:	250c      	movcc	r5, #12
 800a2b2:	2d00      	cmp	r5, #0
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	db01      	blt.n	800a2bc <_malloc_r+0x1c>
 800a2b8:	42a9      	cmp	r1, r5
 800a2ba:	d904      	bls.n	800a2c6 <_malloc_r+0x26>
 800a2bc:	230c      	movs	r3, #12
 800a2be:	6033      	str	r3, [r6, #0]
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a39c <_malloc_r+0xfc>
 800a2ca:	f000 f869 	bl	800a3a0 <__malloc_lock>
 800a2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d2:	461c      	mov	r4, r3
 800a2d4:	bb44      	cbnz	r4, 800a328 <_malloc_r+0x88>
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f7ff ffbf 	bl	800a25c <sbrk_aligned>
 800a2de:	1c43      	adds	r3, r0, #1
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	d158      	bne.n	800a396 <_malloc_r+0xf6>
 800a2e4:	f8d8 4000 	ldr.w	r4, [r8]
 800a2e8:	4627      	mov	r7, r4
 800a2ea:	2f00      	cmp	r7, #0
 800a2ec:	d143      	bne.n	800a376 <_malloc_r+0xd6>
 800a2ee:	2c00      	cmp	r4, #0
 800a2f0:	d04b      	beq.n	800a38a <_malloc_r+0xea>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	eb04 0903 	add.w	r9, r4, r3
 800a2fc:	f000 fd0e 	bl	800ad1c <_sbrk_r>
 800a300:	4581      	cmp	r9, r0
 800a302:	d142      	bne.n	800a38a <_malloc_r+0xea>
 800a304:	6821      	ldr	r1, [r4, #0]
 800a306:	1a6d      	subs	r5, r5, r1
 800a308:	4629      	mov	r1, r5
 800a30a:	4630      	mov	r0, r6
 800a30c:	f7ff ffa6 	bl	800a25c <sbrk_aligned>
 800a310:	3001      	adds	r0, #1
 800a312:	d03a      	beq.n	800a38a <_malloc_r+0xea>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	442b      	add	r3, r5
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	f8d8 3000 	ldr.w	r3, [r8]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	bb62      	cbnz	r2, 800a37c <_malloc_r+0xdc>
 800a322:	f8c8 7000 	str.w	r7, [r8]
 800a326:	e00f      	b.n	800a348 <_malloc_r+0xa8>
 800a328:	6822      	ldr	r2, [r4, #0]
 800a32a:	1b52      	subs	r2, r2, r5
 800a32c:	d420      	bmi.n	800a370 <_malloc_r+0xd0>
 800a32e:	2a0b      	cmp	r2, #11
 800a330:	d917      	bls.n	800a362 <_malloc_r+0xc2>
 800a332:	1961      	adds	r1, r4, r5
 800a334:	42a3      	cmp	r3, r4
 800a336:	6025      	str	r5, [r4, #0]
 800a338:	bf18      	it	ne
 800a33a:	6059      	strne	r1, [r3, #4]
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	bf08      	it	eq
 800a340:	f8c8 1000 	streq.w	r1, [r8]
 800a344:	5162      	str	r2, [r4, r5]
 800a346:	604b      	str	r3, [r1, #4]
 800a348:	4630      	mov	r0, r6
 800a34a:	f000 f82f 	bl	800a3ac <__malloc_unlock>
 800a34e:	f104 000b 	add.w	r0, r4, #11
 800a352:	1d23      	adds	r3, r4, #4
 800a354:	f020 0007 	bic.w	r0, r0, #7
 800a358:	1ac2      	subs	r2, r0, r3
 800a35a:	bf1c      	itt	ne
 800a35c:	1a1b      	subne	r3, r3, r0
 800a35e:	50a3      	strne	r3, [r4, r2]
 800a360:	e7af      	b.n	800a2c2 <_malloc_r+0x22>
 800a362:	6862      	ldr	r2, [r4, #4]
 800a364:	42a3      	cmp	r3, r4
 800a366:	bf0c      	ite	eq
 800a368:	f8c8 2000 	streq.w	r2, [r8]
 800a36c:	605a      	strne	r2, [r3, #4]
 800a36e:	e7eb      	b.n	800a348 <_malloc_r+0xa8>
 800a370:	4623      	mov	r3, r4
 800a372:	6864      	ldr	r4, [r4, #4]
 800a374:	e7ae      	b.n	800a2d4 <_malloc_r+0x34>
 800a376:	463c      	mov	r4, r7
 800a378:	687f      	ldr	r7, [r7, #4]
 800a37a:	e7b6      	b.n	800a2ea <_malloc_r+0x4a>
 800a37c:	461a      	mov	r2, r3
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	42a3      	cmp	r3, r4
 800a382:	d1fb      	bne.n	800a37c <_malloc_r+0xdc>
 800a384:	2300      	movs	r3, #0
 800a386:	6053      	str	r3, [r2, #4]
 800a388:	e7de      	b.n	800a348 <_malloc_r+0xa8>
 800a38a:	230c      	movs	r3, #12
 800a38c:	6033      	str	r3, [r6, #0]
 800a38e:	4630      	mov	r0, r6
 800a390:	f000 f80c 	bl	800a3ac <__malloc_unlock>
 800a394:	e794      	b.n	800a2c0 <_malloc_r+0x20>
 800a396:	6005      	str	r5, [r0, #0]
 800a398:	e7d6      	b.n	800a348 <_malloc_r+0xa8>
 800a39a:	bf00      	nop
 800a39c:	20020944 	.word	0x20020944

0800a3a0 <__malloc_lock>:
 800a3a0:	4801      	ldr	r0, [pc, #4]	@ (800a3a8 <__malloc_lock+0x8>)
 800a3a2:	f7ff b8ac 	b.w	80094fe <__retarget_lock_acquire_recursive>
 800a3a6:	bf00      	nop
 800a3a8:	2002093c 	.word	0x2002093c

0800a3ac <__malloc_unlock>:
 800a3ac:	4801      	ldr	r0, [pc, #4]	@ (800a3b4 <__malloc_unlock+0x8>)
 800a3ae:	f7ff b8a7 	b.w	8009500 <__retarget_lock_release_recursive>
 800a3b2:	bf00      	nop
 800a3b4:	2002093c 	.word	0x2002093c

0800a3b8 <_Balloc>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	69c6      	ldr	r6, [r0, #28]
 800a3bc:	4604      	mov	r4, r0
 800a3be:	460d      	mov	r5, r1
 800a3c0:	b976      	cbnz	r6, 800a3e0 <_Balloc+0x28>
 800a3c2:	2010      	movs	r0, #16
 800a3c4:	f7ff ff42 	bl	800a24c <malloc>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	61e0      	str	r0, [r4, #28]
 800a3cc:	b920      	cbnz	r0, 800a3d8 <_Balloc+0x20>
 800a3ce:	4b18      	ldr	r3, [pc, #96]	@ (800a430 <_Balloc+0x78>)
 800a3d0:	4818      	ldr	r0, [pc, #96]	@ (800a434 <_Balloc+0x7c>)
 800a3d2:	216b      	movs	r1, #107	@ 0x6b
 800a3d4:	f000 fcb2 	bl	800ad3c <__assert_func>
 800a3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3dc:	6006      	str	r6, [r0, #0]
 800a3de:	60c6      	str	r6, [r0, #12]
 800a3e0:	69e6      	ldr	r6, [r4, #28]
 800a3e2:	68f3      	ldr	r3, [r6, #12]
 800a3e4:	b183      	cbz	r3, 800a408 <_Balloc+0x50>
 800a3e6:	69e3      	ldr	r3, [r4, #28]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3ee:	b9b8      	cbnz	r0, 800a420 <_Balloc+0x68>
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	fa01 f605 	lsl.w	r6, r1, r5
 800a3f6:	1d72      	adds	r2, r6, #5
 800a3f8:	0092      	lsls	r2, r2, #2
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fcbc 	bl	800ad78 <_calloc_r>
 800a400:	b160      	cbz	r0, 800a41c <_Balloc+0x64>
 800a402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a406:	e00e      	b.n	800a426 <_Balloc+0x6e>
 800a408:	2221      	movs	r2, #33	@ 0x21
 800a40a:	2104      	movs	r1, #4
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 fcb3 	bl	800ad78 <_calloc_r>
 800a412:	69e3      	ldr	r3, [r4, #28]
 800a414:	60f0      	str	r0, [r6, #12]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1e4      	bne.n	800a3e6 <_Balloc+0x2e>
 800a41c:	2000      	movs	r0, #0
 800a41e:	bd70      	pop	{r4, r5, r6, pc}
 800a420:	6802      	ldr	r2, [r0, #0]
 800a422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a426:	2300      	movs	r3, #0
 800a428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a42c:	e7f7      	b.n	800a41e <_Balloc+0x66>
 800a42e:	bf00      	nop
 800a430:	0800b2a1 	.word	0x0800b2a1
 800a434:	0800b321 	.word	0x0800b321

0800a438 <_Bfree>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	69c6      	ldr	r6, [r0, #28]
 800a43c:	4605      	mov	r5, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	b976      	cbnz	r6, 800a460 <_Bfree+0x28>
 800a442:	2010      	movs	r0, #16
 800a444:	f7ff ff02 	bl	800a24c <malloc>
 800a448:	4602      	mov	r2, r0
 800a44a:	61e8      	str	r0, [r5, #28]
 800a44c:	b920      	cbnz	r0, 800a458 <_Bfree+0x20>
 800a44e:	4b09      	ldr	r3, [pc, #36]	@ (800a474 <_Bfree+0x3c>)
 800a450:	4809      	ldr	r0, [pc, #36]	@ (800a478 <_Bfree+0x40>)
 800a452:	218f      	movs	r1, #143	@ 0x8f
 800a454:	f000 fc72 	bl	800ad3c <__assert_func>
 800a458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a45c:	6006      	str	r6, [r0, #0]
 800a45e:	60c6      	str	r6, [r0, #12]
 800a460:	b13c      	cbz	r4, 800a472 <_Bfree+0x3a>
 800a462:	69eb      	ldr	r3, [r5, #28]
 800a464:	6862      	ldr	r2, [r4, #4]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a46c:	6021      	str	r1, [r4, #0]
 800a46e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	0800b2a1 	.word	0x0800b2a1
 800a478:	0800b321 	.word	0x0800b321

0800a47c <__multadd>:
 800a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a480:	690d      	ldr	r5, [r1, #16]
 800a482:	4607      	mov	r7, r0
 800a484:	460c      	mov	r4, r1
 800a486:	461e      	mov	r6, r3
 800a488:	f101 0c14 	add.w	ip, r1, #20
 800a48c:	2000      	movs	r0, #0
 800a48e:	f8dc 3000 	ldr.w	r3, [ip]
 800a492:	b299      	uxth	r1, r3
 800a494:	fb02 6101 	mla	r1, r2, r1, r6
 800a498:	0c1e      	lsrs	r6, r3, #16
 800a49a:	0c0b      	lsrs	r3, r1, #16
 800a49c:	fb02 3306 	mla	r3, r2, r6, r3
 800a4a0:	b289      	uxth	r1, r1
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4a8:	4285      	cmp	r5, r0
 800a4aa:	f84c 1b04 	str.w	r1, [ip], #4
 800a4ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4b2:	dcec      	bgt.n	800a48e <__multadd+0x12>
 800a4b4:	b30e      	cbz	r6, 800a4fa <__multadd+0x7e>
 800a4b6:	68a3      	ldr	r3, [r4, #8]
 800a4b8:	42ab      	cmp	r3, r5
 800a4ba:	dc19      	bgt.n	800a4f0 <__multadd+0x74>
 800a4bc:	6861      	ldr	r1, [r4, #4]
 800a4be:	4638      	mov	r0, r7
 800a4c0:	3101      	adds	r1, #1
 800a4c2:	f7ff ff79 	bl	800a3b8 <_Balloc>
 800a4c6:	4680      	mov	r8, r0
 800a4c8:	b928      	cbnz	r0, 800a4d6 <__multadd+0x5a>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a500 <__multadd+0x84>)
 800a4ce:	480d      	ldr	r0, [pc, #52]	@ (800a504 <__multadd+0x88>)
 800a4d0:	21ba      	movs	r1, #186	@ 0xba
 800a4d2:	f000 fc33 	bl	800ad3c <__assert_func>
 800a4d6:	6922      	ldr	r2, [r4, #16]
 800a4d8:	3202      	adds	r2, #2
 800a4da:	f104 010c 	add.w	r1, r4, #12
 800a4de:	0092      	lsls	r2, r2, #2
 800a4e0:	300c      	adds	r0, #12
 800a4e2:	f7ff f80e 	bl	8009502 <memcpy>
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	f7ff ffa5 	bl	800a438 <_Bfree>
 800a4ee:	4644      	mov	r4, r8
 800a4f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4f4:	3501      	adds	r5, #1
 800a4f6:	615e      	str	r6, [r3, #20]
 800a4f8:	6125      	str	r5, [r4, #16]
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a500:	0800b310 	.word	0x0800b310
 800a504:	0800b321 	.word	0x0800b321

0800a508 <__hi0bits>:
 800a508:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a50c:	4603      	mov	r3, r0
 800a50e:	bf36      	itet	cc
 800a510:	0403      	lslcc	r3, r0, #16
 800a512:	2000      	movcs	r0, #0
 800a514:	2010      	movcc	r0, #16
 800a516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a51a:	bf3c      	itt	cc
 800a51c:	021b      	lslcc	r3, r3, #8
 800a51e:	3008      	addcc	r0, #8
 800a520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a524:	bf3c      	itt	cc
 800a526:	011b      	lslcc	r3, r3, #4
 800a528:	3004      	addcc	r0, #4
 800a52a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a52e:	bf3c      	itt	cc
 800a530:	009b      	lslcc	r3, r3, #2
 800a532:	3002      	addcc	r0, #2
 800a534:	2b00      	cmp	r3, #0
 800a536:	db05      	blt.n	800a544 <__hi0bits+0x3c>
 800a538:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a53c:	f100 0001 	add.w	r0, r0, #1
 800a540:	bf08      	it	eq
 800a542:	2020      	moveq	r0, #32
 800a544:	4770      	bx	lr

0800a546 <__lo0bits>:
 800a546:	6803      	ldr	r3, [r0, #0]
 800a548:	4602      	mov	r2, r0
 800a54a:	f013 0007 	ands.w	r0, r3, #7
 800a54e:	d00b      	beq.n	800a568 <__lo0bits+0x22>
 800a550:	07d9      	lsls	r1, r3, #31
 800a552:	d421      	bmi.n	800a598 <__lo0bits+0x52>
 800a554:	0798      	lsls	r0, r3, #30
 800a556:	bf49      	itett	mi
 800a558:	085b      	lsrmi	r3, r3, #1
 800a55a:	089b      	lsrpl	r3, r3, #2
 800a55c:	2001      	movmi	r0, #1
 800a55e:	6013      	strmi	r3, [r2, #0]
 800a560:	bf5c      	itt	pl
 800a562:	6013      	strpl	r3, [r2, #0]
 800a564:	2002      	movpl	r0, #2
 800a566:	4770      	bx	lr
 800a568:	b299      	uxth	r1, r3
 800a56a:	b909      	cbnz	r1, 800a570 <__lo0bits+0x2a>
 800a56c:	0c1b      	lsrs	r3, r3, #16
 800a56e:	2010      	movs	r0, #16
 800a570:	b2d9      	uxtb	r1, r3
 800a572:	b909      	cbnz	r1, 800a578 <__lo0bits+0x32>
 800a574:	3008      	adds	r0, #8
 800a576:	0a1b      	lsrs	r3, r3, #8
 800a578:	0719      	lsls	r1, r3, #28
 800a57a:	bf04      	itt	eq
 800a57c:	091b      	lsreq	r3, r3, #4
 800a57e:	3004      	addeq	r0, #4
 800a580:	0799      	lsls	r1, r3, #30
 800a582:	bf04      	itt	eq
 800a584:	089b      	lsreq	r3, r3, #2
 800a586:	3002      	addeq	r0, #2
 800a588:	07d9      	lsls	r1, r3, #31
 800a58a:	d403      	bmi.n	800a594 <__lo0bits+0x4e>
 800a58c:	085b      	lsrs	r3, r3, #1
 800a58e:	f100 0001 	add.w	r0, r0, #1
 800a592:	d003      	beq.n	800a59c <__lo0bits+0x56>
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	4770      	bx	lr
 800a598:	2000      	movs	r0, #0
 800a59a:	4770      	bx	lr
 800a59c:	2020      	movs	r0, #32
 800a59e:	4770      	bx	lr

0800a5a0 <__i2b>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	2101      	movs	r1, #1
 800a5a6:	f7ff ff07 	bl	800a3b8 <_Balloc>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	b928      	cbnz	r0, 800a5ba <__i2b+0x1a>
 800a5ae:	4b05      	ldr	r3, [pc, #20]	@ (800a5c4 <__i2b+0x24>)
 800a5b0:	4805      	ldr	r0, [pc, #20]	@ (800a5c8 <__i2b+0x28>)
 800a5b2:	f240 1145 	movw	r1, #325	@ 0x145
 800a5b6:	f000 fbc1 	bl	800ad3c <__assert_func>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	6144      	str	r4, [r0, #20]
 800a5be:	6103      	str	r3, [r0, #16]
 800a5c0:	bd10      	pop	{r4, pc}
 800a5c2:	bf00      	nop
 800a5c4:	0800b310 	.word	0x0800b310
 800a5c8:	0800b321 	.word	0x0800b321

0800a5cc <__multiply>:
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	4614      	mov	r4, r2
 800a5d2:	690a      	ldr	r2, [r1, #16]
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	bfa8      	it	ge
 800a5da:	4623      	movge	r3, r4
 800a5dc:	460f      	mov	r7, r1
 800a5de:	bfa4      	itt	ge
 800a5e0:	460c      	movge	r4, r1
 800a5e2:	461f      	movge	r7, r3
 800a5e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a5e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a5ec:	68a3      	ldr	r3, [r4, #8]
 800a5ee:	6861      	ldr	r1, [r4, #4]
 800a5f0:	eb0a 0609 	add.w	r6, sl, r9
 800a5f4:	42b3      	cmp	r3, r6
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	bfb8      	it	lt
 800a5fa:	3101      	addlt	r1, #1
 800a5fc:	f7ff fedc 	bl	800a3b8 <_Balloc>
 800a600:	b930      	cbnz	r0, 800a610 <__multiply+0x44>
 800a602:	4602      	mov	r2, r0
 800a604:	4b44      	ldr	r3, [pc, #272]	@ (800a718 <__multiply+0x14c>)
 800a606:	4845      	ldr	r0, [pc, #276]	@ (800a71c <__multiply+0x150>)
 800a608:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a60c:	f000 fb96 	bl	800ad3c <__assert_func>
 800a610:	f100 0514 	add.w	r5, r0, #20
 800a614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a618:	462b      	mov	r3, r5
 800a61a:	2200      	movs	r2, #0
 800a61c:	4543      	cmp	r3, r8
 800a61e:	d321      	bcc.n	800a664 <__multiply+0x98>
 800a620:	f107 0114 	add.w	r1, r7, #20
 800a624:	f104 0214 	add.w	r2, r4, #20
 800a628:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a62c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a630:	9302      	str	r3, [sp, #8]
 800a632:	1b13      	subs	r3, r2, r4
 800a634:	3b15      	subs	r3, #21
 800a636:	f023 0303 	bic.w	r3, r3, #3
 800a63a:	3304      	adds	r3, #4
 800a63c:	f104 0715 	add.w	r7, r4, #21
 800a640:	42ba      	cmp	r2, r7
 800a642:	bf38      	it	cc
 800a644:	2304      	movcc	r3, #4
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	9b02      	ldr	r3, [sp, #8]
 800a64a:	9103      	str	r1, [sp, #12]
 800a64c:	428b      	cmp	r3, r1
 800a64e:	d80c      	bhi.n	800a66a <__multiply+0x9e>
 800a650:	2e00      	cmp	r6, #0
 800a652:	dd03      	ble.n	800a65c <__multiply+0x90>
 800a654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d05b      	beq.n	800a714 <__multiply+0x148>
 800a65c:	6106      	str	r6, [r0, #16]
 800a65e:	b005      	add	sp, #20
 800a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a664:	f843 2b04 	str.w	r2, [r3], #4
 800a668:	e7d8      	b.n	800a61c <__multiply+0x50>
 800a66a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a66e:	f1ba 0f00 	cmp.w	sl, #0
 800a672:	d024      	beq.n	800a6be <__multiply+0xf2>
 800a674:	f104 0e14 	add.w	lr, r4, #20
 800a678:	46a9      	mov	r9, r5
 800a67a:	f04f 0c00 	mov.w	ip, #0
 800a67e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a682:	f8d9 3000 	ldr.w	r3, [r9]
 800a686:	fa1f fb87 	uxth.w	fp, r7
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a690:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a694:	f8d9 7000 	ldr.w	r7, [r9]
 800a698:	4463      	add	r3, ip
 800a69a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a69e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a6a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a6ac:	4572      	cmp	r2, lr
 800a6ae:	f849 3b04 	str.w	r3, [r9], #4
 800a6b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a6b6:	d8e2      	bhi.n	800a67e <__multiply+0xb2>
 800a6b8:	9b01      	ldr	r3, [sp, #4]
 800a6ba:	f845 c003 	str.w	ip, [r5, r3]
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a6c4:	3104      	adds	r1, #4
 800a6c6:	f1b9 0f00 	cmp.w	r9, #0
 800a6ca:	d021      	beq.n	800a710 <__multiply+0x144>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	f104 0c14 	add.w	ip, r4, #20
 800a6d2:	46ae      	mov	lr, r5
 800a6d4:	f04f 0a00 	mov.w	sl, #0
 800a6d8:	f8bc b000 	ldrh.w	fp, [ip]
 800a6dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a6e0:	fb09 770b 	mla	r7, r9, fp, r7
 800a6e4:	4457      	add	r7, sl
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a6ec:	f84e 3b04 	str.w	r3, [lr], #4
 800a6f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a6f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6f8:	f8be 3000 	ldrh.w	r3, [lr]
 800a6fc:	fb09 330a 	mla	r3, r9, sl, r3
 800a700:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a704:	4562      	cmp	r2, ip
 800a706:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a70a:	d8e5      	bhi.n	800a6d8 <__multiply+0x10c>
 800a70c:	9f01      	ldr	r7, [sp, #4]
 800a70e:	51eb      	str	r3, [r5, r7]
 800a710:	3504      	adds	r5, #4
 800a712:	e799      	b.n	800a648 <__multiply+0x7c>
 800a714:	3e01      	subs	r6, #1
 800a716:	e79b      	b.n	800a650 <__multiply+0x84>
 800a718:	0800b310 	.word	0x0800b310
 800a71c:	0800b321 	.word	0x0800b321

0800a720 <__pow5mult>:
 800a720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a724:	4615      	mov	r5, r2
 800a726:	f012 0203 	ands.w	r2, r2, #3
 800a72a:	4607      	mov	r7, r0
 800a72c:	460e      	mov	r6, r1
 800a72e:	d007      	beq.n	800a740 <__pow5mult+0x20>
 800a730:	4c25      	ldr	r4, [pc, #148]	@ (800a7c8 <__pow5mult+0xa8>)
 800a732:	3a01      	subs	r2, #1
 800a734:	2300      	movs	r3, #0
 800a736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a73a:	f7ff fe9f 	bl	800a47c <__multadd>
 800a73e:	4606      	mov	r6, r0
 800a740:	10ad      	asrs	r5, r5, #2
 800a742:	d03d      	beq.n	800a7c0 <__pow5mult+0xa0>
 800a744:	69fc      	ldr	r4, [r7, #28]
 800a746:	b97c      	cbnz	r4, 800a768 <__pow5mult+0x48>
 800a748:	2010      	movs	r0, #16
 800a74a:	f7ff fd7f 	bl	800a24c <malloc>
 800a74e:	4602      	mov	r2, r0
 800a750:	61f8      	str	r0, [r7, #28]
 800a752:	b928      	cbnz	r0, 800a760 <__pow5mult+0x40>
 800a754:	4b1d      	ldr	r3, [pc, #116]	@ (800a7cc <__pow5mult+0xac>)
 800a756:	481e      	ldr	r0, [pc, #120]	@ (800a7d0 <__pow5mult+0xb0>)
 800a758:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a75c:	f000 faee 	bl	800ad3c <__assert_func>
 800a760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a764:	6004      	str	r4, [r0, #0]
 800a766:	60c4      	str	r4, [r0, #12]
 800a768:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a76c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a770:	b94c      	cbnz	r4, 800a786 <__pow5mult+0x66>
 800a772:	f240 2171 	movw	r1, #625	@ 0x271
 800a776:	4638      	mov	r0, r7
 800a778:	f7ff ff12 	bl	800a5a0 <__i2b>
 800a77c:	2300      	movs	r3, #0
 800a77e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a782:	4604      	mov	r4, r0
 800a784:	6003      	str	r3, [r0, #0]
 800a786:	f04f 0900 	mov.w	r9, #0
 800a78a:	07eb      	lsls	r3, r5, #31
 800a78c:	d50a      	bpl.n	800a7a4 <__pow5mult+0x84>
 800a78e:	4631      	mov	r1, r6
 800a790:	4622      	mov	r2, r4
 800a792:	4638      	mov	r0, r7
 800a794:	f7ff ff1a 	bl	800a5cc <__multiply>
 800a798:	4631      	mov	r1, r6
 800a79a:	4680      	mov	r8, r0
 800a79c:	4638      	mov	r0, r7
 800a79e:	f7ff fe4b 	bl	800a438 <_Bfree>
 800a7a2:	4646      	mov	r6, r8
 800a7a4:	106d      	asrs	r5, r5, #1
 800a7a6:	d00b      	beq.n	800a7c0 <__pow5mult+0xa0>
 800a7a8:	6820      	ldr	r0, [r4, #0]
 800a7aa:	b938      	cbnz	r0, 800a7bc <__pow5mult+0x9c>
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	f7ff ff0b 	bl	800a5cc <__multiply>
 800a7b6:	6020      	str	r0, [r4, #0]
 800a7b8:	f8c0 9000 	str.w	r9, [r0]
 800a7bc:	4604      	mov	r4, r0
 800a7be:	e7e4      	b.n	800a78a <__pow5mult+0x6a>
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c6:	bf00      	nop
 800a7c8:	0800b37c 	.word	0x0800b37c
 800a7cc:	0800b2a1 	.word	0x0800b2a1
 800a7d0:	0800b321 	.word	0x0800b321

0800a7d4 <__lshift>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	460c      	mov	r4, r1
 800a7da:	6849      	ldr	r1, [r1, #4]
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7e2:	68a3      	ldr	r3, [r4, #8]
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	4691      	mov	r9, r2
 800a7e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7ec:	f108 0601 	add.w	r6, r8, #1
 800a7f0:	42b3      	cmp	r3, r6
 800a7f2:	db0b      	blt.n	800a80c <__lshift+0x38>
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	f7ff fddf 	bl	800a3b8 <_Balloc>
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	b948      	cbnz	r0, 800a812 <__lshift+0x3e>
 800a7fe:	4602      	mov	r2, r0
 800a800:	4b28      	ldr	r3, [pc, #160]	@ (800a8a4 <__lshift+0xd0>)
 800a802:	4829      	ldr	r0, [pc, #164]	@ (800a8a8 <__lshift+0xd4>)
 800a804:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a808:	f000 fa98 	bl	800ad3c <__assert_func>
 800a80c:	3101      	adds	r1, #1
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	e7ee      	b.n	800a7f0 <__lshift+0x1c>
 800a812:	2300      	movs	r3, #0
 800a814:	f100 0114 	add.w	r1, r0, #20
 800a818:	f100 0210 	add.w	r2, r0, #16
 800a81c:	4618      	mov	r0, r3
 800a81e:	4553      	cmp	r3, sl
 800a820:	db33      	blt.n	800a88a <__lshift+0xb6>
 800a822:	6920      	ldr	r0, [r4, #16]
 800a824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a828:	f104 0314 	add.w	r3, r4, #20
 800a82c:	f019 091f 	ands.w	r9, r9, #31
 800a830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a838:	d02b      	beq.n	800a892 <__lshift+0xbe>
 800a83a:	f1c9 0e20 	rsb	lr, r9, #32
 800a83e:	468a      	mov	sl, r1
 800a840:	2200      	movs	r2, #0
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	fa00 f009 	lsl.w	r0, r0, r9
 800a848:	4310      	orrs	r0, r2
 800a84a:	f84a 0b04 	str.w	r0, [sl], #4
 800a84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a852:	459c      	cmp	ip, r3
 800a854:	fa22 f20e 	lsr.w	r2, r2, lr
 800a858:	d8f3      	bhi.n	800a842 <__lshift+0x6e>
 800a85a:	ebac 0304 	sub.w	r3, ip, r4
 800a85e:	3b15      	subs	r3, #21
 800a860:	f023 0303 	bic.w	r3, r3, #3
 800a864:	3304      	adds	r3, #4
 800a866:	f104 0015 	add.w	r0, r4, #21
 800a86a:	4584      	cmp	ip, r0
 800a86c:	bf38      	it	cc
 800a86e:	2304      	movcc	r3, #4
 800a870:	50ca      	str	r2, [r1, r3]
 800a872:	b10a      	cbz	r2, 800a878 <__lshift+0xa4>
 800a874:	f108 0602 	add.w	r6, r8, #2
 800a878:	3e01      	subs	r6, #1
 800a87a:	4638      	mov	r0, r7
 800a87c:	612e      	str	r6, [r5, #16]
 800a87e:	4621      	mov	r1, r4
 800a880:	f7ff fdda 	bl	800a438 <_Bfree>
 800a884:	4628      	mov	r0, r5
 800a886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a88a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a88e:	3301      	adds	r3, #1
 800a890:	e7c5      	b.n	800a81e <__lshift+0x4a>
 800a892:	3904      	subs	r1, #4
 800a894:	f853 2b04 	ldr.w	r2, [r3], #4
 800a898:	f841 2f04 	str.w	r2, [r1, #4]!
 800a89c:	459c      	cmp	ip, r3
 800a89e:	d8f9      	bhi.n	800a894 <__lshift+0xc0>
 800a8a0:	e7ea      	b.n	800a878 <__lshift+0xa4>
 800a8a2:	bf00      	nop
 800a8a4:	0800b310 	.word	0x0800b310
 800a8a8:	0800b321 	.word	0x0800b321

0800a8ac <__mcmp>:
 800a8ac:	690a      	ldr	r2, [r1, #16]
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	6900      	ldr	r0, [r0, #16]
 800a8b2:	1a80      	subs	r0, r0, r2
 800a8b4:	b530      	push	{r4, r5, lr}
 800a8b6:	d10e      	bne.n	800a8d6 <__mcmp+0x2a>
 800a8b8:	3314      	adds	r3, #20
 800a8ba:	3114      	adds	r1, #20
 800a8bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8cc:	4295      	cmp	r5, r2
 800a8ce:	d003      	beq.n	800a8d8 <__mcmp+0x2c>
 800a8d0:	d205      	bcs.n	800a8de <__mcmp+0x32>
 800a8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d6:	bd30      	pop	{r4, r5, pc}
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	d3f3      	bcc.n	800a8c4 <__mcmp+0x18>
 800a8dc:	e7fb      	b.n	800a8d6 <__mcmp+0x2a>
 800a8de:	2001      	movs	r0, #1
 800a8e0:	e7f9      	b.n	800a8d6 <__mcmp+0x2a>
	...

0800a8e4 <__mdiff>:
 800a8e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e8:	4689      	mov	r9, r1
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4648      	mov	r0, r9
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	f7ff ffdb 	bl	800a8ac <__mcmp>
 800a8f6:	1e05      	subs	r5, r0, #0
 800a8f8:	d112      	bne.n	800a920 <__mdiff+0x3c>
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7ff fd5b 	bl	800a3b8 <_Balloc>
 800a902:	4602      	mov	r2, r0
 800a904:	b928      	cbnz	r0, 800a912 <__mdiff+0x2e>
 800a906:	4b3f      	ldr	r3, [pc, #252]	@ (800aa04 <__mdiff+0x120>)
 800a908:	f240 2137 	movw	r1, #567	@ 0x237
 800a90c:	483e      	ldr	r0, [pc, #248]	@ (800aa08 <__mdiff+0x124>)
 800a90e:	f000 fa15 	bl	800ad3c <__assert_func>
 800a912:	2301      	movs	r3, #1
 800a914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a918:	4610      	mov	r0, r2
 800a91a:	b003      	add	sp, #12
 800a91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a920:	bfbc      	itt	lt
 800a922:	464b      	movlt	r3, r9
 800a924:	46a1      	movlt	r9, r4
 800a926:	4630      	mov	r0, r6
 800a928:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a92c:	bfba      	itte	lt
 800a92e:	461c      	movlt	r4, r3
 800a930:	2501      	movlt	r5, #1
 800a932:	2500      	movge	r5, #0
 800a934:	f7ff fd40 	bl	800a3b8 <_Balloc>
 800a938:	4602      	mov	r2, r0
 800a93a:	b918      	cbnz	r0, 800a944 <__mdiff+0x60>
 800a93c:	4b31      	ldr	r3, [pc, #196]	@ (800aa04 <__mdiff+0x120>)
 800a93e:	f240 2145 	movw	r1, #581	@ 0x245
 800a942:	e7e3      	b.n	800a90c <__mdiff+0x28>
 800a944:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a948:	6926      	ldr	r6, [r4, #16]
 800a94a:	60c5      	str	r5, [r0, #12]
 800a94c:	f109 0310 	add.w	r3, r9, #16
 800a950:	f109 0514 	add.w	r5, r9, #20
 800a954:	f104 0e14 	add.w	lr, r4, #20
 800a958:	f100 0b14 	add.w	fp, r0, #20
 800a95c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a960:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	46d9      	mov	r9, fp
 800a968:	f04f 0c00 	mov.w	ip, #0
 800a96c:	9b01      	ldr	r3, [sp, #4]
 800a96e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a972:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a976:	9301      	str	r3, [sp, #4]
 800a978:	fa1f f38a 	uxth.w	r3, sl
 800a97c:	4619      	mov	r1, r3
 800a97e:	b283      	uxth	r3, r0
 800a980:	1acb      	subs	r3, r1, r3
 800a982:	0c00      	lsrs	r0, r0, #16
 800a984:	4463      	add	r3, ip
 800a986:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a98a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a98e:	b29b      	uxth	r3, r3
 800a990:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a994:	4576      	cmp	r6, lr
 800a996:	f849 3b04 	str.w	r3, [r9], #4
 800a99a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a99e:	d8e5      	bhi.n	800a96c <__mdiff+0x88>
 800a9a0:	1b33      	subs	r3, r6, r4
 800a9a2:	3b15      	subs	r3, #21
 800a9a4:	f023 0303 	bic.w	r3, r3, #3
 800a9a8:	3415      	adds	r4, #21
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	42a6      	cmp	r6, r4
 800a9ae:	bf38      	it	cc
 800a9b0:	2304      	movcc	r3, #4
 800a9b2:	441d      	add	r5, r3
 800a9b4:	445b      	add	r3, fp
 800a9b6:	461e      	mov	r6, r3
 800a9b8:	462c      	mov	r4, r5
 800a9ba:	4544      	cmp	r4, r8
 800a9bc:	d30e      	bcc.n	800a9dc <__mdiff+0xf8>
 800a9be:	f108 0103 	add.w	r1, r8, #3
 800a9c2:	1b49      	subs	r1, r1, r5
 800a9c4:	f021 0103 	bic.w	r1, r1, #3
 800a9c8:	3d03      	subs	r5, #3
 800a9ca:	45a8      	cmp	r8, r5
 800a9cc:	bf38      	it	cc
 800a9ce:	2100      	movcc	r1, #0
 800a9d0:	440b      	add	r3, r1
 800a9d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9d6:	b191      	cbz	r1, 800a9fe <__mdiff+0x11a>
 800a9d8:	6117      	str	r7, [r2, #16]
 800a9da:	e79d      	b.n	800a918 <__mdiff+0x34>
 800a9dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a9e0:	46e6      	mov	lr, ip
 800a9e2:	0c08      	lsrs	r0, r1, #16
 800a9e4:	fa1c fc81 	uxtah	ip, ip, r1
 800a9e8:	4471      	add	r1, lr
 800a9ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a9ee:	b289      	uxth	r1, r1
 800a9f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a9f4:	f846 1b04 	str.w	r1, [r6], #4
 800a9f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9fc:	e7dd      	b.n	800a9ba <__mdiff+0xd6>
 800a9fe:	3f01      	subs	r7, #1
 800aa00:	e7e7      	b.n	800a9d2 <__mdiff+0xee>
 800aa02:	bf00      	nop
 800aa04:	0800b310 	.word	0x0800b310
 800aa08:	0800b321 	.word	0x0800b321

0800aa0c <__d2b>:
 800aa0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa10:	460f      	mov	r7, r1
 800aa12:	2101      	movs	r1, #1
 800aa14:	ec59 8b10 	vmov	r8, r9, d0
 800aa18:	4616      	mov	r6, r2
 800aa1a:	f7ff fccd 	bl	800a3b8 <_Balloc>
 800aa1e:	4604      	mov	r4, r0
 800aa20:	b930      	cbnz	r0, 800aa30 <__d2b+0x24>
 800aa22:	4602      	mov	r2, r0
 800aa24:	4b23      	ldr	r3, [pc, #140]	@ (800aab4 <__d2b+0xa8>)
 800aa26:	4824      	ldr	r0, [pc, #144]	@ (800aab8 <__d2b+0xac>)
 800aa28:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa2c:	f000 f986 	bl	800ad3c <__assert_func>
 800aa30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa38:	b10d      	cbz	r5, 800aa3e <__d2b+0x32>
 800aa3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	f1b8 0300 	subs.w	r3, r8, #0
 800aa44:	d023      	beq.n	800aa8e <__d2b+0x82>
 800aa46:	4668      	mov	r0, sp
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	f7ff fd7c 	bl	800a546 <__lo0bits>
 800aa4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa52:	b1d0      	cbz	r0, 800aa8a <__d2b+0x7e>
 800aa54:	f1c0 0320 	rsb	r3, r0, #32
 800aa58:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5c:	430b      	orrs	r3, r1
 800aa5e:	40c2      	lsrs	r2, r0
 800aa60:	6163      	str	r3, [r4, #20]
 800aa62:	9201      	str	r2, [sp, #4]
 800aa64:	9b01      	ldr	r3, [sp, #4]
 800aa66:	61a3      	str	r3, [r4, #24]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	bf0c      	ite	eq
 800aa6c:	2201      	moveq	r2, #1
 800aa6e:	2202      	movne	r2, #2
 800aa70:	6122      	str	r2, [r4, #16]
 800aa72:	b1a5      	cbz	r5, 800aa9e <__d2b+0x92>
 800aa74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa78:	4405      	add	r5, r0
 800aa7a:	603d      	str	r5, [r7, #0]
 800aa7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa80:	6030      	str	r0, [r6, #0]
 800aa82:	4620      	mov	r0, r4
 800aa84:	b003      	add	sp, #12
 800aa86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa8a:	6161      	str	r1, [r4, #20]
 800aa8c:	e7ea      	b.n	800aa64 <__d2b+0x58>
 800aa8e:	a801      	add	r0, sp, #4
 800aa90:	f7ff fd59 	bl	800a546 <__lo0bits>
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	6163      	str	r3, [r4, #20]
 800aa98:	3020      	adds	r0, #32
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	e7e8      	b.n	800aa70 <__d2b+0x64>
 800aa9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaa2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aaa6:	6038      	str	r0, [r7, #0]
 800aaa8:	6918      	ldr	r0, [r3, #16]
 800aaaa:	f7ff fd2d 	bl	800a508 <__hi0bits>
 800aaae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aab2:	e7e5      	b.n	800aa80 <__d2b+0x74>
 800aab4:	0800b310 	.word	0x0800b310
 800aab8:	0800b321 	.word	0x0800b321

0800aabc <__sflush_r>:
 800aabc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac4:	0716      	lsls	r6, r2, #28
 800aac6:	4605      	mov	r5, r0
 800aac8:	460c      	mov	r4, r1
 800aaca:	d454      	bmi.n	800ab76 <__sflush_r+0xba>
 800aacc:	684b      	ldr	r3, [r1, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	dc02      	bgt.n	800aad8 <__sflush_r+0x1c>
 800aad2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dd48      	ble.n	800ab6a <__sflush_r+0xae>
 800aad8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aada:	2e00      	cmp	r6, #0
 800aadc:	d045      	beq.n	800ab6a <__sflush_r+0xae>
 800aade:	2300      	movs	r3, #0
 800aae0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aae4:	682f      	ldr	r7, [r5, #0]
 800aae6:	6a21      	ldr	r1, [r4, #32]
 800aae8:	602b      	str	r3, [r5, #0]
 800aaea:	d030      	beq.n	800ab4e <__sflush_r+0x92>
 800aaec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	0759      	lsls	r1, r3, #29
 800aaf2:	d505      	bpl.n	800ab00 <__sflush_r+0x44>
 800aaf4:	6863      	ldr	r3, [r4, #4]
 800aaf6:	1ad2      	subs	r2, r2, r3
 800aaf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aafa:	b10b      	cbz	r3, 800ab00 <__sflush_r+0x44>
 800aafc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aafe:	1ad2      	subs	r2, r2, r3
 800ab00:	2300      	movs	r3, #0
 800ab02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab04:	6a21      	ldr	r1, [r4, #32]
 800ab06:	4628      	mov	r0, r5
 800ab08:	47b0      	blx	r6
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	d106      	bne.n	800ab1e <__sflush_r+0x62>
 800ab10:	6829      	ldr	r1, [r5, #0]
 800ab12:	291d      	cmp	r1, #29
 800ab14:	d82b      	bhi.n	800ab6e <__sflush_r+0xb2>
 800ab16:	4a2a      	ldr	r2, [pc, #168]	@ (800abc0 <__sflush_r+0x104>)
 800ab18:	410a      	asrs	r2, r1
 800ab1a:	07d6      	lsls	r6, r2, #31
 800ab1c:	d427      	bmi.n	800ab6e <__sflush_r+0xb2>
 800ab1e:	2200      	movs	r2, #0
 800ab20:	6062      	str	r2, [r4, #4]
 800ab22:	04d9      	lsls	r1, r3, #19
 800ab24:	6922      	ldr	r2, [r4, #16]
 800ab26:	6022      	str	r2, [r4, #0]
 800ab28:	d504      	bpl.n	800ab34 <__sflush_r+0x78>
 800ab2a:	1c42      	adds	r2, r0, #1
 800ab2c:	d101      	bne.n	800ab32 <__sflush_r+0x76>
 800ab2e:	682b      	ldr	r3, [r5, #0]
 800ab30:	b903      	cbnz	r3, 800ab34 <__sflush_r+0x78>
 800ab32:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab36:	602f      	str	r7, [r5, #0]
 800ab38:	b1b9      	cbz	r1, 800ab6a <__sflush_r+0xae>
 800ab3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab3e:	4299      	cmp	r1, r3
 800ab40:	d002      	beq.n	800ab48 <__sflush_r+0x8c>
 800ab42:	4628      	mov	r0, r5
 800ab44:	f7ff fb38 	bl	800a1b8 <_free_r>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab4c:	e00d      	b.n	800ab6a <__sflush_r+0xae>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	4628      	mov	r0, r5
 800ab52:	47b0      	blx	r6
 800ab54:	4602      	mov	r2, r0
 800ab56:	1c50      	adds	r0, r2, #1
 800ab58:	d1c9      	bne.n	800aaee <__sflush_r+0x32>
 800ab5a:	682b      	ldr	r3, [r5, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d0c6      	beq.n	800aaee <__sflush_r+0x32>
 800ab60:	2b1d      	cmp	r3, #29
 800ab62:	d001      	beq.n	800ab68 <__sflush_r+0xac>
 800ab64:	2b16      	cmp	r3, #22
 800ab66:	d11e      	bne.n	800aba6 <__sflush_r+0xea>
 800ab68:	602f      	str	r7, [r5, #0]
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	e022      	b.n	800abb4 <__sflush_r+0xf8>
 800ab6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab72:	b21b      	sxth	r3, r3
 800ab74:	e01b      	b.n	800abae <__sflush_r+0xf2>
 800ab76:	690f      	ldr	r7, [r1, #16]
 800ab78:	2f00      	cmp	r7, #0
 800ab7a:	d0f6      	beq.n	800ab6a <__sflush_r+0xae>
 800ab7c:	0793      	lsls	r3, r2, #30
 800ab7e:	680e      	ldr	r6, [r1, #0]
 800ab80:	bf08      	it	eq
 800ab82:	694b      	ldreq	r3, [r1, #20]
 800ab84:	600f      	str	r7, [r1, #0]
 800ab86:	bf18      	it	ne
 800ab88:	2300      	movne	r3, #0
 800ab8a:	eba6 0807 	sub.w	r8, r6, r7
 800ab8e:	608b      	str	r3, [r1, #8]
 800ab90:	f1b8 0f00 	cmp.w	r8, #0
 800ab94:	dde9      	ble.n	800ab6a <__sflush_r+0xae>
 800ab96:	6a21      	ldr	r1, [r4, #32]
 800ab98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab9a:	4643      	mov	r3, r8
 800ab9c:	463a      	mov	r2, r7
 800ab9e:	4628      	mov	r0, r5
 800aba0:	47b0      	blx	r6
 800aba2:	2800      	cmp	r0, #0
 800aba4:	dc08      	bgt.n	800abb8 <__sflush_r+0xfc>
 800aba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abae:	81a3      	strh	r3, [r4, #12]
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295
 800abb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb8:	4407      	add	r7, r0
 800abba:	eba8 0800 	sub.w	r8, r8, r0
 800abbe:	e7e7      	b.n	800ab90 <__sflush_r+0xd4>
 800abc0:	dfbffffe 	.word	0xdfbffffe

0800abc4 <_fflush_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	690b      	ldr	r3, [r1, #16]
 800abc8:	4605      	mov	r5, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	b913      	cbnz	r3, 800abd4 <_fflush_r+0x10>
 800abce:	2500      	movs	r5, #0
 800abd0:	4628      	mov	r0, r5
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	b118      	cbz	r0, 800abde <_fflush_r+0x1a>
 800abd6:	6a03      	ldr	r3, [r0, #32]
 800abd8:	b90b      	cbnz	r3, 800abde <_fflush_r+0x1a>
 800abda:	f7fe faa7 	bl	800912c <__sinit>
 800abde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0f3      	beq.n	800abce <_fflush_r+0xa>
 800abe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abe8:	07d0      	lsls	r0, r2, #31
 800abea:	d404      	bmi.n	800abf6 <_fflush_r+0x32>
 800abec:	0599      	lsls	r1, r3, #22
 800abee:	d402      	bmi.n	800abf6 <_fflush_r+0x32>
 800abf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abf2:	f7fe fc84 	bl	80094fe <__retarget_lock_acquire_recursive>
 800abf6:	4628      	mov	r0, r5
 800abf8:	4621      	mov	r1, r4
 800abfa:	f7ff ff5f 	bl	800aabc <__sflush_r>
 800abfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac00:	07da      	lsls	r2, r3, #31
 800ac02:	4605      	mov	r5, r0
 800ac04:	d4e4      	bmi.n	800abd0 <_fflush_r+0xc>
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	059b      	lsls	r3, r3, #22
 800ac0a:	d4e1      	bmi.n	800abd0 <_fflush_r+0xc>
 800ac0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac0e:	f7fe fc77 	bl	8009500 <__retarget_lock_release_recursive>
 800ac12:	e7dd      	b.n	800abd0 <_fflush_r+0xc>

0800ac14 <__swhatbuf_r>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	460c      	mov	r4, r1
 800ac18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	b096      	sub	sp, #88	@ 0x58
 800ac20:	4615      	mov	r5, r2
 800ac22:	461e      	mov	r6, r3
 800ac24:	da0d      	bge.n	800ac42 <__swhatbuf_r+0x2e>
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac2c:	f04f 0100 	mov.w	r1, #0
 800ac30:	bf14      	ite	ne
 800ac32:	2340      	movne	r3, #64	@ 0x40
 800ac34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac38:	2000      	movs	r0, #0
 800ac3a:	6031      	str	r1, [r6, #0]
 800ac3c:	602b      	str	r3, [r5, #0]
 800ac3e:	b016      	add	sp, #88	@ 0x58
 800ac40:	bd70      	pop	{r4, r5, r6, pc}
 800ac42:	466a      	mov	r2, sp
 800ac44:	f000 f848 	bl	800acd8 <_fstat_r>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	dbec      	blt.n	800ac26 <__swhatbuf_r+0x12>
 800ac4c:	9901      	ldr	r1, [sp, #4]
 800ac4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac56:	4259      	negs	r1, r3
 800ac58:	4159      	adcs	r1, r3
 800ac5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac5e:	e7eb      	b.n	800ac38 <__swhatbuf_r+0x24>

0800ac60 <__smakebuf_r>:
 800ac60:	898b      	ldrh	r3, [r1, #12]
 800ac62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac64:	079d      	lsls	r5, r3, #30
 800ac66:	4606      	mov	r6, r0
 800ac68:	460c      	mov	r4, r1
 800ac6a:	d507      	bpl.n	800ac7c <__smakebuf_r+0x1c>
 800ac6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac70:	6023      	str	r3, [r4, #0]
 800ac72:	6123      	str	r3, [r4, #16]
 800ac74:	2301      	movs	r3, #1
 800ac76:	6163      	str	r3, [r4, #20]
 800ac78:	b003      	add	sp, #12
 800ac7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac7c:	ab01      	add	r3, sp, #4
 800ac7e:	466a      	mov	r2, sp
 800ac80:	f7ff ffc8 	bl	800ac14 <__swhatbuf_r>
 800ac84:	9f00      	ldr	r7, [sp, #0]
 800ac86:	4605      	mov	r5, r0
 800ac88:	4639      	mov	r1, r7
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f7ff fb08 	bl	800a2a0 <_malloc_r>
 800ac90:	b948      	cbnz	r0, 800aca6 <__smakebuf_r+0x46>
 800ac92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac96:	059a      	lsls	r2, r3, #22
 800ac98:	d4ee      	bmi.n	800ac78 <__smakebuf_r+0x18>
 800ac9a:	f023 0303 	bic.w	r3, r3, #3
 800ac9e:	f043 0302 	orr.w	r3, r3, #2
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	e7e2      	b.n	800ac6c <__smakebuf_r+0xc>
 800aca6:	89a3      	ldrh	r3, [r4, #12]
 800aca8:	6020      	str	r0, [r4, #0]
 800acaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	9b01      	ldr	r3, [sp, #4]
 800acb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acb6:	b15b      	cbz	r3, 800acd0 <__smakebuf_r+0x70>
 800acb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acbc:	4630      	mov	r0, r6
 800acbe:	f000 f81d 	bl	800acfc <_isatty_r>
 800acc2:	b128      	cbz	r0, 800acd0 <__smakebuf_r+0x70>
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	f023 0303 	bic.w	r3, r3, #3
 800acca:	f043 0301 	orr.w	r3, r3, #1
 800acce:	81a3      	strh	r3, [r4, #12]
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	431d      	orrs	r5, r3
 800acd4:	81a5      	strh	r5, [r4, #12]
 800acd6:	e7cf      	b.n	800ac78 <__smakebuf_r+0x18>

0800acd8 <_fstat_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4d07      	ldr	r5, [pc, #28]	@ (800acf8 <_fstat_r+0x20>)
 800acdc:	2300      	movs	r3, #0
 800acde:	4604      	mov	r4, r0
 800ace0:	4608      	mov	r0, r1
 800ace2:	4611      	mov	r1, r2
 800ace4:	602b      	str	r3, [r5, #0]
 800ace6:	f7f6 feb9 	bl	8001a5c <_fstat>
 800acea:	1c43      	adds	r3, r0, #1
 800acec:	d102      	bne.n	800acf4 <_fstat_r+0x1c>
 800acee:	682b      	ldr	r3, [r5, #0]
 800acf0:	b103      	cbz	r3, 800acf4 <_fstat_r+0x1c>
 800acf2:	6023      	str	r3, [r4, #0]
 800acf4:	bd38      	pop	{r3, r4, r5, pc}
 800acf6:	bf00      	nop
 800acf8:	20020938 	.word	0x20020938

0800acfc <_isatty_r>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4d06      	ldr	r5, [pc, #24]	@ (800ad18 <_isatty_r+0x1c>)
 800ad00:	2300      	movs	r3, #0
 800ad02:	4604      	mov	r4, r0
 800ad04:	4608      	mov	r0, r1
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	f7f6 feb8 	bl	8001a7c <_isatty>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d102      	bne.n	800ad16 <_isatty_r+0x1a>
 800ad10:	682b      	ldr	r3, [r5, #0]
 800ad12:	b103      	cbz	r3, 800ad16 <_isatty_r+0x1a>
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	20020938 	.word	0x20020938

0800ad1c <_sbrk_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d06      	ldr	r5, [pc, #24]	@ (800ad38 <_sbrk_r+0x1c>)
 800ad20:	2300      	movs	r3, #0
 800ad22:	4604      	mov	r4, r0
 800ad24:	4608      	mov	r0, r1
 800ad26:	602b      	str	r3, [r5, #0]
 800ad28:	f7f6 fec0 	bl	8001aac <_sbrk>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_sbrk_r+0x1a>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_sbrk_r+0x1a>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	20020938 	.word	0x20020938

0800ad3c <__assert_func>:
 800ad3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad3e:	4614      	mov	r4, r2
 800ad40:	461a      	mov	r2, r3
 800ad42:	4b09      	ldr	r3, [pc, #36]	@ (800ad68 <__assert_func+0x2c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4605      	mov	r5, r0
 800ad48:	68d8      	ldr	r0, [r3, #12]
 800ad4a:	b954      	cbnz	r4, 800ad62 <__assert_func+0x26>
 800ad4c:	4b07      	ldr	r3, [pc, #28]	@ (800ad6c <__assert_func+0x30>)
 800ad4e:	461c      	mov	r4, r3
 800ad50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad54:	9100      	str	r1, [sp, #0]
 800ad56:	462b      	mov	r3, r5
 800ad58:	4905      	ldr	r1, [pc, #20]	@ (800ad70 <__assert_func+0x34>)
 800ad5a:	f000 f841 	bl	800ade0 <fiprintf>
 800ad5e:	f000 f851 	bl	800ae04 <abort>
 800ad62:	4b04      	ldr	r3, [pc, #16]	@ (800ad74 <__assert_func+0x38>)
 800ad64:	e7f4      	b.n	800ad50 <__assert_func+0x14>
 800ad66:	bf00      	nop
 800ad68:	20000058 	.word	0x20000058
 800ad6c:	0800b4bd 	.word	0x0800b4bd
 800ad70:	0800b48f 	.word	0x0800b48f
 800ad74:	0800b482 	.word	0x0800b482

0800ad78 <_calloc_r>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	fba1 5402 	umull	r5, r4, r1, r2
 800ad7e:	b93c      	cbnz	r4, 800ad90 <_calloc_r+0x18>
 800ad80:	4629      	mov	r1, r5
 800ad82:	f7ff fa8d 	bl	800a2a0 <_malloc_r>
 800ad86:	4606      	mov	r6, r0
 800ad88:	b928      	cbnz	r0, 800ad96 <_calloc_r+0x1e>
 800ad8a:	2600      	movs	r6, #0
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	220c      	movs	r2, #12
 800ad92:	6002      	str	r2, [r0, #0]
 800ad94:	e7f9      	b.n	800ad8a <_calloc_r+0x12>
 800ad96:	462a      	mov	r2, r5
 800ad98:	4621      	mov	r1, r4
 800ad9a:	f7fe fb33 	bl	8009404 <memset>
 800ad9e:	e7f5      	b.n	800ad8c <_calloc_r+0x14>

0800ada0 <__ascii_mbtowc>:
 800ada0:	b082      	sub	sp, #8
 800ada2:	b901      	cbnz	r1, 800ada6 <__ascii_mbtowc+0x6>
 800ada4:	a901      	add	r1, sp, #4
 800ada6:	b142      	cbz	r2, 800adba <__ascii_mbtowc+0x1a>
 800ada8:	b14b      	cbz	r3, 800adbe <__ascii_mbtowc+0x1e>
 800adaa:	7813      	ldrb	r3, [r2, #0]
 800adac:	600b      	str	r3, [r1, #0]
 800adae:	7812      	ldrb	r2, [r2, #0]
 800adb0:	1e10      	subs	r0, r2, #0
 800adb2:	bf18      	it	ne
 800adb4:	2001      	movne	r0, #1
 800adb6:	b002      	add	sp, #8
 800adb8:	4770      	bx	lr
 800adba:	4610      	mov	r0, r2
 800adbc:	e7fb      	b.n	800adb6 <__ascii_mbtowc+0x16>
 800adbe:	f06f 0001 	mvn.w	r0, #1
 800adc2:	e7f8      	b.n	800adb6 <__ascii_mbtowc+0x16>

0800adc4 <__ascii_wctomb>:
 800adc4:	4603      	mov	r3, r0
 800adc6:	4608      	mov	r0, r1
 800adc8:	b141      	cbz	r1, 800addc <__ascii_wctomb+0x18>
 800adca:	2aff      	cmp	r2, #255	@ 0xff
 800adcc:	d904      	bls.n	800add8 <__ascii_wctomb+0x14>
 800adce:	228a      	movs	r2, #138	@ 0x8a
 800add0:	601a      	str	r2, [r3, #0]
 800add2:	f04f 30ff 	mov.w	r0, #4294967295
 800add6:	4770      	bx	lr
 800add8:	700a      	strb	r2, [r1, #0]
 800adda:	2001      	movs	r0, #1
 800addc:	4770      	bx	lr
	...

0800ade0 <fiprintf>:
 800ade0:	b40e      	push	{r1, r2, r3}
 800ade2:	b503      	push	{r0, r1, lr}
 800ade4:	4601      	mov	r1, r0
 800ade6:	ab03      	add	r3, sp, #12
 800ade8:	4805      	ldr	r0, [pc, #20]	@ (800ae00 <fiprintf+0x20>)
 800adea:	f853 2b04 	ldr.w	r2, [r3], #4
 800adee:	6800      	ldr	r0, [r0, #0]
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	f000 f837 	bl	800ae64 <_vfiprintf_r>
 800adf6:	b002      	add	sp, #8
 800adf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800adfc:	b003      	add	sp, #12
 800adfe:	4770      	bx	lr
 800ae00:	20000058 	.word	0x20000058

0800ae04 <abort>:
 800ae04:	b508      	push	{r3, lr}
 800ae06:	2006      	movs	r0, #6
 800ae08:	f000 f96c 	bl	800b0e4 <raise>
 800ae0c:	2001      	movs	r0, #1
 800ae0e:	f7f6 fdd5 	bl	80019bc <_exit>

0800ae12 <__sfputc_r>:
 800ae12:	6893      	ldr	r3, [r2, #8]
 800ae14:	3b01      	subs	r3, #1
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	b410      	push	{r4}
 800ae1a:	6093      	str	r3, [r2, #8]
 800ae1c:	da08      	bge.n	800ae30 <__sfputc_r+0x1e>
 800ae1e:	6994      	ldr	r4, [r2, #24]
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	db01      	blt.n	800ae28 <__sfputc_r+0x16>
 800ae24:	290a      	cmp	r1, #10
 800ae26:	d103      	bne.n	800ae30 <__sfputc_r+0x1e>
 800ae28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae2c:	f7fe ba55 	b.w	80092da <__swbuf_r>
 800ae30:	6813      	ldr	r3, [r2, #0]
 800ae32:	1c58      	adds	r0, r3, #1
 800ae34:	6010      	str	r0, [r2, #0]
 800ae36:	7019      	strb	r1, [r3, #0]
 800ae38:	4608      	mov	r0, r1
 800ae3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <__sfputs_r>:
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	4606      	mov	r6, r0
 800ae44:	460f      	mov	r7, r1
 800ae46:	4614      	mov	r4, r2
 800ae48:	18d5      	adds	r5, r2, r3
 800ae4a:	42ac      	cmp	r4, r5
 800ae4c:	d101      	bne.n	800ae52 <__sfputs_r+0x12>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e007      	b.n	800ae62 <__sfputs_r+0x22>
 800ae52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae56:	463a      	mov	r2, r7
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f7ff ffda 	bl	800ae12 <__sfputc_r>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d1f3      	bne.n	800ae4a <__sfputs_r+0xa>
 800ae62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae64 <_vfiprintf_r>:
 800ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	460d      	mov	r5, r1
 800ae6a:	b09d      	sub	sp, #116	@ 0x74
 800ae6c:	4614      	mov	r4, r2
 800ae6e:	4698      	mov	r8, r3
 800ae70:	4606      	mov	r6, r0
 800ae72:	b118      	cbz	r0, 800ae7c <_vfiprintf_r+0x18>
 800ae74:	6a03      	ldr	r3, [r0, #32]
 800ae76:	b90b      	cbnz	r3, 800ae7c <_vfiprintf_r+0x18>
 800ae78:	f7fe f958 	bl	800912c <__sinit>
 800ae7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae7e:	07d9      	lsls	r1, r3, #31
 800ae80:	d405      	bmi.n	800ae8e <_vfiprintf_r+0x2a>
 800ae82:	89ab      	ldrh	r3, [r5, #12]
 800ae84:	059a      	lsls	r2, r3, #22
 800ae86:	d402      	bmi.n	800ae8e <_vfiprintf_r+0x2a>
 800ae88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae8a:	f7fe fb38 	bl	80094fe <__retarget_lock_acquire_recursive>
 800ae8e:	89ab      	ldrh	r3, [r5, #12]
 800ae90:	071b      	lsls	r3, r3, #28
 800ae92:	d501      	bpl.n	800ae98 <_vfiprintf_r+0x34>
 800ae94:	692b      	ldr	r3, [r5, #16]
 800ae96:	b99b      	cbnz	r3, 800aec0 <_vfiprintf_r+0x5c>
 800ae98:	4629      	mov	r1, r5
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	f7fe fa5c 	bl	8009358 <__swsetup_r>
 800aea0:	b170      	cbz	r0, 800aec0 <_vfiprintf_r+0x5c>
 800aea2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aea4:	07dc      	lsls	r4, r3, #31
 800aea6:	d504      	bpl.n	800aeb2 <_vfiprintf_r+0x4e>
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeac:	b01d      	add	sp, #116	@ 0x74
 800aeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb2:	89ab      	ldrh	r3, [r5, #12]
 800aeb4:	0598      	lsls	r0, r3, #22
 800aeb6:	d4f7      	bmi.n	800aea8 <_vfiprintf_r+0x44>
 800aeb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aeba:	f7fe fb21 	bl	8009500 <__retarget_lock_release_recursive>
 800aebe:	e7f3      	b.n	800aea8 <_vfiprintf_r+0x44>
 800aec0:	2300      	movs	r3, #0
 800aec2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aec4:	2320      	movs	r3, #32
 800aec6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeca:	f8cd 800c 	str.w	r8, [sp, #12]
 800aece:	2330      	movs	r3, #48	@ 0x30
 800aed0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b080 <_vfiprintf_r+0x21c>
 800aed4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aed8:	f04f 0901 	mov.w	r9, #1
 800aedc:	4623      	mov	r3, r4
 800aede:	469a      	mov	sl, r3
 800aee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aee4:	b10a      	cbz	r2, 800aeea <_vfiprintf_r+0x86>
 800aee6:	2a25      	cmp	r2, #37	@ 0x25
 800aee8:	d1f9      	bne.n	800aede <_vfiprintf_r+0x7a>
 800aeea:	ebba 0b04 	subs.w	fp, sl, r4
 800aeee:	d00b      	beq.n	800af08 <_vfiprintf_r+0xa4>
 800aef0:	465b      	mov	r3, fp
 800aef2:	4622      	mov	r2, r4
 800aef4:	4629      	mov	r1, r5
 800aef6:	4630      	mov	r0, r6
 800aef8:	f7ff ffa2 	bl	800ae40 <__sfputs_r>
 800aefc:	3001      	adds	r0, #1
 800aefe:	f000 80a7 	beq.w	800b050 <_vfiprintf_r+0x1ec>
 800af02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af04:	445a      	add	r2, fp
 800af06:	9209      	str	r2, [sp, #36]	@ 0x24
 800af08:	f89a 3000 	ldrb.w	r3, [sl]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 809f 	beq.w	800b050 <_vfiprintf_r+0x1ec>
 800af12:	2300      	movs	r3, #0
 800af14:	f04f 32ff 	mov.w	r2, #4294967295
 800af18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af1c:	f10a 0a01 	add.w	sl, sl, #1
 800af20:	9304      	str	r3, [sp, #16]
 800af22:	9307      	str	r3, [sp, #28]
 800af24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af28:	931a      	str	r3, [sp, #104]	@ 0x68
 800af2a:	4654      	mov	r4, sl
 800af2c:	2205      	movs	r2, #5
 800af2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af32:	4853      	ldr	r0, [pc, #332]	@ (800b080 <_vfiprintf_r+0x21c>)
 800af34:	f7f5 f96c 	bl	8000210 <memchr>
 800af38:	9a04      	ldr	r2, [sp, #16]
 800af3a:	b9d8      	cbnz	r0, 800af74 <_vfiprintf_r+0x110>
 800af3c:	06d1      	lsls	r1, r2, #27
 800af3e:	bf44      	itt	mi
 800af40:	2320      	movmi	r3, #32
 800af42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af46:	0713      	lsls	r3, r2, #28
 800af48:	bf44      	itt	mi
 800af4a:	232b      	movmi	r3, #43	@ 0x2b
 800af4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af50:	f89a 3000 	ldrb.w	r3, [sl]
 800af54:	2b2a      	cmp	r3, #42	@ 0x2a
 800af56:	d015      	beq.n	800af84 <_vfiprintf_r+0x120>
 800af58:	9a07      	ldr	r2, [sp, #28]
 800af5a:	4654      	mov	r4, sl
 800af5c:	2000      	movs	r0, #0
 800af5e:	f04f 0c0a 	mov.w	ip, #10
 800af62:	4621      	mov	r1, r4
 800af64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af68:	3b30      	subs	r3, #48	@ 0x30
 800af6a:	2b09      	cmp	r3, #9
 800af6c:	d94b      	bls.n	800b006 <_vfiprintf_r+0x1a2>
 800af6e:	b1b0      	cbz	r0, 800af9e <_vfiprintf_r+0x13a>
 800af70:	9207      	str	r2, [sp, #28]
 800af72:	e014      	b.n	800af9e <_vfiprintf_r+0x13a>
 800af74:	eba0 0308 	sub.w	r3, r0, r8
 800af78:	fa09 f303 	lsl.w	r3, r9, r3
 800af7c:	4313      	orrs	r3, r2
 800af7e:	9304      	str	r3, [sp, #16]
 800af80:	46a2      	mov	sl, r4
 800af82:	e7d2      	b.n	800af2a <_vfiprintf_r+0xc6>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	1d19      	adds	r1, r3, #4
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	9103      	str	r1, [sp, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	bfbb      	ittet	lt
 800af90:	425b      	neglt	r3, r3
 800af92:	f042 0202 	orrlt.w	r2, r2, #2
 800af96:	9307      	strge	r3, [sp, #28]
 800af98:	9307      	strlt	r3, [sp, #28]
 800af9a:	bfb8      	it	lt
 800af9c:	9204      	strlt	r2, [sp, #16]
 800af9e:	7823      	ldrb	r3, [r4, #0]
 800afa0:	2b2e      	cmp	r3, #46	@ 0x2e
 800afa2:	d10a      	bne.n	800afba <_vfiprintf_r+0x156>
 800afa4:	7863      	ldrb	r3, [r4, #1]
 800afa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800afa8:	d132      	bne.n	800b010 <_vfiprintf_r+0x1ac>
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	1d1a      	adds	r2, r3, #4
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	9203      	str	r2, [sp, #12]
 800afb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afb6:	3402      	adds	r4, #2
 800afb8:	9305      	str	r3, [sp, #20]
 800afba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b090 <_vfiprintf_r+0x22c>
 800afbe:	7821      	ldrb	r1, [r4, #0]
 800afc0:	2203      	movs	r2, #3
 800afc2:	4650      	mov	r0, sl
 800afc4:	f7f5 f924 	bl	8000210 <memchr>
 800afc8:	b138      	cbz	r0, 800afda <_vfiprintf_r+0x176>
 800afca:	9b04      	ldr	r3, [sp, #16]
 800afcc:	eba0 000a 	sub.w	r0, r0, sl
 800afd0:	2240      	movs	r2, #64	@ 0x40
 800afd2:	4082      	lsls	r2, r0
 800afd4:	4313      	orrs	r3, r2
 800afd6:	3401      	adds	r4, #1
 800afd8:	9304      	str	r3, [sp, #16]
 800afda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afde:	4829      	ldr	r0, [pc, #164]	@ (800b084 <_vfiprintf_r+0x220>)
 800afe0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afe4:	2206      	movs	r2, #6
 800afe6:	f7f5 f913 	bl	8000210 <memchr>
 800afea:	2800      	cmp	r0, #0
 800afec:	d03f      	beq.n	800b06e <_vfiprintf_r+0x20a>
 800afee:	4b26      	ldr	r3, [pc, #152]	@ (800b088 <_vfiprintf_r+0x224>)
 800aff0:	bb1b      	cbnz	r3, 800b03a <_vfiprintf_r+0x1d6>
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	3307      	adds	r3, #7
 800aff6:	f023 0307 	bic.w	r3, r3, #7
 800affa:	3308      	adds	r3, #8
 800affc:	9303      	str	r3, [sp, #12]
 800affe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b000:	443b      	add	r3, r7
 800b002:	9309      	str	r3, [sp, #36]	@ 0x24
 800b004:	e76a      	b.n	800aedc <_vfiprintf_r+0x78>
 800b006:	fb0c 3202 	mla	r2, ip, r2, r3
 800b00a:	460c      	mov	r4, r1
 800b00c:	2001      	movs	r0, #1
 800b00e:	e7a8      	b.n	800af62 <_vfiprintf_r+0xfe>
 800b010:	2300      	movs	r3, #0
 800b012:	3401      	adds	r4, #1
 800b014:	9305      	str	r3, [sp, #20]
 800b016:	4619      	mov	r1, r3
 800b018:	f04f 0c0a 	mov.w	ip, #10
 800b01c:	4620      	mov	r0, r4
 800b01e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b022:	3a30      	subs	r2, #48	@ 0x30
 800b024:	2a09      	cmp	r2, #9
 800b026:	d903      	bls.n	800b030 <_vfiprintf_r+0x1cc>
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d0c6      	beq.n	800afba <_vfiprintf_r+0x156>
 800b02c:	9105      	str	r1, [sp, #20]
 800b02e:	e7c4      	b.n	800afba <_vfiprintf_r+0x156>
 800b030:	fb0c 2101 	mla	r1, ip, r1, r2
 800b034:	4604      	mov	r4, r0
 800b036:	2301      	movs	r3, #1
 800b038:	e7f0      	b.n	800b01c <_vfiprintf_r+0x1b8>
 800b03a:	ab03      	add	r3, sp, #12
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	462a      	mov	r2, r5
 800b040:	4b12      	ldr	r3, [pc, #72]	@ (800b08c <_vfiprintf_r+0x228>)
 800b042:	a904      	add	r1, sp, #16
 800b044:	4630      	mov	r0, r6
 800b046:	f7fd fc2d 	bl	80088a4 <_printf_float>
 800b04a:	4607      	mov	r7, r0
 800b04c:	1c78      	adds	r0, r7, #1
 800b04e:	d1d6      	bne.n	800affe <_vfiprintf_r+0x19a>
 800b050:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b052:	07d9      	lsls	r1, r3, #31
 800b054:	d405      	bmi.n	800b062 <_vfiprintf_r+0x1fe>
 800b056:	89ab      	ldrh	r3, [r5, #12]
 800b058:	059a      	lsls	r2, r3, #22
 800b05a:	d402      	bmi.n	800b062 <_vfiprintf_r+0x1fe>
 800b05c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b05e:	f7fe fa4f 	bl	8009500 <__retarget_lock_release_recursive>
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	065b      	lsls	r3, r3, #25
 800b066:	f53f af1f 	bmi.w	800aea8 <_vfiprintf_r+0x44>
 800b06a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b06c:	e71e      	b.n	800aeac <_vfiprintf_r+0x48>
 800b06e:	ab03      	add	r3, sp, #12
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	462a      	mov	r2, r5
 800b074:	4b05      	ldr	r3, [pc, #20]	@ (800b08c <_vfiprintf_r+0x228>)
 800b076:	a904      	add	r1, sp, #16
 800b078:	4630      	mov	r0, r6
 800b07a:	f7fd feab 	bl	8008dd4 <_printf_i>
 800b07e:	e7e4      	b.n	800b04a <_vfiprintf_r+0x1e6>
 800b080:	0800b5bf 	.word	0x0800b5bf
 800b084:	0800b5c9 	.word	0x0800b5c9
 800b088:	080088a5 	.word	0x080088a5
 800b08c:	0800ae41 	.word	0x0800ae41
 800b090:	0800b5c5 	.word	0x0800b5c5

0800b094 <_raise_r>:
 800b094:	291f      	cmp	r1, #31
 800b096:	b538      	push	{r3, r4, r5, lr}
 800b098:	4605      	mov	r5, r0
 800b09a:	460c      	mov	r4, r1
 800b09c:	d904      	bls.n	800b0a8 <_raise_r+0x14>
 800b09e:	2316      	movs	r3, #22
 800b0a0:	6003      	str	r3, [r0, #0]
 800b0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a6:	bd38      	pop	{r3, r4, r5, pc}
 800b0a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0aa:	b112      	cbz	r2, 800b0b2 <_raise_r+0x1e>
 800b0ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0b0:	b94b      	cbnz	r3, 800b0c6 <_raise_r+0x32>
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f000 f830 	bl	800b118 <_getpid_r>
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	4628      	mov	r0, r5
 800b0be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0c2:	f000 b817 	b.w	800b0f4 <_kill_r>
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d00a      	beq.n	800b0e0 <_raise_r+0x4c>
 800b0ca:	1c59      	adds	r1, r3, #1
 800b0cc:	d103      	bne.n	800b0d6 <_raise_r+0x42>
 800b0ce:	2316      	movs	r3, #22
 800b0d0:	6003      	str	r3, [r0, #0]
 800b0d2:	2001      	movs	r0, #1
 800b0d4:	e7e7      	b.n	800b0a6 <_raise_r+0x12>
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0dc:	4620      	mov	r0, r4
 800b0de:	4798      	blx	r3
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	e7e0      	b.n	800b0a6 <_raise_r+0x12>

0800b0e4 <raise>:
 800b0e4:	4b02      	ldr	r3, [pc, #8]	@ (800b0f0 <raise+0xc>)
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	6818      	ldr	r0, [r3, #0]
 800b0ea:	f7ff bfd3 	b.w	800b094 <_raise_r>
 800b0ee:	bf00      	nop
 800b0f0:	20000058 	.word	0x20000058

0800b0f4 <_kill_r>:
 800b0f4:	b538      	push	{r3, r4, r5, lr}
 800b0f6:	4d07      	ldr	r5, [pc, #28]	@ (800b114 <_kill_r+0x20>)
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	4608      	mov	r0, r1
 800b0fe:	4611      	mov	r1, r2
 800b100:	602b      	str	r3, [r5, #0]
 800b102:	f7f6 fc4b 	bl	800199c <_kill>
 800b106:	1c43      	adds	r3, r0, #1
 800b108:	d102      	bne.n	800b110 <_kill_r+0x1c>
 800b10a:	682b      	ldr	r3, [r5, #0]
 800b10c:	b103      	cbz	r3, 800b110 <_kill_r+0x1c>
 800b10e:	6023      	str	r3, [r4, #0]
 800b110:	bd38      	pop	{r3, r4, r5, pc}
 800b112:	bf00      	nop
 800b114:	20020938 	.word	0x20020938

0800b118 <_getpid_r>:
 800b118:	f7f6 bc38 	b.w	800198c <_getpid>

0800b11c <_init>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	bf00      	nop
 800b120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b122:	bc08      	pop	{r3}
 800b124:	469e      	mov	lr, r3
 800b126:	4770      	bx	lr

0800b128 <_fini>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	bf00      	nop
 800b12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12e:	bc08      	pop	{r3}
 800b130:	469e      	mov	lr, r3
 800b132:	4770      	bx	lr

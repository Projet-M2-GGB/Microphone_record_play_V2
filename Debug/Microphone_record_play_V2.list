
Microphone_record_play_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800baa8  0800baa8  0000caa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf70  0800bf70  0000d214  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf70  0800bf70  0000cf70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf78  0800bf78  0000d214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf78  0800bf78  0000cf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf7c  0800bf7c  0000cf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800bf80  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020768  20000220  0800c194  0000d220  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20020988  0800c194  0000d988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a47  00000000  00000000  0000d244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ef  00000000  00000000  00023c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00027380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2f  00000000  00000000  00028600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028742  00000000  00000000  0002942f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018183  00000000  00000000  00051b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a12  00000000  00000000  00069cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af0  00000000  00000000  0015c74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0016223c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba8c 	.word	0x0800ba8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800ba8c 	.word	0x0800ba8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <MX_DMA_Init+0x98>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a23      	ldr	r2, [pc, #140]	@ (8000f70 <MX_DMA_Init+0x98>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <MX_DMA_Init+0x98>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA2_Stream1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2039      	movs	r0, #57	@ 0x39
 8000efc:	f003 fbcd 	bl	800469a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f00:	2039      	movs	r0, #57	@ 0x39
 8000f02:	f003 fbe6 	bl	80046d2 <HAL_NVIC_EnableIRQ>

    /* DMA initialization for SAI RX */
    hdma_sai1_a.Instance = DMA2_Stream1;  // Use the correct DMA stream
 8000f06:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f08:	4a1b      	ldr	r2, [pc, #108]	@ (8000f78 <MX_DMA_Init+0xa0>)
 8000f0a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;  // Channel associated with SAI
 8000f0c:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY; // Periph to Mem direction
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;  // No increment for peripheral address
 8000f18:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;  // Increment memory address
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f24:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD; // 16-bit data width
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f2c:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; // 16-bit data width
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f34:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;  // Circular mode
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f3c:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH; // High priority
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f44:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;  // FIFO mode disabled
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8000f4c:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f4e:	f003 fbe9 	bl	8004724 <HAL_DMA_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_DMA_Init+0x84>
    {
        Error_Handler();  // Handle error if DMA initialization fails
 8000f58:	f000 fcc6 	bl	80018e8 <Error_Handler>
    }

    /* Link DMA to the SAI peripheral */
    __HAL_LINKDMA(&hsai_BlockA1, hdmarx, hdma_sai1_a);
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <MX_DMA_Init+0xa4>)
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f60:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f62:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <MX_DMA_Init+0x9c>)
 8000f64:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <MX_DMA_Init+0xa4>)
 8000f66:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	20020520 	.word	0x20020520
 8000f78:	40026428 	.word	0x40026428
 8000f7c:	2002049c 	.word	0x2002049c

08000f80 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <MX_FMC_Init+0x9c>)
 8000f9a:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <MX_FMC_Init+0xa0>)
 8000f9c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <MX_FMC_Init+0x9c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <MX_FMC_Init+0x9c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <MX_FMC_Init+0x9c>)
 8000fac:	2208      	movs	r2, #8
 8000fae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <MX_FMC_Init+0x9c>)
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <MX_FMC_Init+0x9c>)
 8000fb8:	2240      	movs	r2, #64	@ 0x40
 8000fba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <MX_FMC_Init+0x9c>)
 8000fbe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000fc2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <MX_FMC_Init+0x9c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000fca:	4b14      	ldr	r3, [pc, #80]	@ (800101c <MX_FMC_Init+0x9c>)
 8000fcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fd0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <MX_FMC_Init+0x9c>)
 8000fd4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <MX_FMC_Init+0x9c>)
 8000fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	@ (800101c <MX_FMC_Init+0x9c>)
 8001004:	f007 fa64 	bl	80084d0 <HAL_SDRAM_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 800100e:	f000 fc6b 	bl	80018e8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000023c 	.word	0x2000023c
 8001020:	a0000140 	.word	0xa0000140

08001024 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001038:	4b3b      	ldr	r3, [pc, #236]	@ (8001128 <HAL_FMC_MspInit+0x104>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d16f      	bne.n	8001120 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001040:	4b39      	ldr	r3, [pc, #228]	@ (8001128 <HAL_FMC_MspInit+0x104>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001046:	4b39      	ldr	r3, [pc, #228]	@ (800112c <HAL_FMC_MspInit+0x108>)
 8001048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800104a:	4a38      	ldr	r2, [pc, #224]	@ (800112c <HAL_FMC_MspInit+0x108>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6393      	str	r3, [r2, #56]	@ 0x38
 8001052:	4b36      	ldr	r3, [pc, #216]	@ (800112c <HAL_FMC_MspInit+0x108>)
 8001054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 800105e:	f248 1337 	movw	r3, #33079	@ 0x8137
 8001062:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001070:	230c      	movs	r3, #12
 8001072:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4619      	mov	r1, r3
 8001078:	482d      	ldr	r0, [pc, #180]	@ (8001130 <HAL_FMC_MspInit+0x10c>)
 800107a:	f003 ffbb 	bl	8004ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800107e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001082:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001090:	230c      	movs	r3, #12
 8001092:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	4826      	ldr	r0, [pc, #152]	@ (8001134 <HAL_FMC_MspInit+0x110>)
 800109a:	f003 ffab 	bl	8004ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10
 800109e:	f240 63cf 	movw	r3, #1743	@ 0x6cf
 80010a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010b0:	230c      	movs	r3, #12
 80010b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	481f      	ldr	r0, [pc, #124]	@ (8001138 <HAL_FMC_MspInit+0x114>)
 80010ba:	f003 ff9b 	bl	8004ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80010be:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80010c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010d0:	230c      	movs	r3, #12
 80010d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	4619      	mov	r1, r3
 80010d8:	4818      	ldr	r0, [pc, #96]	@ (800113c <HAL_FMC_MspInit+0x118>)
 80010da:	f003 ff8b 	bl	8004ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 80010de:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 80010e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010f0:	230c      	movs	r3, #12
 80010f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4811      	ldr	r0, [pc, #68]	@ (8001140 <HAL_FMC_MspInit+0x11c>)
 80010fa:	f003 ff7b 	bl	8004ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 80010fe:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001102:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001110:	230c      	movs	r3, #12
 8001112:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	480a      	ldr	r0, [pc, #40]	@ (8001144 <HAL_FMC_MspInit+0x120>)
 800111a:	f003 ff6b 	bl	8004ff4 <HAL_GPIO_Init>
 800111e:	e000      	b.n	8001122 <HAL_FMC_MspInit+0xfe>
    return;
 8001120:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000270 	.word	0x20000270
 800112c:	40023800 	.word	0x40023800
 8001130:	40021800 	.word	0x40021800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40022000 	.word	0x40022000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021c00 	.word	0x40021c00
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001150:	f7ff ff68 	bl	8001024 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b090      	sub	sp, #64	@ 0x40
 8001160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001172:	4b95      	ldr	r3, [pc, #596]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a94      	ldr	r2, [pc, #592]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001178:	f043 0310 	orr.w	r3, r3, #16
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b92      	ldr	r3, [pc, #584]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800118a:	4b8f      	ldr	r3, [pc, #572]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a8e      	ldr	r2, [pc, #568]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b8c      	ldr	r3, [pc, #560]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b89      	ldr	r3, [pc, #548]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a88      	ldr	r2, [pc, #544]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b86      	ldr	r3, [pc, #536]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
 80011b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4b83      	ldr	r3, [pc, #524]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a82      	ldr	r2, [pc, #520]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b80      	ldr	r3, [pc, #512]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	61fb      	str	r3, [r7, #28]
 80011d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	4b7d      	ldr	r3, [pc, #500]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a7c      	ldr	r2, [pc, #496]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b7a      	ldr	r3, [pc, #488]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b77      	ldr	r3, [pc, #476]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a76      	ldr	r2, [pc, #472]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b74      	ldr	r3, [pc, #464]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001202:	4b71      	ldr	r3, [pc, #452]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a70      	ldr	r2, [pc, #448]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001208:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b6e      	ldr	r3, [pc, #440]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800121a:	4b6b      	ldr	r3, [pc, #428]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a6a      	ldr	r2, [pc, #424]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b68      	ldr	r3, [pc, #416]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001232:	4b65      	ldr	r3, [pc, #404]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a64      	ldr	r2, [pc, #400]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001238:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b62      	ldr	r3, [pc, #392]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124a:	4b5f      	ldr	r3, [pc, #380]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a5e      	ldr	r2, [pc, #376]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b5c      	ldr	r3, [pc, #368]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0320 	and.w	r3, r3, #32
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	4b59      	ldr	r3, [pc, #356]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a58      	ldr	r2, [pc, #352]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b56      	ldr	r3, [pc, #344]	@ (80013c8 <MX_GPIO_Init+0x26c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE3 PE2 PE1 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 800127a:	230f      	movs	r3, #15
 800127c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001286:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800128a:	4619      	mov	r1, r3
 800128c:	484f      	ldr	r0, [pc, #316]	@ (80013cc <MX_GPIO_Init+0x270>)
 800128e:	f003 feb1 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG11 PG12
                           PG10 PG9 PG7 PG6
                           PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12
 8001292:	f647 63c8 	movw	r3, #32456	@ 0x7ec8
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012a4:	4619      	mov	r1, r3
 80012a6:	484a      	ldr	r0, [pc, #296]	@ (80013d0 <MX_GPIO_Init+0x274>)
 80012a8:	f003 fea4 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80012ac:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80012b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012be:	4619      	mov	r1, r3
 80012c0:	4844      	ldr	r0, [pc, #272]	@ (80013d4 <MX_GPIO_Init+0x278>)
 80012c2:	f003 fe97 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD3
                           PD4 PD2 PD12 PD13
                           PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 80012c6:	f643 03fc 	movw	r3, #14588	@ 0x38fc
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012cc:	2303      	movs	r3, #3
 80012ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d8:	4619      	mov	r1, r3
 80012da:	483f      	ldr	r0, [pc, #252]	@ (80013d8 <MX_GPIO_Init+0x27c>)
 80012dc:	f003 fe8a 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC3 PC0
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 80012e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e6:	2303      	movs	r3, #3
 80012e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f2:	4619      	mov	r1, r3
 80012f4:	4839      	ldr	r0, [pc, #228]	@ (80013dc <MX_GPIO_Init+0x280>)
 80012f6:	f003 fe7d 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80012fa:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001300:	2303      	movs	r3, #3
 8001302:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800130c:	4619      	mov	r1, r3
 800130e:	4834      	ldr	r0, [pc, #208]	@ (80013e0 <MX_GPIO_Init+0x284>)
 8001310:	f003 fe70 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8001314:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001322:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001326:	4619      	mov	r1, r3
 8001328:	482e      	ldr	r0, [pc, #184]	@ (80013e4 <MX_GPIO_Init+0x288>)
 800132a:	f003 fe63 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI5 PI12
                           PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12
 800132e:	f24f 1330 	movw	r3, #61744	@ 0xf130
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800133c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001340:	4619      	mov	r1, r3
 8001342:	4829      	ldr	r0, [pc, #164]	@ (80013e8 <MX_GPIO_Init+0x28c>)
 8001344:	f003 fe56 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001348:	23ff      	movs	r3, #255	@ 0xff
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134c:	2303      	movs	r3, #3
 800134e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001354:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001358:	4619      	mov	r1, r3
 800135a:	4824      	ldr	r0, [pc, #144]	@ (80013ec <MX_GPIO_Init+0x290>)
 800135c:	f003 fe4a 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_user_Pin;
 8001360:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001366:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800136a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Button_user_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001374:	4619      	mov	r1, r3
 8001376:	481c      	ldr	r0, [pc, #112]	@ (80013e8 <MX_GPIO_Init+0x28c>)
 8001378:	f003 fe3c 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH4 PH7 PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6;
 800137c:	23d0      	movs	r3, #208	@ 0xd0
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001380:	2303      	movs	r3, #3
 8001382:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001388:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800138c:	4619      	mov	r1, r3
 800138e:	4818      	ldr	r0, [pc, #96]	@ (80013f0 <MX_GPIO_Init+0x294>)
 8001390:	f003 fe30 	bl	8004ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8001394:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4812      	ldr	r0, [pc, #72]	@ (80013f4 <MX_GPIO_Init+0x298>)
 80013aa:	f003 fe23 	bl	8004ff4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2028      	movs	r0, #40	@ 0x28
 80013b4:	f003 f971 	bl	800469a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b8:	2028      	movs	r0, #40	@ 0x28
 80013ba:	f003 f98a 	bl	80046d2 <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	@ 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40021800 	.word	0x40021800
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40020c00 	.word	0x40020c00
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40022400 	.word	0x40022400
 80013e8:	40022000 	.word	0x40022000
 80013ec:	40022800 	.word	0x40022800
 80013f0:	40021c00 	.word	0x40021c00
 80013f4:	40021400 	.word	0x40021400

080013f8 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800140a:	2320      	movs	r3, #32
 800140c:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800140e:	f3bf 8f4f 	dsb	sy
}
 8001412:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8001414:	e00b      	b.n	800142e <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8001416:	4a0d      	ldr	r2, [pc, #52]	@ (800144c <SCB_CleanDCache_by_Addr+0x54>)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4413      	add	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b00      	cmp	r3, #0
 8001432:	dcf0      	bgt.n	8001416 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8001434:	f3bf 8f4f 	dsb	sy
}
 8001438:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800143a:	f3bf 8f6f 	isb	sy
}
 800143e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8001440:	bf00      	nop
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001456:	f002 ff9f 	bl	8004398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145a:	f000 f8cb 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145e:	f7ff fe7d 	bl	800115c <MX_GPIO_Init>
  MX_DMA_Init();
 8001462:	f7ff fd39 	bl	8000ed8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001466:	f000 fccd 	bl	8001e04 <MX_USART1_UART_Init>
  MX_SAI1_Init();
 800146a:	f000 fa43 	bl	80018f4 <MX_SAI1_Init>
  MX_FMC_Init();
 800146e:	f7ff fd87 	bl	8000f80 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize Audio Recorder */
	if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8001472:	2202      	movs	r2, #2
 8001474:	2110      	movs	r1, #16
 8001476:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800147a:	f002 fd43 	bl	8003f04 <BSP_AUDIO_IN_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <main+0x3a>
	{
		printf("Audio input setup OK\r\n");
 8001484:	484c      	ldr	r0, [pc, #304]	@ (80015b8 <main+0x168>)
 8001486:	f008 fb93 	bl	8009bb0 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  check_button_release();
 800148a:	f000 fa19 	bl	80018c0 <check_button_release>
	  printf("Waiting for input to record...\r\n");
 800148e:	484b      	ldr	r0, [pc, #300]	@ (80015bc <main+0x16c>)
 8001490:	f008 fb8e 	bl	8009bb0 <puts>
	  HAL_Delay(1000);
 8001494:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001498:	f002 ffdc 	bl	8004454 <HAL_Delay>
	  if (button_pressed == 1)
 800149c:	4b48      	ldr	r3, [pc, #288]	@ (80015c0 <main+0x170>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d1f1      	bne.n	800148a <main+0x3a>
	  {
		  check_button_release();
 80014a6:	f000 fa0b 	bl	80018c0 <check_button_release>
		  printf("recording...\r\n");
 80014aa:	4846      	ldr	r0, [pc, #280]	@ (80015c4 <main+0x174>)
 80014ac:	f008 fb80 	bl	8009bb0 <puts>
		  /* Start Recording */
		  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 80014b0:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 80014b4:	4844      	ldr	r0, [pc, #272]	@ (80015c8 <main+0x178>)
 80014b6:	f002 fda3 	bl	8004000 <BSP_AUDIO_IN_Record>
		  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	e050      	b.n	8001562 <main+0x112>
		  {
		    /* Wait end of half block recording */
		    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
		    {
		      printf("Waiting for BUFFER_OFFSET_HALF...\r\n");
 80014c0:	4842      	ldr	r0, [pc, #264]	@ (80015cc <main+0x17c>)
 80014c2:	f008 fb75 	bl	8009bb0 <puts>
		      HAL_Delay(1000);
 80014c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ca:	f002 ffc3 	bl	8004454 <HAL_Delay>
		      if (button_pressed == 1)
 80014ce:	4b3c      	ldr	r3, [pc, #240]	@ (80015c0 <main+0x170>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <main+0x94>
		      {
		    	check_button_release();
 80014d8:	f000 f9f2 	bl	80018c0 <check_button_release>
		        /* Stop Player before close Test */
		        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80014dc:	2002      	movs	r0, #2
 80014de:	f002 faff 	bl	8003ae0 <BSP_AUDIO_OUT_Stop>
		        return;
 80014e2:	e065      	b.n	80015b0 <main+0x160>
		    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 80014e4:	4b3a      	ldr	r3, [pc, #232]	@ (80015d0 <main+0x180>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d1e9      	bne.n	80014c0 <main+0x70>
		      }
		    }

		    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80014ec:	4b38      	ldr	r3, [pc, #224]	@ (80015d0 <main+0x180>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]

		    /* Copy recorded 1st half block in SDRAM */

		    printf("Copying data to memory...\r\n");
 80014f2:	4838      	ldr	r0, [pc, #224]	@ (80015d4 <main+0x184>)
 80014f4:	f008 fb5c 	bl	8009bb0 <puts>
		    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	03db      	lsls	r3, r3, #15
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	461a      	mov	r2, r3
 8001504:	4b34      	ldr	r3, [pc, #208]	@ (80015d8 <main+0x188>)
 8001506:	4413      	add	r3, r2
 8001508:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800150c:	492e      	ldr	r1, [pc, #184]	@ (80015c8 <main+0x178>)
 800150e:	4618      	mov	r0, r3
 8001510:	f008 fcad 	bl	8009e6e <memcpy>
		           internal_buffer,
		           AUDIO_BLOCK_SIZE);
		    printf("Copy complete.\r\n");
 8001514:	4831      	ldr	r0, [pc, #196]	@ (80015dc <main+0x18c>)
 8001516:	f008 fb4b 	bl	8009bb0 <puts>


		    /* Wait end of one block recording */
		    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 800151a:	e00a      	b.n	8001532 <main+0xe2>
		    {
		      if (button_pressed == 1)
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <main+0x170>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b01      	cmp	r3, #1
 8001524:	d105      	bne.n	8001532 <main+0xe2>
		      {
			    check_button_release();
 8001526:	f000 f9cb 	bl	80018c0 <check_button_release>
		        /* Stop Player before close Test */
		        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800152a:	2002      	movs	r0, #2
 800152c:	f002 fad8 	bl	8003ae0 <BSP_AUDIO_OUT_Stop>
		        return;
 8001530:	e03e      	b.n	80015b0 <main+0x160>
		    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8001532:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <main+0x180>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d1f0      	bne.n	800151c <main+0xcc>
		      }
		    }
		    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800153a:	4b25      	ldr	r3, [pc, #148]	@ (80015d0 <main+0x180>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
		    /* Copy recorded 2nd half block in SDRAM */

		    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	03db      	lsls	r3, r3, #15
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	461a      	mov	r2, r3
 800154c:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <main+0x190>)
 800154e:	4413      	add	r3, r2
 8001550:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001554:	4923      	ldr	r1, [pc, #140]	@ (80015e4 <main+0x194>)
 8001556:	4618      	mov	r0, r3
 8001558:	f008 fc89 	bl	8009e6e <memcpy>
		  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3301      	adds	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b07      	cmp	r3, #7
 8001566:	d9bd      	bls.n	80014e4 <main+0x94>
		           (uint16_t *)(&internal_buffer[AUDIO_BLOCK_SIZE/2]),
		           AUDIO_BLOCK_SIZE);

		  }
		  printf("stopped recording\r\n");
 8001568:	481f      	ldr	r0, [pc, #124]	@ (80015e8 <main+0x198>)
 800156a:	f008 fb21 	bl	8009bb0 <puts>
		  BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800156e:	2002      	movs	r0, #2
 8001570:	f002 fd5e 	bl	8004030 <BSP_AUDIO_IN_Stop>

		  while (button_pressed == 0)
 8001574:	e016      	b.n	80015a4 <main+0x154>
		  {
			  if(button_pressed == 1)
 8001576:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <main+0x170>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d111      	bne.n	80015a4 <main+0x154>
					  {
				  	    check_button_release();
 8001580:	f000 f99e 	bl	80018c0 <check_button_release>
						printf("playing recording...\r\n");
 8001584:	4819      	ldr	r0, [pc, #100]	@ (80015ec <main+0x19c>)
 8001586:	f008 fb13 	bl	8009bb0 <puts>
						/* -----------Start Playback -------------- */
						/* Initialize audio IN at REC_FREQ*/
						BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 70, DEFAULT_AUDIO_IN_FREQ);
 800158a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800158e:	2146      	movs	r1, #70	@ 0x46
 8001590:	2002      	movs	r0, #2
 8001592:	f002 fa29 	bl	80039e8 <BSP_AUDIO_OUT_Init>
						BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8001596:	2005      	movs	r0, #5
 8001598:	f002 fac4 	bl	8003b24 <BSP_AUDIO_OUT_SetAudioFrameSlot>

						/* Play the recorded buffer*/
						AUDIO_Start(AUDIO_REC_START_ADDR, AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS * 2);  /* Use Audio play demo to playback sound */
 800159c:	4914      	ldr	r1, [pc, #80]	@ (80015f0 <main+0x1a0>)
 800159e:	480e      	ldr	r0, [pc, #56]	@ (80015d8 <main+0x188>)
 80015a0:	f000 f8b4 	bl	800170c <AUDIO_Start>
		  while (button_pressed == 0)
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <main+0x170>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0e3      	beq.n	8001576 <main+0x126>
  {
 80015ae:	e76c      	b.n	800148a <main+0x3a>
		  }

	  }
  }
  /* USER CODE END 3 */
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	0800baa8 	.word	0x0800baa8
 80015bc:	0800bac0 	.word	0x0800bac0
 80015c0:	20020498 	.word	0x20020498
 80015c4:	0800bae0 	.word	0x0800bae0
 80015c8:	20000274 	.word	0x20000274
 80015cc:	0800baf0 	.word	0x0800baf0
 80015d0:	20020494 	.word	0x20020494
 80015d4:	0800bb14 	.word	0x0800bb14
 80015d8:	c0115800 	.word	0xc0115800
 80015dc:	0800bb30 	.word	0x0800bb30
 80015e0:	c01257fe 	.word	0xc01257fe
 80015e4:	20010272 	.word	0x20010272
 80015e8:	0800bb40 	.word	0x0800bb40
 80015ec:	0800bb54 	.word	0x0800bb54
 80015f0:	000fffe0 	.word	0x000fffe0

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b094      	sub	sp, #80	@ 0x50
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0320 	add.w	r3, r7, #32
 80015fe:	2230      	movs	r2, #48	@ 0x30
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f008 fbb4 	bl	8009d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <SystemClock_Config+0xec>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	4a30      	ldr	r2, [pc, #192]	@ (80016e0 <SystemClock_Config+0xec>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	@ 0x40
 8001624:	4b2e      	ldr	r3, [pc, #184]	@ (80016e0 <SystemClock_Config+0xec>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001630:	4b2c      	ldr	r3, [pc, #176]	@ (80016e4 <SystemClock_Config+0xf0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2b      	ldr	r2, [pc, #172]	@ (80016e4 <SystemClock_Config+0xf0>)
 8001636:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b29      	ldr	r3, [pc, #164]	@ (80016e4 <SystemClock_Config+0xf0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SAI1_CLK_ENABLE();
 8001648:	4b25      	ldr	r3, [pc, #148]	@ (80016e0 <SystemClock_Config+0xec>)
 800164a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164c:	4a24      	ldr	r2, [pc, #144]	@ (80016e0 <SystemClock_Config+0xec>)
 800164e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001652:	6453      	str	r3, [r2, #68]	@ 0x44
 8001654:	4b22      	ldr	r3, [pc, #136]	@ (80016e0 <SystemClock_Config+0xec>)
 8001656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001660:	2301      	movs	r3, #1
 8001662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166a:	2302      	movs	r3, #2
 800166c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001674:	2319      	movs	r3, #25
 8001676:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001678:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800167c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800167e:	2302      	movs	r3, #2
 8001680:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001682:	2309      	movs	r3, #9
 8001684:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001686:	f107 0320 	add.w	r3, r7, #32
 800168a:	4618      	mov	r0, r3
 800168c:	f004 fdc8 	bl	8006220 <HAL_RCC_OscConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001696:	f000 f927 	bl	80018e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800169a:	f004 fd71 	bl	8006180 <HAL_PWREx_EnableOverDrive>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016a4:	f000 f920 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a8:	230f      	movs	r3, #15
 80016aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ac:	2302      	movs	r3, #2
 80016ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2106      	movs	r1, #6
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 f84e 	bl	8006768 <HAL_RCC_ClockConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80016d2:	f000 f909 	bl	80018e8 <Error_Handler>
  }
}
 80016d6:	bf00      	nop
 80016d8:	3750      	adds	r7, #80	@ 0x50
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40007000 	.word	0x40007000

080016e8 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80016f0:	1d39      	adds	r1, r7, #4
 80016f2:	2364      	movs	r3, #100	@ 0x64
 80016f4:	2201      	movs	r2, #1
 80016f6:	4804      	ldr	r0, [pc, #16]	@ (8001708 <__io_putchar+0x20>)
 80016f8:	f006 ff6c 	bl	80085d4 <HAL_UART_Transmit>
return ch;
 80016fc:	687b      	ldr	r3, [r7, #4]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20020588 	.word	0x20020588

0800170c <AUDIO_Start>:

AUDIO_ErrorTypeDef AUDIO_Start(uint32_t audio_start_address, uint32_t audio_file_size)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t bytesread;

  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <AUDIO_Start+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
  AudioStartAddress = audio_start_address;
 800171e:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <AUDIO_Start+0x6c>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6013      	str	r3, [r2, #0]
  AudioFileSize = audio_file_size;
 8001724:	4a15      	ldr	r2, [pc, #84]	@ (800177c <AUDIO_Start+0x70>)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6013      	str	r3, [r2, #0]
  bytesread = GetData( (void *)AudioStartAddress,
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <AUDIO_Start+0x6c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001734:	4a0f      	ldr	r2, [pc, #60]	@ (8001774 <AUDIO_Start+0x68>)
 8001736:	2100      	movs	r1, #0
 8001738:	f000 f824 	bl	8001784 <GetData>
 800173c:	60f8      	str	r0, [r7, #12]
                      0,
                      &buffer_ctl.buff[0],
                      AUDIO_BUFFER_SIZE);
  if(bytesread > 0)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d012      	beq.n	800176a <AUDIO_Start+0x5e>
  {
    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8001744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001748:	480a      	ldr	r0, [pc, #40]	@ (8001774 <AUDIO_Start+0x68>)
 800174a:	f7ff fe55 	bl	80013f8 <SCB_CleanDCache_by_Addr>

    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 800174e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001752:	4808      	ldr	r0, [pc, #32]	@ (8001774 <AUDIO_Start+0x68>)
 8001754:	f002 f99a 	bl	8003a8c <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <AUDIO_Start+0x74>)
 800175a:	2202      	movs	r2, #2
 800175c:	701a      	strb	r2, [r3, #0]
    buffer_ctl.fptr = bytesread;
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <AUDIO_Start+0x68>)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return AUDIO_ERROR_NONE;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <AUDIO_Start+0x60>
  }
  return AUDIO_ERROR_IO;
 800176a:	2302      	movs	r3, #2
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20020280 	.word	0x20020280
 8001778:	2002048c 	.word	0x2002048c
 800177c:	20020490 	.word	0x20020490
 8001780:	20020488 	.word	0x20020488

08001784 <GetData>:

static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  uint8_t *lptr = pdata;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	613b      	str	r3, [r7, #16]
  uint32_t ReadDataNbr;

  ReadDataNbr = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 800179a:	e00c      	b.n	80017b6 <GetData+0x32>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	441a      	add	r2, r3
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	440b      	add	r3, r1
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	701a      	strb	r2, [r3, #0]
    ReadDataNbr++;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	3301      	adds	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	441a      	add	r2, r3
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <GetData+0x58>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d203      	bcs.n	80017cc <GetData+0x48>
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d3e7      	bcc.n	800179c <GetData+0x18>
  }
  return ReadDataNbr;
 80017cc:	697b      	ldr	r3, [r7, #20]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20020490 	.word	0x20020490

080017e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == Button_user_Pin && button_pressed == 0)
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017f0:	d10a      	bne.n	8001808 <HAL_GPIO_EXTI_Callback+0x28>
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x30>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <HAL_GPIO_EXTI_Callback+0x30>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 8001802:	4804      	ldr	r0, [pc, #16]	@ (8001814 <HAL_GPIO_EXTI_Callback+0x34>)
 8001804:	f008 f9d4 	bl	8009bb0 <puts>
      }

}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20020498 	.word	0x20020498
 8001814:	0800bb6c 	.word	0x0800bb6c

08001818 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  if(audio_state == AUDIO_STATE_PLAYING)
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d103      	bne.n	800182c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8001826:	2202      	movs	r2, #2
 8001828:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
  }
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20020488 	.word	0x20020488
 800183c:	20020280 	.word	0x20020280

08001840 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  if(audio_state == AUDIO_STATE_PLAYING)
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d103      	bne.n	8001854 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 800184c:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
  }
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20020488 	.word	0x20020488
 8001864:	20020280 	.word	0x20020280

08001868 <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  printf("Full Transfer Callback triggered.\r\n");
 800186c:	4803      	ldr	r0, [pc, #12]	@ (800187c <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 800186e:	f008 f99f 	bl	8009bb0 <puts>
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001872:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <BSP_AUDIO_IN_TransferComplete_CallBack+0x18>)
 8001874:	2202      	movs	r2, #2
 8001876:	601a      	str	r2, [r3, #0]
  return;
 8001878:	bf00      	nop
}
 800187a:	bd80      	pop	{r7, pc}
 800187c:	0800bb80 	.word	0x0800bb80
 8001880:	20020494 	.word	0x20020494

08001884 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  printf("Half Transfer Callback triggered.\r\n");
 8001888:	4803      	ldr	r0, [pc, #12]	@ (8001898 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800188a:	f008 f991 	bl	8009bb0 <puts>
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 800188e:	4b03      	ldr	r3, [pc, #12]	@ (800189c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x18>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
  return;
 8001894:	bf00      	nop
}
 8001896:	bd80      	pop	{r7, pc}
 8001898:	0800bba4 	.word	0x0800bba4
 800189c:	20020494 	.word	0x20020494

080018a0 <BSP_AUDIO_IN_Error_CallBack>:

void BSP_AUDIO_IN_Error_CallBack(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
  /* Display message on the LCD screen */
  printf("DMA ERROR\r\n");
 80018a4:	4805      	ldr	r0, [pc, #20]	@ (80018bc <BSP_AUDIO_IN_Error_CallBack+0x1c>)
 80018a6:	f008 f983 	bl	8009bb0 <puts>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80018aa:	bf00      	nop
 80018ac:	2002      	movs	r0, #2
 80018ae:	f001 feb7 	bl	8003620 <BSP_PB_GetState>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
  {
    return;
 80018b6:	bf00      	nop
  }
  /* could also generate a system reset to recover from the error */
  /* .... */
}
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	0800bbc8 	.word	0x0800bbc8

080018c0 <check_button_release>:


void check_button_release()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, Button_user_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 80018c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018c8:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <check_button_release+0x20>)
 80018ca:	f003 fe4b 	bl	8005564 <HAL_GPIO_ReadPin>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <check_button_release+0x1a>
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <check_button_release+0x24>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40022000 	.word	0x40022000
 80018e4:	20020498 	.word	0x20020498

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <Error_Handler+0x8>

080018f4 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80018f8:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <MX_SAI1_Init+0xa4>)
 80018fa:	4a28      	ldr	r2, [pc, #160]	@ (800199c <MX_SAI1_Init+0xa8>)
 80018fc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80018fe:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001906:	2201      	movs	r2, #1
 8001908:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 800190a:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <MX_SAI1_Init+0xa4>)
 800190c:	2280      	movs	r2, #128	@ 0x80
 800190e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001910:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001912:	2200      	movs	r2, #0
 8001914:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001916:	4b20      	ldr	r3, [pc, #128]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001918:	2200      	movs	r2, #0
 800191a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800191c:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <MX_SAI1_Init+0xa4>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001922:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <MX_SAI1_Init+0xa4>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800192e:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001936:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800193a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800193c:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <MX_SAI1_Init+0xa4>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001944:	2200      	movs	r2, #0
 8001946:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <MX_SAI1_Init+0xa4>)
 800194a:	2200      	movs	r2, #0
 800194c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 800194e:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001950:	2210      	movs	r2, #16
 8001952:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001954:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001956:	2201      	movs	r2, #1
 8001958:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800195a:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <MX_SAI1_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001960:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001962:	2200      	movs	r2, #0
 8001964:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001968:	2200      	movs	r2, #0
 800196a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800196c:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <MX_SAI1_Init+0xa4>)
 800196e:	2200      	movs	r2, #0
 8001970:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001974:	2200      	movs	r2, #0
 8001976:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001978:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <MX_SAI1_Init+0xa4>)
 800197a:	2201      	movs	r2, #1
 800197c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001980:	2200      	movs	r2, #0
 8001982:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	@ (8001998 <MX_SAI1_Init+0xa4>)
 8001986:	f005 ff11 	bl	80077ac <HAL_SAI_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8001990:	f7ff ffaa 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2002049c 	.word	0x2002049c
 800199c:	40015804 	.word	0x40015804

080019a0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0aa      	sub	sp, #168	@ 0xa8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	2284      	movs	r2, #132	@ 0x84
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f008 f9dd 	bl	8009d70 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a47      	ldr	r2, [pc, #284]	@ (8001ad8 <HAL_SAI_MspInit+0x138>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	f040 8086 	bne.w	8001ace <HAL_SAI_MspInit+0x12e>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80019c2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80019c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80019c8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80019ce:	2305      	movs	r3, #5
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80019d2:	2302      	movs	r3, #2
 80019d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80019d6:	2303      	movs	r3, #3
 80019d8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80019da:	2301      	movs	r3, #1
 80019dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80019de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80019e4:	2300      	movs	r3, #0
 80019e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4618      	mov	r0, r3
 80019ee:	f005 f8a1 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 80019f8:	f7ff ff76 	bl	80018e8 <Error_Handler>
    }

    if (SAI1_client == 0)
 80019fc:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <HAL_SAI_MspInit+0x13c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d113      	bne.n	8001a2c <HAL_SAI_MspInit+0x8c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a04:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <HAL_SAI_MspInit+0x140>)
 8001a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a08:	4a35      	ldr	r2, [pc, #212]	@ (8001ae0 <HAL_SAI_MspInit+0x140>)
 8001a0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a10:	4b33      	ldr	r3, [pc, #204]	@ (8001ae0 <HAL_SAI_MspInit+0x140>)
 8001a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2057      	movs	r0, #87	@ 0x57
 8001a22:	f002 fe3a 	bl	800469a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8001a26:	2057      	movs	r0, #87	@ 0x57
 8001a28:	f002 fe53 	bl	80046d2 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <HAL_SAI_MspInit+0x13c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	4a2a      	ldr	r2, [pc, #168]	@ (8001adc <HAL_SAI_MspInit+0x13c>)
 8001a34:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001a36:	2370      	movs	r3, #112	@ 0x70
 8001a38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001a4e:	2306      	movs	r3, #6
 8001a50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a54:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4822      	ldr	r0, [pc, #136]	@ (8001ae4 <HAL_SAI_MspInit+0x144>)
 8001a5c:	f003 faca 	bl	8004ff4 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001a62:	4a22      	ldr	r2, [pc, #136]	@ (8001aec <HAL_SAI_MspInit+0x14c>)
 8001a64:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001a7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a7e:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a86:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001a8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a8e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001a90:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a96:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001a9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a9e:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001aa6:	4810      	ldr	r0, [pc, #64]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001aa8:	f002 fe3c 	bl	8004724 <HAL_DMA_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_SAI_MspInit+0x116>
    {
      Error_Handler();
 8001ab2:	f7ff ff19 	bl	80018e8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001aba:	671a      	str	r2, [r3, #112]	@ 0x70
 8001abc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001ac6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001ac8:	4a07      	ldr	r2, [pc, #28]	@ (8001ae8 <HAL_SAI_MspInit+0x148>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001ace:	bf00      	nop
 8001ad0:	37a8      	adds	r7, #168	@ 0xa8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40015804 	.word	0x40015804
 8001adc:	20020580 	.word	0x20020580
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	20020520 	.word	0x20020520
 8001aec:	40026428 	.word	0x40026428

08001af0 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <HAL_SAI_MspDeInit+0x5c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d11f      	bne.n	8001b42 <HAL_SAI_MspDeInit+0x52>
    {
    SAI1_client --;
 8001b02:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <HAL_SAI_MspDeInit+0x60>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <HAL_SAI_MspDeInit+0x60>)
 8001b0a:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_SAI_MspDeInit+0x60>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d108      	bne.n	8001b26 <HAL_SAI_MspDeInit+0x36>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <HAL_SAI_MspDeInit+0x64>)
 8001b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b18:	4a0e      	ldr	r2, [pc, #56]	@ (8001b54 <HAL_SAI_MspDeInit+0x64>)
 8001b1a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	6453      	str	r3, [r2, #68]	@ 0x44
      HAL_NVIC_DisableIRQ(SAI1_IRQn);
 8001b20:	2057      	movs	r0, #87	@ 0x57
 8001b22:	f002 fde4 	bl	80046ee <HAL_NVIC_DisableIRQ>
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001b26:	2170      	movs	r1, #112	@ 0x70
 8001b28:	480b      	ldr	r0, [pc, #44]	@ (8001b58 <HAL_SAI_MspDeInit+0x68>)
 8001b2a:	f003 fc0f 	bl	800534c <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b32:	4618      	mov	r0, r3
 8001b34:	f002 fea4 	bl	8004880 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fe9f 	bl	8004880 <HAL_DMA_DeInit>
    }
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40015804 	.word	0x40015804
 8001b50:	20020580 	.word	0x20020580
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <HAL_MspInit+0x44>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <NMI_Handler+0x4>

08001bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f002 fc0b 	bl	8004414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_user_Pin);
 8001c06:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c0a:	f003 fcc3 	bl	8005594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <DMA2_Stream1_IRQHandler>:
  * @brief This function handles DMA2 stream1 global interrupt.
  */


void DMA2_Stream1_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <DMA2_Stream1_IRQHandler+0x10>)
 8001c1a:	f002 ff81 	bl	8004b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20020520 	.word	0x20020520

08001c28 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <SAI1_IRQHandler+0x10>)
 8001c2e:	f006 f9a5 	bl	8007f7c <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2002049c 	.word	0x2002049c

08001c3c <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */
void AUDIO_IN_SAIx_DMAx_IRQHandler()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001c40:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <DMA2_Stream7_IRQHandler+0x14>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 ff6b 	bl	8004b20 <HAL_DMA_IRQHandler>
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200206f4 	.word	0x200206f4

08001c54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return 1;
 8001c58:	2301      	movs	r3, #1
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_kill>:

int _kill(int pid, int sig)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c6e:	f008 f8d1 	bl	8009e14 <__errno>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2216      	movs	r2, #22
 8001c76:	601a      	str	r2, [r3, #0]
  return -1;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_exit>:

void _exit (int status)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffe7 	bl	8001c64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c96:	bf00      	nop
 8001c98:	e7fd      	b.n	8001c96 <_exit+0x12>

08001c9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e00a      	b.n	8001cc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cac:	f3af 8000 	nop.w
 8001cb0:	4601      	mov	r1, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	60ba      	str	r2, [r7, #8]
 8001cb8:	b2ca      	uxtb	r2, r1
 8001cba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	dbf0      	blt.n	8001cac <_read+0x12>
  }

  return len;
 8001cca:	687b      	ldr	r3, [r7, #4]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	e009      	b.n	8001cfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	60ba      	str	r2, [r7, #8]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fcfa 	bl	80016e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	dbf1      	blt.n	8001ce6 <_write+0x12>
  }
  return len;
 8001d02:	687b      	ldr	r3, [r7, #4]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_close>:

int _close(int file)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d34:	605a      	str	r2, [r3, #4]
  return 0;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_isatty>:

int _isatty(int file)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	@ (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	@ (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	@ (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f008 f836 	bl	8009e14 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20050000 	.word	0x20050000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	20020584 	.word	0x20020584
 8001ddc:	20020988 	.word	0x20020988

08001de0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	@ (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e0a:	4a15      	ldr	r2, [pc, #84]	@ (8001e60 <MX_USART1_UART_Init+0x5c>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <MX_USART1_UART_Init+0x58>)
 8001e48:	f006 fb76 	bl	8008538 <HAL_UART_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e52:	f7ff fd49 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20020588 	.word	0x20020588
 8001e60:	40011000 	.word	0x40011000

08001e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0ac      	sub	sp, #176	@ 0xb0
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	2284      	movs	r2, #132	@ 0x84
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f007 ff73 	bl	8009d70 <memset>
  if(uartHandle->Instance==USART1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a32      	ldr	r2, [pc, #200]	@ (8001f58 <HAL_UART_MspInit+0xf4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d15c      	bne.n	8001f4e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e94:	2340      	movs	r3, #64	@ 0x40
 8001e96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e9c:	f107 0318 	add.w	r3, r7, #24
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f004 fe47 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001eac:	f7ff fd1c 	bl	80018e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f5c <HAL_UART_MspInit+0xf8>)
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb4:	4a29      	ldr	r2, [pc, #164]	@ (8001f5c <HAL_UART_MspInit+0xf8>)
 8001eb6:	f043 0310 	orr.w	r3, r3, #16
 8001eba:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebc:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <HAL_UART_MspInit+0xf8>)
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	4b24      	ldr	r3, [pc, #144]	@ (8001f5c <HAL_UART_MspInit+0xf8>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ecc:	4a23      	ldr	r2, [pc, #140]	@ (8001f5c <HAL_UART_MspInit+0xf8>)
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed4:	4b21      	ldr	r3, [pc, #132]	@ (8001f5c <HAL_UART_MspInit+0xf8>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <HAL_UART_MspInit+0xf8>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f5c <HAL_UART_MspInit+0xf8>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eec:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <HAL_UART_MspInit+0xf8>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f10:	2307      	movs	r3, #7
 8001f12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4810      	ldr	r0, [pc, #64]	@ (8001f60 <HAL_UART_MspInit+0xfc>)
 8001f1e:	f003 f869 	bl	8004ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4806      	ldr	r0, [pc, #24]	@ (8001f64 <HAL_UART_MspInit+0x100>)
 8001f4a:	f003 f853 	bl	8004ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f4e:	bf00      	nop
 8001f50:	37b0      	adds	r7, #176	@ 0xb0
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020400 	.word	0x40020400
 8001f64:	40020000 	.word	0x40020000

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f6c:	f7ff ff38 	bl	8001de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f70:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f72:	490d      	ldr	r1, [pc, #52]	@ (8001fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f88:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f007 ff43 	bl	8009e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff fa59 	bl	8001450 <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001fac:	0800bf80 	.word	0x0800bf80
  ldr r2, =_sbss
 8001fb0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001fb4:	20020988 	.word	0x20020988

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	81fb      	strh	r3, [r7, #14]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	81bb      	strh	r3, [r7, #12]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001fd4:	89bb      	ldrh	r3, [r7, #12]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001fda:	89bb      	ldrh	r3, [r7, #12]
 8001fdc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fe0:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001fe6:	f001 fc8b 	bl	8003900 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2203      	movs	r2, #3
 8001ff0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 fafb 	bl	80035f0 <CODEC_IO_Write>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002004:	89fb      	ldrh	r3, [r7, #14]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2200      	movs	r2, #0
 800200a:	f640 0117 	movw	r1, #2071	@ 0x817
 800200e:	4618      	mov	r0, r3
 8002010:	f001 faee 	bl	80035f0 <CODEC_IO_Write>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	4413      	add	r3, r2
 800201c:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002028:	4618      	mov	r0, r3
 800202a:	f001 fae1 	bl	80035f0 <CODEC_IO_Write>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	226c      	movs	r2, #108	@ 0x6c
 800203e:	2139      	movs	r1, #57	@ 0x39
 8002040:	4618      	mov	r0, r3
 8002042:	f001 fad5 	bl	80035f0 <CODEC_IO_Write>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	4413      	add	r3, r2
 800204e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002050:	8afb      	ldrh	r3, [r7, #22]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00c      	beq.n	8002070 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2213      	movs	r2, #19
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f001 fac6 	bl	80035f0 <CODEC_IO_Write>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	4413      	add	r3, r2
 800206c:	61fb      	str	r3, [r7, #28]
 800206e:	e00b      	b.n	8002088 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002070:	89fb      	ldrh	r3, [r7, #14]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2203      	movs	r2, #3
 8002076:	2101      	movs	r1, #1
 8002078:	4618      	mov	r0, r3
 800207a:	f001 fab9 	bl	80035f0 <CODEC_IO_Write>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	4413      	add	r3, r2
 8002086:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002088:	2032      	movs	r0, #50	@ 0x32
 800208a:	f001 fca1 	bl	80039d0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800208e:	8b3b      	ldrh	r3, [r7, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 815f 	beq.w	8002354 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002096:	4bae      	ldr	r3, [pc, #696]	@ (8002350 <wm8994_Init+0x394>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 800209c:	8b3b      	ldrh	r3, [r7, #24]
 800209e:	2b03      	cmp	r3, #3
 80020a0:	f000 808c 	beq.w	80021bc <wm8994_Init+0x200>
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	f300 8111 	bgt.w	80022cc <wm8994_Init+0x310>
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d002      	beq.n	80020b4 <wm8994_Init+0xf8>
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d042      	beq.n	8002138 <wm8994_Init+0x17c>
 80020b2:	e10b      	b.n	80022cc <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80020bc:	2105      	movs	r1, #5
 80020be:	4618      	mov	r0, r3
 80020c0:	f001 fa96 	bl	80035f0 <CODEC_IO_Write>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80020ce:	89fb      	ldrh	r3, [r7, #14]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	f240 6101 	movw	r1, #1537	@ 0x601
 80020d8:	4618      	mov	r0, r3
 80020da:	f001 fa89 	bl	80035f0 <CODEC_IO_Write>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2200      	movs	r2, #0
 80020ee:	f240 6102 	movw	r1, #1538	@ 0x602
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 fa7c 	bl	80035f0 <CODEC_IO_Write>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4413      	add	r3, r2
 8002100:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002102:	89fb      	ldrh	r3, [r7, #14]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2202      	movs	r2, #2
 8002108:	f240 6104 	movw	r1, #1540	@ 0x604
 800210c:	4618      	mov	r0, r3
 800210e:	f001 fa6f 	bl	80035f0 <CODEC_IO_Write>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800211c:	89fb      	ldrh	r3, [r7, #14]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2202      	movs	r2, #2
 8002122:	f240 6105 	movw	r1, #1541	@ 0x605
 8002126:	4618      	mov	r0, r3
 8002128:	f001 fa62 	bl	80035f0 <CODEC_IO_Write>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	4413      	add	r3, r2
 8002134:	61fb      	str	r3, [r7, #28]
      break;
 8002136:	e110      	b.n	800235a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002138:	89fb      	ldrh	r3, [r7, #14]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f240 3203 	movw	r2, #771	@ 0x303
 8002140:	2105      	movs	r1, #5
 8002142:	4618      	mov	r0, r3
 8002144:	f001 fa54 	bl	80035f0 <CODEC_IO_Write>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2201      	movs	r2, #1
 8002158:	f240 6101 	movw	r1, #1537	@ 0x601
 800215c:	4618      	mov	r0, r3
 800215e:	f001 fa47 	bl	80035f0 <CODEC_IO_Write>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800216c:	89fb      	ldrh	r3, [r7, #14]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2201      	movs	r2, #1
 8002172:	f240 6102 	movw	r1, #1538	@ 0x602
 8002176:	4618      	mov	r0, r3
 8002178:	f001 fa3a 	bl	80035f0 <CODEC_IO_Write>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002186:	89fb      	ldrh	r3, [r7, #14]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2200      	movs	r2, #0
 800218c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002190:	4618      	mov	r0, r3
 8002192:	f001 fa2d 	bl	80035f0 <CODEC_IO_Write>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	f240 6105 	movw	r1, #1541	@ 0x605
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 fa20 	bl	80035f0 <CODEC_IO_Write>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	61fb      	str	r3, [r7, #28]
      break;
 80021ba:	e0ce      	b.n	800235a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80021bc:	8afb      	ldrh	r3, [r7, #22]
 80021be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021c2:	d141      	bne.n	8002248 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80021cc:	2105      	movs	r1, #5
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 fa0e 	bl	80035f0 <CODEC_IO_Write>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	4413      	add	r3, r2
 80021dc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80021de:	89fb      	ldrh	r3, [r7, #14]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2203      	movs	r2, #3
 80021e4:	f240 6101 	movw	r1, #1537	@ 0x601
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 fa01 	bl	80035f0 <CODEC_IO_Write>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2203      	movs	r2, #3
 80021fe:	f240 6102 	movw	r1, #1538	@ 0x602
 8002202:	4618      	mov	r0, r3
 8002204:	f001 f9f4 	bl	80035f0 <CODEC_IO_Write>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8002212:	89fb      	ldrh	r3, [r7, #14]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2203      	movs	r2, #3
 8002218:	f240 6104 	movw	r1, #1540	@ 0x604
 800221c:	4618      	mov	r0, r3
 800221e:	f001 f9e7 	bl	80035f0 <CODEC_IO_Write>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800222c:	89fb      	ldrh	r3, [r7, #14]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2203      	movs	r2, #3
 8002232:	f240 6105 	movw	r1, #1541	@ 0x605
 8002236:	4618      	mov	r0, r3
 8002238:	f001 f9da 	bl	80035f0 <CODEC_IO_Write>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8002246:	e088      	b.n	800235a <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002248:	89fb      	ldrh	r3, [r7, #14]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002250:	2105      	movs	r1, #5
 8002252:	4618      	mov	r0, r3
 8002254:	f001 f9cc 	bl	80035f0 <CODEC_IO_Write>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	4413      	add	r3, r2
 8002260:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002262:	89fb      	ldrh	r3, [r7, #14]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2201      	movs	r2, #1
 8002268:	f240 6101 	movw	r1, #1537	@ 0x601
 800226c:	4618      	mov	r0, r3
 800226e:	f001 f9bf 	bl	80035f0 <CODEC_IO_Write>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800227c:	89fb      	ldrh	r3, [r7, #14]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2201      	movs	r2, #1
 8002282:	f240 6102 	movw	r1, #1538	@ 0x602
 8002286:	4618      	mov	r0, r3
 8002288:	f001 f9b2 	bl	80035f0 <CODEC_IO_Write>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	4413      	add	r3, r2
 8002294:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002296:	89fb      	ldrh	r3, [r7, #14]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2202      	movs	r2, #2
 800229c:	f240 6104 	movw	r1, #1540	@ 0x604
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 f9a5 	bl	80035f0 <CODEC_IO_Write>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80022b0:	89fb      	ldrh	r3, [r7, #14]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2202      	movs	r2, #2
 80022b6:	f240 6105 	movw	r1, #1541	@ 0x605
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 f998 	bl	80035f0 <CODEC_IO_Write>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	61fb      	str	r3, [r7, #28]
      break;
 80022ca:	e046      	b.n	800235a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80022cc:	89fb      	ldrh	r3, [r7, #14]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f240 3203 	movw	r2, #771	@ 0x303
 80022d4:	2105      	movs	r1, #5
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 f98a 	bl	80035f0 <CODEC_IO_Write>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4413      	add	r3, r2
 80022e4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2201      	movs	r2, #1
 80022ec:	f240 6101 	movw	r1, #1537	@ 0x601
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 f97d 	bl	80035f0 <CODEC_IO_Write>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2201      	movs	r2, #1
 8002306:	f240 6102 	movw	r1, #1538	@ 0x602
 800230a:	4618      	mov	r0, r3
 800230c:	f001 f970 	bl	80035f0 <CODEC_IO_Write>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2200      	movs	r2, #0
 8002320:	f240 6104 	movw	r1, #1540	@ 0x604
 8002324:	4618      	mov	r0, r3
 8002326:	f001 f963 	bl	80035f0 <CODEC_IO_Write>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002334:	89fb      	ldrh	r3, [r7, #14]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2200      	movs	r2, #0
 800233a:	f240 6105 	movw	r1, #1541	@ 0x605
 800233e:	4618      	mov	r0, r3
 8002340:	f001 f956 	bl	80035f0 <CODEC_IO_Write>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	61fb      	str	r3, [r7, #28]
      break;
 800234e:	e004      	b.n	800235a <wm8994_Init+0x39e>
 8002350:	20020610 	.word	0x20020610
    }
  }
  else
  {
    outputEnabled = 0;
 8002354:	4b99      	ldr	r3, [pc, #612]	@ (80025bc <wm8994_Init+0x600>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800235a:	8afb      	ldrh	r3, [r7, #22]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 81ab 	beq.w	80026b8 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8002362:	4b97      	ldr	r3, [pc, #604]	@ (80025c0 <wm8994_Init+0x604>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002368:	8afb      	ldrh	r3, [r7, #22]
 800236a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800236e:	f000 8129 	beq.w	80025c4 <wm8994_Init+0x608>
 8002372:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002376:	f300 819b 	bgt.w	80026b0 <wm8994_Init+0x6f4>
 800237a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800237e:	d05a      	beq.n	8002436 <wm8994_Init+0x47a>
 8002380:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002384:	f300 8194 	bgt.w	80026b0 <wm8994_Init+0x6f4>
 8002388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800238c:	f000 80c6 	beq.w	800251c <wm8994_Init+0x560>
 8002390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002394:	f040 818c 	bne.w	80026b0 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002398:	89fb      	ldrh	r3, [r7, #14]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80023a0:	2104      	movs	r1, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 f924 	bl	80035f0 <CODEC_IO_Write>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	4413      	add	r3, r2
 80023b0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	22db      	movs	r2, #219	@ 0xdb
 80023b8:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 f917 	bl	80035f0 <CODEC_IO_Write>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	4413      	add	r3, r2
 80023ca:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80023d4:	2102      	movs	r1, #2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 f90a 	bl	80035f0 <CODEC_IO_Write>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	4413      	add	r3, r2
 80023e4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80023e6:	89fb      	ldrh	r3, [r7, #14]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2202      	movs	r2, #2
 80023ec:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 f8fd 	bl	80035f0 <CODEC_IO_Write>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	4413      	add	r3, r2
 80023fe:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002400:	89fb      	ldrh	r3, [r7, #14]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2202      	movs	r2, #2
 8002406:	f240 6109 	movw	r1, #1545	@ 0x609
 800240a:	4618      	mov	r0, r3
 800240c:	f001 f8f0 	bl	80035f0 <CODEC_IO_Write>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	4413      	add	r3, r2
 8002418:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800241a:	89fb      	ldrh	r3, [r7, #14]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	220e      	movs	r2, #14
 8002420:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002424:	4618      	mov	r0, r3
 8002426:	f001 f8e3 	bl	80035f0 <CODEC_IO_Write>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	61fb      	str	r3, [r7, #28]
      break;
 8002434:	e143      	b.n	80026be <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2211      	movs	r2, #17
 800243c:	2128      	movs	r1, #40	@ 0x28
 800243e:	4618      	mov	r0, r3
 8002440:	f001 f8d6 	bl	80035f0 <CODEC_IO_Write>
 8002444:	4603      	mov	r3, r0
 8002446:	461a      	mov	r2, r3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800244e:	89fb      	ldrh	r3, [r7, #14]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2235      	movs	r2, #53	@ 0x35
 8002454:	2129      	movs	r1, #41	@ 0x29
 8002456:	4618      	mov	r0, r3
 8002458:	f001 f8ca 	bl	80035f0 <CODEC_IO_Write>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2235      	movs	r2, #53	@ 0x35
 800246c:	212a      	movs	r1, #42	@ 0x2a
 800246e:	4618      	mov	r0, r3
 8002470:	f001 f8be 	bl	80035f0 <CODEC_IO_Write>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800247e:	89fb      	ldrh	r3, [r7, #14]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f240 3203 	movw	r2, #771	@ 0x303
 8002486:	2104      	movs	r1, #4
 8002488:	4618      	mov	r0, r3
 800248a:	f001 f8b1 	bl	80035f0 <CODEC_IO_Write>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4413      	add	r3, r2
 8002496:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002498:	89fb      	ldrh	r3, [r7, #14]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	22db      	movs	r2, #219	@ 0xdb
 800249e:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 f8a4 	bl	80035f0 <CODEC_IO_Write>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80024b2:	89fb      	ldrh	r3, [r7, #14]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f246 3250 	movw	r2, #25424	@ 0x6350
 80024ba:	2102      	movs	r1, #2
 80024bc:	4618      	mov	r0, r3
 80024be:	f001 f897 	bl	80035f0 <CODEC_IO_Write>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80024cc:	89fb      	ldrh	r3, [r7, #14]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2202      	movs	r2, #2
 80024d2:	f240 6106 	movw	r1, #1542	@ 0x606
 80024d6:	4618      	mov	r0, r3
 80024d8:	f001 f88a 	bl	80035f0 <CODEC_IO_Write>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2202      	movs	r2, #2
 80024ec:	f240 6107 	movw	r1, #1543	@ 0x607
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 f87d 	bl	80035f0 <CODEC_IO_Write>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	4413      	add	r3, r2
 80024fe:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	220d      	movs	r2, #13
 8002506:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800250a:	4618      	mov	r0, r3
 800250c:	f001 f870 	bl	80035f0 <CODEC_IO_Write>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	61fb      	str	r3, [r7, #28]
      break;
 800251a:	e0d0      	b.n	80026be <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800251c:	89fb      	ldrh	r3, [r7, #14]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8002524:	2104      	movs	r1, #4
 8002526:	4618      	mov	r0, r3
 8002528:	f001 f862 	bl	80035f0 <CODEC_IO_Write>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002536:	89fb      	ldrh	r3, [r7, #14]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	22db      	movs	r2, #219	@ 0xdb
 800253c:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002540:	4618      	mov	r0, r3
 8002542:	f001 f855 	bl	80035f0 <CODEC_IO_Write>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002550:	89fb      	ldrh	r3, [r7, #14]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002558:	2102      	movs	r1, #2
 800255a:	4618      	mov	r0, r3
 800255c:	f001 f848 	bl	80035f0 <CODEC_IO_Write>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800256a:	89fb      	ldrh	r3, [r7, #14]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2202      	movs	r2, #2
 8002570:	f240 6106 	movw	r1, #1542	@ 0x606
 8002574:	4618      	mov	r0, r3
 8002576:	f001 f83b 	bl	80035f0 <CODEC_IO_Write>
 800257a:	4603      	mov	r3, r0
 800257c:	461a      	mov	r2, r3
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002584:	89fb      	ldrh	r3, [r7, #14]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2202      	movs	r2, #2
 800258a:	f240 6107 	movw	r1, #1543	@ 0x607
 800258e:	4618      	mov	r0, r3
 8002590:	f001 f82e 	bl	80035f0 <CODEC_IO_Write>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800259e:	89fb      	ldrh	r3, [r7, #14]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	220d      	movs	r2, #13
 80025a4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80025a8:	4618      	mov	r0, r3
 80025aa:	f001 f821 	bl	80035f0 <CODEC_IO_Write>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	61fb      	str	r3, [r7, #28]
      break; 
 80025b8:	e081      	b.n	80026be <wm8994_Init+0x702>
 80025ba:	bf00      	nop
 80025bc:	20020610 	.word	0x20020610
 80025c0:	20020614 	.word	0x20020614
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80025c4:	89fb      	ldrh	r3, [r7, #14]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80025cc:	2104      	movs	r1, #4
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 f80e 	bl	80035f0 <CODEC_IO_Write>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80025de:	89fb      	ldrh	r3, [r7, #14]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	22db      	movs	r2, #219	@ 0xdb
 80025e4:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 f801 	bl	80035f0 <CODEC_IO_Write>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4413      	add	r3, r2
 80025f6:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80025f8:	89fb      	ldrh	r3, [r7, #14]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	22db      	movs	r2, #219	@ 0xdb
 80025fe:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fff4 	bl	80035f0 <CODEC_IO_Write>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 800261a:	2102      	movs	r1, #2
 800261c:	4618      	mov	r0, r3
 800261e:	f000 ffe7 	bl	80035f0 <CODEC_IO_Write>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800262c:	89fb      	ldrh	r3, [r7, #14]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2202      	movs	r2, #2
 8002632:	f240 6106 	movw	r1, #1542	@ 0x606
 8002636:	4618      	mov	r0, r3
 8002638:	f000 ffda 	bl	80035f0 <CODEC_IO_Write>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	4413      	add	r3, r2
 8002644:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002646:	89fb      	ldrh	r3, [r7, #14]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2202      	movs	r2, #2
 800264c:	f240 6107 	movw	r1, #1543	@ 0x607
 8002650:	4618      	mov	r0, r3
 8002652:	f000 ffcd 	bl	80035f0 <CODEC_IO_Write>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2202      	movs	r2, #2
 8002666:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800266a:	4618      	mov	r0, r3
 800266c:	f000 ffc0 	bl	80035f0 <CODEC_IO_Write>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800267a:	89fb      	ldrh	r3, [r7, #14]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2202      	movs	r2, #2
 8002680:	f240 6109 	movw	r1, #1545	@ 0x609
 8002684:	4618      	mov	r0, r3
 8002686:	f000 ffb3 	bl	80035f0 <CODEC_IO_Write>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	220d      	movs	r2, #13
 800269a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 ffa6 	bl	80035f0 <CODEC_IO_Write>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4413      	add	r3, r2
 80026ac:	61fb      	str	r3, [r7, #28]
      break;    
 80026ae:	e006      	b.n	80026be <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	3301      	adds	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
      break;
 80026b6:	e002      	b.n	80026be <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 80026b8:	4ba4      	ldr	r3, [pc, #656]	@ (800294c <wm8994_Init+0x990>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4aa3      	ldr	r2, [pc, #652]	@ (8002950 <wm8994_Init+0x994>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d079      	beq.n	80027ba <wm8994_Init+0x7fe>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4aa1      	ldr	r2, [pc, #644]	@ (8002950 <wm8994_Init+0x994>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	f200 80ad 	bhi.w	800282a <wm8994_Init+0x86e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d061      	beq.n	800279e <wm8994_Init+0x7e2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80026e0:	4293      	cmp	r3, r2
 80026e2:	f200 80a2 	bhi.w	800282a <wm8994_Init+0x86e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f000 808e 	beq.w	800280e <wm8994_Init+0x852>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80026f8:	4293      	cmp	r3, r2
 80026fa:	f200 8096 	bhi.w	800282a <wm8994_Init+0x86e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002704:	d03d      	beq.n	8002782 <wm8994_Init+0x7c6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800270c:	f200 808d 	bhi.w	800282a <wm8994_Init+0x86e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002716:	4293      	cmp	r3, r2
 8002718:	d06b      	beq.n	80027f2 <wm8994_Init+0x836>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002720:	4293      	cmp	r3, r2
 8002722:	f200 8082 	bhi.w	800282a <wm8994_Init+0x86e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800272c:	d01b      	beq.n	8002766 <wm8994_Init+0x7aa>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002734:	d879      	bhi.n	800282a <wm8994_Init+0x86e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800273c:	d005      	beq.n	800274a <wm8994_Init+0x78e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002744:	4293      	cmp	r3, r2
 8002746:	d046      	beq.n	80027d6 <wm8994_Init+0x81a>
 8002748:	e06f      	b.n	800282a <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800274a:	89fb      	ldrh	r3, [r7, #14]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2203      	movs	r2, #3
 8002750:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002754:	4618      	mov	r0, r3
 8002756:	f000 ff4b 	bl	80035f0 <CODEC_IO_Write>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	4413      	add	r3, r2
 8002762:	61fb      	str	r3, [r7, #28]
    break;
 8002764:	e06f      	b.n	8002846 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002766:	89fb      	ldrh	r3, [r7, #14]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2233      	movs	r2, #51	@ 0x33
 800276c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002770:	4618      	mov	r0, r3
 8002772:	f000 ff3d 	bl	80035f0 <CODEC_IO_Write>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	61fb      	str	r3, [r7, #28]
    break;
 8002780:	e061      	b.n	8002846 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002782:	89fb      	ldrh	r3, [r7, #14]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2263      	movs	r2, #99	@ 0x63
 8002788:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800278c:	4618      	mov	r0, r3
 800278e:	f000 ff2f 	bl	80035f0 <CODEC_IO_Write>
 8002792:	4603      	mov	r3, r0
 8002794:	461a      	mov	r2, r3
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	61fb      	str	r3, [r7, #28]
    break;
 800279c:	e053      	b.n	8002846 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800279e:	89fb      	ldrh	r3, [r7, #14]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2283      	movs	r2, #131	@ 0x83
 80027a4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 ff21 	bl	80035f0 <CODEC_IO_Write>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	61fb      	str	r3, [r7, #28]
    break;
 80027b8:	e045      	b.n	8002846 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	22a3      	movs	r2, #163	@ 0xa3
 80027c0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 ff13 	bl	80035f0 <CODEC_IO_Write>
 80027ca:	4603      	mov	r3, r0
 80027cc:	461a      	mov	r2, r3
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	61fb      	str	r3, [r7, #28]
    break;
 80027d4:	e037      	b.n	8002846 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80027d6:	89fb      	ldrh	r3, [r7, #14]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2213      	movs	r2, #19
 80027dc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 ff05 	bl	80035f0 <CODEC_IO_Write>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	61fb      	str	r3, [r7, #28]
    break;
 80027f0:	e029      	b.n	8002846 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80027f2:	89fb      	ldrh	r3, [r7, #14]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2243      	movs	r2, #67	@ 0x43
 80027f8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fef7 	bl	80035f0 <CODEC_IO_Write>
 8002802:	4603      	mov	r3, r0
 8002804:	461a      	mov	r2, r3
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	61fb      	str	r3, [r7, #28]
    break;
 800280c:	e01b      	b.n	8002846 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800280e:	89fb      	ldrh	r3, [r7, #14]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2273      	movs	r2, #115	@ 0x73
 8002814:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fee9 	bl	80035f0 <CODEC_IO_Write>
 800281e:	4603      	mov	r3, r0
 8002820:	461a      	mov	r2, r3
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	61fb      	str	r3, [r7, #28]
    break; 
 8002828:	e00d      	b.n	8002846 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800282a:	89fb      	ldrh	r3, [r7, #14]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2283      	movs	r2, #131	@ 0x83
 8002830:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fedb 	bl	80035f0 <CODEC_IO_Write>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	61fb      	str	r3, [r7, #28]
    break; 
 8002844:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002846:	8afb      	ldrh	r3, [r7, #22]
 8002848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800284c:	d10e      	bne.n	800286c <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800284e:	89fb      	ldrh	r3, [r7, #14]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002856:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fec8 	bl	80035f0 <CODEC_IO_Write>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	4413      	add	r3, r2
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	e00d      	b.n	8002888 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 800286c:	89fb      	ldrh	r3, [r7, #14]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002874:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002878:	4618      	mov	r0, r3
 800287a:	f000 feb9 	bl	80035f0 <CODEC_IO_Write>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002888:	89fb      	ldrh	r3, [r7, #14]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2200      	movs	r2, #0
 800288e:	f240 3102 	movw	r1, #770	@ 0x302
 8002892:	4618      	mov	r0, r3
 8002894:	f000 feac 	bl	80035f0 <CODEC_IO_Write>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80028a2:	89fb      	ldrh	r3, [r7, #14]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	220a      	movs	r2, #10
 80028a8:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 fe9f 	bl	80035f0 <CODEC_IO_Write>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	4413      	add	r3, r2
 80028ba:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 80028bc:	89fb      	ldrh	r3, [r7, #14]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fe92 	bl	80035f0 <CODEC_IO_Write>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	4413      	add	r3, r2
 80028d4:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80028d6:	8b3b      	ldrh	r3, [r7, #24]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 817b 	beq.w	8002bd4 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80028de:	8b3b      	ldrh	r3, [r7, #24]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d157      	bne.n	8002994 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80028e4:	89fb      	ldrh	r3, [r7, #14]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ec:	212d      	movs	r1, #45	@ 0x2d
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fe7e 	bl	80035f0 <CODEC_IO_Write>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461a      	mov	r2, r3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002906:	212e      	movs	r1, #46	@ 0x2e
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fe71 	bl	80035f0 <CODEC_IO_Write>
 800290e:	4603      	mov	r3, r0
 8002910:	461a      	mov	r2, r3
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002918:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <wm8994_Init+0x998>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01b      	beq.n	8002958 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8002920:	89fb      	ldrh	r3, [r7, #14]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8002928:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fe5f 	bl	80035f0 <CODEC_IO_Write>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <wm8994_Init+0x998>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8002942:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002946:	f001 f843 	bl	80039d0 <AUDIO_IO_Delay>
 800294a:	e016      	b.n	800297a <wm8994_Init+0x9be>
 800294c:	20020614 	.word	0x20020614
 8002950:	00017700 	.word	0x00017700
 8002954:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f248 1208 	movw	r2, #33032	@ 0x8108
 8002960:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fe43 	bl	80035f0 <CODEC_IO_Write>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002974:	2032      	movs	r0, #50	@ 0x32
 8002976:	f001 f82b 	bl	80039d0 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800297a:	89fb      	ldrh	r3, [r7, #14]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2200      	movs	r2, #0
 8002980:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fe33 	bl	80035f0 <CODEC_IO_Write>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	4413      	add	r3, r2
 8002992:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002994:	89fb      	ldrh	r3, [r7, #14]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800299c:	2103      	movs	r1, #3
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fe26 	bl	80035f0 <CODEC_IO_Write>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	4413      	add	r3, r2
 80029ac:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80029ae:	89fb      	ldrh	r3, [r7, #14]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2200      	movs	r2, #0
 80029b4:	2122      	movs	r1, #34	@ 0x22
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fe1a 	bl	80035f0 <CODEC_IO_Write>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80029c6:	89fb      	ldrh	r3, [r7, #14]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2200      	movs	r2, #0
 80029cc:	2123      	movs	r1, #35	@ 0x23
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fe0e 	bl	80035f0 <CODEC_IO_Write>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80029e6:	2136      	movs	r1, #54	@ 0x36
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fe01 	bl	80035f0 <CODEC_IO_Write>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80029f8:	89fb      	ldrh	r3, [r7, #14]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f243 0203 	movw	r2, #12291	@ 0x3003
 8002a00:	2101      	movs	r1, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fdf4 	bl	80035f0 <CODEC_IO_Write>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002a12:	8afb      	ldrh	r3, [r7, #22]
 8002a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a18:	d10d      	bne.n	8002a36 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002a1a:	89fb      	ldrh	r3, [r7, #14]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	f240 2205 	movw	r2, #517	@ 0x205
 8002a22:	2151      	movs	r1, #81	@ 0x51
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fde3 	bl	80035f0 <CODEC_IO_Write>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e00b      	b.n	8002a4e <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002a36:	89fb      	ldrh	r3, [r7, #14]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2205      	movs	r2, #5
 8002a3c:	2151      	movs	r1, #81	@ 0x51
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fdd6 	bl	80035f0 <CODEC_IO_Write>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002a4e:	8b7b      	ldrh	r3, [r7, #26]
 8002a50:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8002a54:	f043 0303 	orr.w	r3, r3, #3
 8002a58:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002a5a:	89fb      	ldrh	r3, [r7, #14]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	8b7a      	ldrh	r2, [r7, #26]
 8002a60:	2101      	movs	r1, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fdc4 	bl	80035f0 <CODEC_IO_Write>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	4413      	add	r3, r2
 8002a70:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002a72:	89fb      	ldrh	r3, [r7, #14]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2222      	movs	r2, #34	@ 0x22
 8002a78:	2160      	movs	r1, #96	@ 0x60
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fdb8 	bl	80035f0 <CODEC_IO_Write>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	4413      	add	r3, r2
 8002a88:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002a8a:	89fb      	ldrh	r3, [r7, #14]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8002a92:	214c      	movs	r1, #76	@ 0x4c
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fdab 	bl	80035f0 <CODEC_IO_Write>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002aa4:	200f      	movs	r0, #15
 8002aa6:	f000 ff93 	bl	80039d0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2201      	movs	r2, #1
 8002ab0:	212d      	movs	r1, #45	@ 0x2d
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fd9c 	bl	80035f0 <CODEC_IO_Write>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461a      	mov	r2, r3
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002ac2:	89fb      	ldrh	r3, [r7, #14]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	212e      	movs	r1, #46	@ 0x2e
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fd90 	bl	80035f0 <CODEC_IO_Write>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002ada:	89fb      	ldrh	r3, [r7, #14]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002ae2:	2103      	movs	r1, #3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fd83 	bl	80035f0 <CODEC_IO_Write>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461a      	mov	r2, r3
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002af4:	89fb      	ldrh	r3, [r7, #14]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2233      	movs	r2, #51	@ 0x33
 8002afa:	2154      	movs	r1, #84	@ 0x54
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fd77 	bl	80035f0 <CODEC_IO_Write>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	4413      	add	r3, r2
 8002b0a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002b0c:	f240 1001 	movw	r0, #257	@ 0x101
 8002b10:	f000 ff5e 	bl	80039d0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002b14:	89fb      	ldrh	r3, [r7, #14]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	22ee      	movs	r2, #238	@ 0xee
 8002b1a:	2160      	movs	r1, #96	@ 0x60
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fd67 	bl	80035f0 <CODEC_IO_Write>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	4413      	add	r3, r2
 8002b2a:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002b2c:	89fb      	ldrh	r3, [r7, #14]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	22c0      	movs	r2, #192	@ 0xc0
 8002b32:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fd5a 	bl	80035f0 <CODEC_IO_Write>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002b46:	89fb      	ldrh	r3, [r7, #14]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	22c0      	movs	r2, #192	@ 0xc0
 8002b4c:	f240 6111 	movw	r1, #1553	@ 0x611
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fd4d 	bl	80035f0 <CODEC_IO_Write>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002b60:	89fb      	ldrh	r3, [r7, #14]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2210      	movs	r2, #16
 8002b66:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fd40 	bl	80035f0 <CODEC_IO_Write>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	4413      	add	r3, r2
 8002b78:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	22c0      	movs	r2, #192	@ 0xc0
 8002b80:	f240 6112 	movw	r1, #1554	@ 0x612
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fd33 	bl	80035f0 <CODEC_IO_Write>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002b94:	89fb      	ldrh	r3, [r7, #14]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	22c0      	movs	r2, #192	@ 0xc0
 8002b9a:	f240 6113 	movw	r1, #1555	@ 0x613
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fd26 	bl	80035f0 <CODEC_IO_Write>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	4413      	add	r3, r2
 8002bac:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	f240 4122 	movw	r1, #1058	@ 0x422
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fd19 	bl	80035f0 <CODEC_IO_Write>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002bc8:	7afa      	ldrb	r2, [r7, #11]
 8002bca:	89fb      	ldrh	r3, [r7, #14]
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f984 	bl	8002edc <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002bd4:	8afb      	ldrh	r3, [r7, #22]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80a6 	beq.w	8002d28 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002bdc:	8afb      	ldrh	r3, [r7, #22]
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002be2:	d003      	beq.n	8002bec <wm8994_Init+0xc30>
 8002be4:	8afb      	ldrh	r3, [r7, #22]
 8002be6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bea:	d12b      	bne.n	8002c44 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002bec:	8b7b      	ldrh	r3, [r7, #26]
 8002bee:	f043 0313 	orr.w	r3, r3, #19
 8002bf2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	8b7a      	ldrh	r2, [r7, #26]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fcf7 	bl	80035f0 <CODEC_IO_Write>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002c0c:	89fb      	ldrh	r3, [r7, #14]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2202      	movs	r2, #2
 8002c12:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fcea 	bl	80035f0 <CODEC_IO_Write>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	461a      	mov	r2, r3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002c26:	89fb      	ldrh	r3, [r7, #14]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002c2e:	f240 4111 	movw	r1, #1041	@ 0x411
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fcdc 	bl	80035f0 <CODEC_IO_Write>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	e06b      	b.n	8002d1c <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002c44:	8afb      	ldrh	r3, [r7, #22]
 8002c46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c4a:	d139      	bne.n	8002cc0 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002c4c:	8b7b      	ldrh	r3, [r7, #26]
 8002c4e:	f043 0313 	orr.w	r3, r3, #19
 8002c52:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002c54:	89fb      	ldrh	r3, [r7, #14]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	8b7a      	ldrh	r2, [r7, #26]
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fcc7 	bl	80035f0 <CODEC_IO_Write>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	4413      	add	r3, r2
 8002c6a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002c6c:	89fb      	ldrh	r3, [r7, #14]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2202      	movs	r2, #2
 8002c72:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fcba 	bl	80035f0 <CODEC_IO_Write>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002c86:	89fb      	ldrh	r3, [r7, #14]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002c8e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fcac 	bl	80035f0 <CODEC_IO_Write>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8002ca2:	89fb      	ldrh	r3, [r7, #14]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002caa:	f240 4111 	movw	r1, #1041	@ 0x411
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fc9e 	bl	80035f0 <CODEC_IO_Write>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4413      	add	r3, r2
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	e02d      	b.n	8002d1c <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8002cc0:	8afb      	ldrh	r3, [r7, #22]
 8002cc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cc6:	d003      	beq.n	8002cd0 <wm8994_Init+0xd14>
 8002cc8:	8afb      	ldrh	r3, [r7, #22]
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cce:	d125      	bne.n	8002d1c <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002cd0:	89fb      	ldrh	r3, [r7, #14]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	220b      	movs	r2, #11
 8002cd6:	2118      	movs	r1, #24
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fc89 	bl	80035f0 <CODEC_IO_Write>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002ce8:	89fb      	ldrh	r3, [r7, #14]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	220b      	movs	r2, #11
 8002cee:	211a      	movs	r1, #26
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fc7d 	bl	80035f0 <CODEC_IO_Write>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002d00:	89fb      	ldrh	r3, [r7, #14]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002d08:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fc6f 	bl	80035f0 <CODEC_IO_Write>
 8002d12:	4603      	mov	r3, r0
 8002d14:	461a      	mov	r2, r3
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	4413      	add	r3, r2
 8002d1a:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002d1c:	7afa      	ldrb	r2, [r7, #11]
 8002d1e:	89fb      	ldrh	r3, [r7, #14]
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f8da 	bl	8002edc <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002d28:	69fb      	ldr	r3, [r7, #28]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3720      	adds	r7, #32
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop

08002d34 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002d38:	f000 fdec 	bl	8003914 <AUDIO_IO_DeInit>
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002d4a:	f000 fdd9 	bl	8003900 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fe0f 	bl	8003978 <AUDIO_IO_Read>
 8002d5a:	4603      	mov	r3, r0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	80fb      	strh	r3, [r7, #6]
 8002d70:	4613      	mov	r3, r2
 8002d72:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 f9d1 	bl	8003124 <wm8994_SetMute>
 8002d82:	4602      	mov	r2, r0
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	2101      	movs	r1, #1
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f9bc 	bl	8003124 <wm8994_SetMute>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2201      	movs	r2, #1
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fc17 	bl	80035f0 <CODEC_IO_Write>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4413      	add	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f99b 	bl	8003124 <wm8994_SetMute>
 8002dee:	4602      	mov	r2, r0
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8002e10:	4b31      	ldr	r3, [pc, #196]	@ (8002ed8 <wm8994_Stop+0xd8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d05a      	beq.n	8002ece <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 f981 	bl	8003124 <wm8994_SetMute>
 8002e22:	4602      	mov	r2, r0
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d04e      	beq.n	8002ece <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e38:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fbd7 	bl	80035f0 <CODEC_IO_Write>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e54:	f240 4122 	movw	r1, #1058	@ 0x422
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fbc9 	bl	80035f0 <CODEC_IO_Write>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	212d      	movs	r1, #45	@ 0x2d
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fbbd 	bl	80035f0 <CODEC_IO_Write>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2200      	movs	r2, #0
 8002e86:	212e      	movs	r1, #46	@ 0x2e
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fbb1 	bl	80035f0 <CODEC_IO_Write>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2105      	movs	r1, #5
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fba5 	bl	80035f0 <CODEC_IO_Write>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fb99 	bl	80035f0 <CODEC_IO_Write>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	@ (8002ed8 <wm8994_Stop+0xd8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20020610 	.word	0x20020610

08002edc <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	80fb      	strh	r3, [r7, #6]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002ef0:	797b      	ldrb	r3, [r7, #5]
 8002ef2:	2b64      	cmp	r3, #100	@ 0x64
 8002ef4:	d80b      	bhi.n	8002f0e <wm8994_SetVolume+0x32>
 8002ef6:	797a      	ldrb	r2, [r7, #5]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	019b      	lsls	r3, r3, #6
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	4a86      	ldr	r2, [pc, #536]	@ (8003118 <wm8994_SetVolume+0x23c>)
 8002f00:	fb82 1203 	smull	r1, r2, r2, r3
 8002f04:	1152      	asrs	r2, r2, #5
 8002f06:	17db      	asrs	r3, r3, #31
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	e000      	b.n	8002f10 <wm8994_SetVolume+0x34>
 8002f0e:	2364      	movs	r3, #100	@ 0x64
 8002f10:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002f12:	4b82      	ldr	r3, [pc, #520]	@ (800311c <wm8994_SetVolume+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 809b 	beq.w	8003052 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8002f1c:	7afb      	ldrb	r3, [r7, #11]
 8002f1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f20:	d93d      	bls.n	8002f9e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f8fc 	bl	8003124 <wm8994_SetMute>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f3c:	211c      	movs	r1, #28
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fb56 	bl	80035f0 <CODEC_IO_Write>
 8002f44:	4603      	mov	r3, r0
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f56:	211d      	movs	r1, #29
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fb49 	bl	80035f0 <CODEC_IO_Write>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f70:	2126      	movs	r1, #38	@ 0x26
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fb3c 	bl	80035f0 <CODEC_IO_Write>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f8a:	2127      	movs	r1, #39	@ 0x27
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fb2f 	bl	80035f0 <CODEC_IO_Write>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e059      	b.n	8003052 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8002f9e:	797b      	ldrb	r3, [r7, #5]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f8bb 	bl	8003124 <wm8994_SetMute>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	e04c      	b.n	8003052 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f8b1 	bl	8003124 <wm8994_SetMute>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8002fca:	88fb      	ldrh	r3, [r7, #6]
 8002fcc:	b2d8      	uxtb	r0, r3
 8002fce:	7afb      	ldrb	r3, [r7, #11]
 8002fd0:	b21b      	sxth	r3, r3
 8002fd2:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002fd6:	b21b      	sxth	r3, r3
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	211c      	movs	r1, #28
 8002fde:	f000 fb07 	bl	80035f0 <CODEC_IO_Write>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	b2d8      	uxtb	r0, r3
 8002ff0:	7afb      	ldrb	r3, [r7, #11]
 8002ff2:	b21b      	sxth	r3, r3
 8002ff4:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	211d      	movs	r1, #29
 8003000:	f000 faf6 	bl	80035f0 <CODEC_IO_Write>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	b2d8      	uxtb	r0, r3
 8003012:	7afb      	ldrb	r3, [r7, #11]
 8003014:	b21b      	sxth	r3, r3
 8003016:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800301a:	b21b      	sxth	r3, r3
 800301c:	b29b      	uxth	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	2126      	movs	r1, #38	@ 0x26
 8003022:	f000 fae5 	bl	80035f0 <CODEC_IO_Write>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	b2d8      	uxtb	r0, r3
 8003034:	7afb      	ldrb	r3, [r7, #11]
 8003036:	b21b      	sxth	r3, r3
 8003038:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800303c:	b21b      	sxth	r3, r3
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	2127      	movs	r1, #39	@ 0x27
 8003044:	f000 fad4 	bl	80035f0 <CODEC_IO_Write>
 8003048:	4603      	mov	r3, r0
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4413      	add	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8003052:	4b33      	ldr	r3, [pc, #204]	@ (8003120 <wm8994_SetVolume+0x244>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d059      	beq.n	800310e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800305a:	797b      	ldrb	r3, [r7, #5]
 800305c:	2b63      	cmp	r3, #99	@ 0x63
 800305e:	d80c      	bhi.n	800307a <wm8994_SetVolume+0x19e>
 8003060:	797a      	ldrb	r2, [r7, #5]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	011b      	lsls	r3, r3, #4
 800306a:	4a2b      	ldr	r2, [pc, #172]	@ (8003118 <wm8994_SetVolume+0x23c>)
 800306c:	fb82 1203 	smull	r1, r2, r2, r3
 8003070:	1152      	asrs	r2, r2, #5
 8003072:	17db      	asrs	r3, r3, #31
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	e000      	b.n	800307c <wm8994_SetVolume+0x1a0>
 800307a:	23ef      	movs	r3, #239	@ 0xef
 800307c:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	b2d8      	uxtb	r0, r3
 8003082:	7afb      	ldrb	r3, [r7, #11]
 8003084:	b21b      	sxth	r3, r3
 8003086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308a:	b21b      	sxth	r3, r3
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003094:	f000 faac 	bl	80035f0 <CODEC_IO_Write>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4413      	add	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	b2d8      	uxtb	r0, r3
 80030a6:	7afb      	ldrb	r3, [r7, #11]
 80030a8:	b21b      	sxth	r3, r3
 80030aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ae:	b21b      	sxth	r3, r3
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	f240 4101 	movw	r1, #1025	@ 0x401
 80030b8:	f000 fa9a 	bl	80035f0 <CODEC_IO_Write>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	b2d8      	uxtb	r0, r3
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	f240 4104 	movw	r1, #1028	@ 0x404
 80030dc:	f000 fa88 	bl	80035f0 <CODEC_IO_Write>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	b2d8      	uxtb	r0, r3
 80030ee:	7afb      	ldrb	r3, [r7, #11]
 80030f0:	b21b      	sxth	r3, r3
 80030f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	f240 4105 	movw	r1, #1029	@ 0x405
 8003100:	f000 fa76 	bl	80035f0 <CODEC_IO_Write>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	51eb851f 	.word	0x51eb851f
 800311c:	20020610 	.word	0x20020610
 8003120:	20020614 	.word	0x20020614

08003124 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8003134:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <wm8994_SetMute+0x98>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d039      	beq.n	80031b0 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d11c      	bne.n	800317c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800314a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fa4e 	bl	80035f0 <CODEC_IO_Write>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003166:	f240 4122 	movw	r1, #1058	@ 0x422
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fa40 	bl	80035f0 <CODEC_IO_Write>
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e019      	b.n	80031b0 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2210      	movs	r2, #16
 8003182:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fa32 	bl	80035f0 <CODEC_IO_Write>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2210      	movs	r2, #16
 800319c:	f240 4122 	movw	r1, #1058	@ 0x422
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fa25 	bl	80035f0 <CODEC_IO_Write>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80031b0:	68fb      	ldr	r3, [r7, #12]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20020610 	.word	0x20020610

080031c0 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	460a      	mov	r2, r1
 80031ca:	80fb      	strh	r3, [r7, #6]
 80031cc:	4613      	mov	r3, r2
 80031ce:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80031d4:	797b      	ldrb	r3, [r7, #5]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	f000 808c 	beq.w	80032f4 <wm8994_SetOutputMode+0x134>
 80031dc:	2b03      	cmp	r3, #3
 80031de:	f300 80cb 	bgt.w	8003378 <wm8994_SetOutputMode+0x1b8>
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d002      	beq.n	80031ec <wm8994_SetOutputMode+0x2c>
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d042      	beq.n	8003270 <wm8994_SetOutputMode+0xb0>
 80031ea:	e0c5      	b.n	8003378 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80031f4:	2105      	movs	r1, #5
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f9fa 	bl	80035f0 <CODEC_IO_Write>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2200      	movs	r2, #0
 800320c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f9ed 	bl	80035f0 <CODEC_IO_Write>
 8003216:	4603      	mov	r3, r0
 8003218:	461a      	mov	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2200      	movs	r2, #0
 8003226:	f240 6102 	movw	r1, #1538	@ 0x602
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f9e0 	bl	80035f0 <CODEC_IO_Write>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2202      	movs	r2, #2
 8003240:	f240 6104 	movw	r1, #1540	@ 0x604
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f9d3 	bl	80035f0 <CODEC_IO_Write>
 800324a:	4603      	mov	r3, r0
 800324c:	461a      	mov	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4413      	add	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2202      	movs	r2, #2
 800325a:	f240 6105 	movw	r1, #1541	@ 0x605
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f9c6 	bl	80035f0 <CODEC_IO_Write>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
    break;
 800326e:	e0c5      	b.n	80033fc <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f240 3203 	movw	r2, #771	@ 0x303
 8003278:	2105      	movs	r1, #5
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f9b8 	bl	80035f0 <CODEC_IO_Write>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2201      	movs	r2, #1
 8003290:	f240 6101 	movw	r1, #1537	@ 0x601
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f9ab 	bl	80035f0 <CODEC_IO_Write>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2201      	movs	r2, #1
 80032aa:	f240 6102 	movw	r1, #1538	@ 0x602
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f99e 	bl	80035f0 <CODEC_IO_Write>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2200      	movs	r2, #0
 80032c4:	f240 6104 	movw	r1, #1540	@ 0x604
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f991 	bl	80035f0 <CODEC_IO_Write>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4413      	add	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2200      	movs	r2, #0
 80032de:	f240 6105 	movw	r1, #1541	@ 0x605
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f984 	bl	80035f0 <CODEC_IO_Write>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
    break;
 80032f2:	e083      	b.n	80033fc <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80032fc:	2105      	movs	r1, #5
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f976 	bl	80035f0 <CODEC_IO_Write>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2201      	movs	r2, #1
 8003314:	f240 6101 	movw	r1, #1537	@ 0x601
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f969 	bl	80035f0 <CODEC_IO_Write>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2201      	movs	r2, #1
 800332e:	f240 6102 	movw	r1, #1538	@ 0x602
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f95c 	bl	80035f0 <CODEC_IO_Write>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2202      	movs	r2, #2
 8003348:	f240 6104 	movw	r1, #1540	@ 0x604
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f94f 	bl	80035f0 <CODEC_IO_Write>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2202      	movs	r2, #2
 8003362:	f240 6105 	movw	r1, #1541	@ 0x605
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f942 	bl	80035f0 <CODEC_IO_Write>
 800336c:	4603      	mov	r3, r0
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
    break;
 8003376:	e041      	b.n	80033fc <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f240 3203 	movw	r2, #771	@ 0x303
 8003380:	2105      	movs	r1, #5
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f934 	bl	80035f0 <CODEC_IO_Write>
 8003388:	4603      	mov	r3, r0
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2201      	movs	r2, #1
 8003398:	f240 6101 	movw	r1, #1537	@ 0x601
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f927 	bl	80035f0 <CODEC_IO_Write>
 80033a2:	4603      	mov	r3, r0
 80033a4:	461a      	mov	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2201      	movs	r2, #1
 80033b2:	f240 6102 	movw	r1, #1538	@ 0x602
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f91a 	bl	80035f0 <CODEC_IO_Write>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2200      	movs	r2, #0
 80033cc:	f240 6104 	movw	r1, #1540	@ 0x604
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 f90d 	bl	80035f0 <CODEC_IO_Write>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4413      	add	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2200      	movs	r2, #0
 80033e6:	f240 6105 	movw	r1, #1541	@ 0x605
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f900 	bl	80035f0 <CODEC_IO_Write>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
    break;    
 80033fa:	bf00      	nop
  }  
  return counter;
 80033fc:	68fb      	ldr	r3, [r7, #12]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	4a64      	ldr	r2, [pc, #400]	@ (80035ac <wm8994_SetFrequency+0x1a4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d079      	beq.n	8003514 <wm8994_SetFrequency+0x10c>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a62      	ldr	r2, [pc, #392]	@ (80035ac <wm8994_SetFrequency+0x1a4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	f200 80ad 	bhi.w	8003584 <wm8994_SetFrequency+0x17c>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003430:	4293      	cmp	r3, r2
 8003432:	d061      	beq.n	80034f8 <wm8994_SetFrequency+0xf0>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800343a:	4293      	cmp	r3, r2
 800343c:	f200 80a2 	bhi.w	8003584 <wm8994_SetFrequency+0x17c>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003446:	4293      	cmp	r3, r2
 8003448:	f000 808e 	beq.w	8003568 <wm8994_SetFrequency+0x160>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003452:	4293      	cmp	r3, r2
 8003454:	f200 8096 	bhi.w	8003584 <wm8994_SetFrequency+0x17c>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800345e:	d03d      	beq.n	80034dc <wm8994_SetFrequency+0xd4>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003466:	f200 808d 	bhi.w	8003584 <wm8994_SetFrequency+0x17c>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003470:	4293      	cmp	r3, r2
 8003472:	d06b      	beq.n	800354c <wm8994_SetFrequency+0x144>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f245 6222 	movw	r2, #22050	@ 0x5622
 800347a:	4293      	cmp	r3, r2
 800347c:	f200 8082 	bhi.w	8003584 <wm8994_SetFrequency+0x17c>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003486:	d01b      	beq.n	80034c0 <wm8994_SetFrequency+0xb8>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800348e:	d879      	bhi.n	8003584 <wm8994_SetFrequency+0x17c>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003496:	d005      	beq.n	80034a4 <wm8994_SetFrequency+0x9c>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800349e:	4293      	cmp	r3, r2
 80034a0:	d046      	beq.n	8003530 <wm8994_SetFrequency+0x128>
 80034a2:	e06f      	b.n	8003584 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2203      	movs	r2, #3
 80034aa:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f89e 	bl	80035f0 <CODEC_IO_Write>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
    break;
 80034be:	e06f      	b.n	80035a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2233      	movs	r2, #51	@ 0x33
 80034c6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f890 	bl	80035f0 <CODEC_IO_Write>
 80034d0:	4603      	mov	r3, r0
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
    break;
 80034da:	e061      	b.n	80035a0 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2263      	movs	r2, #99	@ 0x63
 80034e2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f882 	bl	80035f0 <CODEC_IO_Write>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
    break;
 80034f6:	e053      	b.n	80035a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2283      	movs	r2, #131	@ 0x83
 80034fe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f874 	bl	80035f0 <CODEC_IO_Write>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
    break;
 8003512:	e045      	b.n	80035a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	22a3      	movs	r2, #163	@ 0xa3
 800351a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f866 	bl	80035f0 <CODEC_IO_Write>
 8003524:	4603      	mov	r3, r0
 8003526:	461a      	mov	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
    break;
 800352e:	e037      	b.n	80035a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2213      	movs	r2, #19
 8003536:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f858 	bl	80035f0 <CODEC_IO_Write>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    break;
 800354a:	e029      	b.n	80035a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2243      	movs	r2, #67	@ 0x43
 8003552:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f84a 	bl	80035f0 <CODEC_IO_Write>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
    break;
 8003566:	e01b      	b.n	80035a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2273      	movs	r2, #115	@ 0x73
 800356e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f83c 	bl	80035f0 <CODEC_IO_Write>
 8003578:	4603      	mov	r3, r0
 800357a:	461a      	mov	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
    break; 
 8003582:	e00d      	b.n	80035a0 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2283      	movs	r2, #131	@ 0x83
 800358a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800358e:	4618      	mov	r0, r3
 8003590:	f000 f82e 	bl	80035f0 <CODEC_IO_Write>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
    break; 
 800359e:	bf00      	nop
  }
  return counter;
 80035a0:	68fb      	ldr	r3, [r7, #12]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	00017700 	.word	0x00017700

080035b0 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2200      	movs	r2, #0
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f812 	bl	80035f0 <CODEC_IO_Write>
 80035cc:	4603      	mov	r3, r0
 80035ce:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80035d0:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <wm8994_Reset+0x38>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80035d6:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <wm8994_Reset+0x3c>)
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]

  return counter;
 80035dc:	68fb      	ldr	r3, [r7, #12]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20020610 	.word	0x20020610
 80035ec:	20020614 	.word	0x20020614

080035f0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
 80035fa:	460b      	mov	r3, r1
 80035fc:	80bb      	strh	r3, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	88b9      	ldrh	r1, [r7, #4]
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 f989 	bl	8003924 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	b2db      	uxtb	r3, r3
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	4a07      	ldr	r2, [pc, #28]	@ (800364c <BSP_PB_GetState+0x2c>)
 800362e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	4906      	ldr	r1, [pc, #24]	@ (8003650 <BSP_PB_GetState+0x30>)
 8003636:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f001 ff91 	bl	8005564 <HAL_GPIO_ReadPin>
 8003642:	4603      	mov	r3, r0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000038 	.word	0x20000038
 8003650:	0800bbec 	.word	0x0800bbec

08003654 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	@ 0x30
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a51      	ldr	r2, [pc, #324]	@ (80037a4 <I2Cx_MspInit+0x150>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d14d      	bne.n	8003700 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003664:	4b50      	ldr	r3, [pc, #320]	@ (80037a8 <I2Cx_MspInit+0x154>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003668:	4a4f      	ldr	r2, [pc, #316]	@ (80037a8 <I2Cx_MspInit+0x154>)
 800366a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800366e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003670:	4b4d      	ldr	r3, [pc, #308]	@ (80037a8 <I2Cx_MspInit+0x154>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800367c:	2380      	movs	r3, #128	@ 0x80
 800367e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003680:	2312      	movs	r3, #18
 8003682:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003688:	2302      	movs	r3, #2
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800368c:	2304      	movs	r3, #4
 800368e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003690:	f107 031c 	add.w	r3, r7, #28
 8003694:	4619      	mov	r1, r3
 8003696:	4845      	ldr	r0, [pc, #276]	@ (80037ac <I2Cx_MspInit+0x158>)
 8003698:	f001 fcac 	bl	8004ff4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800369c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036a2:	f107 031c 	add.w	r3, r7, #28
 80036a6:	4619      	mov	r1, r3
 80036a8:	4840      	ldr	r0, [pc, #256]	@ (80037ac <I2Cx_MspInit+0x158>)
 80036aa:	f001 fca3 	bl	8004ff4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80036ae:	4b3e      	ldr	r3, [pc, #248]	@ (80037a8 <I2Cx_MspInit+0x154>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	4a3d      	ldr	r2, [pc, #244]	@ (80037a8 <I2Cx_MspInit+0x154>)
 80036b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ba:	4b3b      	ldr	r3, [pc, #236]	@ (80037a8 <I2Cx_MspInit+0x154>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80036c6:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <I2Cx_MspInit+0x154>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a37      	ldr	r2, [pc, #220]	@ (80037a8 <I2Cx_MspInit+0x154>)
 80036cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036d0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80036d2:	4b35      	ldr	r3, [pc, #212]	@ (80037a8 <I2Cx_MspInit+0x154>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	4a34      	ldr	r2, [pc, #208]	@ (80037a8 <I2Cx_MspInit+0x154>)
 80036d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80036dc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80036de:	2200      	movs	r2, #0
 80036e0:	210f      	movs	r1, #15
 80036e2:	2048      	movs	r0, #72	@ 0x48
 80036e4:	f000 ffd9 	bl	800469a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80036e8:	2048      	movs	r0, #72	@ 0x48
 80036ea:	f000 fff2 	bl	80046d2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	210f      	movs	r1, #15
 80036f2:	2049      	movs	r0, #73	@ 0x49
 80036f4:	f000 ffd1 	bl	800469a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80036f8:	2049      	movs	r0, #73	@ 0x49
 80036fa:	f000 ffea 	bl	80046d2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80036fe:	e04d      	b.n	800379c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003700:	4b29      	ldr	r3, [pc, #164]	@ (80037a8 <I2Cx_MspInit+0x154>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	4a28      	ldr	r2, [pc, #160]	@ (80037a8 <I2Cx_MspInit+0x154>)
 8003706:	f043 0302 	orr.w	r3, r3, #2
 800370a:	6313      	str	r3, [r2, #48]	@ 0x30
 800370c:	4b26      	ldr	r3, [pc, #152]	@ (80037a8 <I2Cx_MspInit+0x154>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003718:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800371c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800371e:	2312      	movs	r3, #18
 8003720:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003726:	2302      	movs	r3, #2
 8003728:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800372a:	2304      	movs	r3, #4
 800372c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800372e:	f107 031c 	add.w	r3, r7, #28
 8003732:	4619      	mov	r1, r3
 8003734:	481e      	ldr	r0, [pc, #120]	@ (80037b0 <I2Cx_MspInit+0x15c>)
 8003736:	f001 fc5d 	bl	8004ff4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800373a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800373e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003740:	f107 031c 	add.w	r3, r7, #28
 8003744:	4619      	mov	r1, r3
 8003746:	481a      	ldr	r0, [pc, #104]	@ (80037b0 <I2Cx_MspInit+0x15c>)
 8003748:	f001 fc54 	bl	8004ff4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800374c:	4b16      	ldr	r3, [pc, #88]	@ (80037a8 <I2Cx_MspInit+0x154>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	4a15      	ldr	r2, [pc, #84]	@ (80037a8 <I2Cx_MspInit+0x154>)
 8003752:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003756:	6413      	str	r3, [r2, #64]	@ 0x40
 8003758:	4b13      	ldr	r3, [pc, #76]	@ (80037a8 <I2Cx_MspInit+0x154>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003764:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <I2Cx_MspInit+0x154>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a0f      	ldr	r2, [pc, #60]	@ (80037a8 <I2Cx_MspInit+0x154>)
 800376a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800376e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003770:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <I2Cx_MspInit+0x154>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4a0c      	ldr	r2, [pc, #48]	@ (80037a8 <I2Cx_MspInit+0x154>)
 8003776:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800377a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800377c:	2200      	movs	r2, #0
 800377e:	210f      	movs	r1, #15
 8003780:	201f      	movs	r0, #31
 8003782:	f000 ff8a 	bl	800469a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003786:	201f      	movs	r0, #31
 8003788:	f000 ffa3 	bl	80046d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800378c:	2200      	movs	r2, #0
 800378e:	210f      	movs	r1, #15
 8003790:	2020      	movs	r0, #32
 8003792:	f000 ff82 	bl	800469a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003796:	2020      	movs	r0, #32
 8003798:	f000 ff9b 	bl	80046d2 <HAL_NVIC_EnableIRQ>
}
 800379c:	bf00      	nop
 800379e:	3730      	adds	r7, #48	@ 0x30
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20020618 	.word	0x20020618
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40021c00 	.word	0x40021c00
 80037b0:	40020400 	.word	0x40020400

080037b4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f002 fa0f 	bl	8005be0 <HAL_I2C_GetState>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d125      	bne.n	8003814 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a14      	ldr	r2, [pc, #80]	@ (800381c <I2Cx_Init+0x68>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d103      	bne.n	80037d8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a13      	ldr	r2, [pc, #76]	@ (8003820 <I2Cx_Init+0x6c>)
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e002      	b.n	80037de <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <I2Cx_Init+0x70>)
 80037dc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a11      	ldr	r2, [pc, #68]	@ (8003828 <I2Cx_Init+0x74>)
 80037e2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff23 	bl	8003654 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f001 fed8 	bl	80055c4 <HAL_I2C_Init>
  }
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20020618 	.word	0x20020618
 8003820:	40005c00 	.word	0x40005c00
 8003824:	40005400 	.word	0x40005400
 8003828:	40912732 	.word	0x40912732

0800382c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	@ 0x28
 8003830:	af04      	add	r7, sp, #16
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	4608      	mov	r0, r1
 8003836:	4611      	mov	r1, r2
 8003838:	461a      	mov	r2, r3
 800383a:	4603      	mov	r3, r0
 800383c:	72fb      	strb	r3, [r7, #11]
 800383e:	460b      	mov	r3, r1
 8003840:	813b      	strh	r3, [r7, #8]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800384a:	7afb      	ldrb	r3, [r7, #11]
 800384c:	b299      	uxth	r1, r3
 800384e:	88f8      	ldrh	r0, [r7, #6]
 8003850:	893a      	ldrh	r2, [r7, #8]
 8003852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003856:	9302      	str	r3, [sp, #8]
 8003858:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	4603      	mov	r3, r0
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f002 f8a2 	bl	80059ac <HAL_I2C_Mem_Read>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003872:	7afb      	ldrb	r3, [r7, #11]
 8003874:	4619      	mov	r1, r3
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f832 	bl	80038e0 <I2Cx_Error>
  }
  return status;    
 800387c:	7dfb      	ldrb	r3, [r7, #23]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b08a      	sub	sp, #40	@ 0x28
 800388a:	af04      	add	r7, sp, #16
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	4608      	mov	r0, r1
 8003890:	4611      	mov	r1, r2
 8003892:	461a      	mov	r2, r3
 8003894:	4603      	mov	r3, r0
 8003896:	72fb      	strb	r3, [r7, #11]
 8003898:	460b      	mov	r3, r1
 800389a:	813b      	strh	r3, [r7, #8]
 800389c:	4613      	mov	r3, r2
 800389e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80038a4:	7afb      	ldrb	r3, [r7, #11]
 80038a6:	b299      	uxth	r1, r3
 80038a8:	88f8      	ldrh	r0, [r7, #6]
 80038aa:	893a      	ldrh	r2, [r7, #8]
 80038ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038b0:	9302      	str	r3, [sp, #8]
 80038b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	4603      	mov	r3, r0
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f001 ff61 	bl	8005784 <HAL_I2C_Mem_Write>
 80038c2:	4603      	mov	r3, r0
 80038c4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	4619      	mov	r1, r3
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f805 	bl	80038e0 <I2Cx_Error>
  }
  return status;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f001 ff05 	bl	80056fc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff ff5e 	bl	80037b4 <I2Cx_Init>
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003904:	4802      	ldr	r0, [pc, #8]	@ (8003910 <AUDIO_IO_Init+0x10>)
 8003906:	f7ff ff55 	bl	80037b4 <I2Cx_Init>
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20020618 	.word	0x20020618

08003914 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af02      	add	r7, sp, #8
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
 800392e:	460b      	mov	r3, r1
 8003930:	80bb      	strh	r3, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800393a:	89fb      	ldrh	r3, [r7, #14]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	b29b      	uxth	r3, r3
 8003940:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003942:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	b21a      	sxth	r2, r3
 800394a:	887b      	ldrh	r3, [r7, #2]
 800394c:	b21b      	sxth	r3, r3
 800394e:	4313      	orrs	r3, r2
 8003950:	b21b      	sxth	r3, r3
 8003952:	b29b      	uxth	r3, r3
 8003954:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003956:	88ba      	ldrh	r2, [r7, #4]
 8003958:	79f9      	ldrb	r1, [r7, #7]
 800395a:	2302      	movs	r3, #2
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	1cbb      	adds	r3, r7, #2
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2302      	movs	r3, #2
 8003964:	4803      	ldr	r0, [pc, #12]	@ (8003974 <AUDIO_IO_Write+0x50>)
 8003966:	f7ff ff8e 	bl	8003886 <I2Cx_WriteMultiple>
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20020618 	.word	0x20020618

08003978 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af02      	add	r7, sp, #8
 800397e:	4603      	mov	r3, r0
 8003980:	460a      	mov	r2, r1
 8003982:	71fb      	strb	r3, [r7, #7]
 8003984:	4613      	mov	r3, r2
 8003986:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	81bb      	strh	r3, [r7, #12]
 800398c:	2300      	movs	r3, #0
 800398e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003990:	88ba      	ldrh	r2, [r7, #4]
 8003992:	79f9      	ldrb	r1, [r7, #7]
 8003994:	2302      	movs	r3, #2
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	f107 030c 	add.w	r3, r7, #12
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	2302      	movs	r3, #2
 80039a0:	480a      	ldr	r0, [pc, #40]	@ (80039cc <AUDIO_IO_Read+0x54>)
 80039a2:	f7ff ff43 	bl	800382c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80039a6:	89bb      	ldrh	r3, [r7, #12]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80039ac:	89bb      	ldrh	r3, [r7, #12]
 80039ae:	b21b      	sxth	r3, r3
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	b21a      	sxth	r2, r3
 80039b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	b21b      	sxth	r3, r3
 80039bc:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80039be:	89fb      	ldrh	r3, [r7, #14]
 80039c0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80039c2:	89bb      	ldrh	r3, [r7, #12]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20020618 	.word	0x20020618

080039d0 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fd3b 	bl	8004454 <HAL_Delay>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	603a      	str	r2, [r7, #0]
 80039f2:	80fb      	strh	r3, [r7, #6]
 80039f4:	460b      	mov	r3, r1
 80039f6:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 8003a00:	f000 fa6a 	bl	8003ed8 <SAIx_Out_DeInit>

  /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8003a04:	2200      	movs	r2, #0
 8003a06:	6839      	ldr	r1, [r7, #0]
 8003a08:	481c      	ldr	r0, [pc, #112]	@ (8003a7c <BSP_AUDIO_OUT_Init+0x94>)
 8003a0a:	f000 f9c3 	bl	8003d94 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a7c <BSP_AUDIO_OUT_Init+0x94>)
 8003a10:	4a1b      	ldr	r2, [pc, #108]	@ (8003a80 <BSP_AUDIO_OUT_Init+0x98>)
 8003a12:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8003a14:	4819      	ldr	r0, [pc, #100]	@ (8003a7c <BSP_AUDIO_OUT_Init+0x94>)
 8003a16:	f004 fbf9 	bl	800820c <HAL_SAI_GetState>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d103      	bne.n	8003a28 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8003a20:	2100      	movs	r1, #0
 8003a22:	4816      	ldr	r0, [pc, #88]	@ (8003a7c <BSP_AUDIO_OUT_Init+0x94>)
 8003a24:	f000 f8e0 	bl	8003be8 <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 8003a28:	6838      	ldr	r0, [r7, #0]
 8003a2a:	f000 f9f7 	bl	8003e1c <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003a2e:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <BSP_AUDIO_OUT_Init+0x9c>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2034      	movs	r0, #52	@ 0x34
 8003a34:	4798      	blx	r3
 8003a36:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f648 1294 	movw	r2, #35220	@ 0x8994
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d109      	bne.n	8003a56 <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <BSP_AUDIO_OUT_Init+0x9c>)
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	2034      	movs	r0, #52	@ 0x34
 8003a48:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a88 <BSP_AUDIO_OUT_Init+0xa0>)
 8003a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a84 <BSP_AUDIO_OUT_Init+0x9c>)
 8003a4e:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e001      	b.n	8003a5a <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d107      	bne.n	8003a70 <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8003a60:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <BSP_AUDIO_OUT_Init+0xa0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681c      	ldr	r4, [r3, #0]
 8003a66:	797a      	ldrb	r2, [r7, #5]
 8003a68:	88f9      	ldrh	r1, [r7, #6]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2034      	movs	r0, #52	@ 0x34
 8003a6e:	47a0      	blx	r4
  }
 
  return ret;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd90      	pop	{r4, r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20020670 	.word	0x20020670
 8003a80:	40015c04 	.word	0x40015c04
 8003a84:	20000004 	.word	0x20000004
 8003a88:	2002066c 	.word	0x2002066c

08003a8c <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8003a96:	4b10      	ldr	r3, [pc, #64]	@ (8003ad8 <BSP_AUDIO_OUT_Play+0x4c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	2034      	movs	r0, #52	@ 0x34
 8003aa4:	4798      	blx	r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e00f      	b.n	8003ad0 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ab6:	d203      	bcs.n	8003ac0 <BSP_AUDIO_OUT_Play+0x34>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	e001      	b.n	8003ac4 <BSP_AUDIO_OUT_Play+0x38>
 8003ac0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4804      	ldr	r0, [pc, #16]	@ (8003adc <BSP_AUDIO_OUT_Play+0x50>)
 8003aca:	f004 f919 	bl	8007d00 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 8003ace:	2300      	movs	r3, #0
  }
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	2002066c 	.word	0x2002066c
 8003adc:	20020670 	.word	0x20020670

08003ae0 <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_out_sai);
 8003ae8:	480c      	ldr	r0, [pc, #48]	@ (8003b1c <BSP_AUDIO_OUT_Stop+0x3c>)
 8003aea:	f004 f812 	bl	8007b12 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8003aee:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <BSP_AUDIO_OUT_Stop+0x40>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	2034      	movs	r0, #52	@ 0x34
 8003af8:	4798      	blx	r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <BSP_AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e006      	b.n	8003b12 <BSP_AUDIO_OUT_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d102      	bne.n	8003b10 <BSP_AUDIO_OUT_Stop+0x30>
    { 
      /* Wait at least 100us */
      HAL_Delay(1);
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	f000 fca2 	bl	8004454 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8003b10:	2300      	movs	r3, #0
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20020670 	.word	0x20020670
 8003b20:	2002066c 	.word	0x2002066c

08003b24 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b3a:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8003b3c:	4a08      	ldr	r2, [pc, #32]	@ (8003b60 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6613      	str	r3, [r2, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8003b42:	4807      	ldr	r0, [pc, #28]	@ (8003b60 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003b44:	f003 fe32 	bl	80077ac <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4b04      	ldr	r3, [pc, #16]	@ (8003b60 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003b56:	601a      	str	r2, [r3, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20020670 	.word	0x20020670

08003b64 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8003b6c:	f7fd fe54 	bl	8001818 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8003b80:	f7fd fe5e 	bl	8001840 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003b94:	480e      	ldr	r0, [pc, #56]	@ (8003bd0 <HAL_SAI_ErrorCallback+0x44>)
 8003b96:	f004 fb39 	bl	800820c <HAL_SAI_GetState>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003b9e:	480d      	ldr	r0, [pc, #52]	@ (8003bd4 <HAL_SAI_ErrorCallback+0x48>)
 8003ba0:	f004 fb34 	bl	800820c <HAL_SAI_GetState>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d002      	beq.n	8003bb4 <HAL_SAI_ErrorCallback+0x28>
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	2b12      	cmp	r3, #18
 8003bb2:	d101      	bne.n	8003bb8 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003bb4:	f000 f810 	bl	8003bd8 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8003bb8:	7bbb      	ldrb	r3, [r7, #14]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d002      	beq.n	8003bc4 <HAL_SAI_ErrorCallback+0x38>
 8003bbe:	7bbb      	ldrb	r3, [r7, #14]
 8003bc0:	2b22      	cmp	r3, #34	@ 0x22
 8003bc2:	d101      	bne.n	8003bc8 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8003bc4:	f7fd fe6c 	bl	80018a0 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20020670 	.word	0x20020670
 8003bd4:	200206f4 	.word	0x200206f4

08003bd8 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	@ 0x30
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8003bf2:	4b63      	ldr	r3, [pc, #396]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	4a62      	ldr	r2, [pc, #392]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bfe:	4b60      	ldr	r3, [pc, #384]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	4a5c      	ldr	r2, [pc, #368]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c16:	4b5a      	ldr	r3, [pc, #360]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003c22:	4b57      	ldr	r3, [pc, #348]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	4a56      	ldr	r2, [pc, #344]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2e:	4b54      	ldr	r3, [pc, #336]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8003c3a:	4b51      	ldr	r3, [pc, #324]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	4a50      	ldr	r2, [pc, #320]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c46:	4b4e      	ldr	r3, [pc, #312]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003c52:	2380      	movs	r3, #128	@ 0x80
 8003c54:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c56:	2302      	movs	r3, #2
 8003c58:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003c62:	230a      	movs	r3, #10
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003c66:	f107 031c 	add.w	r3, r7, #28
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4845      	ldr	r0, [pc, #276]	@ (8003d84 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003c6e:	f001 f9c1 	bl	8004ff4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003c72:	2320      	movs	r3, #32
 8003c74:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c76:	2302      	movs	r3, #2
 8003c78:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003c82:	230a      	movs	r3, #10
 8003c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003c86:	f107 031c 	add.w	r3, r7, #28
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	483d      	ldr	r0, [pc, #244]	@ (8003d84 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003c8e:	f001 f9b1 	bl	8004ff4 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003c92:	2340      	movs	r3, #64	@ 0x40
 8003c94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c96:	2302      	movs	r3, #2
 8003c98:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003ca2:	230a      	movs	r3, #10
 8003ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003ca6:	f107 031c 	add.w	r3, r7, #28
 8003caa:	4619      	mov	r1, r3
 8003cac:	4835      	ldr	r0, [pc, #212]	@ (8003d84 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003cae:	f001 f9a1 	bl	8004ff4 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003cb2:	2310      	movs	r3, #16
 8003cb4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003cc2:	230a      	movs	r3, #10
 8003cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8003cc6:	f107 031c 	add.w	r3, r7, #28
 8003cca:	4619      	mov	r1, r3
 8003ccc:	482d      	ldr	r0, [pc, #180]	@ (8003d84 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003cce:	f001 f991 	bl	8004ff4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003cd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cde:	4b28      	ldr	r3, [pc, #160]	@ (8003d80 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a26      	ldr	r2, [pc, #152]	@ (8003d88 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d138      	bne.n	8003d66 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003cf4:	4b25      	ldr	r3, [pc, #148]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cf6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003cfa:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003cfc:	4b23      	ldr	r3, [pc, #140]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cfe:	2240      	movs	r2, #64	@ 0x40
 8003d00:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003d02:	4b22      	ldr	r3, [pc, #136]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003d08:	4b20      	ldr	r3, [pc, #128]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d0e:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003d10:	4b1e      	ldr	r3, [pc, #120]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d16:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003d18:	4b1c      	ldr	r3, [pc, #112]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d1e:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d26:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003d28:	4b18      	ldr	r3, [pc, #96]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d2e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003d30:	4b16      	ldr	r3, [pc, #88]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d32:	2204      	movs	r2, #4
 8003d34:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003d36:	4b15      	ldr	r3, [pc, #84]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d38:	2203      	movs	r2, #3
 8003d3a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003d3c:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003d42:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003d48:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d4a:	4a11      	ldr	r2, [pc, #68]	@ (8003d90 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003d4c:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a0e      	ldr	r2, [pc, #56]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d52:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003d54:	4a0d      	ldr	r2, [pc, #52]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8003d5a:	480c      	ldr	r0, [pc, #48]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d5c:	f000 fd90 	bl	8004880 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003d60:	480a      	ldr	r0, [pc, #40]	@ (8003d8c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d62:	f000 fcdf 	bl	8004724 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003d66:	2200      	movs	r2, #0
 8003d68:	210e      	movs	r1, #14
 8003d6a:	203c      	movs	r0, #60	@ 0x3c
 8003d6c:	f000 fc95 	bl	800469a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003d70:	203c      	movs	r0, #60	@ 0x3c
 8003d72:	f000 fcae 	bl	80046d2 <HAL_NVIC_EnableIRQ>
}
 8003d76:	bf00      	nop
 8003d78:	3730      	adds	r7, #48	@ 0x30
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40015c04 	.word	0x40015c04
 8003d8c:	20020778 	.word	0x20020778
 8003d90:	40026470 	.word	0x40026470

08003d94 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b0a6      	sub	sp, #152	@ 0x98
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	4618      	mov	r0, r3
 8003da6:	f003 fab5 	bl	8007314 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d112      	bne.n	8003dee <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003dc8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003dcc:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003dce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003dd2:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8003dd4:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8003dd8:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003dde:	2313      	movs	r3, #19
 8003de0:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003de2:	f107 0314 	add.w	r3, r7, #20
 8003de6:	4618      	mov	r0, r3
 8003de8:	f002 fea4 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 8003dec:	e012      	b.n	8003e14 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003dee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003df2:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003df4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003df8:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8003dfa:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8003dfe:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003e00:	2307      	movs	r3, #7
 8003e02:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8003e04:	2301      	movs	r3, #1
 8003e06:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003e08:	f107 0314 	add.w	r3, r7, #20
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f002 fe91 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	3798      	adds	r7, #152	@ 0x98
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003e24:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e26:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed4 <SAIx_Out_Init+0xb8>)
 8003e28:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003e2a:	4b29      	ldr	r3, [pc, #164]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003e38:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8003e3a:	4a25      	ldr	r2, [pc, #148]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8003e40:	4b23      	ldr	r3, [pc, #140]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003e46:	4b22      	ldr	r3, [pc, #136]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003e4c:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003e52:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e54:	2280      	movs	r2, #128	@ 0x80
 8003e56:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003e58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003e64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8003e6a:	4b19      	ldr	r3, [pc, #100]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e70:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003e72:	4b17      	ldr	r3, [pc, #92]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 64; 
 8003e78:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e7a:	2240      	movs	r2, #64	@ 0x40
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8003e7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e80:	2220      	movs	r2, #32
 8003e82:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003e84:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e8a:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003e8c:	4b10      	ldr	r3, [pc, #64]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003e92:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e94:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003e98:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8003eac:	4b08      	ldr	r3, [pc, #32]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003eae:	220f      	movs	r2, #15
 8003eb0:	661a      	str	r2, [r3, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8003eb2:	4807      	ldr	r0, [pc, #28]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003eb4:	f003 fc7a 	bl	80077ac <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8003eb8:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b04      	ldr	r3, [pc, #16]	@ (8003ed0 <SAIx_Out_Init+0xb4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003ec6:	601a      	str	r2, [r3, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20020670 	.word	0x20020670
 8003ed4:	40015c04 	.word	0x40015c04

08003ed8 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003edc:	4b07      	ldr	r3, [pc, #28]	@ (8003efc <SAIx_Out_DeInit+0x24>)
 8003ede:	4a08      	ldr	r2, [pc, #32]	@ (8003f00 <SAIx_Out_DeInit+0x28>)
 8003ee0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <SAIx_Out_DeInit+0x24>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b04      	ldr	r3, [pc, #16]	@ (8003efc <SAIx_Out_DeInit+0x24>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ef0:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8003ef2:	4802      	ldr	r0, [pc, #8]	@ (8003efc <SAIx_Out_DeInit+0x24>)
 8003ef4:	f003 fdd8 	bl	8007aa8 <HAL_SAI_DeInit>
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20020670 	.word	0x20020670
 8003f00:	40015c04 	.word	0x40015c04

08003f04 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	68f9      	ldr	r1, [r7, #12]
 8003f16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003f1a:	f000 f805 	bl	8003f28 <BSP_AUDIO_IN_InitEx>
 8003f1e:	4603      	mov	r3, r0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b089      	sub	sp, #36	@ 0x24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4603      	mov	r3, r0
 8003f36:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8003f40:	89fb      	ldrh	r3, [r7, #14]
 8003f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f46:	d006      	beq.n	8003f56 <BSP_AUDIO_IN_InitEx+0x2e>
 8003f48:	89fb      	ldrh	r3, [r7, #14]
 8003f4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f4e:	d002      	beq.n	8003f56 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e046      	b.n	8003fe4 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8003f56:	f000 fa09 	bl	800436c <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	4824      	ldr	r0, [pc, #144]	@ (8003ff0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003f60:	f7ff ff18 	bl	8003d94 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003f64:	4b22      	ldr	r3, [pc, #136]	@ (8003ff0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003f66:	4a23      	ldr	r2, [pc, #140]	@ (8003ff4 <BSP_AUDIO_IN_InitEx+0xcc>)
 8003f68:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8003f6a:	4821      	ldr	r0, [pc, #132]	@ (8003ff0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003f6c:	f004 f94e 	bl	800820c <HAL_SAI_GetState>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d107      	bne.n	8003f86 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8003f76:	2100      	movs	r1, #0
 8003f78:	481d      	ldr	r0, [pc, #116]	@ (8003ff0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003f7a:	f7ff fe35 	bl	8003be8 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8003f7e:	2100      	movs	r1, #0
 8003f80:	481b      	ldr	r0, [pc, #108]	@ (8003ff0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003f82:	f000 f88b 	bl	800409c <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8003f86:	89fb      	ldrh	r3, [r7, #14]
 8003f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f8c:	d102      	bne.n	8003f94 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8003f8e:	230a      	movs	r3, #10
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	e001      	b.n	8003f98 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8003f94:	2305      	movs	r3, #5
 8003f96:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	69b9      	ldr	r1, [r7, #24]
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f000 f92f 	bl	8004200 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003fa2:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2034      	movs	r0, #52	@ 0x34
 8003fa8:	4798      	blx	r3
 8003faa:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f648 1294 	movw	r2, #35220	@ 0x8994
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d109      	bne.n	8003fca <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003fb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	2034      	movs	r0, #52	@ 0x34
 8003fbc:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8003fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003ffc <BSP_AUDIO_IN_InitEx+0xd4>)
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003fc2:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e001      	b.n	8003fce <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8003fce:	7ffb      	ldrb	r3, [r7, #31]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d107      	bne.n	8003fe4 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8003fd4:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <BSP_AUDIO_IN_InitEx+0xd4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681c      	ldr	r4, [r3, #0]
 8003fda:	89f9      	ldrh	r1, [r7, #14]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2264      	movs	r2, #100	@ 0x64
 8003fe0:	2034      	movs	r0, #52	@ 0x34
 8003fe2:	47a0      	blx	r4
    }
  }
  return ret;
 8003fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	@ 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd90      	pop	{r4, r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	200206f4 	.word	0x200206f4
 8003ff4:	40015c24 	.word	0x40015c24
 8003ff8:	20000004 	.word	0x20000004
 8003ffc:	2002066c 	.word	0x2002066c

08004000 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4805      	ldr	r0, [pc, #20]	@ (800402c <BSP_AUDIO_IN_Record+0x2c>)
 8004018:	f003 ff22 	bl	8007e60 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	b2db      	uxtb	r3, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	200206f4 	.word	0x200206f4

08004030 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8004038:	480c      	ldr	r0, [pc, #48]	@ (800406c <BSP_AUDIO_IN_Stop+0x3c>)
 800403a:	f003 fd6a 	bl	8007b12 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800403e:	4b0c      	ldr	r3, [pc, #48]	@ (8004070 <BSP_AUDIO_IN_Stop+0x40>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	2034      	movs	r0, #52	@ 0x34
 8004048:	4798      	blx	r3
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e006      	b.n	8004062 <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d102      	bne.n	8004060 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 800405a:	2001      	movs	r0, #1
 800405c:	f000 f9fa 	bl	8004454 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004060:	2300      	movs	r3, #0
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200206f4 	.word	0x200206f4
 8004070:	2002066c 	.word	0x2002066c

08004074 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800407c:	f7fd fbf4 	bl	8001868 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004080:	bf00      	nop
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8004090:	f7fd fbf8 	bl	8001884 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08c      	sub	sp, #48	@ 0x30
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80040a6:	4b50      	ldr	r3, [pc, #320]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	4a4f      	ldr	r2, [pc, #316]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80040ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80040b2:	4b4d      	ldr	r3, [pc, #308]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80040be:	4b4a      	ldr	r3, [pc, #296]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	4a49      	ldr	r2, [pc, #292]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80040c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ca:	4b47      	ldr	r3, [pc, #284]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80040d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040da:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80040dc:	2302      	movs	r3, #2
 80040de:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80040e4:	2302      	movs	r3, #2
 80040e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80040e8:	230a      	movs	r3, #10
 80040ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80040ec:	f107 031c 	add.w	r3, r7, #28
 80040f0:	4619      	mov	r1, r3
 80040f2:	483e      	ldr	r0, [pc, #248]	@ (80041ec <BSP_AUDIO_IN_MspInit+0x150>)
 80040f4:	f000 ff7e 	bl	8004ff4 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 80040f8:	4b3b      	ldr	r3, [pc, #236]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	4a3a      	ldr	r2, [pc, #232]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80040fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004102:	6313      	str	r3, [r2, #48]	@ 0x30
 8004104:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8004110:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004114:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004116:	2300      	movs	r3, #0
 8004118:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800411e:	2302      	movs	r3, #2
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8004122:	f107 031c 	add.w	r3, r7, #28
 8004126:	4619      	mov	r1, r3
 8004128:	4831      	ldr	r0, [pc, #196]	@ (80041f0 <BSP_AUDIO_IN_MspInit+0x154>)
 800412a:	f000 ff63 	bl	8004ff4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800412e:	4b2e      	ldr	r3, [pc, #184]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	4a2d      	ldr	r2, [pc, #180]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004134:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004138:	6313      	str	r3, [r2, #48]	@ 0x30
 800413a:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <BSP_AUDIO_IN_MspInit+0x14c>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2a      	ldr	r2, [pc, #168]	@ (80041f4 <BSP_AUDIO_IN_MspInit+0x158>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d137      	bne.n	80041c0 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004150:	4b29      	ldr	r3, [pc, #164]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004152:	2200      	movs	r2, #0
 8004154:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004156:	4b28      	ldr	r3, [pc, #160]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800415c:	4b26      	ldr	r3, [pc, #152]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800415e:	2200      	movs	r2, #0
 8004160:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004162:	4b25      	ldr	r3, [pc, #148]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004168:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800416a:	4b23      	ldr	r3, [pc, #140]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800416c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004170:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004172:	4b21      	ldr	r3, [pc, #132]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004174:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004178:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800417a:	4b1f      	ldr	r3, [pc, #124]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800417c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004180:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004182:	4b1d      	ldr	r3, [pc, #116]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004184:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004188:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800418a:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800418c:	2200      	movs	r2, #0
 800418e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004190:	4b19      	ldr	r3, [pc, #100]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004192:	2203      	movs	r2, #3
 8004194:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004196:	4b18      	ldr	r3, [pc, #96]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004198:	2200      	movs	r2, #0
 800419a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800419c:	4b16      	ldr	r3, [pc, #88]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80041a2:	4b15      	ldr	r3, [pc, #84]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 80041a4:	4a15      	ldr	r2, [pc, #84]	@ (80041fc <BSP_AUDIO_IN_MspInit+0x160>)
 80041a6:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a13      	ldr	r2, [pc, #76]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 80041ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80041ae:	4a12      	ldr	r2, [pc, #72]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 80041b4:	4810      	ldr	r0, [pc, #64]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 80041b6:	f000 fb63 	bl	8004880 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80041ba:	480f      	ldr	r0, [pc, #60]	@ (80041f8 <BSP_AUDIO_IN_MspInit+0x15c>)
 80041bc:	f000 fab2 	bl	8004724 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80041c0:	2200      	movs	r2, #0
 80041c2:	210f      	movs	r1, #15
 80041c4:	2046      	movs	r0, #70	@ 0x46
 80041c6:	f000 fa68 	bl	800469a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80041ca:	2046      	movs	r0, #70	@ 0x46
 80041cc:	f000 fa81 	bl	80046d2 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80041d0:	2200      	movs	r2, #0
 80041d2:	210f      	movs	r1, #15
 80041d4:	2028      	movs	r0, #40	@ 0x28
 80041d6:	f000 fa60 	bl	800469a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80041da:	2028      	movs	r0, #40	@ 0x28
 80041dc:	f000 fa79 	bl	80046d2 <HAL_NVIC_EnableIRQ>
}
 80041e0:	bf00      	nop
 80041e2:	3730      	adds	r7, #48	@ 0x30
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40021800 	.word	0x40021800
 80041f0:	40021c00 	.word	0x40021c00
 80041f4:	40015c24 	.word	0x40015c24
 80041f8:	200207d8 	.word	0x200207d8
 80041fc:	400264b8 	.word	0x400264b8

08004200 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800420c:	4b53      	ldr	r3, [pc, #332]	@ (800435c <SAIx_In_Init+0x15c>)
 800420e:	4a54      	ldr	r2, [pc, #336]	@ (8004360 <SAIx_In_Init+0x160>)
 8004210:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8004212:	4b52      	ldr	r3, [pc, #328]	@ (800435c <SAIx_In_Init+0x15c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b50      	ldr	r3, [pc, #320]	@ (800435c <SAIx_In_Init+0x15c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004220:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004222:	4a4e      	ldr	r2, [pc, #312]	@ (800435c <SAIx_In_Init+0x15c>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004228:	4a4c      	ldr	r2, [pc, #304]	@ (800435c <SAIx_In_Init+0x15c>)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800422e:	4b4b      	ldr	r3, [pc, #300]	@ (800435c <SAIx_In_Init+0x15c>)
 8004230:	2200      	movs	r2, #0
 8004232:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004234:	4b49      	ldr	r3, [pc, #292]	@ (800435c <SAIx_In_Init+0x15c>)
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800423a:	4b48      	ldr	r3, [pc, #288]	@ (800435c <SAIx_In_Init+0x15c>)
 800423c:	2280      	movs	r2, #128	@ 0x80
 800423e:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004240:	4b46      	ldr	r3, [pc, #280]	@ (800435c <SAIx_In_Init+0x15c>)
 8004242:	2200      	movs	r2, #0
 8004244:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004246:	4b45      	ldr	r3, [pc, #276]	@ (800435c <SAIx_In_Init+0x15c>)
 8004248:	2201      	movs	r2, #1
 800424a:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800424c:	4b43      	ldr	r3, [pc, #268]	@ (800435c <SAIx_In_Init+0x15c>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004252:	4b42      	ldr	r3, [pc, #264]	@ (800435c <SAIx_In_Init+0x15c>)
 8004254:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004258:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800425a:	4b40      	ldr	r3, [pc, #256]	@ (800435c <SAIx_In_Init+0x15c>)
 800425c:	2201      	movs	r2, #1
 800425e:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004260:	4b3e      	ldr	r3, [pc, #248]	@ (800435c <SAIx_In_Init+0x15c>)
 8004262:	2240      	movs	r2, #64	@ 0x40
 8004264:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004266:	4b3d      	ldr	r3, [pc, #244]	@ (800435c <SAIx_In_Init+0x15c>)
 8004268:	2220      	movs	r2, #32
 800426a:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800426c:	4b3b      	ldr	r3, [pc, #236]	@ (800435c <SAIx_In_Init+0x15c>)
 800426e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004272:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004274:	4b39      	ldr	r3, [pc, #228]	@ (800435c <SAIx_In_Init+0x15c>)
 8004276:	2200      	movs	r2, #0
 8004278:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800427a:	4b38      	ldr	r3, [pc, #224]	@ (800435c <SAIx_In_Init+0x15c>)
 800427c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004280:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004282:	4b36      	ldr	r3, [pc, #216]	@ (800435c <SAIx_In_Init+0x15c>)
 8004284:	2200      	movs	r2, #0
 8004286:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004288:	4b34      	ldr	r3, [pc, #208]	@ (800435c <SAIx_In_Init+0x15c>)
 800428a:	2200      	movs	r2, #0
 800428c:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 800428e:	4b33      	ldr	r3, [pc, #204]	@ (800435c <SAIx_In_Init+0x15c>)
 8004290:	2204      	movs	r2, #4
 8004292:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004294:	4a31      	ldr	r2, [pc, #196]	@ (800435c <SAIx_In_Init+0x15c>)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 800429a:	4830      	ldr	r0, [pc, #192]	@ (800435c <SAIx_In_Init+0x15c>)
 800429c:	f003 fa86 	bl	80077ac <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80042a0:	4b30      	ldr	r3, [pc, #192]	@ (8004364 <SAIx_In_Init+0x164>)
 80042a2:	4a31      	ldr	r2, [pc, #196]	@ (8004368 <SAIx_In_Init+0x168>)
 80042a4:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80042a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004364 <SAIx_In_Init+0x164>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004364 <SAIx_In_Init+0x164>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80042b4:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80042b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004364 <SAIx_In_Init+0x164>)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80042bc:	4b29      	ldr	r3, [pc, #164]	@ (8004364 <SAIx_In_Init+0x164>)
 80042be:	2203      	movs	r2, #3
 80042c0:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80042c2:	4b28      	ldr	r3, [pc, #160]	@ (8004364 <SAIx_In_Init+0x164>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80042c8:	4b26      	ldr	r3, [pc, #152]	@ (8004364 <SAIx_In_Init+0x164>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80042ce:	4b25      	ldr	r3, [pc, #148]	@ (8004364 <SAIx_In_Init+0x164>)
 80042d0:	2280      	movs	r2, #128	@ 0x80
 80042d2:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80042d4:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <SAIx_In_Init+0x164>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80042da:	4b22      	ldr	r3, [pc, #136]	@ (8004364 <SAIx_In_Init+0x164>)
 80042dc:	2201      	movs	r2, #1
 80042de:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80042e0:	4b20      	ldr	r3, [pc, #128]	@ (8004364 <SAIx_In_Init+0x164>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80042e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004364 <SAIx_In_Init+0x164>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80042ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004364 <SAIx_In_Init+0x164>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 80042f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004364 <SAIx_In_Init+0x164>)
 80042f4:	2240      	movs	r2, #64	@ 0x40
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80042f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <SAIx_In_Init+0x164>)
 80042fa:	2220      	movs	r2, #32
 80042fc:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80042fe:	4b19      	ldr	r3, [pc, #100]	@ (8004364 <SAIx_In_Init+0x164>)
 8004300:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004304:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004306:	4b17      	ldr	r3, [pc, #92]	@ (8004364 <SAIx_In_Init+0x164>)
 8004308:	2200      	movs	r2, #0
 800430a:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800430c:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <SAIx_In_Init+0x164>)
 800430e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004312:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8004314:	4b13      	ldr	r3, [pc, #76]	@ (8004364 <SAIx_In_Init+0x164>)
 8004316:	2200      	movs	r2, #0
 8004318:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800431a:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <SAIx_In_Init+0x164>)
 800431c:	2200      	movs	r2, #0
 800431e:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004320:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <SAIx_In_Init+0x164>)
 8004322:	2204      	movs	r2, #4
 8004324:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8004326:	4a0f      	ldr	r2, [pc, #60]	@ (8004364 <SAIx_In_Init+0x164>)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 800432c:	480d      	ldr	r0, [pc, #52]	@ (8004364 <SAIx_In_Init+0x164>)
 800432e:	f003 fa3d 	bl	80077ac <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004332:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <SAIx_In_Init+0x15c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b08      	ldr	r3, [pc, #32]	@ (800435c <SAIx_In_Init+0x15c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004340:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8004342:	4b08      	ldr	r3, [pc, #32]	@ (8004364 <SAIx_In_Init+0x164>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <SAIx_In_Init+0x164>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004350:	601a      	str	r2, [r3, #0]
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20020670 	.word	0x20020670
 8004360:	40015c04 	.word	0x40015c04
 8004364:	200206f4 	.word	0x200206f4
 8004368:	40015c24 	.word	0x40015c24

0800436c <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004370:	4b07      	ldr	r3, [pc, #28]	@ (8004390 <SAIx_In_DeInit+0x24>)
 8004372:	4a08      	ldr	r2, [pc, #32]	@ (8004394 <SAIx_In_DeInit+0x28>)
 8004374:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004376:	4b06      	ldr	r3, [pc, #24]	@ (8004390 <SAIx_In_DeInit+0x24>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b04      	ldr	r3, [pc, #16]	@ (8004390 <SAIx_In_DeInit+0x24>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004384:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8004386:	4802      	ldr	r0, [pc, #8]	@ (8004390 <SAIx_In_DeInit+0x24>)
 8004388:	f003 fb8e 	bl	8007aa8 <HAL_SAI_DeInit>
}
 800438c:	bf00      	nop
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200206f4 	.word	0x200206f4
 8004394:	40015c24 	.word	0x40015c24

08004398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800439c:	2003      	movs	r0, #3
 800439e:	f000 f971 	bl	8004684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043a2:	200f      	movs	r0, #15
 80043a4:	f000 f806 	bl	80043b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043a8:	f7fd fbd8 	bl	8001b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043bc:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <HAL_InitTick+0x54>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b12      	ldr	r3, [pc, #72]	@ (800440c <HAL_InitTick+0x58>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	4619      	mov	r1, r3
 80043c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 f999 	bl	800470a <HAL_SYSTICK_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e00e      	b.n	8004400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b0f      	cmp	r3, #15
 80043e6:	d80a      	bhi.n	80043fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043e8:	2200      	movs	r2, #0
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	f000 f953 	bl	800469a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043f4:	4a06      	ldr	r2, [pc, #24]	@ (8004410 <HAL_InitTick+0x5c>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000000 	.word	0x20000000
 800440c:	20000048 	.word	0x20000048
 8004410:	20000044 	.word	0x20000044

08004414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004418:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_IncTick+0x20>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	4b06      	ldr	r3, [pc, #24]	@ (8004438 <HAL_IncTick+0x24>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4413      	add	r3, r2
 8004424:	4a04      	ldr	r2, [pc, #16]	@ (8004438 <HAL_IncTick+0x24>)
 8004426:	6013      	str	r3, [r2, #0]
}
 8004428:	bf00      	nop
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000048 	.word	0x20000048
 8004438:	20020838 	.word	0x20020838

0800443c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return uwTick;
 8004440:	4b03      	ldr	r3, [pc, #12]	@ (8004450 <HAL_GetTick+0x14>)
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20020838 	.word	0x20020838

08004454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800445c:	f7ff ffee 	bl	800443c <HAL_GetTick>
 8004460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d005      	beq.n	800447a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800446e:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <HAL_Delay+0x44>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800447a:	bf00      	nop
 800447c:	f7ff ffde 	bl	800443c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d8f7      	bhi.n	800447c <HAL_Delay+0x28>
  {
  }
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000048 	.word	0x20000048

0800449c <__NVIC_SetPriorityGrouping>:
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <__NVIC_SetPriorityGrouping+0x40>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044b8:	4013      	ands	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044c4:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <__NVIC_SetPriorityGrouping+0x44>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ca:	4a04      	ldr	r2, [pc, #16]	@ (80044dc <__NVIC_SetPriorityGrouping+0x40>)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	60d3      	str	r3, [r2, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	e000ed00 	.word	0xe000ed00
 80044e0:	05fa0000 	.word	0x05fa0000

080044e4 <__NVIC_GetPriorityGrouping>:
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e8:	4b04      	ldr	r3, [pc, #16]	@ (80044fc <__NVIC_GetPriorityGrouping+0x18>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	0a1b      	lsrs	r3, r3, #8
 80044ee:	f003 0307 	and.w	r3, r3, #7
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <__NVIC_EnableIRQ>:
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	2b00      	cmp	r3, #0
 8004510:	db0b      	blt.n	800452a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	f003 021f 	and.w	r2, r3, #31
 8004518:	4907      	ldr	r1, [pc, #28]	@ (8004538 <__NVIC_EnableIRQ+0x38>)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2001      	movs	r0, #1
 8004522:	fa00 f202 	lsl.w	r2, r0, r2
 8004526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000e100 	.word	0xe000e100

0800453c <__NVIC_DisableIRQ>:
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	2b00      	cmp	r3, #0
 800454c:	db12      	blt.n	8004574 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	490a      	ldr	r1, [pc, #40]	@ (8004580 <__NVIC_DisableIRQ+0x44>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2001      	movs	r0, #1
 800455e:	fa00 f202 	lsl.w	r2, r0, r2
 8004562:	3320      	adds	r3, #32
 8004564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004568:	f3bf 8f4f 	dsb	sy
}
 800456c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800456e:	f3bf 8f6f 	isb	sy
}
 8004572:	bf00      	nop
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	e000e100 	.word	0xe000e100

08004584 <__NVIC_SetPriority>:
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	6039      	str	r1, [r7, #0]
 800458e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004594:	2b00      	cmp	r3, #0
 8004596:	db0a      	blt.n	80045ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	b2da      	uxtb	r2, r3
 800459c:	490c      	ldr	r1, [pc, #48]	@ (80045d0 <__NVIC_SetPriority+0x4c>)
 800459e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a2:	0112      	lsls	r2, r2, #4
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	440b      	add	r3, r1
 80045a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045ac:	e00a      	b.n	80045c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	4908      	ldr	r1, [pc, #32]	@ (80045d4 <__NVIC_SetPriority+0x50>)
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	3b04      	subs	r3, #4
 80045bc:	0112      	lsls	r2, r2, #4
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	440b      	add	r3, r1
 80045c2:	761a      	strb	r2, [r3, #24]
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	e000e100 	.word	0xe000e100
 80045d4:	e000ed00 	.word	0xe000ed00

080045d8 <NVIC_EncodePriority>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b089      	sub	sp, #36	@ 0x24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f1c3 0307 	rsb	r3, r3, #7
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	bf28      	it	cs
 80045f6:	2304      	movcs	r3, #4
 80045f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3304      	adds	r3, #4
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d902      	bls.n	8004608 <NVIC_EncodePriority+0x30>
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3b03      	subs	r3, #3
 8004606:	e000      	b.n	800460a <NVIC_EncodePriority+0x32>
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800460c:	f04f 32ff 	mov.w	r2, #4294967295
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43da      	mvns	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	401a      	ands	r2, r3
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004620:	f04f 31ff 	mov.w	r1, #4294967295
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	fa01 f303 	lsl.w	r3, r1, r3
 800462a:	43d9      	mvns	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004630:	4313      	orrs	r3, r2
}
 8004632:	4618      	mov	r0, r3
 8004634:	3724      	adds	r7, #36	@ 0x24
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3b01      	subs	r3, #1
 800464c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004650:	d301      	bcc.n	8004656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004652:	2301      	movs	r3, #1
 8004654:	e00f      	b.n	8004676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004656:	4a0a      	ldr	r2, [pc, #40]	@ (8004680 <SysTick_Config+0x40>)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3b01      	subs	r3, #1
 800465c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800465e:	210f      	movs	r1, #15
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	f7ff ff8e 	bl	8004584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004668:	4b05      	ldr	r3, [pc, #20]	@ (8004680 <SysTick_Config+0x40>)
 800466a:	2200      	movs	r2, #0
 800466c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800466e:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <SysTick_Config+0x40>)
 8004670:	2207      	movs	r2, #7
 8004672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	e000e010 	.word	0xe000e010

08004684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ff05 	bl	800449c <__NVIC_SetPriorityGrouping>
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	4603      	mov	r3, r0
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
 80046a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046ac:	f7ff ff1a 	bl	80044e4 <__NVIC_GetPriorityGrouping>
 80046b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	6978      	ldr	r0, [r7, #20]
 80046b8:	f7ff ff8e 	bl	80045d8 <NVIC_EncodePriority>
 80046bc:	4602      	mov	r2, r0
 80046be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c2:	4611      	mov	r1, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff5d 	bl	8004584 <__NVIC_SetPriority>
}
 80046ca:	bf00      	nop
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	4603      	mov	r3, r0
 80046da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff ff0d 	bl	8004500 <__NVIC_EnableIRQ>
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	4603      	mov	r3, r0
 80046f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff ff1d 	bl	800453c <__NVIC_DisableIRQ>
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff ff94 	bl	8004640 <SysTick_Config>
 8004718:	4603      	mov	r3, r0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004730:	f7ff fe84 	bl	800443c <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e099      	b.n	8004874 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004760:	e00f      	b.n	8004782 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004762:	f7ff fe6b 	bl	800443c <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b05      	cmp	r3, #5
 800476e:	d908      	bls.n	8004782 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e078      	b.n	8004874 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e8      	bne.n	8004762 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4b38      	ldr	r3, [pc, #224]	@ (800487c <HAL_DMA_Init+0x158>)
 800479c:	4013      	ands	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d107      	bne.n	80047ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	4313      	orrs	r3, r2
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f023 0307 	bic.w	r3, r3, #7
 8004802:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	2b04      	cmp	r3, #4
 8004814:	d117      	bne.n	8004846 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00e      	beq.n	8004846 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fb67 	bl	8004efc <DMA_CheckFifoParam>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2240      	movs	r2, #64	@ 0x40
 8004838:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004842:	2301      	movs	r3, #1
 8004844:	e016      	b.n	8004874 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fb1e 	bl	8004e90 <DMA_CalcBaseAndBitshift>
 8004854:	4603      	mov	r3, r0
 8004856:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485c:	223f      	movs	r2, #63	@ 0x3f
 800485e:	409a      	lsls	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	f010803f 	.word	0xf010803f

08004880 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e050      	b.n	8004934 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d101      	bne.n	80048a2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800489e:	2302      	movs	r3, #2
 80048a0:	e048      	b.n	8004934 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 0201 	bic.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2221      	movs	r2, #33	@ 0x21
 80048e0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fad4 	bl	8004e90 <DMA_CalcBaseAndBitshift>
 80048e8:	4603      	mov	r3, r0
 80048ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f0:	223f      	movs	r2, #63	@ 0x3f
 80048f2:	409a      	lsls	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004952:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_DMA_Start_IT+0x26>
 800495e:	2302      	movs	r3, #2
 8004960:	e048      	b.n	80049f4 <HAL_DMA_Start_IT+0xb8>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d137      	bne.n	80049e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fa52 	bl	8004e34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004994:	223f      	movs	r2, #63	@ 0x3f
 8004996:	409a      	lsls	r2, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0216 	orr.w	r2, r2, #22
 80049aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0208 	orr.w	r2, r2, #8
 80049d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	e005      	b.n	80049f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049ee:	2302      	movs	r3, #2
 80049f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a0a:	f7ff fd17 	bl	800443c <HAL_GetTick>
 8004a0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d008      	beq.n	8004a2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2280      	movs	r2, #128	@ 0x80
 8004a20:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e052      	b.n	8004ad4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0216 	bic.w	r2, r2, #22
 8004a3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <HAL_DMA_Abort+0x62>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0208 	bic.w	r2, r2, #8
 8004a6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a7e:	e013      	b.n	8004aa8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a80:	f7ff fcdc 	bl	800443c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	d90c      	bls.n	8004aa8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2203      	movs	r2, #3
 8004a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e015      	b.n	8004ad4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e4      	bne.n	8004a80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aba:	223f      	movs	r2, #63	@ 0x3f
 8004abc:	409a      	lsls	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d004      	beq.n	8004afa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2280      	movs	r2, #128	@ 0x80
 8004af4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e00c      	b.n	8004b14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2205      	movs	r2, #5
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8004d68 <HAL_DMA_IRQHandler+0x248>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a8e      	ldr	r2, [pc, #568]	@ (8004d6c <HAL_DMA_IRQHandler+0x24c>)
 8004b32:	fba2 2303 	umull	r2, r3, r2, r3
 8004b36:	0a9b      	lsrs	r3, r3, #10
 8004b38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01a      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d013      	beq.n	8004b8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0204 	bic.w	r2, r2, #4
 8004b72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b78:	2208      	movs	r2, #8
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b84:	f043 0201 	orr.w	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b90:	2201      	movs	r2, #1
 8004b92:	409a      	lsls	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d012      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bae:	2201      	movs	r2, #1
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bba:	f043 0202 	orr.w	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d012      	beq.n	8004bf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00b      	beq.n	8004bf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be4:	2204      	movs	r2, #4
 8004be6:	409a      	lsls	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf0:	f043 0204 	orr.w	r2, r3, #4
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d043      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d03c      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d018      	beq.n	8004c62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d108      	bne.n	8004c50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d024      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
 8004c4e:	e01f      	b.n	8004c90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01b      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
 8004c60:	e016      	b.n	8004c90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d107      	bne.n	8004c80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0208 	bic.w	r2, r2, #8
 8004c7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c94:	2220      	movs	r2, #32
 8004c96:	409a      	lsls	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 808f 	beq.w	8004dc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8087 	beq.w	8004dc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	d136      	bne.n	8004d38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0216 	bic.w	r2, r2, #22
 8004cd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ce8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <HAL_DMA_IRQHandler+0x1da>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0208 	bic.w	r2, r2, #8
 8004d08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0e:	223f      	movs	r2, #63	@ 0x3f
 8004d10:	409a      	lsls	r2, r3
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d07e      	beq.n	8004e2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
        }
        return;
 8004d36:	e079      	b.n	8004e2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01d      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10d      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d031      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	4798      	blx	r3
 8004d64:	e02c      	b.n	8004dc0 <HAL_DMA_IRQHandler+0x2a0>
 8004d66:	bf00      	nop
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d023      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
 8004d80:	e01e      	b.n	8004dc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10f      	bne.n	8004db0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0210 	bic.w	r2, r2, #16
 8004d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d032      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d022      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2205      	movs	r2, #5
 8004dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	3301      	adds	r3, #1
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d307      	bcc.n	8004e08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f2      	bne.n	8004dec <HAL_DMA_IRQHandler+0x2cc>
 8004e06:	e000      	b.n	8004e0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4798      	blx	r3
 8004e2a:	e000      	b.n	8004e2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e2c:	bf00      	nop
    }
  }
}
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b40      	cmp	r3, #64	@ 0x40
 8004e60:	d108      	bne.n	8004e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e72:	e007      	b.n	8004e84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	60da      	str	r2, [r3, #12]
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	3b10      	subs	r3, #16
 8004ea0:	4a13      	ldr	r2, [pc, #76]	@ (8004ef0 <DMA_CalcBaseAndBitshift+0x60>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004eaa:	4a12      	ldr	r2, [pc, #72]	@ (8004ef4 <DMA_CalcBaseAndBitshift+0x64>)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4413      	add	r3, r2
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d908      	bls.n	8004ed0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	1d1a      	adds	r2, r3, #4
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ece:	e006      	b.n	8004ede <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4b08      	ldr	r3, [pc, #32]	@ (8004ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	aaaaaaab 	.word	0xaaaaaaab
 8004ef4:	0800bbf4 	.word	0x0800bbf4
 8004ef8:	fffffc00 	.word	0xfffffc00

08004efc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d11f      	bne.n	8004f56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d856      	bhi.n	8004fca <DMA_CheckFifoParam+0xce>
 8004f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f24 <DMA_CheckFifoParam+0x28>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f47 	.word	0x08004f47
 8004f2c:	08004f35 	.word	0x08004f35
 8004f30:	08004fcb 	.word	0x08004fcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d046      	beq.n	8004fce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f44:	e043      	b.n	8004fce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f4e:	d140      	bne.n	8004fd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f54:	e03d      	b.n	8004fd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f5e:	d121      	bne.n	8004fa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d837      	bhi.n	8004fd6 <DMA_CheckFifoParam+0xda>
 8004f66:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <DMA_CheckFifoParam+0x70>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004f7d 	.word	0x08004f7d
 8004f70:	08004f83 	.word	0x08004f83
 8004f74:	08004f7d 	.word	0x08004f7d
 8004f78:	08004f95 	.word	0x08004f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f80:	e030      	b.n	8004fe4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d025      	beq.n	8004fda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f92:	e022      	b.n	8004fda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f9c:	d11f      	bne.n	8004fde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fa2:	e01c      	b.n	8004fde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d903      	bls.n	8004fb2 <DMA_CheckFifoParam+0xb6>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d003      	beq.n	8004fb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fb0:	e018      	b.n	8004fe4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb6:	e015      	b.n	8004fe4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00e      	beq.n	8004fe2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc8:	e00b      	b.n	8004fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8004fca:	bf00      	nop
 8004fcc:	e00a      	b.n	8004fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e008      	b.n	8004fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e006      	b.n	8004fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e004      	b.n	8004fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e002      	b.n	8004fe4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fe2:	bf00      	nop
    }
  } 
  
  return status; 
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop

08004ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b089      	sub	sp, #36	@ 0x24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800500a:	2300      	movs	r3, #0
 800500c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	e175      	b.n	8005300 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005014:	2201      	movs	r2, #1
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	429a      	cmp	r2, r3
 800502e:	f040 8164 	bne.w	80052fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b01      	cmp	r3, #1
 800503c:	d005      	beq.n	800504a <HAL_GPIO_Init+0x56>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d130      	bne.n	80050ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	2203      	movs	r2, #3
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4013      	ands	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4313      	orrs	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005080:	2201      	movs	r2, #1
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 0201 	and.w	r2, r3, #1
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d017      	beq.n	80050e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	2203      	movs	r2, #3
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4013      	ands	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d123      	bne.n	800513c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	08da      	lsrs	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3208      	adds	r2, #8
 80050fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	220f      	movs	r2, #15
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	08da      	lsrs	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3208      	adds	r2, #8
 8005136:	69b9      	ldr	r1, [r7, #24]
 8005138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	2203      	movs	r2, #3
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 0203 	and.w	r2, r3, #3
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80be 	beq.w	80052fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800517e:	4b66      	ldr	r3, [pc, #408]	@ (8005318 <HAL_GPIO_Init+0x324>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005182:	4a65      	ldr	r2, [pc, #404]	@ (8005318 <HAL_GPIO_Init+0x324>)
 8005184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005188:	6453      	str	r3, [r2, #68]	@ 0x44
 800518a:	4b63      	ldr	r3, [pc, #396]	@ (8005318 <HAL_GPIO_Init+0x324>)
 800518c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005196:	4a61      	ldr	r2, [pc, #388]	@ (800531c <HAL_GPIO_Init+0x328>)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	089b      	lsrs	r3, r3, #2
 800519c:	3302      	adds	r3, #2
 800519e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	220f      	movs	r2, #15
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43db      	mvns	r3, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4013      	ands	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a58      	ldr	r2, [pc, #352]	@ (8005320 <HAL_GPIO_Init+0x32c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d037      	beq.n	8005232 <HAL_GPIO_Init+0x23e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a57      	ldr	r2, [pc, #348]	@ (8005324 <HAL_GPIO_Init+0x330>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d031      	beq.n	800522e <HAL_GPIO_Init+0x23a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a56      	ldr	r2, [pc, #344]	@ (8005328 <HAL_GPIO_Init+0x334>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d02b      	beq.n	800522a <HAL_GPIO_Init+0x236>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a55      	ldr	r2, [pc, #340]	@ (800532c <HAL_GPIO_Init+0x338>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d025      	beq.n	8005226 <HAL_GPIO_Init+0x232>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a54      	ldr	r2, [pc, #336]	@ (8005330 <HAL_GPIO_Init+0x33c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01f      	beq.n	8005222 <HAL_GPIO_Init+0x22e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a53      	ldr	r2, [pc, #332]	@ (8005334 <HAL_GPIO_Init+0x340>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d019      	beq.n	800521e <HAL_GPIO_Init+0x22a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a52      	ldr	r2, [pc, #328]	@ (8005338 <HAL_GPIO_Init+0x344>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <HAL_GPIO_Init+0x226>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a51      	ldr	r2, [pc, #324]	@ (800533c <HAL_GPIO_Init+0x348>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00d      	beq.n	8005216 <HAL_GPIO_Init+0x222>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a50      	ldr	r2, [pc, #320]	@ (8005340 <HAL_GPIO_Init+0x34c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <HAL_GPIO_Init+0x21e>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a4f      	ldr	r2, [pc, #316]	@ (8005344 <HAL_GPIO_Init+0x350>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d101      	bne.n	800520e <HAL_GPIO_Init+0x21a>
 800520a:	2309      	movs	r3, #9
 800520c:	e012      	b.n	8005234 <HAL_GPIO_Init+0x240>
 800520e:	230a      	movs	r3, #10
 8005210:	e010      	b.n	8005234 <HAL_GPIO_Init+0x240>
 8005212:	2308      	movs	r3, #8
 8005214:	e00e      	b.n	8005234 <HAL_GPIO_Init+0x240>
 8005216:	2307      	movs	r3, #7
 8005218:	e00c      	b.n	8005234 <HAL_GPIO_Init+0x240>
 800521a:	2306      	movs	r3, #6
 800521c:	e00a      	b.n	8005234 <HAL_GPIO_Init+0x240>
 800521e:	2305      	movs	r3, #5
 8005220:	e008      	b.n	8005234 <HAL_GPIO_Init+0x240>
 8005222:	2304      	movs	r3, #4
 8005224:	e006      	b.n	8005234 <HAL_GPIO_Init+0x240>
 8005226:	2303      	movs	r3, #3
 8005228:	e004      	b.n	8005234 <HAL_GPIO_Init+0x240>
 800522a:	2302      	movs	r3, #2
 800522c:	e002      	b.n	8005234 <HAL_GPIO_Init+0x240>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <HAL_GPIO_Init+0x240>
 8005232:	2300      	movs	r3, #0
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	f002 0203 	and.w	r2, r2, #3
 800523a:	0092      	lsls	r2, r2, #2
 800523c:	4093      	lsls	r3, r2
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4313      	orrs	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005244:	4935      	ldr	r1, [pc, #212]	@ (800531c <HAL_GPIO_Init+0x328>)
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	3302      	adds	r3, #2
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005252:	4b3d      	ldr	r3, [pc, #244]	@ (8005348 <HAL_GPIO_Init+0x354>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	43db      	mvns	r3, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4013      	ands	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005276:	4a34      	ldr	r2, [pc, #208]	@ (8005348 <HAL_GPIO_Init+0x354>)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800527c:	4b32      	ldr	r3, [pc, #200]	@ (8005348 <HAL_GPIO_Init+0x354>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	43db      	mvns	r3, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4013      	ands	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052a0:	4a29      	ldr	r2, [pc, #164]	@ (8005348 <HAL_GPIO_Init+0x354>)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052a6:	4b28      	ldr	r3, [pc, #160]	@ (8005348 <HAL_GPIO_Init+0x354>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	43db      	mvns	r3, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4013      	ands	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005348 <HAL_GPIO_Init+0x354>)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <HAL_GPIO_Init+0x354>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	43db      	mvns	r3, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4013      	ands	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052f4:	4a14      	ldr	r2, [pc, #80]	@ (8005348 <HAL_GPIO_Init+0x354>)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3301      	adds	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2b0f      	cmp	r3, #15
 8005304:	f67f ae86 	bls.w	8005014 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	3724      	adds	r7, #36	@ 0x24
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40023800 	.word	0x40023800
 800531c:	40013800 	.word	0x40013800
 8005320:	40020000 	.word	0x40020000
 8005324:	40020400 	.word	0x40020400
 8005328:	40020800 	.word	0x40020800
 800532c:	40020c00 	.word	0x40020c00
 8005330:	40021000 	.word	0x40021000
 8005334:	40021400 	.word	0x40021400
 8005338:	40021800 	.word	0x40021800
 800533c:	40021c00 	.word	0x40021c00
 8005340:	40022000 	.word	0x40022000
 8005344:	40022400 	.word	0x40022400
 8005348:	40013c00 	.word	0x40013c00

0800534c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005356:	2300      	movs	r3, #0
 8005358:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800535e:	2300      	movs	r3, #0
 8005360:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	e0d9      	b.n	800551c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005368:	2201      	movs	r2, #1
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4013      	ands	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	429a      	cmp	r2, r3
 8005380:	f040 80c9 	bne.w	8005516 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005384:	4a6b      	ldr	r2, [pc, #428]	@ (8005534 <HAL_GPIO_DeInit+0x1e8>)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	089b      	lsrs	r3, r3, #2
 800538a:	3302      	adds	r3, #2
 800538c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005390:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	220f      	movs	r2, #15
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	4013      	ands	r3, r2
 80053a4:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a63      	ldr	r2, [pc, #396]	@ (8005538 <HAL_GPIO_DeInit+0x1ec>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d037      	beq.n	800541e <HAL_GPIO_DeInit+0xd2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a62      	ldr	r2, [pc, #392]	@ (800553c <HAL_GPIO_DeInit+0x1f0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d031      	beq.n	800541a <HAL_GPIO_DeInit+0xce>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a61      	ldr	r2, [pc, #388]	@ (8005540 <HAL_GPIO_DeInit+0x1f4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d02b      	beq.n	8005416 <HAL_GPIO_DeInit+0xca>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a60      	ldr	r2, [pc, #384]	@ (8005544 <HAL_GPIO_DeInit+0x1f8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d025      	beq.n	8005412 <HAL_GPIO_DeInit+0xc6>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a5f      	ldr	r2, [pc, #380]	@ (8005548 <HAL_GPIO_DeInit+0x1fc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01f      	beq.n	800540e <HAL_GPIO_DeInit+0xc2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a5e      	ldr	r2, [pc, #376]	@ (800554c <HAL_GPIO_DeInit+0x200>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d019      	beq.n	800540a <HAL_GPIO_DeInit+0xbe>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a5d      	ldr	r2, [pc, #372]	@ (8005550 <HAL_GPIO_DeInit+0x204>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_GPIO_DeInit+0xba>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a5c      	ldr	r2, [pc, #368]	@ (8005554 <HAL_GPIO_DeInit+0x208>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00d      	beq.n	8005402 <HAL_GPIO_DeInit+0xb6>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a5b      	ldr	r2, [pc, #364]	@ (8005558 <HAL_GPIO_DeInit+0x20c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <HAL_GPIO_DeInit+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a5a      	ldr	r2, [pc, #360]	@ (800555c <HAL_GPIO_DeInit+0x210>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d101      	bne.n	80053fa <HAL_GPIO_DeInit+0xae>
 80053f6:	2309      	movs	r3, #9
 80053f8:	e012      	b.n	8005420 <HAL_GPIO_DeInit+0xd4>
 80053fa:	230a      	movs	r3, #10
 80053fc:	e010      	b.n	8005420 <HAL_GPIO_DeInit+0xd4>
 80053fe:	2308      	movs	r3, #8
 8005400:	e00e      	b.n	8005420 <HAL_GPIO_DeInit+0xd4>
 8005402:	2307      	movs	r3, #7
 8005404:	e00c      	b.n	8005420 <HAL_GPIO_DeInit+0xd4>
 8005406:	2306      	movs	r3, #6
 8005408:	e00a      	b.n	8005420 <HAL_GPIO_DeInit+0xd4>
 800540a:	2305      	movs	r3, #5
 800540c:	e008      	b.n	8005420 <HAL_GPIO_DeInit+0xd4>
 800540e:	2304      	movs	r3, #4
 8005410:	e006      	b.n	8005420 <HAL_GPIO_DeInit+0xd4>
 8005412:	2303      	movs	r3, #3
 8005414:	e004      	b.n	8005420 <HAL_GPIO_DeInit+0xd4>
 8005416:	2302      	movs	r3, #2
 8005418:	e002      	b.n	8005420 <HAL_GPIO_DeInit+0xd4>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <HAL_GPIO_DeInit+0xd4>
 800541e:	2300      	movs	r3, #0
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	f002 0203 	and.w	r2, r2, #3
 8005426:	0092      	lsls	r2, r2, #2
 8005428:	4093      	lsls	r3, r2
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	d132      	bne.n	8005496 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005430:	4b4b      	ldr	r3, [pc, #300]	@ (8005560 <HAL_GPIO_DeInit+0x214>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	43db      	mvns	r3, r3
 8005438:	4949      	ldr	r1, [pc, #292]	@ (8005560 <HAL_GPIO_DeInit+0x214>)
 800543a:	4013      	ands	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800543e:	4b48      	ldr	r3, [pc, #288]	@ (8005560 <HAL_GPIO_DeInit+0x214>)
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	43db      	mvns	r3, r3
 8005446:	4946      	ldr	r1, [pc, #280]	@ (8005560 <HAL_GPIO_DeInit+0x214>)
 8005448:	4013      	ands	r3, r2
 800544a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800544c:	4b44      	ldr	r3, [pc, #272]	@ (8005560 <HAL_GPIO_DeInit+0x214>)
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	43db      	mvns	r3, r3
 8005454:	4942      	ldr	r1, [pc, #264]	@ (8005560 <HAL_GPIO_DeInit+0x214>)
 8005456:	4013      	ands	r3, r2
 8005458:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800545a:	4b41      	ldr	r3, [pc, #260]	@ (8005560 <HAL_GPIO_DeInit+0x214>)
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	43db      	mvns	r3, r3
 8005462:	493f      	ldr	r1, [pc, #252]	@ (8005560 <HAL_GPIO_DeInit+0x214>)
 8005464:	4013      	ands	r3, r2
 8005466:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	220f      	movs	r2, #15
 8005472:	fa02 f303 	lsl.w	r3, r2, r3
 8005476:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005478:	4a2e      	ldr	r2, [pc, #184]	@ (8005534 <HAL_GPIO_DeInit+0x1e8>)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	089b      	lsrs	r3, r3, #2
 800547e:	3302      	adds	r3, #2
 8005480:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	43da      	mvns	r2, r3
 8005488:	482a      	ldr	r0, [pc, #168]	@ (8005534 <HAL_GPIO_DeInit+0x1e8>)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	089b      	lsrs	r3, r3, #2
 800548e:	400a      	ands	r2, r1
 8005490:	3302      	adds	r3, #2
 8005492:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	2103      	movs	r1, #3
 80054a0:	fa01 f303 	lsl.w	r3, r1, r3
 80054a4:	43db      	mvns	r3, r3
 80054a6:	401a      	ands	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	08da      	lsrs	r2, r3, #3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3208      	adds	r2, #8
 80054b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	220f      	movs	r2, #15
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43db      	mvns	r3, r3
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	08d2      	lsrs	r2, r2, #3
 80054cc:	4019      	ands	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3208      	adds	r2, #8
 80054d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	2103      	movs	r1, #3
 80054e0:	fa01 f303 	lsl.w	r3, r1, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	401a      	ands	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	2101      	movs	r1, #1
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	fa01 f303 	lsl.w	r3, r1, r3
 80054f8:	43db      	mvns	r3, r3
 80054fa:	401a      	ands	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	2103      	movs	r1, #3
 800550a:	fa01 f303 	lsl.w	r3, r1, r3
 800550e:	43db      	mvns	r3, r3
 8005510:	401a      	ands	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	3301      	adds	r3, #1
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b0f      	cmp	r3, #15
 8005520:	f67f af22 	bls.w	8005368 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40013800 	.word	0x40013800
 8005538:	40020000 	.word	0x40020000
 800553c:	40020400 	.word	0x40020400
 8005540:	40020800 	.word	0x40020800
 8005544:	40020c00 	.word	0x40020c00
 8005548:	40021000 	.word	0x40021000
 800554c:	40021400 	.word	0x40021400
 8005550:	40021800 	.word	0x40021800
 8005554:	40021c00 	.word	0x40021c00
 8005558:	40022000 	.word	0x40022000
 800555c:	40022400 	.word	0x40022400
 8005560:	40013c00 	.word	0x40013c00

08005564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	887b      	ldrh	r3, [r7, #2]
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
 8005580:	e001      	b.n	8005586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800559e:	4b08      	ldr	r3, [pc, #32]	@ (80055c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055a0:	695a      	ldr	r2, [r3, #20]
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	4013      	ands	r3, r2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d006      	beq.n	80055b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055aa:	4a05      	ldr	r2, [pc, #20]	@ (80055c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055ac:	88fb      	ldrh	r3, [r7, #6]
 80055ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fc f914 	bl	80017e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40013c00 	.word	0x40013c00

080055c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e08b      	b.n	80056ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8b5 	bl	800575a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2224      	movs	r2, #36	@ 0x24
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005614:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005624:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d107      	bne.n	800563e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800563a:	609a      	str	r2, [r3, #8]
 800563c:	e006      	b.n	800564c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800564a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d108      	bne.n	8005666 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005662:	605a      	str	r2, [r3, #4]
 8005664:	e007      	b.n	8005676 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005674:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6859      	ldr	r1, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4b1d      	ldr	r3, [pc, #116]	@ (80056f8 <HAL_I2C_Init+0x134>)
 8005682:	430b      	orrs	r3, r1
 8005684:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005694:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69d9      	ldr	r1, [r3, #28]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	02008000 	.word	0x02008000

080056fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e021      	b.n	8005752 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2224      	movs	r2, #36	@ 0x24
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0201 	bic.w	r2, r2, #1
 8005724:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f821 	bl	800576e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	4608      	mov	r0, r1
 800578e:	4611      	mov	r1, r2
 8005790:	461a      	mov	r2, r3
 8005792:	4603      	mov	r3, r0
 8005794:	817b      	strh	r3, [r7, #10]
 8005796:	460b      	mov	r3, r1
 8005798:	813b      	strh	r3, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b20      	cmp	r3, #32
 80057a8:	f040 80f9 	bne.w	800599e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_I2C_Mem_Write+0x34>
 80057b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d105      	bne.n	80057c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0ed      	b.n	80059a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_I2C_Mem_Write+0x4e>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e0e6      	b.n	80059a0 <HAL_I2C_Mem_Write+0x21c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057da:	f7fe fe2f 	bl	800443c <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	2319      	movs	r3, #25
 80057e6:	2201      	movs	r2, #1
 80057e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fad1 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0d1      	b.n	80059a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2221      	movs	r2, #33	@ 0x21
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2240      	movs	r2, #64	@ 0x40
 8005808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800581c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005824:	88f8      	ldrh	r0, [r7, #6]
 8005826:	893a      	ldrh	r2, [r7, #8]
 8005828:	8979      	ldrh	r1, [r7, #10]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	4603      	mov	r3, r0
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f9e1 	bl	8005bfc <I2C_RequestMemoryWrite>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e0a9      	b.n	80059a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	2bff      	cmp	r3, #255	@ 0xff
 8005854:	d90e      	bls.n	8005874 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	22ff      	movs	r2, #255	@ 0xff
 800585a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005860:	b2da      	uxtb	r2, r3
 8005862:	8979      	ldrh	r1, [r7, #10]
 8005864:	2300      	movs	r3, #0
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fc55 	bl	800611c <I2C_TransferConfig>
 8005872:	e00f      	b.n	8005894 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005882:	b2da      	uxtb	r2, r3
 8005884:	8979      	ldrh	r1, [r7, #10]
 8005886:	2300      	movs	r3, #0
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fc44 	bl	800611c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fad4 	bl	8005e46 <I2C_WaitOnTXISFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e07b      	b.n	80059a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d034      	beq.n	800594c <HAL_I2C_Mem_Write+0x1c8>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d130      	bne.n	800594c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f0:	2200      	movs	r2, #0
 80058f2:	2180      	movs	r1, #128	@ 0x80
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fa4d 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e04d      	b.n	80059a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	2bff      	cmp	r3, #255	@ 0xff
 800590c:	d90e      	bls.n	800592c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	22ff      	movs	r2, #255	@ 0xff
 8005912:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005918:	b2da      	uxtb	r2, r3
 800591a:	8979      	ldrh	r1, [r7, #10]
 800591c:	2300      	movs	r3, #0
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 fbf9 	bl	800611c <I2C_TransferConfig>
 800592a:	e00f      	b.n	800594c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593a:	b2da      	uxtb	r2, r3
 800593c:	8979      	ldrh	r1, [r7, #10]
 800593e:	2300      	movs	r3, #0
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 fbe8 	bl	800611c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d19e      	bne.n	8005894 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 faba 	bl	8005ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e01a      	b.n	80059a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2220      	movs	r2, #32
 8005970:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6859      	ldr	r1, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <HAL_I2C_Mem_Write+0x224>)
 800597e:	400b      	ands	r3, r1
 8005980:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	fe00e800 	.word	0xfe00e800

080059ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	4608      	mov	r0, r1
 80059b6:	4611      	mov	r1, r2
 80059b8:	461a      	mov	r2, r3
 80059ba:	4603      	mov	r3, r0
 80059bc:	817b      	strh	r3, [r7, #10]
 80059be:	460b      	mov	r3, r1
 80059c0:	813b      	strh	r3, [r7, #8]
 80059c2:	4613      	mov	r3, r2
 80059c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	f040 80fd 	bne.w	8005bce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_I2C_Mem_Read+0x34>
 80059da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0f1      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_I2C_Mem_Read+0x4e>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e0ea      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x224>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a02:	f7fe fd1b 	bl	800443c <HAL_GetTick>
 8005a06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2319      	movs	r3, #25
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f9bd 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0d5      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2222      	movs	r2, #34	@ 0x22
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2240      	movs	r2, #64	@ 0x40
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a3a      	ldr	r2, [r7, #32]
 8005a3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a4c:	88f8      	ldrh	r0, [r7, #6]
 8005a4e:	893a      	ldrh	r2, [r7, #8]
 8005a50:	8979      	ldrh	r1, [r7, #10]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	9301      	str	r3, [sp, #4]
 8005a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f921 	bl	8005ca4 <I2C_RequestMemoryRead>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0ad      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2bff      	cmp	r3, #255	@ 0xff
 8005a7c:	d90e      	bls.n	8005a9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	8979      	ldrh	r1, [r7, #10]
 8005a8c:	4b52      	ldr	r3, [pc, #328]	@ (8005bd8 <HAL_I2C_Mem_Read+0x22c>)
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fb41 	bl	800611c <I2C_TransferConfig>
 8005a9a:	e00f      	b.n	8005abc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	8979      	ldrh	r1, [r7, #10]
 8005aae:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd8 <HAL_I2C_Mem_Read+0x22c>)
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fb30 	bl	800611c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2104      	movs	r1, #4
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f964 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e07c      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d034      	beq.n	8005b7c <HAL_I2C_Mem_Read+0x1d0>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d130      	bne.n	8005b7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b20:	2200      	movs	r2, #0
 8005b22:	2180      	movs	r1, #128	@ 0x80
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f935 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e04d      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2bff      	cmp	r3, #255	@ 0xff
 8005b3c:	d90e      	bls.n	8005b5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	8979      	ldrh	r1, [r7, #10]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fae1 	bl	800611c <I2C_TransferConfig>
 8005b5a:	e00f      	b.n	8005b7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	8979      	ldrh	r1, [r7, #10]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fad0 	bl	800611c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d19a      	bne.n	8005abc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f9a2 	bl	8005ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e01a      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6859      	ldr	r1, [r3, #4]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4b0b      	ldr	r3, [pc, #44]	@ (8005bdc <HAL_I2C_Mem_Read+0x230>)
 8005bae:	400b      	ands	r3, r1
 8005bb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e000      	b.n	8005bd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005bce:	2302      	movs	r3, #2
  }
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	80002400 	.word	0x80002400
 8005bdc:	fe00e800 	.word	0xfe00e800

08005be0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bee:	b2db      	uxtb	r3, r3
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	4608      	mov	r0, r1
 8005c06:	4611      	mov	r1, r2
 8005c08:	461a      	mov	r2, r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	817b      	strh	r3, [r7, #10]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	813b      	strh	r3, [r7, #8]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	8979      	ldrh	r1, [r7, #10]
 8005c1c:	4b20      	ldr	r3, [pc, #128]	@ (8005ca0 <I2C_RequestMemoryWrite+0xa4>)
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f000 fa79 	bl	800611c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	69b9      	ldr	r1, [r7, #24]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f909 	bl	8005e46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e02c      	b.n	8005c98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d105      	bne.n	8005c50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c44:	893b      	ldrh	r3, [r7, #8]
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c4e:	e015      	b.n	8005c7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c50:	893b      	ldrh	r3, [r7, #8]
 8005c52:	0a1b      	lsrs	r3, r3, #8
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	69b9      	ldr	r1, [r7, #24]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f8ef 	bl	8005e46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e012      	b.n	8005c98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c72:	893b      	ldrh	r3, [r7, #8]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2200      	movs	r2, #0
 8005c84:	2180      	movs	r1, #128	@ 0x80
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f884 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	80002000 	.word	0x80002000

08005ca4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	4608      	mov	r0, r1
 8005cae:	4611      	mov	r1, r2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	817b      	strh	r3, [r7, #10]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	813b      	strh	r3, [r7, #8]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	8979      	ldrh	r1, [r7, #10]
 8005cc4:	4b20      	ldr	r3, [pc, #128]	@ (8005d48 <I2C_RequestMemoryRead+0xa4>)
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fa26 	bl	800611c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	69b9      	ldr	r1, [r7, #24]
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f8b6 	bl	8005e46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e02c      	b.n	8005d3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d105      	bne.n	8005cf6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cea:	893b      	ldrh	r3, [r7, #8]
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cf4:	e015      	b.n	8005d22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cf6:	893b      	ldrh	r3, [r7, #8]
 8005cf8:	0a1b      	lsrs	r3, r3, #8
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	69b9      	ldr	r1, [r7, #24]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f89c 	bl	8005e46 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e012      	b.n	8005d3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d18:	893b      	ldrh	r3, [r7, #8]
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2140      	movs	r1, #64	@ 0x40
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f831 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	80002000 	.word	0x80002000

08005d4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d103      	bne.n	8005d6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2200      	movs	r2, #0
 8005d68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d007      	beq.n	8005d88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0201 	orr.w	r2, r2, #1
 8005d86:	619a      	str	r2, [r3, #24]
  }
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005da4:	e03b      	b.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	6839      	ldr	r1, [r7, #0]
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 f8d6 	bl	8005f5c <I2C_IsErrorOccurred>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e041      	b.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d02d      	beq.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc2:	f7fe fb3b 	bl	800443c <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d302      	bcc.n	8005dd8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d122      	bne.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	4013      	ands	r3, r2
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	bf0c      	ite	eq
 8005de8:	2301      	moveq	r3, #1
 8005dea:	2300      	movne	r3, #0
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d113      	bne.n	8005e1e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfa:	f043 0220 	orr.w	r2, r3, #32
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e00f      	b.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4013      	ands	r3, r2
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	bf0c      	ite	eq
 8005e2e:	2301      	moveq	r3, #1
 8005e30:	2300      	movne	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d0b4      	beq.n	8005da6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e52:	e033      	b.n	8005ebc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	68b9      	ldr	r1, [r7, #8]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f87f 	bl	8005f5c <I2C_IsErrorOccurred>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d001      	beq.n	8005e68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e031      	b.n	8005ecc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d025      	beq.n	8005ebc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e70:	f7fe fae4 	bl	800443c <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d302      	bcc.n	8005e86 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d11a      	bne.n	8005ebc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d013      	beq.n	8005ebc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e007      	b.n	8005ecc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d1c4      	bne.n	8005e54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ee0:	e02f      	b.n	8005f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 f838 	bl	8005f5c <I2C_IsErrorOccurred>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e02d      	b.n	8005f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef6:	f7fe faa1 	bl	800443c <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d302      	bcc.n	8005f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d11a      	bne.n	8005f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	d013      	beq.n	8005f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	f043 0220 	orr.w	r2, r3, #32
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e007      	b.n	8005f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d1c8      	bne.n	8005ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	@ 0x28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d068      	beq.n	800605a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2210      	movs	r2, #16
 8005f8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f90:	e049      	b.n	8006026 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d045      	beq.n	8006026 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7fe fa4f 	bl	800443c <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <I2C_IsErrorOccurred+0x54>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d13a      	bne.n	8006026 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fd2:	d121      	bne.n	8006018 <I2C_IsErrorOccurred+0xbc>
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fda:	d01d      	beq.n	8006018 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005fdc:	7cfb      	ldrb	r3, [r7, #19]
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d01a      	beq.n	8006018 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ff0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ff2:	f7fe fa23 	bl	800443c <HAL_GetTick>
 8005ff6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ff8:	e00e      	b.n	8006018 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ffa:	f7fe fa1f 	bl	800443c <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b19      	cmp	r3, #25
 8006006:	d907      	bls.n	8006018 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	f043 0320 	orr.w	r3, r3, #32
 800600e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006016:	e006      	b.n	8006026 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b20      	cmp	r3, #32
 8006024:	d1e9      	bne.n	8005ffa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b20      	cmp	r3, #32
 8006032:	d003      	beq.n	800603c <I2C_IsErrorOccurred+0xe0>
 8006034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0aa      	beq.n	8005f92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800603c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006040:	2b00      	cmp	r3, #0
 8006042:	d103      	bne.n	800604c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2220      	movs	r2, #32
 800604a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	f043 0304 	orr.w	r3, r3, #4
 8006052:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00b      	beq.n	8006084 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	f043 0301 	orr.w	r3, r3, #1
 8006072:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800607c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	f043 0308 	orr.w	r3, r3, #8
 8006094:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800609e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00b      	beq.n	80060c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	f043 0302 	orr.w	r3, r3, #2
 80060b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80060c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01c      	beq.n	800610a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff fe3b 	bl	8005d4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6859      	ldr	r1, [r3, #4]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006118 <I2C_IsErrorOccurred+0x1bc>)
 80060e2:	400b      	ands	r3, r1
 80060e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800610a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800610e:	4618      	mov	r0, r3
 8006110:	3728      	adds	r7, #40	@ 0x28
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	fe00e800 	.word	0xfe00e800

0800611c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	817b      	strh	r3, [r7, #10]
 800612a:	4613      	mov	r3, r2
 800612c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800612e:	897b      	ldrh	r3, [r7, #10]
 8006130:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006134:	7a7b      	ldrb	r3, [r7, #9]
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800613c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	4313      	orrs	r3, r2
 8006146:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800614a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	0d5b      	lsrs	r3, r3, #21
 8006156:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800615a:	4b08      	ldr	r3, [pc, #32]	@ (800617c <I2C_TransferConfig+0x60>)
 800615c:	430b      	orrs	r3, r1
 800615e:	43db      	mvns	r3, r3
 8006160:	ea02 0103 	and.w	r1, r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	03ff63ff 	.word	0x03ff63ff

08006180 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800618a:	4b23      	ldr	r3, [pc, #140]	@ (8006218 <HAL_PWREx_EnableOverDrive+0x98>)
 800618c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618e:	4a22      	ldr	r2, [pc, #136]	@ (8006218 <HAL_PWREx_EnableOverDrive+0x98>)
 8006190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006194:	6413      	str	r3, [r2, #64]	@ 0x40
 8006196:	4b20      	ldr	r3, [pc, #128]	@ (8006218 <HAL_PWREx_EnableOverDrive+0x98>)
 8006198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80061a2:	4b1e      	ldr	r3, [pc, #120]	@ (800621c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a1d      	ldr	r2, [pc, #116]	@ (800621c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061ae:	f7fe f945 	bl	800443c <HAL_GetTick>
 80061b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061b4:	e009      	b.n	80061ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061b6:	f7fe f941 	bl	800443c <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061c4:	d901      	bls.n	80061ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e022      	b.n	8006210 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061ca:	4b14      	ldr	r3, [pc, #80]	@ (800621c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d6:	d1ee      	bne.n	80061b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80061d8:	4b10      	ldr	r3, [pc, #64]	@ (800621c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a0f      	ldr	r2, [pc, #60]	@ (800621c <HAL_PWREx_EnableOverDrive+0x9c>)
 80061de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061e4:	f7fe f92a 	bl	800443c <HAL_GetTick>
 80061e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80061ea:	e009      	b.n	8006200 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061ec:	f7fe f926 	bl	800443c <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061fa:	d901      	bls.n	8006200 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e007      	b.n	8006210 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006200:	4b06      	ldr	r3, [pc, #24]	@ (800621c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800620c:	d1ee      	bne.n	80061ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40023800 	.word	0x40023800
 800621c:	40007000 	.word	0x40007000

08006220 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006228:	2300      	movs	r3, #0
 800622a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e291      	b.n	800675a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8087 	beq.w	8006352 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006244:	4b96      	ldr	r3, [pc, #600]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 030c 	and.w	r3, r3, #12
 800624c:	2b04      	cmp	r3, #4
 800624e:	d00c      	beq.n	800626a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006250:	4b93      	ldr	r3, [pc, #588]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 030c 	and.w	r3, r3, #12
 8006258:	2b08      	cmp	r3, #8
 800625a:	d112      	bne.n	8006282 <HAL_RCC_OscConfig+0x62>
 800625c:	4b90      	ldr	r3, [pc, #576]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006268:	d10b      	bne.n	8006282 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800626a:	4b8d      	ldr	r3, [pc, #564]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d06c      	beq.n	8006350 <HAL_RCC_OscConfig+0x130>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d168      	bne.n	8006350 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e26b      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800628a:	d106      	bne.n	800629a <HAL_RCC_OscConfig+0x7a>
 800628c:	4b84      	ldr	r3, [pc, #528]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a83      	ldr	r2, [pc, #524]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006296:	6013      	str	r3, [r2, #0]
 8006298:	e02e      	b.n	80062f8 <HAL_RCC_OscConfig+0xd8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10c      	bne.n	80062bc <HAL_RCC_OscConfig+0x9c>
 80062a2:	4b7f      	ldr	r3, [pc, #508]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a7e      	ldr	r2, [pc, #504]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	4b7c      	ldr	r3, [pc, #496]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a7b      	ldr	r2, [pc, #492]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	e01d      	b.n	80062f8 <HAL_RCC_OscConfig+0xd8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062c4:	d10c      	bne.n	80062e0 <HAL_RCC_OscConfig+0xc0>
 80062c6:	4b76      	ldr	r3, [pc, #472]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a75      	ldr	r2, [pc, #468]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	4b73      	ldr	r3, [pc, #460]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a72      	ldr	r2, [pc, #456]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e00b      	b.n	80062f8 <HAL_RCC_OscConfig+0xd8>
 80062e0:	4b6f      	ldr	r3, [pc, #444]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a6e      	ldr	r2, [pc, #440]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	4b6c      	ldr	r3, [pc, #432]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a6b      	ldr	r2, [pc, #428]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80062f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d013      	beq.n	8006328 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7fe f89c 	bl	800443c <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006308:	f7fe f898 	bl	800443c <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b64      	cmp	r3, #100	@ 0x64
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e21f      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631a:	4b61      	ldr	r3, [pc, #388]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f0      	beq.n	8006308 <HAL_RCC_OscConfig+0xe8>
 8006326:	e014      	b.n	8006352 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fe f888 	bl	800443c <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006330:	f7fe f884 	bl	800443c <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b64      	cmp	r3, #100	@ 0x64
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e20b      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006342:	4b57      	ldr	r3, [pc, #348]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x110>
 800634e:	e000      	b.n	8006352 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d069      	beq.n	8006432 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800635e:	4b50      	ldr	r3, [pc, #320]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 030c 	and.w	r3, r3, #12
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00b      	beq.n	8006382 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800636a:	4b4d      	ldr	r3, [pc, #308]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	2b08      	cmp	r3, #8
 8006374:	d11c      	bne.n	80063b0 <HAL_RCC_OscConfig+0x190>
 8006376:	4b4a      	ldr	r3, [pc, #296]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d116      	bne.n	80063b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006382:	4b47      	ldr	r3, [pc, #284]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d005      	beq.n	800639a <HAL_RCC_OscConfig+0x17a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d001      	beq.n	800639a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e1df      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639a:	4b41      	ldr	r3, [pc, #260]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	493d      	ldr	r1, [pc, #244]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ae:	e040      	b.n	8006432 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d023      	beq.n	8006400 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063b8:	4b39      	ldr	r3, [pc, #228]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a38      	ldr	r2, [pc, #224]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c4:	f7fe f83a 	bl	800443c <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063cc:	f7fe f836 	bl	800443c <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e1bd      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063de:	4b30      	ldr	r3, [pc, #192]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d0f0      	beq.n	80063cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ea:	4b2d      	ldr	r3, [pc, #180]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	00db      	lsls	r3, r3, #3
 80063f8:	4929      	ldr	r1, [pc, #164]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]
 80063fe:	e018      	b.n	8006432 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006400:	4b27      	ldr	r3, [pc, #156]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a26      	ldr	r2, [pc, #152]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640c:	f7fe f816 	bl	800443c <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006414:	f7fe f812 	bl	800443c <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e199      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	4b1e      	ldr	r3, [pc, #120]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f0      	bne.n	8006414 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d038      	beq.n	80064b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d019      	beq.n	800647a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006446:	4b16      	ldr	r3, [pc, #88]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800644a:	4a15      	ldr	r2, [pc, #84]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 800644c:	f043 0301 	orr.w	r3, r3, #1
 8006450:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006452:	f7fd fff3 	bl	800443c <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800645a:	f7fd ffef 	bl	800443c <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e176      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800646c:	4b0c      	ldr	r3, [pc, #48]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 800646e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f0      	beq.n	800645a <HAL_RCC_OscConfig+0x23a>
 8006478:	e01a      	b.n	80064b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800647a:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 800647c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647e:	4a08      	ldr	r2, [pc, #32]	@ (80064a0 <HAL_RCC_OscConfig+0x280>)
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006486:	f7fd ffd9 	bl	800443c <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800648c:	e00a      	b.n	80064a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800648e:	f7fd ffd5 	bl	800443c <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d903      	bls.n	80064a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e15c      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
 80064a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a4:	4b91      	ldr	r3, [pc, #580]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80064a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1ee      	bne.n	800648e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80a4 	beq.w	8006606 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064be:	4b8b      	ldr	r3, [pc, #556]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80064c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10d      	bne.n	80064e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ca:	4b88      	ldr	r3, [pc, #544]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80064cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ce:	4a87      	ldr	r2, [pc, #540]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80064d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80064d6:	4b85      	ldr	r3, [pc, #532]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064de:	60bb      	str	r3, [r7, #8]
 80064e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064e2:	2301      	movs	r3, #1
 80064e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064e6:	4b82      	ldr	r3, [pc, #520]	@ (80066f0 <HAL_RCC_OscConfig+0x4d0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d118      	bne.n	8006524 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80064f2:	4b7f      	ldr	r3, [pc, #508]	@ (80066f0 <HAL_RCC_OscConfig+0x4d0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a7e      	ldr	r2, [pc, #504]	@ (80066f0 <HAL_RCC_OscConfig+0x4d0>)
 80064f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064fe:	f7fd ff9d 	bl	800443c <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006506:	f7fd ff99 	bl	800443c <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b64      	cmp	r3, #100	@ 0x64
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e120      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006518:	4b75      	ldr	r3, [pc, #468]	@ (80066f0 <HAL_RCC_OscConfig+0x4d0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d106      	bne.n	800653a <HAL_RCC_OscConfig+0x31a>
 800652c:	4b6f      	ldr	r3, [pc, #444]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 800652e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006530:	4a6e      	ldr	r2, [pc, #440]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006532:	f043 0301 	orr.w	r3, r3, #1
 8006536:	6713      	str	r3, [r2, #112]	@ 0x70
 8006538:	e02d      	b.n	8006596 <HAL_RCC_OscConfig+0x376>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10c      	bne.n	800655c <HAL_RCC_OscConfig+0x33c>
 8006542:	4b6a      	ldr	r3, [pc, #424]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006546:	4a69      	ldr	r2, [pc, #420]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006548:	f023 0301 	bic.w	r3, r3, #1
 800654c:	6713      	str	r3, [r2, #112]	@ 0x70
 800654e:	4b67      	ldr	r3, [pc, #412]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006552:	4a66      	ldr	r2, [pc, #408]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006554:	f023 0304 	bic.w	r3, r3, #4
 8006558:	6713      	str	r3, [r2, #112]	@ 0x70
 800655a:	e01c      	b.n	8006596 <HAL_RCC_OscConfig+0x376>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2b05      	cmp	r3, #5
 8006562:	d10c      	bne.n	800657e <HAL_RCC_OscConfig+0x35e>
 8006564:	4b61      	ldr	r3, [pc, #388]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006568:	4a60      	ldr	r2, [pc, #384]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 800656a:	f043 0304 	orr.w	r3, r3, #4
 800656e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006570:	4b5e      	ldr	r3, [pc, #376]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006574:	4a5d      	ldr	r2, [pc, #372]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	6713      	str	r3, [r2, #112]	@ 0x70
 800657c:	e00b      	b.n	8006596 <HAL_RCC_OscConfig+0x376>
 800657e:	4b5b      	ldr	r3, [pc, #364]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006582:	4a5a      	ldr	r2, [pc, #360]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	6713      	str	r3, [r2, #112]	@ 0x70
 800658a:	4b58      	ldr	r3, [pc, #352]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 800658c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800658e:	4a57      	ldr	r2, [pc, #348]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006590:	f023 0304 	bic.w	r3, r3, #4
 8006594:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d015      	beq.n	80065ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800659e:	f7fd ff4d 	bl	800443c <HAL_GetTick>
 80065a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065a4:	e00a      	b.n	80065bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a6:	f7fd ff49 	bl	800443c <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e0ce      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065bc:	4b4b      	ldr	r3, [pc, #300]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0ee      	beq.n	80065a6 <HAL_RCC_OscConfig+0x386>
 80065c8:	e014      	b.n	80065f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ca:	f7fd ff37 	bl	800443c <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d0:	e00a      	b.n	80065e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d2:	f7fd ff33 	bl	800443c <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e0b8      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065e8:	4b40      	ldr	r3, [pc, #256]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ee      	bne.n	80065d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d105      	bne.n	8006606 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065fa:	4b3c      	ldr	r3, [pc, #240]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80065fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fe:	4a3b      	ldr	r2, [pc, #236]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006600:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006604:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 80a4 	beq.w	8006758 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006610:	4b36      	ldr	r3, [pc, #216]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 030c 	and.w	r3, r3, #12
 8006618:	2b08      	cmp	r3, #8
 800661a:	d06b      	beq.n	80066f4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d149      	bne.n	80066b8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006624:	4b31      	ldr	r3, [pc, #196]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a30      	ldr	r2, [pc, #192]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 800662a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800662e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006630:	f7fd ff04 	bl	800443c <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006638:	f7fd ff00 	bl	800443c <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e087      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664a:	4b28      	ldr	r3, [pc, #160]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	019b      	lsls	r3, r3, #6
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	3b01      	subs	r3, #1
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	4313      	orrs	r3, r2
 800667c:	4a1b      	ldr	r2, [pc, #108]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 800667e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006682:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006684:	4b19      	ldr	r3, [pc, #100]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a18      	ldr	r2, [pc, #96]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 800668a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800668e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fd fed4 	bl	800443c <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006698:	f7fd fed0 	bl	800443c <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e057      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066aa:	4b10      	ldr	r3, [pc, #64]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f0      	beq.n	8006698 <HAL_RCC_OscConfig+0x478>
 80066b6:	e04f      	b.n	8006758 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b8:	4b0c      	ldr	r3, [pc, #48]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a0b      	ldr	r2, [pc, #44]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80066be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c4:	f7fd feba 	bl	800443c <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066cc:	f7fd feb6 	bl	800443c <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e03d      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066de:	4b03      	ldr	r3, [pc, #12]	@ (80066ec <HAL_RCC_OscConfig+0x4cc>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0x4ac>
 80066ea:	e035      	b.n	8006758 <HAL_RCC_OscConfig+0x538>
 80066ec:	40023800 	.word	0x40023800
 80066f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80066f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006764 <HAL_RCC_OscConfig+0x544>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d028      	beq.n	8006754 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800670c:	429a      	cmp	r2, r3
 800670e:	d121      	bne.n	8006754 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800671a:	429a      	cmp	r2, r3
 800671c:	d11a      	bne.n	8006754 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006724:	4013      	ands	r3, r2
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800672a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800672c:	4293      	cmp	r3, r2
 800672e:	d111      	bne.n	8006754 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	3b01      	subs	r3, #1
 800673e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006740:	429a      	cmp	r2, r3
 8006742:	d107      	bne.n	8006754 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006750:	429a      	cmp	r2, r3
 8006752:	d001      	beq.n	8006758 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40023800 	.word	0x40023800

08006768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e0d0      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006780:	4b6a      	ldr	r3, [pc, #424]	@ (800692c <HAL_RCC_ClockConfig+0x1c4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d910      	bls.n	80067b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800678e:	4b67      	ldr	r3, [pc, #412]	@ (800692c <HAL_RCC_ClockConfig+0x1c4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f023 020f 	bic.w	r2, r3, #15
 8006796:	4965      	ldr	r1, [pc, #404]	@ (800692c <HAL_RCC_ClockConfig+0x1c4>)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	4313      	orrs	r3, r2
 800679c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800679e:	4b63      	ldr	r3, [pc, #396]	@ (800692c <HAL_RCC_ClockConfig+0x1c4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d001      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e0b8      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d020      	beq.n	80067fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067c8:	4b59      	ldr	r3, [pc, #356]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	4a58      	ldr	r2, [pc, #352]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 80067ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80067d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0308 	and.w	r3, r3, #8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067e0:	4b53      	ldr	r3, [pc, #332]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	4a52      	ldr	r2, [pc, #328]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 80067e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ec:	4b50      	ldr	r3, [pc, #320]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	494d      	ldr	r1, [pc, #308]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d040      	beq.n	800688c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d107      	bne.n	8006822 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006812:	4b47      	ldr	r3, [pc, #284]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d115      	bne.n	800684a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e07f      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d107      	bne.n	800683a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682a:	4b41      	ldr	r3, [pc, #260]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e073      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800683a:	4b3d      	ldr	r3, [pc, #244]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e06b      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800684a:	4b39      	ldr	r3, [pc, #228]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f023 0203 	bic.w	r2, r3, #3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4936      	ldr	r1, [pc, #216]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 8006858:	4313      	orrs	r3, r2
 800685a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800685c:	f7fd fdee 	bl	800443c <HAL_GetTick>
 8006860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006862:	e00a      	b.n	800687a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006864:	f7fd fdea 	bl	800443c <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006872:	4293      	cmp	r3, r2
 8006874:	d901      	bls.n	800687a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e053      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687a:	4b2d      	ldr	r3, [pc, #180]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 020c 	and.w	r2, r3, #12
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	429a      	cmp	r2, r3
 800688a:	d1eb      	bne.n	8006864 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800688c:	4b27      	ldr	r3, [pc, #156]	@ (800692c <HAL_RCC_ClockConfig+0x1c4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d210      	bcs.n	80068bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b24      	ldr	r3, [pc, #144]	@ (800692c <HAL_RCC_ClockConfig+0x1c4>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 020f 	bic.w	r2, r3, #15
 80068a2:	4922      	ldr	r1, [pc, #136]	@ (800692c <HAL_RCC_ClockConfig+0x1c4>)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068aa:	4b20      	ldr	r3, [pc, #128]	@ (800692c <HAL_RCC_ClockConfig+0x1c4>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e032      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d008      	beq.n	80068da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068c8:	4b19      	ldr	r3, [pc, #100]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	4916      	ldr	r1, [pc, #88]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068e6:	4b12      	ldr	r3, [pc, #72]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	490e      	ldr	r1, [pc, #56]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068fa:	f000 f821 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 80068fe:	4602      	mov	r2, r0
 8006900:	4b0b      	ldr	r3, [pc, #44]	@ (8006930 <HAL_RCC_ClockConfig+0x1c8>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	091b      	lsrs	r3, r3, #4
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	490a      	ldr	r1, [pc, #40]	@ (8006934 <HAL_RCC_ClockConfig+0x1cc>)
 800690c:	5ccb      	ldrb	r3, [r1, r3]
 800690e:	fa22 f303 	lsr.w	r3, r2, r3
 8006912:	4a09      	ldr	r2, [pc, #36]	@ (8006938 <HAL_RCC_ClockConfig+0x1d0>)
 8006914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006916:	4b09      	ldr	r3, [pc, #36]	@ (800693c <HAL_RCC_ClockConfig+0x1d4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4618      	mov	r0, r3
 800691c:	f7fd fd4a 	bl	80043b4 <HAL_InitTick>

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40023c00 	.word	0x40023c00
 8006930:	40023800 	.word	0x40023800
 8006934:	0800bbd4 	.word	0x0800bbd4
 8006938:	20000000 	.word	0x20000000
 800693c:	20000044 	.word	0x20000044

08006940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006944:	b090      	sub	sp, #64	@ 0x40
 8006946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	637b      	str	r3, [r7, #52]	@ 0x34
 800694c:	2300      	movs	r3, #0
 800694e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006950:	2300      	movs	r3, #0
 8006952:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006958:	4b59      	ldr	r3, [pc, #356]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 030c 	and.w	r3, r3, #12
 8006960:	2b08      	cmp	r3, #8
 8006962:	d00d      	beq.n	8006980 <HAL_RCC_GetSysClockFreq+0x40>
 8006964:	2b08      	cmp	r3, #8
 8006966:	f200 80a1 	bhi.w	8006aac <HAL_RCC_GetSysClockFreq+0x16c>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <HAL_RCC_GetSysClockFreq+0x34>
 800696e:	2b04      	cmp	r3, #4
 8006970:	d003      	beq.n	800697a <HAL_RCC_GetSysClockFreq+0x3a>
 8006972:	e09b      	b.n	8006aac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006974:	4b53      	ldr	r3, [pc, #332]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006976:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006978:	e09b      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800697a:	4b53      	ldr	r3, [pc, #332]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 800697c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800697e:	e098      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006980:	4b4f      	ldr	r3, [pc, #316]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006988:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800698a:	4b4d      	ldr	r3, [pc, #308]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d028      	beq.n	80069e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006996:	4b4a      	ldr	r3, [pc, #296]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	099b      	lsrs	r3, r3, #6
 800699c:	2200      	movs	r2, #0
 800699e:	623b      	str	r3, [r7, #32]
 80069a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80069a8:	2100      	movs	r1, #0
 80069aa:	4b47      	ldr	r3, [pc, #284]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80069ac:	fb03 f201 	mul.w	r2, r3, r1
 80069b0:	2300      	movs	r3, #0
 80069b2:	fb00 f303 	mul.w	r3, r0, r3
 80069b6:	4413      	add	r3, r2
 80069b8:	4a43      	ldr	r2, [pc, #268]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80069ba:	fba0 1202 	umull	r1, r2, r0, r2
 80069be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069c0:	460a      	mov	r2, r1
 80069c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80069c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069c6:	4413      	add	r3, r2
 80069c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069cc:	2200      	movs	r2, #0
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	61fa      	str	r2, [r7, #28]
 80069d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80069da:	f7fa f905 	bl	8000be8 <__aeabi_uldivmod>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4613      	mov	r3, r2
 80069e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e6:	e053      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069e8:	4b35      	ldr	r3, [pc, #212]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	099b      	lsrs	r3, r3, #6
 80069ee:	2200      	movs	r2, #0
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	617a      	str	r2, [r7, #20]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80069fa:	f04f 0b00 	mov.w	fp, #0
 80069fe:	4652      	mov	r2, sl
 8006a00:	465b      	mov	r3, fp
 8006a02:	f04f 0000 	mov.w	r0, #0
 8006a06:	f04f 0100 	mov.w	r1, #0
 8006a0a:	0159      	lsls	r1, r3, #5
 8006a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a10:	0150      	lsls	r0, r2, #5
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	ebb2 080a 	subs.w	r8, r2, sl
 8006a1a:	eb63 090b 	sbc.w	r9, r3, fp
 8006a1e:	f04f 0200 	mov.w	r2, #0
 8006a22:	f04f 0300 	mov.w	r3, #0
 8006a26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a32:	ebb2 0408 	subs.w	r4, r2, r8
 8006a36:	eb63 0509 	sbc.w	r5, r3, r9
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	f04f 0300 	mov.w	r3, #0
 8006a42:	00eb      	lsls	r3, r5, #3
 8006a44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a48:	00e2      	lsls	r2, r4, #3
 8006a4a:	4614      	mov	r4, r2
 8006a4c:	461d      	mov	r5, r3
 8006a4e:	eb14 030a 	adds.w	r3, r4, sl
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	eb45 030b 	adc.w	r3, r5, fp
 8006a58:	607b      	str	r3, [r7, #4]
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a66:	4629      	mov	r1, r5
 8006a68:	028b      	lsls	r3, r1, #10
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a70:	4621      	mov	r1, r4
 8006a72:	028a      	lsls	r2, r1, #10
 8006a74:	4610      	mov	r0, r2
 8006a76:	4619      	mov	r1, r3
 8006a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	60fa      	str	r2, [r7, #12]
 8006a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a84:	f7fa f8b0 	bl	8000be8 <__aeabi_uldivmod>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006a90:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	0c1b      	lsrs	r3, r3, #16
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006aa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006aaa:	e002      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aac:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006aae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3740      	adds	r7, #64	@ 0x40
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006abe:	bf00      	nop
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	00f42400 	.word	0x00f42400
 8006ac8:	017d7840 	.word	0x017d7840

08006acc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad0:	4b03      	ldr	r3, [pc, #12]	@ (8006ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000000 	.word	0x20000000

08006ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ae8:	f7ff fff0 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8006aec:	4602      	mov	r2, r0
 8006aee:	4b05      	ldr	r3, [pc, #20]	@ (8006b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	0a9b      	lsrs	r3, r3, #10
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4903      	ldr	r1, [pc, #12]	@ (8006b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006afa:	5ccb      	ldrb	r3, [r1, r3]
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40023800 	.word	0x40023800
 8006b08:	0800bbe4 	.word	0x0800bbe4

08006b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b10:	f7ff ffdc 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8006b14:	4602      	mov	r2, r0
 8006b16:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	0b5b      	lsrs	r3, r3, #13
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	4903      	ldr	r1, [pc, #12]	@ (8006b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b22:	5ccb      	ldrb	r3, [r1, r3]
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	0800bbe4 	.word	0x0800bbe4

08006b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d012      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b5c:	4b69      	ldr	r3, [pc, #420]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	4a68      	ldr	r2, [pc, #416]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b62:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006b66:	6093      	str	r3, [r2, #8]
 8006b68:	4b66      	ldr	r3, [pc, #408]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b70:	4964      	ldr	r1, [pc, #400]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d017      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b9c:	4959      	ldr	r1, [pc, #356]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d017      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006bca:	4b4e      	ldr	r3, [pc, #312]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bd0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd8:	494a      	ldr	r1, [pc, #296]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be8:	d101      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006bea:	2301      	movs	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006c06:	2301      	movs	r3, #1
 8006c08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 808b 	beq.w	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c18:	4b3a      	ldr	r3, [pc, #232]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1c:	4a39      	ldr	r2, [pc, #228]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c22:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c24:	4b37      	ldr	r3, [pc, #220]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c30:	4b35      	ldr	r3, [pc, #212]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a34      	ldr	r2, [pc, #208]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c3c:	f7fd fbfe 	bl	800443c <HAL_GetTick>
 8006c40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c44:	f7fd fbfa 	bl	800443c <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b64      	cmp	r3, #100	@ 0x64
 8006c50:	d901      	bls.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e357      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c56:	4b2c      	ldr	r3, [pc, #176]	@ (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f0      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c62:	4b28      	ldr	r3, [pc, #160]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d035      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d02e      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c80:	4b20      	ldr	r3, [pc, #128]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c94:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c96:	4b1b      	ldr	r3, [pc, #108]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ca0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ca2:	4a18      	ldr	r2, [pc, #96]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ca8:	4b16      	ldr	r3, [pc, #88]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d114      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fd fbc2 	bl	800443c <HAL_GetTick>
 8006cb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cbc:	f7fd fbbe 	bl	800443c <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e319      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0ee      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cea:	d111      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006cec:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006cf8:	4b04      	ldr	r3, [pc, #16]	@ (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006cfa:	400b      	ands	r3, r1
 8006cfc:	4901      	ldr	r1, [pc, #4]	@ (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	608b      	str	r3, [r1, #8]
 8006d02:	e00b      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006d04:	40023800 	.word	0x40023800
 8006d08:	40007000 	.word	0x40007000
 8006d0c:	0ffffcff 	.word	0x0ffffcff
 8006d10:	4baa      	ldr	r3, [pc, #680]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	4aa9      	ldr	r2, [pc, #676]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d16:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006d1a:	6093      	str	r3, [r2, #8]
 8006d1c:	4ba7      	ldr	r3, [pc, #668]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d28:	49a4      	ldr	r1, [pc, #656]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d010      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d3a:	4ba0      	ldr	r3, [pc, #640]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d40:	4a9e      	ldr	r2, [pc, #632]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006d4a:	4b9c      	ldr	r3, [pc, #624]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d54:	4999      	ldr	r1, [pc, #612]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00a      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d68:	4b94      	ldr	r3, [pc, #592]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d76:	4991      	ldr	r1, [pc, #580]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d8a:	4b8c      	ldr	r3, [pc, #560]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d98:	4988      	ldr	r1, [pc, #544]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00a      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006dac:	4b83      	ldr	r3, [pc, #524]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dba:	4980      	ldr	r1, [pc, #512]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dce:	4b7b      	ldr	r3, [pc, #492]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ddc:	4977      	ldr	r1, [pc, #476]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006df0:	4b72      	ldr	r3, [pc, #456]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df6:	f023 0203 	bic.w	r2, r3, #3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfe:	496f      	ldr	r1, [pc, #444]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e12:	4b6a      	ldr	r3, [pc, #424]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e18:	f023 020c 	bic.w	r2, r3, #12
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e20:	4966      	ldr	r1, [pc, #408]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e34:	4b61      	ldr	r3, [pc, #388]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e3a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e42:	495e      	ldr	r1, [pc, #376]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e56:	4b59      	ldr	r3, [pc, #356]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e5c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e64:	4955      	ldr	r1, [pc, #340]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e78:	4b50      	ldr	r3, [pc, #320]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e86:	494d      	ldr	r1, [pc, #308]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e9a:	4b48      	ldr	r3, [pc, #288]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea8:	4944      	ldr	r1, [pc, #272]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ec2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eca:	493c      	ldr	r1, [pc, #240]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006ede:	4b37      	ldr	r3, [pc, #220]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eec:	4933      	ldr	r1, [pc, #204]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f00:	4b2e      	ldr	r3, [pc, #184]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f06:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f0e:	492b      	ldr	r1, [pc, #172]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d011      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f22:	4b26      	ldr	r3, [pc, #152]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f28:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f30:	4922      	ldr	r1, [pc, #136]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f40:	d101      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006f52:	2301      	movs	r3, #1
 8006f54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f62:	4b16      	ldr	r3, [pc, #88]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f68:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f70:	4912      	ldr	r1, [pc, #72]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f84:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f94:	4909      	ldr	r1, [pc, #36]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d006      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 80d9 	beq.w	8007162 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fb0:	4b02      	ldr	r3, [pc, #8]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a01      	ldr	r2, [pc, #4]	@ (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fba:	e001      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc2:	f7fd fa3b 	bl	800443c <HAL_GetTick>
 8006fc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fca:	f7fd fa37 	bl	800443c <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b64      	cmp	r3, #100	@ 0x64
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e194      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1f0      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d021      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d11d      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ffc:	4b64      	ldr	r3, [pc, #400]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007002:	0c1b      	lsrs	r3, r3, #16
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800700a:	4b61      	ldr	r3, [pc, #388]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800700c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007010:	0e1b      	lsrs	r3, r3, #24
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	019a      	lsls	r2, r3, #6
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	041b      	lsls	r3, r3, #16
 8007022:	431a      	orrs	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	061b      	lsls	r3, r3, #24
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	071b      	lsls	r3, r3, #28
 8007030:	4957      	ldr	r1, [pc, #348]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d004      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007048:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800704c:	d00a      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007056:	2b00      	cmp	r3, #0
 8007058:	d02e      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800705e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007062:	d129      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007064:	4b4a      	ldr	r3, [pc, #296]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800706a:	0c1b      	lsrs	r3, r3, #16
 800706c:	f003 0303 	and.w	r3, r3, #3
 8007070:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007072:	4b47      	ldr	r3, [pc, #284]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007078:	0f1b      	lsrs	r3, r3, #28
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	019a      	lsls	r2, r3, #6
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	041b      	lsls	r3, r3, #16
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	061b      	lsls	r3, r3, #24
 8007092:	431a      	orrs	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	071b      	lsls	r3, r3, #28
 8007098:	493d      	ldr	r1, [pc, #244]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800709a:	4313      	orrs	r3, r2
 800709c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070a6:	f023 021f 	bic.w	r2, r3, #31
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ae:	3b01      	subs	r3, #1
 80070b0:	4937      	ldr	r1, [pc, #220]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01d      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80070c4:	4b32      	ldr	r3, [pc, #200]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ca:	0e1b      	lsrs	r3, r3, #24
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070d8:	0f1b      	lsrs	r3, r3, #28
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	019a      	lsls	r2, r3, #6
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	041b      	lsls	r3, r3, #16
 80070ec:	431a      	orrs	r2, r3
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	061b      	lsls	r3, r3, #24
 80070f2:	431a      	orrs	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	071b      	lsls	r3, r3, #28
 80070f8:	4925      	ldr	r1, [pc, #148]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d011      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	019a      	lsls	r2, r3, #6
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	431a      	orrs	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	061b      	lsls	r3, r3, #24
 8007120:	431a      	orrs	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	071b      	lsls	r3, r3, #28
 8007128:	4919      	ldr	r1, [pc, #100]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007130:	4b17      	ldr	r3, [pc, #92]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a16      	ldr	r2, [pc, #88]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007136:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800713a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713c:	f7fd f97e 	bl	800443c <HAL_GetTick>
 8007140:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007142:	e008      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007144:	f7fd f97a 	bl	800443c <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b64      	cmp	r3, #100	@ 0x64
 8007150:	d901      	bls.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e0d7      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007156:	4b0e      	ldr	r3, [pc, #56]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b01      	cmp	r3, #1
 8007166:	f040 80cd 	bne.w	8007304 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800716a:	4b09      	ldr	r3, [pc, #36]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a08      	ldr	r2, [pc, #32]	@ (8007190 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007176:	f7fd f961 	bl	800443c <HAL_GetTick>
 800717a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800717c:	e00a      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800717e:	f7fd f95d 	bl	800443c <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b64      	cmp	r3, #100	@ 0x64
 800718a:	d903      	bls.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e0ba      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007190:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007194:	4b5e      	ldr	r3, [pc, #376]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800719c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071a0:	d0ed      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d02e      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d12a      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80071ca:	4b51      	ldr	r3, [pc, #324]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d0:	0c1b      	lsrs	r3, r3, #16
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071d8:	4b4d      	ldr	r3, [pc, #308]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071de:	0f1b      	lsrs	r3, r3, #28
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	019a      	lsls	r2, r3, #6
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	041b      	lsls	r3, r3, #16
 80071f0:	431a      	orrs	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	061b      	lsls	r3, r3, #24
 80071f8:	431a      	orrs	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	071b      	lsls	r3, r3, #28
 80071fe:	4944      	ldr	r1, [pc, #272]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007200:	4313      	orrs	r3, r2
 8007202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007206:	4b42      	ldr	r3, [pc, #264]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800720c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007214:	3b01      	subs	r3, #1
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	493d      	ldr	r1, [pc, #244]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d022      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007234:	d11d      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007236:	4b36      	ldr	r3, [pc, #216]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800723c:	0e1b      	lsrs	r3, r3, #24
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007244:	4b32      	ldr	r3, [pc, #200]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800724a:	0f1b      	lsrs	r3, r3, #28
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	019a      	lsls	r2, r3, #6
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	041b      	lsls	r3, r3, #16
 800725e:	431a      	orrs	r2, r3
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	061b      	lsls	r3, r3, #24
 8007264:	431a      	orrs	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	071b      	lsls	r3, r3, #28
 800726a:	4929      	ldr	r1, [pc, #164]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800726c:	4313      	orrs	r3, r2
 800726e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d028      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800727e:	4b24      	ldr	r3, [pc, #144]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007284:	0e1b      	lsrs	r3, r3, #24
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800728c:	4b20      	ldr	r3, [pc, #128]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007292:	0c1b      	lsrs	r3, r3, #16
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	019a      	lsls	r2, r3, #6
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	431a      	orrs	r2, r3
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	061b      	lsls	r3, r3, #24
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	071b      	lsls	r3, r3, #28
 80072b2:	4917      	ldr	r1, [pc, #92]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072ba:	4b15      	ldr	r3, [pc, #84]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c8:	4911      	ldr	r1, [pc, #68]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a0e      	ldr	r2, [pc, #56]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072dc:	f7fd f8ae 	bl	800443c <HAL_GetTick>
 80072e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072e2:	e008      	b.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80072e4:	f7fd f8aa 	bl	800443c <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b64      	cmp	r3, #100	@ 0x64
 80072f0:	d901      	bls.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e007      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072f6:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007302:	d1ef      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	40023800 	.word	0x40023800

08007314 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a80      	ldr	r2, [pc, #512]	@ (8007524 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8007324:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007326:	4b80      	ldr	r3, [pc, #512]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800732c:	099b      	lsrs	r3, r3, #6
 800732e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007336:	4b7c      	ldr	r3, [pc, #496]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800733c:	0c1b      	lsrs	r3, r3, #16
 800733e:	f003 0203 	and.w	r2, r3, #3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007346:	4b78      	ldr	r3, [pc, #480]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800734c:	0e1b      	lsrs	r3, r3, #24
 800734e:	f003 020f 	and.w	r2, r3, #15
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007356:	4b74      	ldr	r3, [pc, #464]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800735c:	0f1b      	lsrs	r3, r3, #28
 800735e:	f003 0207 	and.w	r2, r3, #7
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8007366:	4b70      	ldr	r3, [pc, #448]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736c:	099b      	lsrs	r3, r3, #6
 800736e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007376:	4b6c      	ldr	r3, [pc, #432]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	f003 0203 	and.w	r2, r3, #3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007386:	4b68      	ldr	r3, [pc, #416]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738c:	0e1b      	lsrs	r3, r3, #24
 800738e:	f003 020f 	and.w	r2, r3, #15
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007396:	4b64      	ldr	r3, [pc, #400]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739c:	0f1b      	lsrs	r3, r3, #28
 800739e:	f003 0207 	and.w	r2, r3, #7
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80073a6:	4b60      	ldr	r3, [pc, #384]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073ac:	f003 021f 	and.w	r2, r3, #31
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80073b4:	4b5c      	ldr	r3, [pc, #368]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	f003 021f 	and.w	r2, r3, #31
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80073c4:	4b58      	ldr	r3, [pc, #352]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073ca:	0c1b      	lsrs	r3, r3, #16
 80073cc:	f003 0203 	and.w	r2, r3, #3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80073d4:	4b54      	ldr	r3, [pc, #336]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073da:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80073e2:	4b51      	ldr	r3, [pc, #324]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073e8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80073f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80073fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007402:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800740a:	4b47      	ldr	r3, [pc, #284]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800740c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007410:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007418:	4b43      	ldr	r3, [pc, #268]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741e:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8007426:	4b40      	ldr	r3, [pc, #256]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007434:	4b3c      	ldr	r3, [pc, #240]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743a:	f003 0203 	and.w	r2, r3, #3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8007442:	4b39      	ldr	r3, [pc, #228]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007448:	f003 020c 	and.w	r2, r3, #12
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007450:	4b35      	ldr	r3, [pc, #212]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007456:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800745e:	4b32      	ldr	r3, [pc, #200]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007464:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800746c:	4b2e      	ldr	r3, [pc, #184]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800746e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007472:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800747a:	4b2b      	ldr	r3, [pc, #172]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007480:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007488:	4b27      	ldr	r3, [pc, #156]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800748e:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8007496:	4b24      	ldr	r3, [pc, #144]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749c:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80074a4:	4b20      	ldr	r3, [pc, #128]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074aa:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80074b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b8:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80074c0:	4b19      	ldr	r3, [pc, #100]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c6:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80074ce:	4b16      	ldr	r3, [pc, #88]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80074d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80074de:	4b12      	ldr	r3, [pc, #72]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80074e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80074e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80074ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ec:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80074f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007528 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80074fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800750c:	e003      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007514:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007516:	bf00      	nop
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	00fffff1 	.word	0x00fffff1
 8007528:	40023800 	.word	0x40023800

0800752c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800754a:	f040 808d 	bne.w	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800754e:	4b93      	ldr	r3, [pc, #588]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007554:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800755c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007564:	d07c      	beq.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800756c:	d87b      	bhi.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800757a:	d039      	beq.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800757c:	e073      	b.n	8007666 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800757e:	4b87      	ldr	r3, [pc, #540]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d108      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800758a:	4b84      	ldr	r3, [pc, #528]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007592:	4a83      	ldr	r2, [pc, #524]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007594:	fbb2 f3f3 	udiv	r3, r2, r3
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	e007      	b.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800759c:	4b7f      	ldr	r3, [pc, #508]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075a4:	4a7f      	ldr	r2, [pc, #508]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80075a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075aa:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80075ac:	4b7b      	ldr	r3, [pc, #492]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b2:	0e1b      	lsrs	r3, r3, #24
 80075b4:	f003 030f 	and.w	r3, r3, #15
 80075b8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80075ba:	4b78      	ldr	r3, [pc, #480]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c0:	099b      	lsrs	r3, r3, #6
 80075c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	fb03 f202 	mul.w	r2, r3, r2
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80075d4:	4b71      	ldr	r3, [pc, #452]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	f003 031f 	and.w	r3, r3, #31
 80075e0:	3301      	adds	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ec:	617b      	str	r3, [r7, #20]
        break;
 80075ee:	e03b      	b.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80075f0:	4b6a      	ldr	r3, [pc, #424]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d108      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80075fc:	4b67      	ldr	r3, [pc, #412]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007604:	4a66      	ldr	r2, [pc, #408]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007606:	fbb2 f3f3 	udiv	r3, r2, r3
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	e007      	b.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800760e:	4b63      	ldr	r3, [pc, #396]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007616:	4a63      	ldr	r2, [pc, #396]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800761e:	4b5f      	ldr	r3, [pc, #380]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007624:	0e1b      	lsrs	r3, r3, #24
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800762c:	4b5b      	ldr	r3, [pc, #364]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800762e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007632:	099b      	lsrs	r3, r3, #6
 8007634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	fb03 f202 	mul.w	r2, r3, r2
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	fbb2 f3f3 	udiv	r3, r2, r3
 8007644:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007646:	4b55      	ldr	r3, [pc, #340]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	3301      	adds	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	fbb2 f3f3 	udiv	r3, r2, r3
 800765c:	617b      	str	r3, [r7, #20]
        break;
 800765e:	e003      	b.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007660:	4b51      	ldr	r3, [pc, #324]	@ (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007662:	617b      	str	r3, [r7, #20]
        break;
 8007664:	e000      	b.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007666:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800766e:	f040 808d 	bne.w	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007672:	4b4a      	ldr	r3, [pc, #296]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007678:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007680:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007688:	d07c      	beq.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007690:	d87b      	bhi.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800769e:	d039      	beq.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80076a0:	e073      	b.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80076a2:	4b3e      	ldr	r3, [pc, #248]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d108      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076ae:	4b3b      	ldr	r3, [pc, #236]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076b6:	4a3a      	ldr	r2, [pc, #232]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80076b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076bc:	613b      	str	r3, [r7, #16]
 80076be:	e007      	b.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80076c0:	4b36      	ldr	r3, [pc, #216]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076c8:	4a36      	ldr	r2, [pc, #216]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80076ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ce:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80076d0:	4b32      	ldr	r3, [pc, #200]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d6:	0e1b      	lsrs	r3, r3, #24
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80076de:	4b2f      	ldr	r3, [pc, #188]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e4:	099b      	lsrs	r3, r3, #6
 80076e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	fb03 f202 	mul.w	r2, r3, r2
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80076f8:	4b28      	ldr	r3, [pc, #160]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076fe:	0a1b      	lsrs	r3, r3, #8
 8007700:	f003 031f 	and.w	r3, r3, #31
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007710:	617b      	str	r3, [r7, #20]
        break;
 8007712:	e03b      	b.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007714:	4b21      	ldr	r3, [pc, #132]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d108      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007720:	4b1e      	ldr	r3, [pc, #120]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007728:	4a1d      	ldr	r2, [pc, #116]	@ (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800772a:	fbb2 f3f3 	udiv	r3, r2, r3
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	e007      	b.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007732:	4b1a      	ldr	r3, [pc, #104]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800773a:	4a1a      	ldr	r2, [pc, #104]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800773c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007740:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007742:	4b16      	ldr	r3, [pc, #88]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007748:	0e1b      	lsrs	r3, r3, #24
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007750:	4b12      	ldr	r3, [pc, #72]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007756:	099b      	lsrs	r3, r3, #6
 8007758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	fb03 f202 	mul.w	r2, r3, r2
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800776a:	4b0c      	ldr	r3, [pc, #48]	@ (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800776c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007770:	f003 031f 	and.w	r3, r3, #31
 8007774:	3301      	adds	r3, #1
 8007776:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007780:	617b      	str	r3, [r7, #20]
        break;
 8007782:	e003      	b.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007784:	4b08      	ldr	r3, [pc, #32]	@ (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007786:	617b      	str	r3, [r7, #20]
        break;
 8007788:	e000      	b.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800778a:	bf00      	nop
      }
    }
  }

  return frequency;
 800778c:	697b      	ldr	r3, [r7, #20]
}
 800778e:	4618      	mov	r0, r3
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	40023800 	.word	0x40023800
 80077a0:	00f42400 	.word	0x00f42400
 80077a4:	017d7840 	.word	0x017d7840
 80077a8:	00bb8000 	.word	0x00bb8000

080077ac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e156      	b.n	8007a78 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fa f8de 	bl	80019a0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fd51 	bl	8008294 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d00c      	beq.n	8007814 <HAL_SAI_Init+0x68>
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d80d      	bhi.n	800781a <HAL_SAI_Init+0x6e>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <HAL_SAI_Init+0x5c>
 8007802:	2b01      	cmp	r3, #1
 8007804:	d003      	beq.n	800780e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007806:	e008      	b.n	800781a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	61fb      	str	r3, [r7, #28]
      break;
 800780c:	e006      	b.n	800781c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800780e:	2310      	movs	r3, #16
 8007810:	61fb      	str	r3, [r7, #28]
      break;
 8007812:	e003      	b.n	800781c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007814:	2320      	movs	r3, #32
 8007816:	61fb      	str	r3, [r7, #28]
      break;
 8007818:	e000      	b.n	800781c <HAL_SAI_Init+0x70>
      break;
 800781a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d81e      	bhi.n	8007862 <HAL_SAI_Init+0xb6>
 8007824:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <HAL_SAI_Init+0x80>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	0800783d 	.word	0x0800783d
 8007830:	08007843 	.word	0x08007843
 8007834:	0800784b 	.word	0x0800784b
 8007838:	08007853 	.word	0x08007853
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007840:	e010      	b.n	8007864 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007846:	617b      	str	r3, [r7, #20]
    }
    break;
 8007848:	e00c      	b.n	8007864 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800784a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800784e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007850:	e008      	b.n	8007864 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007852:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007856:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007860:	e000      	b.n	8007864 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007862:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a85      	ldr	r2, [pc, #532]	@ (8007a80 <HAL_SAI_Init+0x2d4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d004      	beq.n	8007878 <HAL_SAI_Init+0xcc>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a84      	ldr	r2, [pc, #528]	@ (8007a84 <HAL_SAI_Init+0x2d8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d103      	bne.n	8007880 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007878:	4a83      	ldr	r2, [pc, #524]	@ (8007a88 <HAL_SAI_Init+0x2dc>)
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	e002      	b.n	8007886 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007880:	4a82      	ldr	r2, [pc, #520]	@ (8007a8c <HAL_SAI_Init+0x2e0>)
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d04c      	beq.n	8007928 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a7a      	ldr	r2, [pc, #488]	@ (8007a80 <HAL_SAI_Init+0x2d4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d004      	beq.n	80078a6 <HAL_SAI_Init+0xfa>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a78      	ldr	r2, [pc, #480]	@ (8007a84 <HAL_SAI_Init+0x2d8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d104      	bne.n	80078b0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80078a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80078aa:	f7ff fe3f 	bl	800752c <HAL_RCCEx_GetPeriphCLKFreq>
 80078ae:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a76      	ldr	r2, [pc, #472]	@ (8007a90 <HAL_SAI_Init+0x2e4>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_SAI_Init+0x118>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a75      	ldr	r2, [pc, #468]	@ (8007a94 <HAL_SAI_Init+0x2e8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d104      	bne.n	80078ce <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80078c4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80078c8:	f7ff fe30 	bl	800752c <HAL_RCCEx_GetPeriphCLKFreq>
 80078cc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	461a      	mov	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	025b      	lsls	r3, r3, #9
 80078e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	4a6b      	ldr	r2, [pc, #428]	@ (8007a98 <HAL_SAI_Init+0x2ec>)
 80078ea:	fba2 2303 	umull	r2, r3, r2, r3
 80078ee:	08da      	lsrs	r2, r3, #3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80078f4:	68f9      	ldr	r1, [r7, #12]
 80078f6:	4b68      	ldr	r3, [pc, #416]	@ (8007a98 <HAL_SAI_Init+0x2ec>)
 80078f8:	fba3 2301 	umull	r2, r3, r3, r1
 80078fc:	08da      	lsrs	r2, r3, #3
 80078fe:	4613      	mov	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	1aca      	subs	r2, r1, r3
 8007908:	2a08      	cmp	r2, #8
 800790a:	d904      	bls.n	8007916 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791a:	2b04      	cmp	r3, #4
 800791c:	d104      	bne.n	8007928 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	085a      	lsrs	r2, r3, #1
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <HAL_SAI_Init+0x18c>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2b02      	cmp	r3, #2
 8007936:	d109      	bne.n	800794c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_SAI_Init+0x198>
 8007940:	2300      	movs	r3, #0
 8007942:	e001      	b.n	8007948 <HAL_SAI_Init+0x19c>
 8007944:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	e008      	b.n	800795e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007950:	2b01      	cmp	r3, #1
 8007952:	d102      	bne.n	800795a <HAL_SAI_Init+0x1ae>
 8007954:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007958:	e000      	b.n	800795c <HAL_SAI_Init+0x1b0>
 800795a:	2300      	movs	r3, #0
 800795c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6819      	ldr	r1, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	4b4c      	ldr	r3, [pc, #304]	@ (8007a9c <HAL_SAI_Init+0x2f0>)
 800796a:	400b      	ands	r3, r1
 800796c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6819      	ldr	r1, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007982:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007988:	431a      	orrs	r2, r3
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8007996:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079a2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	051b      	lsls	r3, r3, #20
 80079aa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6859      	ldr	r1, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	4b38      	ldr	r3, [pc, #224]	@ (8007aa0 <HAL_SAI_Init+0x2f4>)
 80079c0:	400b      	ands	r3, r1
 80079c2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6859      	ldr	r1, [r3, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6899      	ldr	r1, [r3, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	4b2d      	ldr	r3, [pc, #180]	@ (8007aa4 <HAL_SAI_Init+0x2f8>)
 80079ee:	400b      	ands	r3, r1
 80079f0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6899      	ldr	r1, [r3, #8]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007a02:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007a08:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007a0e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a14:	3b01      	subs	r3, #1
 8007a16:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007a18:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68d9      	ldr	r1, [r3, #12]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007a30:	400b      	ands	r3, r1
 8007a32:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68d9      	ldr	r1, [r3, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a42:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a48:	041b      	lsls	r3, r3, #16
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a50:	3b01      	subs	r3, #1
 8007a52:	021b      	lsls	r3, r3, #8
 8007a54:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3720      	adds	r7, #32
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40015804 	.word	0x40015804
 8007a84:	40015824 	.word	0x40015824
 8007a88:	40015800 	.word	0x40015800
 8007a8c:	40015c00 	.word	0x40015c00
 8007a90:	40015c04 	.word	0x40015c04
 8007a94:	40015c24 	.word	0x40015c24
 8007a98:	cccccccd 	.word	0xcccccccd
 8007a9c:	ff05c010 	.word	0xff05c010
 8007aa0:	ffff1ff0 	.word	0xffff1ff0
 8007aa4:	fff88000 	.word	0xfff88000

08007aa8 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e027      	b.n	8007b0a <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2202      	movs	r2, #2
 8007abe:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad2:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fbdd 	bl	8008294 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0208 	orr.w	r2, r2, #8
 8007ae8:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fa f800 	bl	8001af0 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_SAI_DMAStop+0x1a>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e061      	b.n	8007bf0 <HAL_SAI_DMAStop+0xde>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fbad 	bl	8008294 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007b48:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d01c      	beq.n	8007b8c <HAL_SAI_DMAStop+0x7a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b12      	cmp	r3, #18
 8007b5c:	d116      	bne.n	8007b8c <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fc ff4a 	bl	80049fc <HAL_DMA_Abort>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00e      	beq.n	8007b8c <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b74:	2b80      	cmp	r3, #128	@ 0x80
 8007b76:	d009      	beq.n	8007b8c <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01c      	beq.n	8007bce <HAL_SAI_DMAStop+0xbc>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b22      	cmp	r3, #34	@ 0x22
 8007b9e:	d116      	bne.n	8007bce <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fc ff29 	bl	80049fc <HAL_DMA_Abort>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00e      	beq.n	8007bce <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bb6:	2b80      	cmp	r3, #128	@ 0x80
 8007bb8:	d009      	beq.n	8007bce <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0208 	orr.w	r2, r2, #8
 8007bdc:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d101      	bne.n	8007c12 <HAL_SAI_Abort+0x1a>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	e072      	b.n	8007cf8 <HAL_SAI_Abort+0x100>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fb3a 	bl	8008294 <SAI_Disable>

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c2e:	d149      	bne.n	8007cc4 <HAL_SAI_Abort+0xcc>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007c3e:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d01c      	beq.n	8007c82 <HAL_SAI_Abort+0x8a>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b12      	cmp	r3, #18
 8007c52:	d116      	bne.n	8007c82 <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fc fecf 	bl	80049fc <HAL_DMA_Abort>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00e      	beq.n	8007c82 <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6a:	2b80      	cmp	r3, #128	@ 0x80
 8007c6c:	d009      	beq.n	8007c82 <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c78:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d01c      	beq.n	8007cc4 <HAL_SAI_Abort+0xcc>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b22      	cmp	r3, #34	@ 0x22
 8007c94:	d116      	bne.n	8007cc4 <HAL_SAI_Abort+0xcc>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fc feae 	bl	80049fc <HAL_DMA_Abort>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00e      	beq.n	8007cc4 <HAL_SAI_Abort+0xcc>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cac:	2b80      	cmp	r3, #128	@ 0x80
 8007cae:	d009      	beq.n	8007cc4 <HAL_SAI_Abort+0xcc>
        {
          status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd4:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f042 0208 	orr.w	r2, r2, #8
 8007ce4:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007d0e:	f7fc fb95 	bl	800443c <HAL_GetTick>
 8007d12:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <HAL_SAI_Transmit_DMA+0x20>
 8007d1a:	88fb      	ldrh	r3, [r7, #6]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e093      	b.n	8007e4c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	f040 808c 	bne.w	8007e4a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_SAI_Transmit_DMA+0x40>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e085      	b.n	8007e4c <HAL_SAI_Transmit_DMA+0x14c>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	88fa      	ldrh	r2, [r7, #6]
 8007d52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	88fa      	ldrh	r2, [r7, #6]
 8007d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2212      	movs	r2, #18
 8007d6a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d72:	4a38      	ldr	r2, [pc, #224]	@ (8007e54 <HAL_SAI_Transmit_DMA+0x154>)
 8007d74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d7a:	4a37      	ldr	r2, [pc, #220]	@ (8007e58 <HAL_SAI_Transmit_DMA+0x158>)
 8007d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d82:	4a36      	ldr	r2, [pc, #216]	@ (8007e5c <HAL_SAI_Transmit_DMA+0x15c>)
 8007d84:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d96:	4619      	mov	r1, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	331c      	adds	r3, #28
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007da6:	f7fc fdc9 	bl	800493c <HAL_DMA_Start_IT>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d005      	beq.n	8007dbc <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e047      	b.n	8007e4c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 fa32 	bl	8008228 <SAI_InterruptFlag>
 8007dc4:	4601      	mov	r1, r0
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	691a      	ldr	r2, [r3, #16]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007de2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007de4:	e015      	b.n	8007e12 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007de6:	f7fc fb29 	bl	800443c <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007df4:	d90d      	bls.n	8007e12 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e01c      	b.n	8007e4c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0e2      	beq.n	8007de6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d107      	bne.n	8007e3e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007e3c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	e000      	b.n	8007e4c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8007e4a:	2302      	movs	r3, #2
  }
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	08008365 	.word	0x08008365
 8007e58:	08008305 	.word	0x08008305
 8007e5c:	080083fd 	.word	0x080083fd

08007e60 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <HAL_SAI_Receive_DMA+0x1a>
 8007e74:	88fb      	ldrh	r3, [r7, #6]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e074      	b.n	8007f68 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d16d      	bne.n	8007f66 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_SAI_Receive_DMA+0x38>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e067      	b.n	8007f68 <HAL_SAI_Receive_DMA+0x108>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	88fa      	ldrh	r2, [r7, #6]
 8007eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	88fa      	ldrh	r2, [r7, #6]
 8007eb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2222      	movs	r2, #34	@ 0x22
 8007ec2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eca:	4a29      	ldr	r2, [pc, #164]	@ (8007f70 <HAL_SAI_Receive_DMA+0x110>)
 8007ecc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ed2:	4a28      	ldr	r2, [pc, #160]	@ (8007f74 <HAL_SAI_Receive_DMA+0x114>)
 8007ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eda:	4a27      	ldr	r2, [pc, #156]	@ (8007f78 <HAL_SAI_Receive_DMA+0x118>)
 8007edc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	331c      	adds	r3, #28
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007efe:	f7fc fd1d 	bl	800493c <HAL_DMA_Start_IT>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e029      	b.n	8007f68 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007f14:	2100      	movs	r1, #0
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 f986 	bl	8008228 <SAI_InterruptFlag>
 8007f1c:	4601      	mov	r1, r0
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007f3a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d107      	bne.n	8007f5a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007f58:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	e000      	b.n	8007f68 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8007f66:	2302      	movs	r3, #2
  }
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	080083e1 	.word	0x080083e1
 8007f74:	08008381 	.word	0x08008381
 8007f78:	080083fd 	.word	0x080083fd

08007f7c <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 8137 	beq.w	8008200 <HAL_SAI_IRQHandler+0x284>
  {
    uint32_t itflags = hsai->Instance->SR;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d009      	beq.n	8007fc8 <HAL_SAI_IRQHandler+0x4c>
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f003 0308 	and.w	r3, r3, #8
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d004      	beq.n	8007fc8 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
 8007fc6:	e11b      	b.n	8008200 <HAL_SAI_IRQHandler+0x284>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d01e      	beq.n	8008010 <HAL_SAI_IRQHandler+0x94>
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d019      	beq.n	8008010 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b22      	cmp	r3, #34	@ 0x22
 8007fee:	d101      	bne.n	8007ff4 <HAL_SAI_IRQHandler+0x78>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <HAL_SAI_IRQHandler+0x7a>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	431a      	orrs	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7fb fdbf 	bl	8003b8c <HAL_SAI_ErrorCallback>
 800800e:	e0f7      	b.n	8008200 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d011      	beq.n	800803e <HAL_SAI_IRQHandler+0xc2>
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00c      	beq.n	800803e <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2202      	movs	r2, #2
 800802a:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80e5 	beq.w	8008200 <HAL_SAI_IRQHandler+0x284>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800803a:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 800803c:	e0e0      	b.n	8008200 <HAL_SAI_IRQHandler+0x284>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f003 0320 	and.w	r3, r3, #32
 8008044:	2b00      	cmp	r3, #0
 8008046:	d039      	beq.n	80080bc <HAL_SAI_IRQHandler+0x140>
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f003 0320 	and.w	r3, r3, #32
 800804e:	2b00      	cmp	r3, #0
 8008050:	d034      	beq.n	80080bc <HAL_SAI_IRQHandler+0x140>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2220      	movs	r2, #32
 8008058:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008060:	f043 0204 	orr.w	r2, r3, #4
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d01c      	beq.n	80080ae <HAL_SAI_IRQHandler+0x132>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <HAL_SAI_IRQHandler+0x114>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008080:	4a61      	ldr	r2, [pc, #388]	@ (8008208 <HAL_SAI_IRQHandler+0x28c>)
 8008082:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008088:	4618      	mov	r0, r3
 800808a:	f7fc fd27 	bl	8004adc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800808e:	e0b4      	b.n	80081fa <HAL_SAI_IRQHandler+0x27e>
        }
        else if (hsai->hdmarx != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 80b0 	beq.w	80081fa <HAL_SAI_IRQHandler+0x27e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800809e:	4a5a      	ldr	r2, [pc, #360]	@ (8008208 <HAL_SAI_IRQHandler+0x28c>)
 80080a0:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fc fd18 	bl	8004adc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80080ac:	e0a5      	b.n	80081fa <HAL_SAI_IRQHandler+0x27e>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff fda2 	bl	8007bf8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7fb fd69 	bl	8003b8c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80080ba:	e09e      	b.n	80081fa <HAL_SAI_IRQHandler+0x27e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d038      	beq.n	8008138 <HAL_SAI_IRQHandler+0x1bc>
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d033      	beq.n	8008138 <HAL_SAI_IRQHandler+0x1bc>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2240      	movs	r2, #64	@ 0x40
 80080d6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080de:	f043 0208 	orr.w	r2, r3, #8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d01b      	beq.n	800812a <HAL_SAI_IRQHandler+0x1ae>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d009      	beq.n	800810e <HAL_SAI_IRQHandler+0x192>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080fe:	4a42      	ldr	r2, [pc, #264]	@ (8008208 <HAL_SAI_IRQHandler+0x28c>)
 8008100:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008106:	4618      	mov	r0, r3
 8008108:	f7fc fce8 	bl	8004adc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800810c:	e077      	b.n	80081fe <HAL_SAI_IRQHandler+0x282>
        }
        else if (hsai->hdmarx != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008112:	2b00      	cmp	r3, #0
 8008114:	d073      	beq.n	80081fe <HAL_SAI_IRQHandler+0x282>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800811a:	4a3b      	ldr	r2, [pc, #236]	@ (8008208 <HAL_SAI_IRQHandler+0x28c>)
 800811c:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008122:	4618      	mov	r0, r3
 8008124:	f7fc fcda 	bl	8004adc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008128:	e069      	b.n	80081fe <HAL_SAI_IRQHandler+0x282>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff fd64 	bl	8007bf8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7fb fd2b 	bl	8003b8c <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008136:	e062      	b.n	80081fe <HAL_SAI_IRQHandler+0x282>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	d041      	beq.n	80081c6 <HAL_SAI_IRQHandler+0x24a>
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b00      	cmp	r3, #0
 800814a:	d03c      	beq.n	80081c6 <HAL_SAI_IRQHandler+0x24a>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2204      	movs	r2, #4
 8008152:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800815a:	f043 0220 	orr.w	r2, r3, #32
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008168:	2b00      	cmp	r3, #0
 800816a:	d009      	beq.n	8008180 <HAL_SAI_IRQHandler+0x204>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008170:	4a25      	ldr	r2, [pc, #148]	@ (8008208 <HAL_SAI_IRQHandler+0x28c>)
 8008172:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmatx);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008178:	4618      	mov	r0, r3
 800817a:	f7fc fcaf 	bl	8004adc <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 800817e:	e03f      	b.n	8008200 <HAL_SAI_IRQHandler+0x284>
      }
      else if (hsai->hdmarx != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008184:	2b00      	cmp	r3, #0
 8008186:	d009      	beq.n	800819c <HAL_SAI_IRQHandler+0x220>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800818c:	4a1e      	ldr	r2, [pc, #120]	@ (8008208 <HAL_SAI_IRQHandler+0x28c>)
 800818e:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmarx);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008194:	4618      	mov	r0, r3
 8008196:	f7fc fca1 	bl	8004adc <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 800819a:	e031      	b.n	8008200 <HAL_SAI_IRQHandler+0x284>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2200      	movs	r2, #0
 80081a2:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f04f 32ff 	mov.w	r2, #4294967295
 80081ac:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fb fce4 	bl	8003b8c <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 80081c4:	e01c      	b.n	8008200 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f003 0310 	and.w	r3, r3, #16
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d017      	beq.n	8008200 <HAL_SAI_IRQHandler+0x284>
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f003 0310 	and.w	r3, r3, #16
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d012      	beq.n	8008200 <HAL_SAI_IRQHandler+0x284>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2210      	movs	r2, #16
 80081e0:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081e8:	f043 0210 	orr.w	r2, r3, #16
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7fb fcca 	bl	8003b8c <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80081f8:	e002      	b.n	8008200 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80081fa:	bf00      	nop
 80081fc:	e000      	b.n	8008200 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80081fe:	bf00      	nop
}
 8008200:	bf00      	nop
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	08008463 	.word	0x08008463

0800820c <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800821a:	b2db      	uxtb	r3, r3
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008232:	2301      	movs	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d103      	bne.n	8008244 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f043 0308 	orr.w	r3, r3, #8
 8008242:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008248:	2b08      	cmp	r3, #8
 800824a:	d10b      	bne.n	8008264 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008250:	2b03      	cmp	r3, #3
 8008252:	d003      	beq.n	800825c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d103      	bne.n	8008264 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f043 0310 	orr.w	r3, r3, #16
 8008262:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2b03      	cmp	r3, #3
 800826a:	d003      	beq.n	8008274 <SAI_InterruptFlag+0x4c>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	2b02      	cmp	r3, #2
 8008272:	d104      	bne.n	800827e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e003      	b.n	8008286 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f043 0304 	orr.w	r3, r3, #4
 8008284:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008286:	68fb      	ldr	r3, [r7, #12]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800829c:	4b17      	ldr	r3, [pc, #92]	@ (80082fc <SAI_Disable+0x68>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a17      	ldr	r2, [pc, #92]	@ (8008300 <SAI_Disable+0x6c>)
 80082a2:	fba2 2303 	umull	r2, r3, r2, r3
 80082a6:	0b1b      	lsrs	r3, r3, #12
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80082be:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	1e5a      	subs	r2, r3, #1
 80082c4:	60fa      	str	r2, [r7, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10a      	bne.n	80082e0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	72fb      	strb	r3, [r7, #11]
      break;
 80082de:	e006      	b.n	80082ee <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1e8      	bne.n	80082c0 <SAI_Disable+0x2c>

  return status;
 80082ee:	7afb      	ldrb	r3, [r7, #11]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	20000000 	.word	0x20000000
 8008300:	95cbec1b 	.word	0x95cbec1b

08008304 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008310:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800831a:	d01c      	beq.n	8008356 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008332:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008334:	2100      	movs	r1, #0
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f7ff ff76 	bl	8008228 <SAI_InterruptFlag>
 800833c:	4603      	mov	r3, r0
 800833e:	43d9      	mvns	r1, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	400a      	ands	r2, r1
 800834c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7fb fc04 	bl	8003b64 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008370:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f7fb fc00 	bl	8003b78 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008378:	bf00      	nop
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008396:	d01c      	beq.n	80083d2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80083a6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80083b0:	2100      	movs	r1, #0
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f7ff ff38 	bl	8008228 <SAI_InterruptFlag>
 80083b8:	4603      	mov	r3, r0
 80083ba:	43d9      	mvns	r1, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	400a      	ands	r2, r1
 80083c8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7fb fe4e 	bl	8004074 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7fb fe4a 	bl	8004088 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80083f4:	bf00      	nop
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008408:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008410:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800841e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008420:	2b01      	cmp	r3, #1
 8008422:	d004      	beq.n	800842e <SAI_DMAError+0x32>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800842a:	2b01      	cmp	r3, #1
 800842c:	d112      	bne.n	8008454 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800843c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f7ff ff28 	bl	8008294 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f7fb fb99 	bl	8003b8c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800845a:	bf00      	nop
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800847e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2200      	movs	r2, #0
 8008486:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f04f 32ff 	mov.w	r2, #4294967295
 8008490:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008498:	2b20      	cmp	r3, #32
 800849a:	d00a      	beq.n	80084b2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f7ff fef9 	bl	8008294 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f042 0208 	orr.w	r2, r2, #8
 80084b0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f7fb fb62 	bl	8003b8c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80084c8:	bf00      	nop
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e025      	b.n	8008530 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d106      	bne.n	80084fe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7f8 fe25 	bl	8001148 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2202      	movs	r2, #2
 8008502:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3304      	adds	r3, #4
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f000 fd17 	bl	8008f44 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	461a      	mov	r2, r3
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	f000 fd6b 	bl	8008ffc <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e040      	b.n	80085cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800854e:	2b00      	cmp	r3, #0
 8008550:	d106      	bne.n	8008560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7f9 fc82 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2224      	movs	r2, #36	@ 0x24
 8008564:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0201 	bic.w	r2, r2, #1
 8008574:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fb16 	bl	8008bb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f8af 	bl	80086e8 <UART_SetConfig>
 800858a:	4603      	mov	r3, r0
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e01b      	b.n	80085cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	689a      	ldr	r2, [r3, #8]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f042 0201 	orr.w	r2, r2, #1
 80085c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fb95 	bl	8008cf4 <UART_CheckIdleState>
 80085ca:	4603      	mov	r3, r0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08a      	sub	sp, #40	@ 0x28
 80085d8:	af02      	add	r7, sp, #8
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	4613      	mov	r3, r2
 80085e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	d177      	bne.n	80086dc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <HAL_UART_Transmit+0x24>
 80085f2:	88fb      	ldrh	r3, [r7, #6]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e070      	b.n	80086de <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2221      	movs	r2, #33	@ 0x21
 8008608:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800860a:	f7fb ff17 	bl	800443c <HAL_GetTick>
 800860e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	88fa      	ldrh	r2, [r7, #6]
 8008614:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	88fa      	ldrh	r2, [r7, #6]
 800861c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008628:	d108      	bne.n	800863c <HAL_UART_Transmit+0x68>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d104      	bne.n	800863c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008632:	2300      	movs	r3, #0
 8008634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	61bb      	str	r3, [r7, #24]
 800863a:	e003      	b.n	8008644 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008640:	2300      	movs	r3, #0
 8008642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008644:	e02f      	b.n	80086a6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2200      	movs	r2, #0
 800864e:	2180      	movs	r1, #128	@ 0x80
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 fba6 	bl	8008da2 <UART_WaitOnFlagUntilTimeout>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2220      	movs	r2, #32
 8008660:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e03b      	b.n	80086de <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10b      	bne.n	8008684 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800867a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	3302      	adds	r3, #2
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	e007      	b.n	8008694 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	781a      	ldrb	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	3301      	adds	r3, #1
 8008692:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800869a:	b29b      	uxth	r3, r3
 800869c:	3b01      	subs	r3, #1
 800869e:	b29a      	uxth	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1c9      	bne.n	8008646 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2200      	movs	r2, #0
 80086ba:	2140      	movs	r1, #64	@ 0x40
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 fb70 	bl	8008da2 <UART_WaitOnFlagUntilTimeout>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d004      	beq.n	80086d2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2220      	movs	r2, #32
 80086cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e005      	b.n	80086de <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2220      	movs	r2, #32
 80086d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	e000      	b.n	80086de <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80086dc:	2302      	movs	r3, #2
  }
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3720      	adds	r7, #32
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b088      	sub	sp, #32
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	431a      	orrs	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	431a      	orrs	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	4ba6      	ldr	r3, [pc, #664]	@ (80089ac <UART_SetConfig+0x2c4>)
 8008714:	4013      	ands	r3, r2
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6812      	ldr	r2, [r2, #0]
 800871a:	6979      	ldr	r1, [r7, #20]
 800871c:	430b      	orrs	r3, r1
 800871e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	430a      	orrs	r2, r1
 8008758:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a94      	ldr	r2, [pc, #592]	@ (80089b0 <UART_SetConfig+0x2c8>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d120      	bne.n	80087a6 <UART_SetConfig+0xbe>
 8008764:	4b93      	ldr	r3, [pc, #588]	@ (80089b4 <UART_SetConfig+0x2cc>)
 8008766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	2b03      	cmp	r3, #3
 8008770:	d816      	bhi.n	80087a0 <UART_SetConfig+0xb8>
 8008772:	a201      	add	r2, pc, #4	@ (adr r2, 8008778 <UART_SetConfig+0x90>)
 8008774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008778:	08008789 	.word	0x08008789
 800877c:	08008795 	.word	0x08008795
 8008780:	0800878f 	.word	0x0800878f
 8008784:	0800879b 	.word	0x0800879b
 8008788:	2301      	movs	r3, #1
 800878a:	77fb      	strb	r3, [r7, #31]
 800878c:	e150      	b.n	8008a30 <UART_SetConfig+0x348>
 800878e:	2302      	movs	r3, #2
 8008790:	77fb      	strb	r3, [r7, #31]
 8008792:	e14d      	b.n	8008a30 <UART_SetConfig+0x348>
 8008794:	2304      	movs	r3, #4
 8008796:	77fb      	strb	r3, [r7, #31]
 8008798:	e14a      	b.n	8008a30 <UART_SetConfig+0x348>
 800879a:	2308      	movs	r3, #8
 800879c:	77fb      	strb	r3, [r7, #31]
 800879e:	e147      	b.n	8008a30 <UART_SetConfig+0x348>
 80087a0:	2310      	movs	r3, #16
 80087a2:	77fb      	strb	r3, [r7, #31]
 80087a4:	e144      	b.n	8008a30 <UART_SetConfig+0x348>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a83      	ldr	r2, [pc, #524]	@ (80089b8 <UART_SetConfig+0x2d0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d132      	bne.n	8008816 <UART_SetConfig+0x12e>
 80087b0:	4b80      	ldr	r3, [pc, #512]	@ (80089b4 <UART_SetConfig+0x2cc>)
 80087b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b6:	f003 030c 	and.w	r3, r3, #12
 80087ba:	2b0c      	cmp	r3, #12
 80087bc:	d828      	bhi.n	8008810 <UART_SetConfig+0x128>
 80087be:	a201      	add	r2, pc, #4	@ (adr r2, 80087c4 <UART_SetConfig+0xdc>)
 80087c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c4:	080087f9 	.word	0x080087f9
 80087c8:	08008811 	.word	0x08008811
 80087cc:	08008811 	.word	0x08008811
 80087d0:	08008811 	.word	0x08008811
 80087d4:	08008805 	.word	0x08008805
 80087d8:	08008811 	.word	0x08008811
 80087dc:	08008811 	.word	0x08008811
 80087e0:	08008811 	.word	0x08008811
 80087e4:	080087ff 	.word	0x080087ff
 80087e8:	08008811 	.word	0x08008811
 80087ec:	08008811 	.word	0x08008811
 80087f0:	08008811 	.word	0x08008811
 80087f4:	0800880b 	.word	0x0800880b
 80087f8:	2300      	movs	r3, #0
 80087fa:	77fb      	strb	r3, [r7, #31]
 80087fc:	e118      	b.n	8008a30 <UART_SetConfig+0x348>
 80087fe:	2302      	movs	r3, #2
 8008800:	77fb      	strb	r3, [r7, #31]
 8008802:	e115      	b.n	8008a30 <UART_SetConfig+0x348>
 8008804:	2304      	movs	r3, #4
 8008806:	77fb      	strb	r3, [r7, #31]
 8008808:	e112      	b.n	8008a30 <UART_SetConfig+0x348>
 800880a:	2308      	movs	r3, #8
 800880c:	77fb      	strb	r3, [r7, #31]
 800880e:	e10f      	b.n	8008a30 <UART_SetConfig+0x348>
 8008810:	2310      	movs	r3, #16
 8008812:	77fb      	strb	r3, [r7, #31]
 8008814:	e10c      	b.n	8008a30 <UART_SetConfig+0x348>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a68      	ldr	r2, [pc, #416]	@ (80089bc <UART_SetConfig+0x2d4>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d120      	bne.n	8008862 <UART_SetConfig+0x17a>
 8008820:	4b64      	ldr	r3, [pc, #400]	@ (80089b4 <UART_SetConfig+0x2cc>)
 8008822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008826:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800882a:	2b30      	cmp	r3, #48	@ 0x30
 800882c:	d013      	beq.n	8008856 <UART_SetConfig+0x16e>
 800882e:	2b30      	cmp	r3, #48	@ 0x30
 8008830:	d814      	bhi.n	800885c <UART_SetConfig+0x174>
 8008832:	2b20      	cmp	r3, #32
 8008834:	d009      	beq.n	800884a <UART_SetConfig+0x162>
 8008836:	2b20      	cmp	r3, #32
 8008838:	d810      	bhi.n	800885c <UART_SetConfig+0x174>
 800883a:	2b00      	cmp	r3, #0
 800883c:	d002      	beq.n	8008844 <UART_SetConfig+0x15c>
 800883e:	2b10      	cmp	r3, #16
 8008840:	d006      	beq.n	8008850 <UART_SetConfig+0x168>
 8008842:	e00b      	b.n	800885c <UART_SetConfig+0x174>
 8008844:	2300      	movs	r3, #0
 8008846:	77fb      	strb	r3, [r7, #31]
 8008848:	e0f2      	b.n	8008a30 <UART_SetConfig+0x348>
 800884a:	2302      	movs	r3, #2
 800884c:	77fb      	strb	r3, [r7, #31]
 800884e:	e0ef      	b.n	8008a30 <UART_SetConfig+0x348>
 8008850:	2304      	movs	r3, #4
 8008852:	77fb      	strb	r3, [r7, #31]
 8008854:	e0ec      	b.n	8008a30 <UART_SetConfig+0x348>
 8008856:	2308      	movs	r3, #8
 8008858:	77fb      	strb	r3, [r7, #31]
 800885a:	e0e9      	b.n	8008a30 <UART_SetConfig+0x348>
 800885c:	2310      	movs	r3, #16
 800885e:	77fb      	strb	r3, [r7, #31]
 8008860:	e0e6      	b.n	8008a30 <UART_SetConfig+0x348>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a56      	ldr	r2, [pc, #344]	@ (80089c0 <UART_SetConfig+0x2d8>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d120      	bne.n	80088ae <UART_SetConfig+0x1c6>
 800886c:	4b51      	ldr	r3, [pc, #324]	@ (80089b4 <UART_SetConfig+0x2cc>)
 800886e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008872:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008876:	2bc0      	cmp	r3, #192	@ 0xc0
 8008878:	d013      	beq.n	80088a2 <UART_SetConfig+0x1ba>
 800887a:	2bc0      	cmp	r3, #192	@ 0xc0
 800887c:	d814      	bhi.n	80088a8 <UART_SetConfig+0x1c0>
 800887e:	2b80      	cmp	r3, #128	@ 0x80
 8008880:	d009      	beq.n	8008896 <UART_SetConfig+0x1ae>
 8008882:	2b80      	cmp	r3, #128	@ 0x80
 8008884:	d810      	bhi.n	80088a8 <UART_SetConfig+0x1c0>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <UART_SetConfig+0x1a8>
 800888a:	2b40      	cmp	r3, #64	@ 0x40
 800888c:	d006      	beq.n	800889c <UART_SetConfig+0x1b4>
 800888e:	e00b      	b.n	80088a8 <UART_SetConfig+0x1c0>
 8008890:	2300      	movs	r3, #0
 8008892:	77fb      	strb	r3, [r7, #31]
 8008894:	e0cc      	b.n	8008a30 <UART_SetConfig+0x348>
 8008896:	2302      	movs	r3, #2
 8008898:	77fb      	strb	r3, [r7, #31]
 800889a:	e0c9      	b.n	8008a30 <UART_SetConfig+0x348>
 800889c:	2304      	movs	r3, #4
 800889e:	77fb      	strb	r3, [r7, #31]
 80088a0:	e0c6      	b.n	8008a30 <UART_SetConfig+0x348>
 80088a2:	2308      	movs	r3, #8
 80088a4:	77fb      	strb	r3, [r7, #31]
 80088a6:	e0c3      	b.n	8008a30 <UART_SetConfig+0x348>
 80088a8:	2310      	movs	r3, #16
 80088aa:	77fb      	strb	r3, [r7, #31]
 80088ac:	e0c0      	b.n	8008a30 <UART_SetConfig+0x348>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a44      	ldr	r2, [pc, #272]	@ (80089c4 <UART_SetConfig+0x2dc>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d125      	bne.n	8008904 <UART_SetConfig+0x21c>
 80088b8:	4b3e      	ldr	r3, [pc, #248]	@ (80089b4 <UART_SetConfig+0x2cc>)
 80088ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088c6:	d017      	beq.n	80088f8 <UART_SetConfig+0x210>
 80088c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80088cc:	d817      	bhi.n	80088fe <UART_SetConfig+0x216>
 80088ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d2:	d00b      	beq.n	80088ec <UART_SetConfig+0x204>
 80088d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088d8:	d811      	bhi.n	80088fe <UART_SetConfig+0x216>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <UART_SetConfig+0x1fe>
 80088de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e2:	d006      	beq.n	80088f2 <UART_SetConfig+0x20a>
 80088e4:	e00b      	b.n	80088fe <UART_SetConfig+0x216>
 80088e6:	2300      	movs	r3, #0
 80088e8:	77fb      	strb	r3, [r7, #31]
 80088ea:	e0a1      	b.n	8008a30 <UART_SetConfig+0x348>
 80088ec:	2302      	movs	r3, #2
 80088ee:	77fb      	strb	r3, [r7, #31]
 80088f0:	e09e      	b.n	8008a30 <UART_SetConfig+0x348>
 80088f2:	2304      	movs	r3, #4
 80088f4:	77fb      	strb	r3, [r7, #31]
 80088f6:	e09b      	b.n	8008a30 <UART_SetConfig+0x348>
 80088f8:	2308      	movs	r3, #8
 80088fa:	77fb      	strb	r3, [r7, #31]
 80088fc:	e098      	b.n	8008a30 <UART_SetConfig+0x348>
 80088fe:	2310      	movs	r3, #16
 8008900:	77fb      	strb	r3, [r7, #31]
 8008902:	e095      	b.n	8008a30 <UART_SetConfig+0x348>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a2f      	ldr	r2, [pc, #188]	@ (80089c8 <UART_SetConfig+0x2e0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d125      	bne.n	800895a <UART_SetConfig+0x272>
 800890e:	4b29      	ldr	r3, [pc, #164]	@ (80089b4 <UART_SetConfig+0x2cc>)
 8008910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008914:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008918:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800891c:	d017      	beq.n	800894e <UART_SetConfig+0x266>
 800891e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008922:	d817      	bhi.n	8008954 <UART_SetConfig+0x26c>
 8008924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008928:	d00b      	beq.n	8008942 <UART_SetConfig+0x25a>
 800892a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800892e:	d811      	bhi.n	8008954 <UART_SetConfig+0x26c>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <UART_SetConfig+0x254>
 8008934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008938:	d006      	beq.n	8008948 <UART_SetConfig+0x260>
 800893a:	e00b      	b.n	8008954 <UART_SetConfig+0x26c>
 800893c:	2301      	movs	r3, #1
 800893e:	77fb      	strb	r3, [r7, #31]
 8008940:	e076      	b.n	8008a30 <UART_SetConfig+0x348>
 8008942:	2302      	movs	r3, #2
 8008944:	77fb      	strb	r3, [r7, #31]
 8008946:	e073      	b.n	8008a30 <UART_SetConfig+0x348>
 8008948:	2304      	movs	r3, #4
 800894a:	77fb      	strb	r3, [r7, #31]
 800894c:	e070      	b.n	8008a30 <UART_SetConfig+0x348>
 800894e:	2308      	movs	r3, #8
 8008950:	77fb      	strb	r3, [r7, #31]
 8008952:	e06d      	b.n	8008a30 <UART_SetConfig+0x348>
 8008954:	2310      	movs	r3, #16
 8008956:	77fb      	strb	r3, [r7, #31]
 8008958:	e06a      	b.n	8008a30 <UART_SetConfig+0x348>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a1b      	ldr	r2, [pc, #108]	@ (80089cc <UART_SetConfig+0x2e4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d138      	bne.n	80089d6 <UART_SetConfig+0x2ee>
 8008964:	4b13      	ldr	r3, [pc, #76]	@ (80089b4 <UART_SetConfig+0x2cc>)
 8008966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800896a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800896e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008972:	d017      	beq.n	80089a4 <UART_SetConfig+0x2bc>
 8008974:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008978:	d82a      	bhi.n	80089d0 <UART_SetConfig+0x2e8>
 800897a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800897e:	d00b      	beq.n	8008998 <UART_SetConfig+0x2b0>
 8008980:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008984:	d824      	bhi.n	80089d0 <UART_SetConfig+0x2e8>
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <UART_SetConfig+0x2aa>
 800898a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800898e:	d006      	beq.n	800899e <UART_SetConfig+0x2b6>
 8008990:	e01e      	b.n	80089d0 <UART_SetConfig+0x2e8>
 8008992:	2300      	movs	r3, #0
 8008994:	77fb      	strb	r3, [r7, #31]
 8008996:	e04b      	b.n	8008a30 <UART_SetConfig+0x348>
 8008998:	2302      	movs	r3, #2
 800899a:	77fb      	strb	r3, [r7, #31]
 800899c:	e048      	b.n	8008a30 <UART_SetConfig+0x348>
 800899e:	2304      	movs	r3, #4
 80089a0:	77fb      	strb	r3, [r7, #31]
 80089a2:	e045      	b.n	8008a30 <UART_SetConfig+0x348>
 80089a4:	2308      	movs	r3, #8
 80089a6:	77fb      	strb	r3, [r7, #31]
 80089a8:	e042      	b.n	8008a30 <UART_SetConfig+0x348>
 80089aa:	bf00      	nop
 80089ac:	efff69f3 	.word	0xefff69f3
 80089b0:	40011000 	.word	0x40011000
 80089b4:	40023800 	.word	0x40023800
 80089b8:	40004400 	.word	0x40004400
 80089bc:	40004800 	.word	0x40004800
 80089c0:	40004c00 	.word	0x40004c00
 80089c4:	40005000 	.word	0x40005000
 80089c8:	40011400 	.word	0x40011400
 80089cc:	40007800 	.word	0x40007800
 80089d0:	2310      	movs	r3, #16
 80089d2:	77fb      	strb	r3, [r7, #31]
 80089d4:	e02c      	b.n	8008a30 <UART_SetConfig+0x348>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a72      	ldr	r2, [pc, #456]	@ (8008ba4 <UART_SetConfig+0x4bc>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d125      	bne.n	8008a2c <UART_SetConfig+0x344>
 80089e0:	4b71      	ldr	r3, [pc, #452]	@ (8008ba8 <UART_SetConfig+0x4c0>)
 80089e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80089ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80089ee:	d017      	beq.n	8008a20 <UART_SetConfig+0x338>
 80089f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80089f4:	d817      	bhi.n	8008a26 <UART_SetConfig+0x33e>
 80089f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089fa:	d00b      	beq.n	8008a14 <UART_SetConfig+0x32c>
 80089fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a00:	d811      	bhi.n	8008a26 <UART_SetConfig+0x33e>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <UART_SetConfig+0x326>
 8008a06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a0a:	d006      	beq.n	8008a1a <UART_SetConfig+0x332>
 8008a0c:	e00b      	b.n	8008a26 <UART_SetConfig+0x33e>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	77fb      	strb	r3, [r7, #31]
 8008a12:	e00d      	b.n	8008a30 <UART_SetConfig+0x348>
 8008a14:	2302      	movs	r3, #2
 8008a16:	77fb      	strb	r3, [r7, #31]
 8008a18:	e00a      	b.n	8008a30 <UART_SetConfig+0x348>
 8008a1a:	2304      	movs	r3, #4
 8008a1c:	77fb      	strb	r3, [r7, #31]
 8008a1e:	e007      	b.n	8008a30 <UART_SetConfig+0x348>
 8008a20:	2308      	movs	r3, #8
 8008a22:	77fb      	strb	r3, [r7, #31]
 8008a24:	e004      	b.n	8008a30 <UART_SetConfig+0x348>
 8008a26:	2310      	movs	r3, #16
 8008a28:	77fb      	strb	r3, [r7, #31]
 8008a2a:	e001      	b.n	8008a30 <UART_SetConfig+0x348>
 8008a2c:	2310      	movs	r3, #16
 8008a2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a38:	d15b      	bne.n	8008af2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008a3a:	7ffb      	ldrb	r3, [r7, #31]
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d828      	bhi.n	8008a92 <UART_SetConfig+0x3aa>
 8008a40:	a201      	add	r2, pc, #4	@ (adr r2, 8008a48 <UART_SetConfig+0x360>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a75 	.word	0x08008a75
 8008a50:	08008a7d 	.word	0x08008a7d
 8008a54:	08008a93 	.word	0x08008a93
 8008a58:	08008a83 	.word	0x08008a83
 8008a5c:	08008a93 	.word	0x08008a93
 8008a60:	08008a93 	.word	0x08008a93
 8008a64:	08008a93 	.word	0x08008a93
 8008a68:	08008a8b 	.word	0x08008a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a6c:	f7fe f83a 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 8008a70:	61b8      	str	r0, [r7, #24]
        break;
 8008a72:	e013      	b.n	8008a9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a74:	f7fe f84a 	bl	8006b0c <HAL_RCC_GetPCLK2Freq>
 8008a78:	61b8      	str	r0, [r7, #24]
        break;
 8008a7a:	e00f      	b.n	8008a9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8008bac <UART_SetConfig+0x4c4>)
 8008a7e:	61bb      	str	r3, [r7, #24]
        break;
 8008a80:	e00c      	b.n	8008a9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a82:	f7fd ff5d 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 8008a86:	61b8      	str	r0, [r7, #24]
        break;
 8008a88:	e008      	b.n	8008a9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a8e:	61bb      	str	r3, [r7, #24]
        break;
 8008a90:	e004      	b.n	8008a9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	77bb      	strb	r3, [r7, #30]
        break;
 8008a9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d074      	beq.n	8008b8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	005a      	lsls	r2, r3, #1
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	085b      	lsrs	r3, r3, #1
 8008aac:	441a      	add	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	d916      	bls.n	8008aec <UART_SetConfig+0x404>
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ac4:	d212      	bcs.n	8008aec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	f023 030f 	bic.w	r3, r3, #15
 8008ace:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	085b      	lsrs	r3, r3, #1
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	89fb      	ldrh	r3, [r7, #14]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	89fa      	ldrh	r2, [r7, #14]
 8008ae8:	60da      	str	r2, [r3, #12]
 8008aea:	e04f      	b.n	8008b8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	77bb      	strb	r3, [r7, #30]
 8008af0:	e04c      	b.n	8008b8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008af2:	7ffb      	ldrb	r3, [r7, #31]
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d828      	bhi.n	8008b4a <UART_SetConfig+0x462>
 8008af8:	a201      	add	r2, pc, #4	@ (adr r2, 8008b00 <UART_SetConfig+0x418>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b25 	.word	0x08008b25
 8008b04:	08008b2d 	.word	0x08008b2d
 8008b08:	08008b35 	.word	0x08008b35
 8008b0c:	08008b4b 	.word	0x08008b4b
 8008b10:	08008b3b 	.word	0x08008b3b
 8008b14:	08008b4b 	.word	0x08008b4b
 8008b18:	08008b4b 	.word	0x08008b4b
 8008b1c:	08008b4b 	.word	0x08008b4b
 8008b20:	08008b43 	.word	0x08008b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b24:	f7fd ffde 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 8008b28:	61b8      	str	r0, [r7, #24]
        break;
 8008b2a:	e013      	b.n	8008b54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b2c:	f7fd ffee 	bl	8006b0c <HAL_RCC_GetPCLK2Freq>
 8008b30:	61b8      	str	r0, [r7, #24]
        break;
 8008b32:	e00f      	b.n	8008b54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b34:	4b1d      	ldr	r3, [pc, #116]	@ (8008bac <UART_SetConfig+0x4c4>)
 8008b36:	61bb      	str	r3, [r7, #24]
        break;
 8008b38:	e00c      	b.n	8008b54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b3a:	f7fd ff01 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 8008b3e:	61b8      	str	r0, [r7, #24]
        break;
 8008b40:	e008      	b.n	8008b54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b46:	61bb      	str	r3, [r7, #24]
        break;
 8008b48:	e004      	b.n	8008b54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	77bb      	strb	r3, [r7, #30]
        break;
 8008b52:	bf00      	nop
    }

    if (pclk != 0U)
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d018      	beq.n	8008b8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	085a      	lsrs	r2, r3, #1
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	441a      	add	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b0f      	cmp	r3, #15
 8008b72:	d909      	bls.n	8008b88 <UART_SetConfig+0x4a0>
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b7a:	d205      	bcs.n	8008b88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60da      	str	r2, [r3, #12]
 8008b86:	e001      	b.n	8008b8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008b98:	7fbb      	ldrb	r3, [r7, #30]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3720      	adds	r7, #32
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	40007c00 	.word	0x40007c00
 8008ba8:	40023800 	.word	0x40023800
 8008bac:	00f42400 	.word	0x00f42400

08008bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bbc:	f003 0308 	and.w	r3, r3, #8
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00a      	beq.n	8008bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00a      	beq.n	8008bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00a      	beq.n	8008c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00a      	beq.n	8008c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c44:	f003 0310 	and.w	r3, r3, #16
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00a      	beq.n	8008c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00a      	beq.n	8008c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	430a      	orrs	r2, r1
 8008c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d01a      	beq.n	8008cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008caa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cae:	d10a      	bne.n	8008cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	605a      	str	r2, [r3, #4]
  }
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08c      	sub	sp, #48	@ 0x30
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d04:	f7fb fb9a 	bl	800443c <HAL_GetTick>
 8008d08:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0308 	and.w	r3, r3, #8
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	d12e      	bne.n	8008d76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d20:	2200      	movs	r2, #0
 8008d22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f83b 	bl	8008da2 <UART_WaitOnFlagUntilTimeout>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d021      	beq.n	8008d76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d46:	623b      	str	r3, [r7, #32]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	61fb      	str	r3, [r7, #28]
 8008d52:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	69b9      	ldr	r1, [r7, #24]
 8008d56:	69fa      	ldr	r2, [r7, #28]
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e6      	bne.n	8008d32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e011      	b.n	8008d9a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3728      	adds	r7, #40	@ 0x28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	603b      	str	r3, [r7, #0]
 8008dae:	4613      	mov	r3, r2
 8008db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db2:	e04f      	b.n	8008e54 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dba:	d04b      	beq.n	8008e54 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dbc:	f7fb fb3e 	bl	800443c <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d302      	bcc.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e04e      	b.n	8008e74 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0304 	and.w	r3, r3, #4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d037      	beq.n	8008e54 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	2b80      	cmp	r3, #128	@ 0x80
 8008de8:	d034      	beq.n	8008e54 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b40      	cmp	r3, #64	@ 0x40
 8008dee:	d031      	beq.n	8008e54 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	2b08      	cmp	r3, #8
 8008dfc:	d110      	bne.n	8008e20 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2208      	movs	r2, #8
 8008e04:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 f838 	bl	8008e7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2208      	movs	r2, #8
 8008e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e029      	b.n	8008e74 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e2e:	d111      	bne.n	8008e54 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f81e 	bl	8008e7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2220      	movs	r2, #32
 8008e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e00f      	b.n	8008e74 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	69da      	ldr	r2, [r3, #28]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	bf0c      	ite	eq
 8008e64:	2301      	moveq	r3, #1
 8008e66:	2300      	movne	r3, #0
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d0a0      	beq.n	8008db4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b095      	sub	sp, #84	@ 0x54
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ea2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ea4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ea8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e6      	bne.n	8008e84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e5      	bne.n	8008eb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d118      	bne.n	8008f24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f023 0310 	bic.w	r3, r3, #16
 8008f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6979      	ldr	r1, [r7, #20]
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e6      	bne.n	8008ef2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2220      	movs	r2, #32
 8008f28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008f38:	bf00      	nop
 8008f3a:	3754      	adds	r7, #84	@ 0x54
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d121      	bne.n	8008f9a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b27      	ldr	r3, [pc, #156]	@ (8008ff8 <FMC_SDRAM_Init+0xb4>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	6851      	ldr	r1, [r2, #4]
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	6892      	ldr	r2, [r2, #8]
 8008f66:	4311      	orrs	r1, r2
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	68d2      	ldr	r2, [r2, #12]
 8008f6c:	4311      	orrs	r1, r2
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	6912      	ldr	r2, [r2, #16]
 8008f72:	4311      	orrs	r1, r2
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	6952      	ldr	r2, [r2, #20]
 8008f78:	4311      	orrs	r1, r2
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	6992      	ldr	r2, [r2, #24]
 8008f7e:	4311      	orrs	r1, r2
 8008f80:	683a      	ldr	r2, [r7, #0]
 8008f82:	69d2      	ldr	r2, [r2, #28]
 8008f84:	4311      	orrs	r1, r2
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	6a12      	ldr	r2, [r2, #32]
 8008f8a:	4311      	orrs	r1, r2
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f90:	430a      	orrs	r2, r1
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	e026      	b.n	8008fe8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	69d9      	ldr	r1, [r3, #28]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	4319      	orrs	r1, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff8 <FMC_SDRAM_Init+0xb4>)
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	6851      	ldr	r1, [r2, #4]
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	6892      	ldr	r2, [r2, #8]
 8008fc8:	4311      	orrs	r1, r2
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	68d2      	ldr	r2, [r2, #12]
 8008fce:	4311      	orrs	r1, r2
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	6912      	ldr	r2, [r2, #16]
 8008fd4:	4311      	orrs	r1, r2
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	6952      	ldr	r2, [r2, #20]
 8008fda:	4311      	orrs	r1, r2
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	6992      	ldr	r2, [r2, #24]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	ffff8000 	.word	0xffff8000

08008ffc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d128      	bne.n	8009060 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	1e59      	subs	r1, r3, #1
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	3b01      	subs	r3, #1
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	4319      	orrs	r1, r3
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	3b01      	subs	r3, #1
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	4319      	orrs	r1, r3
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	3b01      	subs	r3, #1
 8009036:	031b      	lsls	r3, r3, #12
 8009038:	4319      	orrs	r1, r3
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	3b01      	subs	r3, #1
 8009040:	041b      	lsls	r3, r3, #16
 8009042:	4319      	orrs	r1, r3
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	3b01      	subs	r3, #1
 800904a:	051b      	lsls	r3, r3, #20
 800904c:	4319      	orrs	r1, r3
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	3b01      	subs	r3, #1
 8009054:	061b      	lsls	r3, r3, #24
 8009056:	430b      	orrs	r3, r1
 8009058:	431a      	orrs	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	609a      	str	r2, [r3, #8]
 800905e:	e02d      	b.n	80090bc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	4b19      	ldr	r3, [pc, #100]	@ (80090cc <FMC_SDRAM_Timing_Init+0xd0>)
 8009066:	4013      	ands	r3, r2
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	68d2      	ldr	r2, [r2, #12]
 800906c:	3a01      	subs	r2, #1
 800906e:	0311      	lsls	r1, r2, #12
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	6952      	ldr	r2, [r2, #20]
 8009074:	3a01      	subs	r2, #1
 8009076:	0512      	lsls	r2, r2, #20
 8009078:	430a      	orrs	r2, r1
 800907a:	431a      	orrs	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	1e59      	subs	r1, r3, #1
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	3b01      	subs	r3, #1
 8009094:	011b      	lsls	r3, r3, #4
 8009096:	4319      	orrs	r1, r3
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	3b01      	subs	r3, #1
 800909e:	021b      	lsls	r3, r3, #8
 80090a0:	4319      	orrs	r1, r3
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	041b      	lsls	r3, r3, #16
 80090aa:	4319      	orrs	r1, r3
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	061b      	lsls	r3, r3, #24
 80090b4:	430b      	orrs	r3, r1
 80090b6:	431a      	orrs	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3714      	adds	r7, #20
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	ff0f0fff 	.word	0xff0f0fff

080090d0 <__cvt>:
 80090d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d4:	ec57 6b10 	vmov	r6, r7, d0
 80090d8:	2f00      	cmp	r7, #0
 80090da:	460c      	mov	r4, r1
 80090dc:	4619      	mov	r1, r3
 80090de:	463b      	mov	r3, r7
 80090e0:	bfbb      	ittet	lt
 80090e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80090e6:	461f      	movlt	r7, r3
 80090e8:	2300      	movge	r3, #0
 80090ea:	232d      	movlt	r3, #45	@ 0x2d
 80090ec:	700b      	strb	r3, [r1, #0]
 80090ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80090f4:	4691      	mov	r9, r2
 80090f6:	f023 0820 	bic.w	r8, r3, #32
 80090fa:	bfbc      	itt	lt
 80090fc:	4632      	movlt	r2, r6
 80090fe:	4616      	movlt	r6, r2
 8009100:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009104:	d005      	beq.n	8009112 <__cvt+0x42>
 8009106:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800910a:	d100      	bne.n	800910e <__cvt+0x3e>
 800910c:	3401      	adds	r4, #1
 800910e:	2102      	movs	r1, #2
 8009110:	e000      	b.n	8009114 <__cvt+0x44>
 8009112:	2103      	movs	r1, #3
 8009114:	ab03      	add	r3, sp, #12
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	ab02      	add	r3, sp, #8
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	ec47 6b10 	vmov	d0, r6, r7
 8009120:	4653      	mov	r3, sl
 8009122:	4622      	mov	r2, r4
 8009124:	f000 ff3c 	bl	8009fa0 <_dtoa_r>
 8009128:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800912c:	4605      	mov	r5, r0
 800912e:	d119      	bne.n	8009164 <__cvt+0x94>
 8009130:	f019 0f01 	tst.w	r9, #1
 8009134:	d00e      	beq.n	8009154 <__cvt+0x84>
 8009136:	eb00 0904 	add.w	r9, r0, r4
 800913a:	2200      	movs	r2, #0
 800913c:	2300      	movs	r3, #0
 800913e:	4630      	mov	r0, r6
 8009140:	4639      	mov	r1, r7
 8009142:	f7f7 fce1 	bl	8000b08 <__aeabi_dcmpeq>
 8009146:	b108      	cbz	r0, 800914c <__cvt+0x7c>
 8009148:	f8cd 900c 	str.w	r9, [sp, #12]
 800914c:	2230      	movs	r2, #48	@ 0x30
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	454b      	cmp	r3, r9
 8009152:	d31e      	bcc.n	8009192 <__cvt+0xc2>
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009158:	1b5b      	subs	r3, r3, r5
 800915a:	4628      	mov	r0, r5
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	b004      	add	sp, #16
 8009160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009164:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009168:	eb00 0904 	add.w	r9, r0, r4
 800916c:	d1e5      	bne.n	800913a <__cvt+0x6a>
 800916e:	7803      	ldrb	r3, [r0, #0]
 8009170:	2b30      	cmp	r3, #48	@ 0x30
 8009172:	d10a      	bne.n	800918a <__cvt+0xba>
 8009174:	2200      	movs	r2, #0
 8009176:	2300      	movs	r3, #0
 8009178:	4630      	mov	r0, r6
 800917a:	4639      	mov	r1, r7
 800917c:	f7f7 fcc4 	bl	8000b08 <__aeabi_dcmpeq>
 8009180:	b918      	cbnz	r0, 800918a <__cvt+0xba>
 8009182:	f1c4 0401 	rsb	r4, r4, #1
 8009186:	f8ca 4000 	str.w	r4, [sl]
 800918a:	f8da 3000 	ldr.w	r3, [sl]
 800918e:	4499      	add	r9, r3
 8009190:	e7d3      	b.n	800913a <__cvt+0x6a>
 8009192:	1c59      	adds	r1, r3, #1
 8009194:	9103      	str	r1, [sp, #12]
 8009196:	701a      	strb	r2, [r3, #0]
 8009198:	e7d9      	b.n	800914e <__cvt+0x7e>

0800919a <__exponent>:
 800919a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800919c:	2900      	cmp	r1, #0
 800919e:	bfba      	itte	lt
 80091a0:	4249      	neglt	r1, r1
 80091a2:	232d      	movlt	r3, #45	@ 0x2d
 80091a4:	232b      	movge	r3, #43	@ 0x2b
 80091a6:	2909      	cmp	r1, #9
 80091a8:	7002      	strb	r2, [r0, #0]
 80091aa:	7043      	strb	r3, [r0, #1]
 80091ac:	dd29      	ble.n	8009202 <__exponent+0x68>
 80091ae:	f10d 0307 	add.w	r3, sp, #7
 80091b2:	461d      	mov	r5, r3
 80091b4:	270a      	movs	r7, #10
 80091b6:	461a      	mov	r2, r3
 80091b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80091bc:	fb07 1416 	mls	r4, r7, r6, r1
 80091c0:	3430      	adds	r4, #48	@ 0x30
 80091c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80091c6:	460c      	mov	r4, r1
 80091c8:	2c63      	cmp	r4, #99	@ 0x63
 80091ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80091ce:	4631      	mov	r1, r6
 80091d0:	dcf1      	bgt.n	80091b6 <__exponent+0x1c>
 80091d2:	3130      	adds	r1, #48	@ 0x30
 80091d4:	1e94      	subs	r4, r2, #2
 80091d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80091da:	1c41      	adds	r1, r0, #1
 80091dc:	4623      	mov	r3, r4
 80091de:	42ab      	cmp	r3, r5
 80091e0:	d30a      	bcc.n	80091f8 <__exponent+0x5e>
 80091e2:	f10d 0309 	add.w	r3, sp, #9
 80091e6:	1a9b      	subs	r3, r3, r2
 80091e8:	42ac      	cmp	r4, r5
 80091ea:	bf88      	it	hi
 80091ec:	2300      	movhi	r3, #0
 80091ee:	3302      	adds	r3, #2
 80091f0:	4403      	add	r3, r0
 80091f2:	1a18      	subs	r0, r3, r0
 80091f4:	b003      	add	sp, #12
 80091f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80091fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009200:	e7ed      	b.n	80091de <__exponent+0x44>
 8009202:	2330      	movs	r3, #48	@ 0x30
 8009204:	3130      	adds	r1, #48	@ 0x30
 8009206:	7083      	strb	r3, [r0, #2]
 8009208:	70c1      	strb	r1, [r0, #3]
 800920a:	1d03      	adds	r3, r0, #4
 800920c:	e7f1      	b.n	80091f2 <__exponent+0x58>
	...

08009210 <_printf_float>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	b08d      	sub	sp, #52	@ 0x34
 8009216:	460c      	mov	r4, r1
 8009218:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800921c:	4616      	mov	r6, r2
 800921e:	461f      	mov	r7, r3
 8009220:	4605      	mov	r5, r0
 8009222:	f000 fdad 	bl	8009d80 <_localeconv_r>
 8009226:	6803      	ldr	r3, [r0, #0]
 8009228:	9304      	str	r3, [sp, #16]
 800922a:	4618      	mov	r0, r3
 800922c:	f7f7 f840 	bl	80002b0 <strlen>
 8009230:	2300      	movs	r3, #0
 8009232:	930a      	str	r3, [sp, #40]	@ 0x28
 8009234:	f8d8 3000 	ldr.w	r3, [r8]
 8009238:	9005      	str	r0, [sp, #20]
 800923a:	3307      	adds	r3, #7
 800923c:	f023 0307 	bic.w	r3, r3, #7
 8009240:	f103 0208 	add.w	r2, r3, #8
 8009244:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009248:	f8d4 b000 	ldr.w	fp, [r4]
 800924c:	f8c8 2000 	str.w	r2, [r8]
 8009250:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009254:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009258:	9307      	str	r3, [sp, #28]
 800925a:	f8cd 8018 	str.w	r8, [sp, #24]
 800925e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009266:	4b9c      	ldr	r3, [pc, #624]	@ (80094d8 <_printf_float+0x2c8>)
 8009268:	f04f 32ff 	mov.w	r2, #4294967295
 800926c:	f7f7 fc7e 	bl	8000b6c <__aeabi_dcmpun>
 8009270:	bb70      	cbnz	r0, 80092d0 <_printf_float+0xc0>
 8009272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009276:	4b98      	ldr	r3, [pc, #608]	@ (80094d8 <_printf_float+0x2c8>)
 8009278:	f04f 32ff 	mov.w	r2, #4294967295
 800927c:	f7f7 fc58 	bl	8000b30 <__aeabi_dcmple>
 8009280:	bb30      	cbnz	r0, 80092d0 <_printf_float+0xc0>
 8009282:	2200      	movs	r2, #0
 8009284:	2300      	movs	r3, #0
 8009286:	4640      	mov	r0, r8
 8009288:	4649      	mov	r1, r9
 800928a:	f7f7 fc47 	bl	8000b1c <__aeabi_dcmplt>
 800928e:	b110      	cbz	r0, 8009296 <_printf_float+0x86>
 8009290:	232d      	movs	r3, #45	@ 0x2d
 8009292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009296:	4a91      	ldr	r2, [pc, #580]	@ (80094dc <_printf_float+0x2cc>)
 8009298:	4b91      	ldr	r3, [pc, #580]	@ (80094e0 <_printf_float+0x2d0>)
 800929a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800929e:	bf94      	ite	ls
 80092a0:	4690      	movls	r8, r2
 80092a2:	4698      	movhi	r8, r3
 80092a4:	2303      	movs	r3, #3
 80092a6:	6123      	str	r3, [r4, #16]
 80092a8:	f02b 0304 	bic.w	r3, fp, #4
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	f04f 0900 	mov.w	r9, #0
 80092b2:	9700      	str	r7, [sp, #0]
 80092b4:	4633      	mov	r3, r6
 80092b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80092b8:	4621      	mov	r1, r4
 80092ba:	4628      	mov	r0, r5
 80092bc:	f000 f9d2 	bl	8009664 <_printf_common>
 80092c0:	3001      	adds	r0, #1
 80092c2:	f040 808d 	bne.w	80093e0 <_printf_float+0x1d0>
 80092c6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ca:	b00d      	add	sp, #52	@ 0x34
 80092cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d0:	4642      	mov	r2, r8
 80092d2:	464b      	mov	r3, r9
 80092d4:	4640      	mov	r0, r8
 80092d6:	4649      	mov	r1, r9
 80092d8:	f7f7 fc48 	bl	8000b6c <__aeabi_dcmpun>
 80092dc:	b140      	cbz	r0, 80092f0 <_printf_float+0xe0>
 80092de:	464b      	mov	r3, r9
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bfbc      	itt	lt
 80092e4:	232d      	movlt	r3, #45	@ 0x2d
 80092e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80092ea:	4a7e      	ldr	r2, [pc, #504]	@ (80094e4 <_printf_float+0x2d4>)
 80092ec:	4b7e      	ldr	r3, [pc, #504]	@ (80094e8 <_printf_float+0x2d8>)
 80092ee:	e7d4      	b.n	800929a <_printf_float+0x8a>
 80092f0:	6863      	ldr	r3, [r4, #4]
 80092f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80092f6:	9206      	str	r2, [sp, #24]
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	d13b      	bne.n	8009374 <_printf_float+0x164>
 80092fc:	2306      	movs	r3, #6
 80092fe:	6063      	str	r3, [r4, #4]
 8009300:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009304:	2300      	movs	r3, #0
 8009306:	6022      	str	r2, [r4, #0]
 8009308:	9303      	str	r3, [sp, #12]
 800930a:	ab0a      	add	r3, sp, #40	@ 0x28
 800930c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009310:	ab09      	add	r3, sp, #36	@ 0x24
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	6861      	ldr	r1, [r4, #4]
 8009316:	ec49 8b10 	vmov	d0, r8, r9
 800931a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800931e:	4628      	mov	r0, r5
 8009320:	f7ff fed6 	bl	80090d0 <__cvt>
 8009324:	9b06      	ldr	r3, [sp, #24]
 8009326:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009328:	2b47      	cmp	r3, #71	@ 0x47
 800932a:	4680      	mov	r8, r0
 800932c:	d129      	bne.n	8009382 <_printf_float+0x172>
 800932e:	1cc8      	adds	r0, r1, #3
 8009330:	db02      	blt.n	8009338 <_printf_float+0x128>
 8009332:	6863      	ldr	r3, [r4, #4]
 8009334:	4299      	cmp	r1, r3
 8009336:	dd41      	ble.n	80093bc <_printf_float+0x1ac>
 8009338:	f1aa 0a02 	sub.w	sl, sl, #2
 800933c:	fa5f fa8a 	uxtb.w	sl, sl
 8009340:	3901      	subs	r1, #1
 8009342:	4652      	mov	r2, sl
 8009344:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009348:	9109      	str	r1, [sp, #36]	@ 0x24
 800934a:	f7ff ff26 	bl	800919a <__exponent>
 800934e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009350:	1813      	adds	r3, r2, r0
 8009352:	2a01      	cmp	r2, #1
 8009354:	4681      	mov	r9, r0
 8009356:	6123      	str	r3, [r4, #16]
 8009358:	dc02      	bgt.n	8009360 <_printf_float+0x150>
 800935a:	6822      	ldr	r2, [r4, #0]
 800935c:	07d2      	lsls	r2, r2, #31
 800935e:	d501      	bpl.n	8009364 <_printf_float+0x154>
 8009360:	3301      	adds	r3, #1
 8009362:	6123      	str	r3, [r4, #16]
 8009364:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0a2      	beq.n	80092b2 <_printf_float+0xa2>
 800936c:	232d      	movs	r3, #45	@ 0x2d
 800936e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009372:	e79e      	b.n	80092b2 <_printf_float+0xa2>
 8009374:	9a06      	ldr	r2, [sp, #24]
 8009376:	2a47      	cmp	r2, #71	@ 0x47
 8009378:	d1c2      	bne.n	8009300 <_printf_float+0xf0>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1c0      	bne.n	8009300 <_printf_float+0xf0>
 800937e:	2301      	movs	r3, #1
 8009380:	e7bd      	b.n	80092fe <_printf_float+0xee>
 8009382:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009386:	d9db      	bls.n	8009340 <_printf_float+0x130>
 8009388:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800938c:	d118      	bne.n	80093c0 <_printf_float+0x1b0>
 800938e:	2900      	cmp	r1, #0
 8009390:	6863      	ldr	r3, [r4, #4]
 8009392:	dd0b      	ble.n	80093ac <_printf_float+0x19c>
 8009394:	6121      	str	r1, [r4, #16]
 8009396:	b913      	cbnz	r3, 800939e <_printf_float+0x18e>
 8009398:	6822      	ldr	r2, [r4, #0]
 800939a:	07d0      	lsls	r0, r2, #31
 800939c:	d502      	bpl.n	80093a4 <_printf_float+0x194>
 800939e:	3301      	adds	r3, #1
 80093a0:	440b      	add	r3, r1
 80093a2:	6123      	str	r3, [r4, #16]
 80093a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80093a6:	f04f 0900 	mov.w	r9, #0
 80093aa:	e7db      	b.n	8009364 <_printf_float+0x154>
 80093ac:	b913      	cbnz	r3, 80093b4 <_printf_float+0x1a4>
 80093ae:	6822      	ldr	r2, [r4, #0]
 80093b0:	07d2      	lsls	r2, r2, #31
 80093b2:	d501      	bpl.n	80093b8 <_printf_float+0x1a8>
 80093b4:	3302      	adds	r3, #2
 80093b6:	e7f4      	b.n	80093a2 <_printf_float+0x192>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e7f2      	b.n	80093a2 <_printf_float+0x192>
 80093bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80093c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093c2:	4299      	cmp	r1, r3
 80093c4:	db05      	blt.n	80093d2 <_printf_float+0x1c2>
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	6121      	str	r1, [r4, #16]
 80093ca:	07d8      	lsls	r0, r3, #31
 80093cc:	d5ea      	bpl.n	80093a4 <_printf_float+0x194>
 80093ce:	1c4b      	adds	r3, r1, #1
 80093d0:	e7e7      	b.n	80093a2 <_printf_float+0x192>
 80093d2:	2900      	cmp	r1, #0
 80093d4:	bfd4      	ite	le
 80093d6:	f1c1 0202 	rsble	r2, r1, #2
 80093da:	2201      	movgt	r2, #1
 80093dc:	4413      	add	r3, r2
 80093de:	e7e0      	b.n	80093a2 <_printf_float+0x192>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	055a      	lsls	r2, r3, #21
 80093e4:	d407      	bmi.n	80093f6 <_printf_float+0x1e6>
 80093e6:	6923      	ldr	r3, [r4, #16]
 80093e8:	4642      	mov	r2, r8
 80093ea:	4631      	mov	r1, r6
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b8      	blx	r7
 80093f0:	3001      	adds	r0, #1
 80093f2:	d12b      	bne.n	800944c <_printf_float+0x23c>
 80093f4:	e767      	b.n	80092c6 <_printf_float+0xb6>
 80093f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093fa:	f240 80dd 	bls.w	80095b8 <_printf_float+0x3a8>
 80093fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009402:	2200      	movs	r2, #0
 8009404:	2300      	movs	r3, #0
 8009406:	f7f7 fb7f 	bl	8000b08 <__aeabi_dcmpeq>
 800940a:	2800      	cmp	r0, #0
 800940c:	d033      	beq.n	8009476 <_printf_float+0x266>
 800940e:	4a37      	ldr	r2, [pc, #220]	@ (80094ec <_printf_float+0x2dc>)
 8009410:	2301      	movs	r3, #1
 8009412:	4631      	mov	r1, r6
 8009414:	4628      	mov	r0, r5
 8009416:	47b8      	blx	r7
 8009418:	3001      	adds	r0, #1
 800941a:	f43f af54 	beq.w	80092c6 <_printf_float+0xb6>
 800941e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009422:	4543      	cmp	r3, r8
 8009424:	db02      	blt.n	800942c <_printf_float+0x21c>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	07d8      	lsls	r0, r3, #31
 800942a:	d50f      	bpl.n	800944c <_printf_float+0x23c>
 800942c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009430:	4631      	mov	r1, r6
 8009432:	4628      	mov	r0, r5
 8009434:	47b8      	blx	r7
 8009436:	3001      	adds	r0, #1
 8009438:	f43f af45 	beq.w	80092c6 <_printf_float+0xb6>
 800943c:	f04f 0900 	mov.w	r9, #0
 8009440:	f108 38ff 	add.w	r8, r8, #4294967295
 8009444:	f104 0a1a 	add.w	sl, r4, #26
 8009448:	45c8      	cmp	r8, r9
 800944a:	dc09      	bgt.n	8009460 <_printf_float+0x250>
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	079b      	lsls	r3, r3, #30
 8009450:	f100 8103 	bmi.w	800965a <_printf_float+0x44a>
 8009454:	68e0      	ldr	r0, [r4, #12]
 8009456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009458:	4298      	cmp	r0, r3
 800945a:	bfb8      	it	lt
 800945c:	4618      	movlt	r0, r3
 800945e:	e734      	b.n	80092ca <_printf_float+0xba>
 8009460:	2301      	movs	r3, #1
 8009462:	4652      	mov	r2, sl
 8009464:	4631      	mov	r1, r6
 8009466:	4628      	mov	r0, r5
 8009468:	47b8      	blx	r7
 800946a:	3001      	adds	r0, #1
 800946c:	f43f af2b 	beq.w	80092c6 <_printf_float+0xb6>
 8009470:	f109 0901 	add.w	r9, r9, #1
 8009474:	e7e8      	b.n	8009448 <_printf_float+0x238>
 8009476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009478:	2b00      	cmp	r3, #0
 800947a:	dc39      	bgt.n	80094f0 <_printf_float+0x2e0>
 800947c:	4a1b      	ldr	r2, [pc, #108]	@ (80094ec <_printf_float+0x2dc>)
 800947e:	2301      	movs	r3, #1
 8009480:	4631      	mov	r1, r6
 8009482:	4628      	mov	r0, r5
 8009484:	47b8      	blx	r7
 8009486:	3001      	adds	r0, #1
 8009488:	f43f af1d 	beq.w	80092c6 <_printf_float+0xb6>
 800948c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009490:	ea59 0303 	orrs.w	r3, r9, r3
 8009494:	d102      	bne.n	800949c <_printf_float+0x28c>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	07d9      	lsls	r1, r3, #31
 800949a:	d5d7      	bpl.n	800944c <_printf_float+0x23c>
 800949c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094a0:	4631      	mov	r1, r6
 80094a2:	4628      	mov	r0, r5
 80094a4:	47b8      	blx	r7
 80094a6:	3001      	adds	r0, #1
 80094a8:	f43f af0d 	beq.w	80092c6 <_printf_float+0xb6>
 80094ac:	f04f 0a00 	mov.w	sl, #0
 80094b0:	f104 0b1a 	add.w	fp, r4, #26
 80094b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b6:	425b      	negs	r3, r3
 80094b8:	4553      	cmp	r3, sl
 80094ba:	dc01      	bgt.n	80094c0 <_printf_float+0x2b0>
 80094bc:	464b      	mov	r3, r9
 80094be:	e793      	b.n	80093e8 <_printf_float+0x1d8>
 80094c0:	2301      	movs	r3, #1
 80094c2:	465a      	mov	r2, fp
 80094c4:	4631      	mov	r1, r6
 80094c6:	4628      	mov	r0, r5
 80094c8:	47b8      	blx	r7
 80094ca:	3001      	adds	r0, #1
 80094cc:	f43f aefb 	beq.w	80092c6 <_printf_float+0xb6>
 80094d0:	f10a 0a01 	add.w	sl, sl, #1
 80094d4:	e7ee      	b.n	80094b4 <_printf_float+0x2a4>
 80094d6:	bf00      	nop
 80094d8:	7fefffff 	.word	0x7fefffff
 80094dc:	0800bbfc 	.word	0x0800bbfc
 80094e0:	0800bc00 	.word	0x0800bc00
 80094e4:	0800bc04 	.word	0x0800bc04
 80094e8:	0800bc08 	.word	0x0800bc08
 80094ec:	0800bc0c 	.word	0x0800bc0c
 80094f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80094f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80094f6:	4553      	cmp	r3, sl
 80094f8:	bfa8      	it	ge
 80094fa:	4653      	movge	r3, sl
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	4699      	mov	r9, r3
 8009500:	dc36      	bgt.n	8009570 <_printf_float+0x360>
 8009502:	f04f 0b00 	mov.w	fp, #0
 8009506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800950a:	f104 021a 	add.w	r2, r4, #26
 800950e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009510:	9306      	str	r3, [sp, #24]
 8009512:	eba3 0309 	sub.w	r3, r3, r9
 8009516:	455b      	cmp	r3, fp
 8009518:	dc31      	bgt.n	800957e <_printf_float+0x36e>
 800951a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800951c:	459a      	cmp	sl, r3
 800951e:	dc3a      	bgt.n	8009596 <_printf_float+0x386>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	07da      	lsls	r2, r3, #31
 8009524:	d437      	bmi.n	8009596 <_printf_float+0x386>
 8009526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009528:	ebaa 0903 	sub.w	r9, sl, r3
 800952c:	9b06      	ldr	r3, [sp, #24]
 800952e:	ebaa 0303 	sub.w	r3, sl, r3
 8009532:	4599      	cmp	r9, r3
 8009534:	bfa8      	it	ge
 8009536:	4699      	movge	r9, r3
 8009538:	f1b9 0f00 	cmp.w	r9, #0
 800953c:	dc33      	bgt.n	80095a6 <_printf_float+0x396>
 800953e:	f04f 0800 	mov.w	r8, #0
 8009542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009546:	f104 0b1a 	add.w	fp, r4, #26
 800954a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800954c:	ebaa 0303 	sub.w	r3, sl, r3
 8009550:	eba3 0309 	sub.w	r3, r3, r9
 8009554:	4543      	cmp	r3, r8
 8009556:	f77f af79 	ble.w	800944c <_printf_float+0x23c>
 800955a:	2301      	movs	r3, #1
 800955c:	465a      	mov	r2, fp
 800955e:	4631      	mov	r1, r6
 8009560:	4628      	mov	r0, r5
 8009562:	47b8      	blx	r7
 8009564:	3001      	adds	r0, #1
 8009566:	f43f aeae 	beq.w	80092c6 <_printf_float+0xb6>
 800956a:	f108 0801 	add.w	r8, r8, #1
 800956e:	e7ec      	b.n	800954a <_printf_float+0x33a>
 8009570:	4642      	mov	r2, r8
 8009572:	4631      	mov	r1, r6
 8009574:	4628      	mov	r0, r5
 8009576:	47b8      	blx	r7
 8009578:	3001      	adds	r0, #1
 800957a:	d1c2      	bne.n	8009502 <_printf_float+0x2f2>
 800957c:	e6a3      	b.n	80092c6 <_printf_float+0xb6>
 800957e:	2301      	movs	r3, #1
 8009580:	4631      	mov	r1, r6
 8009582:	4628      	mov	r0, r5
 8009584:	9206      	str	r2, [sp, #24]
 8009586:	47b8      	blx	r7
 8009588:	3001      	adds	r0, #1
 800958a:	f43f ae9c 	beq.w	80092c6 <_printf_float+0xb6>
 800958e:	9a06      	ldr	r2, [sp, #24]
 8009590:	f10b 0b01 	add.w	fp, fp, #1
 8009594:	e7bb      	b.n	800950e <_printf_float+0x2fe>
 8009596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800959a:	4631      	mov	r1, r6
 800959c:	4628      	mov	r0, r5
 800959e:	47b8      	blx	r7
 80095a0:	3001      	adds	r0, #1
 80095a2:	d1c0      	bne.n	8009526 <_printf_float+0x316>
 80095a4:	e68f      	b.n	80092c6 <_printf_float+0xb6>
 80095a6:	9a06      	ldr	r2, [sp, #24]
 80095a8:	464b      	mov	r3, r9
 80095aa:	4442      	add	r2, r8
 80095ac:	4631      	mov	r1, r6
 80095ae:	4628      	mov	r0, r5
 80095b0:	47b8      	blx	r7
 80095b2:	3001      	adds	r0, #1
 80095b4:	d1c3      	bne.n	800953e <_printf_float+0x32e>
 80095b6:	e686      	b.n	80092c6 <_printf_float+0xb6>
 80095b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095bc:	f1ba 0f01 	cmp.w	sl, #1
 80095c0:	dc01      	bgt.n	80095c6 <_printf_float+0x3b6>
 80095c2:	07db      	lsls	r3, r3, #31
 80095c4:	d536      	bpl.n	8009634 <_printf_float+0x424>
 80095c6:	2301      	movs	r3, #1
 80095c8:	4642      	mov	r2, r8
 80095ca:	4631      	mov	r1, r6
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b8      	blx	r7
 80095d0:	3001      	adds	r0, #1
 80095d2:	f43f ae78 	beq.w	80092c6 <_printf_float+0xb6>
 80095d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095da:	4631      	mov	r1, r6
 80095dc:	4628      	mov	r0, r5
 80095de:	47b8      	blx	r7
 80095e0:	3001      	adds	r0, #1
 80095e2:	f43f ae70 	beq.w	80092c6 <_printf_float+0xb6>
 80095e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80095ea:	2200      	movs	r2, #0
 80095ec:	2300      	movs	r3, #0
 80095ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095f2:	f7f7 fa89 	bl	8000b08 <__aeabi_dcmpeq>
 80095f6:	b9c0      	cbnz	r0, 800962a <_printf_float+0x41a>
 80095f8:	4653      	mov	r3, sl
 80095fa:	f108 0201 	add.w	r2, r8, #1
 80095fe:	4631      	mov	r1, r6
 8009600:	4628      	mov	r0, r5
 8009602:	47b8      	blx	r7
 8009604:	3001      	adds	r0, #1
 8009606:	d10c      	bne.n	8009622 <_printf_float+0x412>
 8009608:	e65d      	b.n	80092c6 <_printf_float+0xb6>
 800960a:	2301      	movs	r3, #1
 800960c:	465a      	mov	r2, fp
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	47b8      	blx	r7
 8009614:	3001      	adds	r0, #1
 8009616:	f43f ae56 	beq.w	80092c6 <_printf_float+0xb6>
 800961a:	f108 0801 	add.w	r8, r8, #1
 800961e:	45d0      	cmp	r8, sl
 8009620:	dbf3      	blt.n	800960a <_printf_float+0x3fa>
 8009622:	464b      	mov	r3, r9
 8009624:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009628:	e6df      	b.n	80093ea <_printf_float+0x1da>
 800962a:	f04f 0800 	mov.w	r8, #0
 800962e:	f104 0b1a 	add.w	fp, r4, #26
 8009632:	e7f4      	b.n	800961e <_printf_float+0x40e>
 8009634:	2301      	movs	r3, #1
 8009636:	4642      	mov	r2, r8
 8009638:	e7e1      	b.n	80095fe <_printf_float+0x3ee>
 800963a:	2301      	movs	r3, #1
 800963c:	464a      	mov	r2, r9
 800963e:	4631      	mov	r1, r6
 8009640:	4628      	mov	r0, r5
 8009642:	47b8      	blx	r7
 8009644:	3001      	adds	r0, #1
 8009646:	f43f ae3e 	beq.w	80092c6 <_printf_float+0xb6>
 800964a:	f108 0801 	add.w	r8, r8, #1
 800964e:	68e3      	ldr	r3, [r4, #12]
 8009650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009652:	1a5b      	subs	r3, r3, r1
 8009654:	4543      	cmp	r3, r8
 8009656:	dcf0      	bgt.n	800963a <_printf_float+0x42a>
 8009658:	e6fc      	b.n	8009454 <_printf_float+0x244>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	f104 0919 	add.w	r9, r4, #25
 8009662:	e7f4      	b.n	800964e <_printf_float+0x43e>

08009664 <_printf_common>:
 8009664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009668:	4616      	mov	r6, r2
 800966a:	4698      	mov	r8, r3
 800966c:	688a      	ldr	r2, [r1, #8]
 800966e:	690b      	ldr	r3, [r1, #16]
 8009670:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009674:	4293      	cmp	r3, r2
 8009676:	bfb8      	it	lt
 8009678:	4613      	movlt	r3, r2
 800967a:	6033      	str	r3, [r6, #0]
 800967c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009680:	4607      	mov	r7, r0
 8009682:	460c      	mov	r4, r1
 8009684:	b10a      	cbz	r2, 800968a <_printf_common+0x26>
 8009686:	3301      	adds	r3, #1
 8009688:	6033      	str	r3, [r6, #0]
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	0699      	lsls	r1, r3, #26
 800968e:	bf42      	ittt	mi
 8009690:	6833      	ldrmi	r3, [r6, #0]
 8009692:	3302      	addmi	r3, #2
 8009694:	6033      	strmi	r3, [r6, #0]
 8009696:	6825      	ldr	r5, [r4, #0]
 8009698:	f015 0506 	ands.w	r5, r5, #6
 800969c:	d106      	bne.n	80096ac <_printf_common+0x48>
 800969e:	f104 0a19 	add.w	sl, r4, #25
 80096a2:	68e3      	ldr	r3, [r4, #12]
 80096a4:	6832      	ldr	r2, [r6, #0]
 80096a6:	1a9b      	subs	r3, r3, r2
 80096a8:	42ab      	cmp	r3, r5
 80096aa:	dc26      	bgt.n	80096fa <_printf_common+0x96>
 80096ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096b0:	6822      	ldr	r2, [r4, #0]
 80096b2:	3b00      	subs	r3, #0
 80096b4:	bf18      	it	ne
 80096b6:	2301      	movne	r3, #1
 80096b8:	0692      	lsls	r2, r2, #26
 80096ba:	d42b      	bmi.n	8009714 <_printf_common+0xb0>
 80096bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096c0:	4641      	mov	r1, r8
 80096c2:	4638      	mov	r0, r7
 80096c4:	47c8      	blx	r9
 80096c6:	3001      	adds	r0, #1
 80096c8:	d01e      	beq.n	8009708 <_printf_common+0xa4>
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	6922      	ldr	r2, [r4, #16]
 80096ce:	f003 0306 	and.w	r3, r3, #6
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	bf02      	ittt	eq
 80096d6:	68e5      	ldreq	r5, [r4, #12]
 80096d8:	6833      	ldreq	r3, [r6, #0]
 80096da:	1aed      	subeq	r5, r5, r3
 80096dc:	68a3      	ldr	r3, [r4, #8]
 80096de:	bf0c      	ite	eq
 80096e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096e4:	2500      	movne	r5, #0
 80096e6:	4293      	cmp	r3, r2
 80096e8:	bfc4      	itt	gt
 80096ea:	1a9b      	subgt	r3, r3, r2
 80096ec:	18ed      	addgt	r5, r5, r3
 80096ee:	2600      	movs	r6, #0
 80096f0:	341a      	adds	r4, #26
 80096f2:	42b5      	cmp	r5, r6
 80096f4:	d11a      	bne.n	800972c <_printf_common+0xc8>
 80096f6:	2000      	movs	r0, #0
 80096f8:	e008      	b.n	800970c <_printf_common+0xa8>
 80096fa:	2301      	movs	r3, #1
 80096fc:	4652      	mov	r2, sl
 80096fe:	4641      	mov	r1, r8
 8009700:	4638      	mov	r0, r7
 8009702:	47c8      	blx	r9
 8009704:	3001      	adds	r0, #1
 8009706:	d103      	bne.n	8009710 <_printf_common+0xac>
 8009708:	f04f 30ff 	mov.w	r0, #4294967295
 800970c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009710:	3501      	adds	r5, #1
 8009712:	e7c6      	b.n	80096a2 <_printf_common+0x3e>
 8009714:	18e1      	adds	r1, r4, r3
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	2030      	movs	r0, #48	@ 0x30
 800971a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800971e:	4422      	add	r2, r4
 8009720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009724:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009728:	3302      	adds	r3, #2
 800972a:	e7c7      	b.n	80096bc <_printf_common+0x58>
 800972c:	2301      	movs	r3, #1
 800972e:	4622      	mov	r2, r4
 8009730:	4641      	mov	r1, r8
 8009732:	4638      	mov	r0, r7
 8009734:	47c8      	blx	r9
 8009736:	3001      	adds	r0, #1
 8009738:	d0e6      	beq.n	8009708 <_printf_common+0xa4>
 800973a:	3601      	adds	r6, #1
 800973c:	e7d9      	b.n	80096f2 <_printf_common+0x8e>
	...

08009740 <_printf_i>:
 8009740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009744:	7e0f      	ldrb	r7, [r1, #24]
 8009746:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009748:	2f78      	cmp	r7, #120	@ 0x78
 800974a:	4691      	mov	r9, r2
 800974c:	4680      	mov	r8, r0
 800974e:	460c      	mov	r4, r1
 8009750:	469a      	mov	sl, r3
 8009752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009756:	d807      	bhi.n	8009768 <_printf_i+0x28>
 8009758:	2f62      	cmp	r7, #98	@ 0x62
 800975a:	d80a      	bhi.n	8009772 <_printf_i+0x32>
 800975c:	2f00      	cmp	r7, #0
 800975e:	f000 80d2 	beq.w	8009906 <_printf_i+0x1c6>
 8009762:	2f58      	cmp	r7, #88	@ 0x58
 8009764:	f000 80b9 	beq.w	80098da <_printf_i+0x19a>
 8009768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800976c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009770:	e03a      	b.n	80097e8 <_printf_i+0xa8>
 8009772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009776:	2b15      	cmp	r3, #21
 8009778:	d8f6      	bhi.n	8009768 <_printf_i+0x28>
 800977a:	a101      	add	r1, pc, #4	@ (adr r1, 8009780 <_printf_i+0x40>)
 800977c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009780:	080097d9 	.word	0x080097d9
 8009784:	080097ed 	.word	0x080097ed
 8009788:	08009769 	.word	0x08009769
 800978c:	08009769 	.word	0x08009769
 8009790:	08009769 	.word	0x08009769
 8009794:	08009769 	.word	0x08009769
 8009798:	080097ed 	.word	0x080097ed
 800979c:	08009769 	.word	0x08009769
 80097a0:	08009769 	.word	0x08009769
 80097a4:	08009769 	.word	0x08009769
 80097a8:	08009769 	.word	0x08009769
 80097ac:	080098ed 	.word	0x080098ed
 80097b0:	08009817 	.word	0x08009817
 80097b4:	080098a7 	.word	0x080098a7
 80097b8:	08009769 	.word	0x08009769
 80097bc:	08009769 	.word	0x08009769
 80097c0:	0800990f 	.word	0x0800990f
 80097c4:	08009769 	.word	0x08009769
 80097c8:	08009817 	.word	0x08009817
 80097cc:	08009769 	.word	0x08009769
 80097d0:	08009769 	.word	0x08009769
 80097d4:	080098af 	.word	0x080098af
 80097d8:	6833      	ldr	r3, [r6, #0]
 80097da:	1d1a      	adds	r2, r3, #4
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	6032      	str	r2, [r6, #0]
 80097e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097e8:	2301      	movs	r3, #1
 80097ea:	e09d      	b.n	8009928 <_printf_i+0x1e8>
 80097ec:	6833      	ldr	r3, [r6, #0]
 80097ee:	6820      	ldr	r0, [r4, #0]
 80097f0:	1d19      	adds	r1, r3, #4
 80097f2:	6031      	str	r1, [r6, #0]
 80097f4:	0606      	lsls	r6, r0, #24
 80097f6:	d501      	bpl.n	80097fc <_printf_i+0xbc>
 80097f8:	681d      	ldr	r5, [r3, #0]
 80097fa:	e003      	b.n	8009804 <_printf_i+0xc4>
 80097fc:	0645      	lsls	r5, r0, #25
 80097fe:	d5fb      	bpl.n	80097f8 <_printf_i+0xb8>
 8009800:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009804:	2d00      	cmp	r5, #0
 8009806:	da03      	bge.n	8009810 <_printf_i+0xd0>
 8009808:	232d      	movs	r3, #45	@ 0x2d
 800980a:	426d      	negs	r5, r5
 800980c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009810:	4859      	ldr	r0, [pc, #356]	@ (8009978 <_printf_i+0x238>)
 8009812:	230a      	movs	r3, #10
 8009814:	e011      	b.n	800983a <_printf_i+0xfa>
 8009816:	6821      	ldr	r1, [r4, #0]
 8009818:	6833      	ldr	r3, [r6, #0]
 800981a:	0608      	lsls	r0, r1, #24
 800981c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009820:	d402      	bmi.n	8009828 <_printf_i+0xe8>
 8009822:	0649      	lsls	r1, r1, #25
 8009824:	bf48      	it	mi
 8009826:	b2ad      	uxthmi	r5, r5
 8009828:	2f6f      	cmp	r7, #111	@ 0x6f
 800982a:	4853      	ldr	r0, [pc, #332]	@ (8009978 <_printf_i+0x238>)
 800982c:	6033      	str	r3, [r6, #0]
 800982e:	bf14      	ite	ne
 8009830:	230a      	movne	r3, #10
 8009832:	2308      	moveq	r3, #8
 8009834:	2100      	movs	r1, #0
 8009836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800983a:	6866      	ldr	r6, [r4, #4]
 800983c:	60a6      	str	r6, [r4, #8]
 800983e:	2e00      	cmp	r6, #0
 8009840:	bfa2      	ittt	ge
 8009842:	6821      	ldrge	r1, [r4, #0]
 8009844:	f021 0104 	bicge.w	r1, r1, #4
 8009848:	6021      	strge	r1, [r4, #0]
 800984a:	b90d      	cbnz	r5, 8009850 <_printf_i+0x110>
 800984c:	2e00      	cmp	r6, #0
 800984e:	d04b      	beq.n	80098e8 <_printf_i+0x1a8>
 8009850:	4616      	mov	r6, r2
 8009852:	fbb5 f1f3 	udiv	r1, r5, r3
 8009856:	fb03 5711 	mls	r7, r3, r1, r5
 800985a:	5dc7      	ldrb	r7, [r0, r7]
 800985c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009860:	462f      	mov	r7, r5
 8009862:	42bb      	cmp	r3, r7
 8009864:	460d      	mov	r5, r1
 8009866:	d9f4      	bls.n	8009852 <_printf_i+0x112>
 8009868:	2b08      	cmp	r3, #8
 800986a:	d10b      	bne.n	8009884 <_printf_i+0x144>
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	07df      	lsls	r7, r3, #31
 8009870:	d508      	bpl.n	8009884 <_printf_i+0x144>
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	6861      	ldr	r1, [r4, #4]
 8009876:	4299      	cmp	r1, r3
 8009878:	bfde      	ittt	le
 800987a:	2330      	movle	r3, #48	@ 0x30
 800987c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009880:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009884:	1b92      	subs	r2, r2, r6
 8009886:	6122      	str	r2, [r4, #16]
 8009888:	f8cd a000 	str.w	sl, [sp]
 800988c:	464b      	mov	r3, r9
 800988e:	aa03      	add	r2, sp, #12
 8009890:	4621      	mov	r1, r4
 8009892:	4640      	mov	r0, r8
 8009894:	f7ff fee6 	bl	8009664 <_printf_common>
 8009898:	3001      	adds	r0, #1
 800989a:	d14a      	bne.n	8009932 <_printf_i+0x1f2>
 800989c:	f04f 30ff 	mov.w	r0, #4294967295
 80098a0:	b004      	add	sp, #16
 80098a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	f043 0320 	orr.w	r3, r3, #32
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	4833      	ldr	r0, [pc, #204]	@ (800997c <_printf_i+0x23c>)
 80098b0:	2778      	movs	r7, #120	@ 0x78
 80098b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	6831      	ldr	r1, [r6, #0]
 80098ba:	061f      	lsls	r7, r3, #24
 80098bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80098c0:	d402      	bmi.n	80098c8 <_printf_i+0x188>
 80098c2:	065f      	lsls	r7, r3, #25
 80098c4:	bf48      	it	mi
 80098c6:	b2ad      	uxthmi	r5, r5
 80098c8:	6031      	str	r1, [r6, #0]
 80098ca:	07d9      	lsls	r1, r3, #31
 80098cc:	bf44      	itt	mi
 80098ce:	f043 0320 	orrmi.w	r3, r3, #32
 80098d2:	6023      	strmi	r3, [r4, #0]
 80098d4:	b11d      	cbz	r5, 80098de <_printf_i+0x19e>
 80098d6:	2310      	movs	r3, #16
 80098d8:	e7ac      	b.n	8009834 <_printf_i+0xf4>
 80098da:	4827      	ldr	r0, [pc, #156]	@ (8009978 <_printf_i+0x238>)
 80098dc:	e7e9      	b.n	80098b2 <_printf_i+0x172>
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	f023 0320 	bic.w	r3, r3, #32
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	e7f6      	b.n	80098d6 <_printf_i+0x196>
 80098e8:	4616      	mov	r6, r2
 80098ea:	e7bd      	b.n	8009868 <_printf_i+0x128>
 80098ec:	6833      	ldr	r3, [r6, #0]
 80098ee:	6825      	ldr	r5, [r4, #0]
 80098f0:	6961      	ldr	r1, [r4, #20]
 80098f2:	1d18      	adds	r0, r3, #4
 80098f4:	6030      	str	r0, [r6, #0]
 80098f6:	062e      	lsls	r6, r5, #24
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	d501      	bpl.n	8009900 <_printf_i+0x1c0>
 80098fc:	6019      	str	r1, [r3, #0]
 80098fe:	e002      	b.n	8009906 <_printf_i+0x1c6>
 8009900:	0668      	lsls	r0, r5, #25
 8009902:	d5fb      	bpl.n	80098fc <_printf_i+0x1bc>
 8009904:	8019      	strh	r1, [r3, #0]
 8009906:	2300      	movs	r3, #0
 8009908:	6123      	str	r3, [r4, #16]
 800990a:	4616      	mov	r6, r2
 800990c:	e7bc      	b.n	8009888 <_printf_i+0x148>
 800990e:	6833      	ldr	r3, [r6, #0]
 8009910:	1d1a      	adds	r2, r3, #4
 8009912:	6032      	str	r2, [r6, #0]
 8009914:	681e      	ldr	r6, [r3, #0]
 8009916:	6862      	ldr	r2, [r4, #4]
 8009918:	2100      	movs	r1, #0
 800991a:	4630      	mov	r0, r6
 800991c:	f7f6 fc78 	bl	8000210 <memchr>
 8009920:	b108      	cbz	r0, 8009926 <_printf_i+0x1e6>
 8009922:	1b80      	subs	r0, r0, r6
 8009924:	6060      	str	r0, [r4, #4]
 8009926:	6863      	ldr	r3, [r4, #4]
 8009928:	6123      	str	r3, [r4, #16]
 800992a:	2300      	movs	r3, #0
 800992c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009930:	e7aa      	b.n	8009888 <_printf_i+0x148>
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	4632      	mov	r2, r6
 8009936:	4649      	mov	r1, r9
 8009938:	4640      	mov	r0, r8
 800993a:	47d0      	blx	sl
 800993c:	3001      	adds	r0, #1
 800993e:	d0ad      	beq.n	800989c <_printf_i+0x15c>
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	079b      	lsls	r3, r3, #30
 8009944:	d413      	bmi.n	800996e <_printf_i+0x22e>
 8009946:	68e0      	ldr	r0, [r4, #12]
 8009948:	9b03      	ldr	r3, [sp, #12]
 800994a:	4298      	cmp	r0, r3
 800994c:	bfb8      	it	lt
 800994e:	4618      	movlt	r0, r3
 8009950:	e7a6      	b.n	80098a0 <_printf_i+0x160>
 8009952:	2301      	movs	r3, #1
 8009954:	4632      	mov	r2, r6
 8009956:	4649      	mov	r1, r9
 8009958:	4640      	mov	r0, r8
 800995a:	47d0      	blx	sl
 800995c:	3001      	adds	r0, #1
 800995e:	d09d      	beq.n	800989c <_printf_i+0x15c>
 8009960:	3501      	adds	r5, #1
 8009962:	68e3      	ldr	r3, [r4, #12]
 8009964:	9903      	ldr	r1, [sp, #12]
 8009966:	1a5b      	subs	r3, r3, r1
 8009968:	42ab      	cmp	r3, r5
 800996a:	dcf2      	bgt.n	8009952 <_printf_i+0x212>
 800996c:	e7eb      	b.n	8009946 <_printf_i+0x206>
 800996e:	2500      	movs	r5, #0
 8009970:	f104 0619 	add.w	r6, r4, #25
 8009974:	e7f5      	b.n	8009962 <_printf_i+0x222>
 8009976:	bf00      	nop
 8009978:	0800bc0e 	.word	0x0800bc0e
 800997c:	0800bc1f 	.word	0x0800bc1f

08009980 <std>:
 8009980:	2300      	movs	r3, #0
 8009982:	b510      	push	{r4, lr}
 8009984:	4604      	mov	r4, r0
 8009986:	e9c0 3300 	strd	r3, r3, [r0]
 800998a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800998e:	6083      	str	r3, [r0, #8]
 8009990:	8181      	strh	r1, [r0, #12]
 8009992:	6643      	str	r3, [r0, #100]	@ 0x64
 8009994:	81c2      	strh	r2, [r0, #14]
 8009996:	6183      	str	r3, [r0, #24]
 8009998:	4619      	mov	r1, r3
 800999a:	2208      	movs	r2, #8
 800999c:	305c      	adds	r0, #92	@ 0x5c
 800999e:	f000 f9e7 	bl	8009d70 <memset>
 80099a2:	4b0d      	ldr	r3, [pc, #52]	@ (80099d8 <std+0x58>)
 80099a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80099a6:	4b0d      	ldr	r3, [pc, #52]	@ (80099dc <std+0x5c>)
 80099a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099aa:	4b0d      	ldr	r3, [pc, #52]	@ (80099e0 <std+0x60>)
 80099ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099ae:	4b0d      	ldr	r3, [pc, #52]	@ (80099e4 <std+0x64>)
 80099b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80099b2:	4b0d      	ldr	r3, [pc, #52]	@ (80099e8 <std+0x68>)
 80099b4:	6224      	str	r4, [r4, #32]
 80099b6:	429c      	cmp	r4, r3
 80099b8:	d006      	beq.n	80099c8 <std+0x48>
 80099ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099be:	4294      	cmp	r4, r2
 80099c0:	d002      	beq.n	80099c8 <std+0x48>
 80099c2:	33d0      	adds	r3, #208	@ 0xd0
 80099c4:	429c      	cmp	r4, r3
 80099c6:	d105      	bne.n	80099d4 <std+0x54>
 80099c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099d0:	f000 ba4a 	b.w	8009e68 <__retarget_lock_init_recursive>
 80099d4:	bd10      	pop	{r4, pc}
 80099d6:	bf00      	nop
 80099d8:	08009bc1 	.word	0x08009bc1
 80099dc:	08009be3 	.word	0x08009be3
 80099e0:	08009c1b 	.word	0x08009c1b
 80099e4:	08009c3f 	.word	0x08009c3f
 80099e8:	2002083c 	.word	0x2002083c

080099ec <stdio_exit_handler>:
 80099ec:	4a02      	ldr	r2, [pc, #8]	@ (80099f8 <stdio_exit_handler+0xc>)
 80099ee:	4903      	ldr	r1, [pc, #12]	@ (80099fc <stdio_exit_handler+0x10>)
 80099f0:	4803      	ldr	r0, [pc, #12]	@ (8009a00 <stdio_exit_handler+0x14>)
 80099f2:	f000 b869 	b.w	8009ac8 <_fwalk_sglue>
 80099f6:	bf00      	nop
 80099f8:	2000004c 	.word	0x2000004c
 80099fc:	0800b535 	.word	0x0800b535
 8009a00:	2000005c 	.word	0x2000005c

08009a04 <cleanup_stdio>:
 8009a04:	6841      	ldr	r1, [r0, #4]
 8009a06:	4b0c      	ldr	r3, [pc, #48]	@ (8009a38 <cleanup_stdio+0x34>)
 8009a08:	4299      	cmp	r1, r3
 8009a0a:	b510      	push	{r4, lr}
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	d001      	beq.n	8009a14 <cleanup_stdio+0x10>
 8009a10:	f001 fd90 	bl	800b534 <_fflush_r>
 8009a14:	68a1      	ldr	r1, [r4, #8]
 8009a16:	4b09      	ldr	r3, [pc, #36]	@ (8009a3c <cleanup_stdio+0x38>)
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	d002      	beq.n	8009a22 <cleanup_stdio+0x1e>
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f001 fd89 	bl	800b534 <_fflush_r>
 8009a22:	68e1      	ldr	r1, [r4, #12]
 8009a24:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <cleanup_stdio+0x3c>)
 8009a26:	4299      	cmp	r1, r3
 8009a28:	d004      	beq.n	8009a34 <cleanup_stdio+0x30>
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a30:	f001 bd80 	b.w	800b534 <_fflush_r>
 8009a34:	bd10      	pop	{r4, pc}
 8009a36:	bf00      	nop
 8009a38:	2002083c 	.word	0x2002083c
 8009a3c:	200208a4 	.word	0x200208a4
 8009a40:	2002090c 	.word	0x2002090c

08009a44 <global_stdio_init.part.0>:
 8009a44:	b510      	push	{r4, lr}
 8009a46:	4b0b      	ldr	r3, [pc, #44]	@ (8009a74 <global_stdio_init.part.0+0x30>)
 8009a48:	4c0b      	ldr	r4, [pc, #44]	@ (8009a78 <global_stdio_init.part.0+0x34>)
 8009a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8009a7c <global_stdio_init.part.0+0x38>)
 8009a4c:	601a      	str	r2, [r3, #0]
 8009a4e:	4620      	mov	r0, r4
 8009a50:	2200      	movs	r2, #0
 8009a52:	2104      	movs	r1, #4
 8009a54:	f7ff ff94 	bl	8009980 <std>
 8009a58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	2109      	movs	r1, #9
 8009a60:	f7ff ff8e 	bl	8009980 <std>
 8009a64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a68:	2202      	movs	r2, #2
 8009a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a6e:	2112      	movs	r1, #18
 8009a70:	f7ff bf86 	b.w	8009980 <std>
 8009a74:	20020974 	.word	0x20020974
 8009a78:	2002083c 	.word	0x2002083c
 8009a7c:	080099ed 	.word	0x080099ed

08009a80 <__sfp_lock_acquire>:
 8009a80:	4801      	ldr	r0, [pc, #4]	@ (8009a88 <__sfp_lock_acquire+0x8>)
 8009a82:	f000 b9f2 	b.w	8009e6a <__retarget_lock_acquire_recursive>
 8009a86:	bf00      	nop
 8009a88:	2002097d 	.word	0x2002097d

08009a8c <__sfp_lock_release>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	@ (8009a94 <__sfp_lock_release+0x8>)
 8009a8e:	f000 b9ed 	b.w	8009e6c <__retarget_lock_release_recursive>
 8009a92:	bf00      	nop
 8009a94:	2002097d 	.word	0x2002097d

08009a98 <__sinit>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	f7ff fff0 	bl	8009a80 <__sfp_lock_acquire>
 8009aa0:	6a23      	ldr	r3, [r4, #32]
 8009aa2:	b11b      	cbz	r3, 8009aac <__sinit+0x14>
 8009aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aa8:	f7ff bff0 	b.w	8009a8c <__sfp_lock_release>
 8009aac:	4b04      	ldr	r3, [pc, #16]	@ (8009ac0 <__sinit+0x28>)
 8009aae:	6223      	str	r3, [r4, #32]
 8009ab0:	4b04      	ldr	r3, [pc, #16]	@ (8009ac4 <__sinit+0x2c>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1f5      	bne.n	8009aa4 <__sinit+0xc>
 8009ab8:	f7ff ffc4 	bl	8009a44 <global_stdio_init.part.0>
 8009abc:	e7f2      	b.n	8009aa4 <__sinit+0xc>
 8009abe:	bf00      	nop
 8009ac0:	08009a05 	.word	0x08009a05
 8009ac4:	20020974 	.word	0x20020974

08009ac8 <_fwalk_sglue>:
 8009ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009acc:	4607      	mov	r7, r0
 8009ace:	4688      	mov	r8, r1
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	2600      	movs	r6, #0
 8009ad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ad8:	f1b9 0901 	subs.w	r9, r9, #1
 8009adc:	d505      	bpl.n	8009aea <_fwalk_sglue+0x22>
 8009ade:	6824      	ldr	r4, [r4, #0]
 8009ae0:	2c00      	cmp	r4, #0
 8009ae2:	d1f7      	bne.n	8009ad4 <_fwalk_sglue+0xc>
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aea:	89ab      	ldrh	r3, [r5, #12]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d907      	bls.n	8009b00 <_fwalk_sglue+0x38>
 8009af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009af4:	3301      	adds	r3, #1
 8009af6:	d003      	beq.n	8009b00 <_fwalk_sglue+0x38>
 8009af8:	4629      	mov	r1, r5
 8009afa:	4638      	mov	r0, r7
 8009afc:	47c0      	blx	r8
 8009afe:	4306      	orrs	r6, r0
 8009b00:	3568      	adds	r5, #104	@ 0x68
 8009b02:	e7e9      	b.n	8009ad8 <_fwalk_sglue+0x10>

08009b04 <_puts_r>:
 8009b04:	6a03      	ldr	r3, [r0, #32]
 8009b06:	b570      	push	{r4, r5, r6, lr}
 8009b08:	6884      	ldr	r4, [r0, #8]
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	460e      	mov	r6, r1
 8009b0e:	b90b      	cbnz	r3, 8009b14 <_puts_r+0x10>
 8009b10:	f7ff ffc2 	bl	8009a98 <__sinit>
 8009b14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b16:	07db      	lsls	r3, r3, #31
 8009b18:	d405      	bmi.n	8009b26 <_puts_r+0x22>
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	0598      	lsls	r0, r3, #22
 8009b1e:	d402      	bmi.n	8009b26 <_puts_r+0x22>
 8009b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b22:	f000 f9a2 	bl	8009e6a <__retarget_lock_acquire_recursive>
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	0719      	lsls	r1, r3, #28
 8009b2a:	d502      	bpl.n	8009b32 <_puts_r+0x2e>
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d135      	bne.n	8009b9e <_puts_r+0x9a>
 8009b32:	4621      	mov	r1, r4
 8009b34:	4628      	mov	r0, r5
 8009b36:	f000 f8c5 	bl	8009cc4 <__swsetup_r>
 8009b3a:	b380      	cbz	r0, 8009b9e <_puts_r+0x9a>
 8009b3c:	f04f 35ff 	mov.w	r5, #4294967295
 8009b40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b42:	07da      	lsls	r2, r3, #31
 8009b44:	d405      	bmi.n	8009b52 <_puts_r+0x4e>
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	059b      	lsls	r3, r3, #22
 8009b4a:	d402      	bmi.n	8009b52 <_puts_r+0x4e>
 8009b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b4e:	f000 f98d 	bl	8009e6c <__retarget_lock_release_recursive>
 8009b52:	4628      	mov	r0, r5
 8009b54:	bd70      	pop	{r4, r5, r6, pc}
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	da04      	bge.n	8009b64 <_puts_r+0x60>
 8009b5a:	69a2      	ldr	r2, [r4, #24]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	dc17      	bgt.n	8009b90 <_puts_r+0x8c>
 8009b60:	290a      	cmp	r1, #10
 8009b62:	d015      	beq.n	8009b90 <_puts_r+0x8c>
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	1c5a      	adds	r2, r3, #1
 8009b68:	6022      	str	r2, [r4, #0]
 8009b6a:	7019      	strb	r1, [r3, #0]
 8009b6c:	68a3      	ldr	r3, [r4, #8]
 8009b6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b72:	3b01      	subs	r3, #1
 8009b74:	60a3      	str	r3, [r4, #8]
 8009b76:	2900      	cmp	r1, #0
 8009b78:	d1ed      	bne.n	8009b56 <_puts_r+0x52>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	da11      	bge.n	8009ba2 <_puts_r+0x9e>
 8009b7e:	4622      	mov	r2, r4
 8009b80:	210a      	movs	r1, #10
 8009b82:	4628      	mov	r0, r5
 8009b84:	f000 f85f 	bl	8009c46 <__swbuf_r>
 8009b88:	3001      	adds	r0, #1
 8009b8a:	d0d7      	beq.n	8009b3c <_puts_r+0x38>
 8009b8c:	250a      	movs	r5, #10
 8009b8e:	e7d7      	b.n	8009b40 <_puts_r+0x3c>
 8009b90:	4622      	mov	r2, r4
 8009b92:	4628      	mov	r0, r5
 8009b94:	f000 f857 	bl	8009c46 <__swbuf_r>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	d1e7      	bne.n	8009b6c <_puts_r+0x68>
 8009b9c:	e7ce      	b.n	8009b3c <_puts_r+0x38>
 8009b9e:	3e01      	subs	r6, #1
 8009ba0:	e7e4      	b.n	8009b6c <_puts_r+0x68>
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	6022      	str	r2, [r4, #0]
 8009ba8:	220a      	movs	r2, #10
 8009baa:	701a      	strb	r2, [r3, #0]
 8009bac:	e7ee      	b.n	8009b8c <_puts_r+0x88>
	...

08009bb0 <puts>:
 8009bb0:	4b02      	ldr	r3, [pc, #8]	@ (8009bbc <puts+0xc>)
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	f7ff bfa5 	b.w	8009b04 <_puts_r>
 8009bba:	bf00      	nop
 8009bbc:	20000058 	.word	0x20000058

08009bc0 <__sread>:
 8009bc0:	b510      	push	{r4, lr}
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc8:	f000 f900 	bl	8009dcc <_read_r>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	bfab      	itete	ge
 8009bd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009bd4:	181b      	addge	r3, r3, r0
 8009bd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009bda:	bfac      	ite	ge
 8009bdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009bde:	81a3      	strhlt	r3, [r4, #12]
 8009be0:	bd10      	pop	{r4, pc}

08009be2 <__swrite>:
 8009be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be6:	461f      	mov	r7, r3
 8009be8:	898b      	ldrh	r3, [r1, #12]
 8009bea:	05db      	lsls	r3, r3, #23
 8009bec:	4605      	mov	r5, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	4616      	mov	r6, r2
 8009bf2:	d505      	bpl.n	8009c00 <__swrite+0x1e>
 8009bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f000 f8d4 	bl	8009da8 <_lseek_r>
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c0a:	81a3      	strh	r3, [r4, #12]
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	463b      	mov	r3, r7
 8009c10:	4628      	mov	r0, r5
 8009c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c16:	f000 b8eb 	b.w	8009df0 <_write_r>

08009c1a <__sseek>:
 8009c1a:	b510      	push	{r4, lr}
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c22:	f000 f8c1 	bl	8009da8 <_lseek_r>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	bf15      	itete	ne
 8009c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c36:	81a3      	strheq	r3, [r4, #12]
 8009c38:	bf18      	it	ne
 8009c3a:	81a3      	strhne	r3, [r4, #12]
 8009c3c:	bd10      	pop	{r4, pc}

08009c3e <__sclose>:
 8009c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c42:	f000 b8a1 	b.w	8009d88 <_close_r>

08009c46 <__swbuf_r>:
 8009c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c48:	460e      	mov	r6, r1
 8009c4a:	4614      	mov	r4, r2
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	b118      	cbz	r0, 8009c58 <__swbuf_r+0x12>
 8009c50:	6a03      	ldr	r3, [r0, #32]
 8009c52:	b90b      	cbnz	r3, 8009c58 <__swbuf_r+0x12>
 8009c54:	f7ff ff20 	bl	8009a98 <__sinit>
 8009c58:	69a3      	ldr	r3, [r4, #24]
 8009c5a:	60a3      	str	r3, [r4, #8]
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	071a      	lsls	r2, r3, #28
 8009c60:	d501      	bpl.n	8009c66 <__swbuf_r+0x20>
 8009c62:	6923      	ldr	r3, [r4, #16]
 8009c64:	b943      	cbnz	r3, 8009c78 <__swbuf_r+0x32>
 8009c66:	4621      	mov	r1, r4
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f000 f82b 	bl	8009cc4 <__swsetup_r>
 8009c6e:	b118      	cbz	r0, 8009c78 <__swbuf_r+0x32>
 8009c70:	f04f 37ff 	mov.w	r7, #4294967295
 8009c74:	4638      	mov	r0, r7
 8009c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	6922      	ldr	r2, [r4, #16]
 8009c7c:	1a98      	subs	r0, r3, r2
 8009c7e:	6963      	ldr	r3, [r4, #20]
 8009c80:	b2f6      	uxtb	r6, r6
 8009c82:	4283      	cmp	r3, r0
 8009c84:	4637      	mov	r7, r6
 8009c86:	dc05      	bgt.n	8009c94 <__swbuf_r+0x4e>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f001 fc52 	bl	800b534 <_fflush_r>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d1ed      	bne.n	8009c70 <__swbuf_r+0x2a>
 8009c94:	68a3      	ldr	r3, [r4, #8]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	60a3      	str	r3, [r4, #8]
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	6022      	str	r2, [r4, #0]
 8009ca0:	701e      	strb	r6, [r3, #0]
 8009ca2:	6962      	ldr	r2, [r4, #20]
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d004      	beq.n	8009cb4 <__swbuf_r+0x6e>
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	07db      	lsls	r3, r3, #31
 8009cae:	d5e1      	bpl.n	8009c74 <__swbuf_r+0x2e>
 8009cb0:	2e0a      	cmp	r6, #10
 8009cb2:	d1df      	bne.n	8009c74 <__swbuf_r+0x2e>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f001 fc3c 	bl	800b534 <_fflush_r>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d0d9      	beq.n	8009c74 <__swbuf_r+0x2e>
 8009cc0:	e7d6      	b.n	8009c70 <__swbuf_r+0x2a>
	...

08009cc4 <__swsetup_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4b29      	ldr	r3, [pc, #164]	@ (8009d6c <__swsetup_r+0xa8>)
 8009cc8:	4605      	mov	r5, r0
 8009cca:	6818      	ldr	r0, [r3, #0]
 8009ccc:	460c      	mov	r4, r1
 8009cce:	b118      	cbz	r0, 8009cd8 <__swsetup_r+0x14>
 8009cd0:	6a03      	ldr	r3, [r0, #32]
 8009cd2:	b90b      	cbnz	r3, 8009cd8 <__swsetup_r+0x14>
 8009cd4:	f7ff fee0 	bl	8009a98 <__sinit>
 8009cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cdc:	0719      	lsls	r1, r3, #28
 8009cde:	d422      	bmi.n	8009d26 <__swsetup_r+0x62>
 8009ce0:	06da      	lsls	r2, r3, #27
 8009ce2:	d407      	bmi.n	8009cf4 <__swsetup_r+0x30>
 8009ce4:	2209      	movs	r2, #9
 8009ce6:	602a      	str	r2, [r5, #0]
 8009ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf2:	e033      	b.n	8009d5c <__swsetup_r+0x98>
 8009cf4:	0758      	lsls	r0, r3, #29
 8009cf6:	d512      	bpl.n	8009d1e <__swsetup_r+0x5a>
 8009cf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cfa:	b141      	cbz	r1, 8009d0e <__swsetup_r+0x4a>
 8009cfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d00:	4299      	cmp	r1, r3
 8009d02:	d002      	beq.n	8009d0a <__swsetup_r+0x46>
 8009d04:	4628      	mov	r0, r5
 8009d06:	f000 ff0f 	bl	800ab28 <_free_r>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d14:	81a3      	strh	r3, [r4, #12]
 8009d16:	2300      	movs	r3, #0
 8009d18:	6063      	str	r3, [r4, #4]
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	f043 0308 	orr.w	r3, r3, #8
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	6923      	ldr	r3, [r4, #16]
 8009d28:	b94b      	cbnz	r3, 8009d3e <__swsetup_r+0x7a>
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d34:	d003      	beq.n	8009d3e <__swsetup_r+0x7a>
 8009d36:	4621      	mov	r1, r4
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f001 fc49 	bl	800b5d0 <__smakebuf_r>
 8009d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d42:	f013 0201 	ands.w	r2, r3, #1
 8009d46:	d00a      	beq.n	8009d5e <__swsetup_r+0x9a>
 8009d48:	2200      	movs	r2, #0
 8009d4a:	60a2      	str	r2, [r4, #8]
 8009d4c:	6962      	ldr	r2, [r4, #20]
 8009d4e:	4252      	negs	r2, r2
 8009d50:	61a2      	str	r2, [r4, #24]
 8009d52:	6922      	ldr	r2, [r4, #16]
 8009d54:	b942      	cbnz	r2, 8009d68 <__swsetup_r+0xa4>
 8009d56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d5a:	d1c5      	bne.n	8009ce8 <__swsetup_r+0x24>
 8009d5c:	bd38      	pop	{r3, r4, r5, pc}
 8009d5e:	0799      	lsls	r1, r3, #30
 8009d60:	bf58      	it	pl
 8009d62:	6962      	ldrpl	r2, [r4, #20]
 8009d64:	60a2      	str	r2, [r4, #8]
 8009d66:	e7f4      	b.n	8009d52 <__swsetup_r+0x8e>
 8009d68:	2000      	movs	r0, #0
 8009d6a:	e7f7      	b.n	8009d5c <__swsetup_r+0x98>
 8009d6c:	20000058 	.word	0x20000058

08009d70 <memset>:
 8009d70:	4402      	add	r2, r0
 8009d72:	4603      	mov	r3, r0
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d100      	bne.n	8009d7a <memset+0xa>
 8009d78:	4770      	bx	lr
 8009d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d7e:	e7f9      	b.n	8009d74 <memset+0x4>

08009d80 <_localeconv_r>:
 8009d80:	4800      	ldr	r0, [pc, #0]	@ (8009d84 <_localeconv_r+0x4>)
 8009d82:	4770      	bx	lr
 8009d84:	20000198 	.word	0x20000198

08009d88 <_close_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4d06      	ldr	r5, [pc, #24]	@ (8009da4 <_close_r+0x1c>)
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4604      	mov	r4, r0
 8009d90:	4608      	mov	r0, r1
 8009d92:	602b      	str	r3, [r5, #0]
 8009d94:	f7f7 ffba 	bl	8001d0c <_close>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d102      	bne.n	8009da2 <_close_r+0x1a>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	b103      	cbz	r3, 8009da2 <_close_r+0x1a>
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	20020978 	.word	0x20020978

08009da8 <_lseek_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d07      	ldr	r5, [pc, #28]	@ (8009dc8 <_lseek_r+0x20>)
 8009dac:	4604      	mov	r4, r0
 8009dae:	4608      	mov	r0, r1
 8009db0:	4611      	mov	r1, r2
 8009db2:	2200      	movs	r2, #0
 8009db4:	602a      	str	r2, [r5, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	f7f7 ffcf 	bl	8001d5a <_lseek>
 8009dbc:	1c43      	adds	r3, r0, #1
 8009dbe:	d102      	bne.n	8009dc6 <_lseek_r+0x1e>
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	b103      	cbz	r3, 8009dc6 <_lseek_r+0x1e>
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	bd38      	pop	{r3, r4, r5, pc}
 8009dc8:	20020978 	.word	0x20020978

08009dcc <_read_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4d07      	ldr	r5, [pc, #28]	@ (8009dec <_read_r+0x20>)
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	4608      	mov	r0, r1
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	602a      	str	r2, [r5, #0]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	f7f7 ff5d 	bl	8001c9a <_read>
 8009de0:	1c43      	adds	r3, r0, #1
 8009de2:	d102      	bne.n	8009dea <_read_r+0x1e>
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	b103      	cbz	r3, 8009dea <_read_r+0x1e>
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	20020978 	.word	0x20020978

08009df0 <_write_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d07      	ldr	r5, [pc, #28]	@ (8009e10 <_write_r+0x20>)
 8009df4:	4604      	mov	r4, r0
 8009df6:	4608      	mov	r0, r1
 8009df8:	4611      	mov	r1, r2
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	602a      	str	r2, [r5, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	f7f7 ff68 	bl	8001cd4 <_write>
 8009e04:	1c43      	adds	r3, r0, #1
 8009e06:	d102      	bne.n	8009e0e <_write_r+0x1e>
 8009e08:	682b      	ldr	r3, [r5, #0]
 8009e0a:	b103      	cbz	r3, 8009e0e <_write_r+0x1e>
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	20020978 	.word	0x20020978

08009e14 <__errno>:
 8009e14:	4b01      	ldr	r3, [pc, #4]	@ (8009e1c <__errno+0x8>)
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	20000058 	.word	0x20000058

08009e20 <__libc_init_array>:
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	4d0d      	ldr	r5, [pc, #52]	@ (8009e58 <__libc_init_array+0x38>)
 8009e24:	4c0d      	ldr	r4, [pc, #52]	@ (8009e5c <__libc_init_array+0x3c>)
 8009e26:	1b64      	subs	r4, r4, r5
 8009e28:	10a4      	asrs	r4, r4, #2
 8009e2a:	2600      	movs	r6, #0
 8009e2c:	42a6      	cmp	r6, r4
 8009e2e:	d109      	bne.n	8009e44 <__libc_init_array+0x24>
 8009e30:	4d0b      	ldr	r5, [pc, #44]	@ (8009e60 <__libc_init_array+0x40>)
 8009e32:	4c0c      	ldr	r4, [pc, #48]	@ (8009e64 <__libc_init_array+0x44>)
 8009e34:	f001 fe2a 	bl	800ba8c <_init>
 8009e38:	1b64      	subs	r4, r4, r5
 8009e3a:	10a4      	asrs	r4, r4, #2
 8009e3c:	2600      	movs	r6, #0
 8009e3e:	42a6      	cmp	r6, r4
 8009e40:	d105      	bne.n	8009e4e <__libc_init_array+0x2e>
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e48:	4798      	blx	r3
 8009e4a:	3601      	adds	r6, #1
 8009e4c:	e7ee      	b.n	8009e2c <__libc_init_array+0xc>
 8009e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e52:	4798      	blx	r3
 8009e54:	3601      	adds	r6, #1
 8009e56:	e7f2      	b.n	8009e3e <__libc_init_array+0x1e>
 8009e58:	0800bf78 	.word	0x0800bf78
 8009e5c:	0800bf78 	.word	0x0800bf78
 8009e60:	0800bf78 	.word	0x0800bf78
 8009e64:	0800bf7c 	.word	0x0800bf7c

08009e68 <__retarget_lock_init_recursive>:
 8009e68:	4770      	bx	lr

08009e6a <__retarget_lock_acquire_recursive>:
 8009e6a:	4770      	bx	lr

08009e6c <__retarget_lock_release_recursive>:
 8009e6c:	4770      	bx	lr

08009e6e <memcpy>:
 8009e6e:	440a      	add	r2, r1
 8009e70:	4291      	cmp	r1, r2
 8009e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e76:	d100      	bne.n	8009e7a <memcpy+0xc>
 8009e78:	4770      	bx	lr
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e84:	4291      	cmp	r1, r2
 8009e86:	d1f9      	bne.n	8009e7c <memcpy+0xe>
 8009e88:	bd10      	pop	{r4, pc}

08009e8a <quorem>:
 8009e8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8e:	6903      	ldr	r3, [r0, #16]
 8009e90:	690c      	ldr	r4, [r1, #16]
 8009e92:	42a3      	cmp	r3, r4
 8009e94:	4607      	mov	r7, r0
 8009e96:	db7e      	blt.n	8009f96 <quorem+0x10c>
 8009e98:	3c01      	subs	r4, #1
 8009e9a:	f101 0814 	add.w	r8, r1, #20
 8009e9e:	00a3      	lsls	r3, r4, #2
 8009ea0:	f100 0514 	add.w	r5, r0, #20
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ec0:	d32e      	bcc.n	8009f20 <quorem+0x96>
 8009ec2:	f04f 0a00 	mov.w	sl, #0
 8009ec6:	46c4      	mov	ip, r8
 8009ec8:	46ae      	mov	lr, r5
 8009eca:	46d3      	mov	fp, sl
 8009ecc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ed0:	b298      	uxth	r0, r3
 8009ed2:	fb06 a000 	mla	r0, r6, r0, sl
 8009ed6:	0c02      	lsrs	r2, r0, #16
 8009ed8:	0c1b      	lsrs	r3, r3, #16
 8009eda:	fb06 2303 	mla	r3, r6, r3, r2
 8009ede:	f8de 2000 	ldr.w	r2, [lr]
 8009ee2:	b280      	uxth	r0, r0
 8009ee4:	b292      	uxth	r2, r2
 8009ee6:	1a12      	subs	r2, r2, r0
 8009ee8:	445a      	add	r2, fp
 8009eea:	f8de 0000 	ldr.w	r0, [lr]
 8009eee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ef8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009efc:	b292      	uxth	r2, r2
 8009efe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f02:	45e1      	cmp	r9, ip
 8009f04:	f84e 2b04 	str.w	r2, [lr], #4
 8009f08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f0c:	d2de      	bcs.n	8009ecc <quorem+0x42>
 8009f0e:	9b00      	ldr	r3, [sp, #0]
 8009f10:	58eb      	ldr	r3, [r5, r3]
 8009f12:	b92b      	cbnz	r3, 8009f20 <quorem+0x96>
 8009f14:	9b01      	ldr	r3, [sp, #4]
 8009f16:	3b04      	subs	r3, #4
 8009f18:	429d      	cmp	r5, r3
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	d32f      	bcc.n	8009f7e <quorem+0xf4>
 8009f1e:	613c      	str	r4, [r7, #16]
 8009f20:	4638      	mov	r0, r7
 8009f22:	f001 f97b 	bl	800b21c <__mcmp>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	db25      	blt.n	8009f76 <quorem+0xec>
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f32:	f8d1 c000 	ldr.w	ip, [r1]
 8009f36:	fa1f fe82 	uxth.w	lr, r2
 8009f3a:	fa1f f38c 	uxth.w	r3, ip
 8009f3e:	eba3 030e 	sub.w	r3, r3, lr
 8009f42:	4403      	add	r3, r0
 8009f44:	0c12      	lsrs	r2, r2, #16
 8009f46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009f4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f54:	45c1      	cmp	r9, r8
 8009f56:	f841 3b04 	str.w	r3, [r1], #4
 8009f5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f5e:	d2e6      	bcs.n	8009f2e <quorem+0xa4>
 8009f60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f68:	b922      	cbnz	r2, 8009f74 <quorem+0xea>
 8009f6a:	3b04      	subs	r3, #4
 8009f6c:	429d      	cmp	r5, r3
 8009f6e:	461a      	mov	r2, r3
 8009f70:	d30b      	bcc.n	8009f8a <quorem+0x100>
 8009f72:	613c      	str	r4, [r7, #16]
 8009f74:	3601      	adds	r6, #1
 8009f76:	4630      	mov	r0, r6
 8009f78:	b003      	add	sp, #12
 8009f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7e:	6812      	ldr	r2, [r2, #0]
 8009f80:	3b04      	subs	r3, #4
 8009f82:	2a00      	cmp	r2, #0
 8009f84:	d1cb      	bne.n	8009f1e <quorem+0x94>
 8009f86:	3c01      	subs	r4, #1
 8009f88:	e7c6      	b.n	8009f18 <quorem+0x8e>
 8009f8a:	6812      	ldr	r2, [r2, #0]
 8009f8c:	3b04      	subs	r3, #4
 8009f8e:	2a00      	cmp	r2, #0
 8009f90:	d1ef      	bne.n	8009f72 <quorem+0xe8>
 8009f92:	3c01      	subs	r4, #1
 8009f94:	e7ea      	b.n	8009f6c <quorem+0xe2>
 8009f96:	2000      	movs	r0, #0
 8009f98:	e7ee      	b.n	8009f78 <quorem+0xee>
 8009f9a:	0000      	movs	r0, r0
 8009f9c:	0000      	movs	r0, r0
	...

08009fa0 <_dtoa_r>:
 8009fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	69c7      	ldr	r7, [r0, #28]
 8009fa6:	b099      	sub	sp, #100	@ 0x64
 8009fa8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009fac:	ec55 4b10 	vmov	r4, r5, d0
 8009fb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009fb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8009fb4:	4683      	mov	fp, r0
 8009fb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8009fb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009fba:	b97f      	cbnz	r7, 8009fdc <_dtoa_r+0x3c>
 8009fbc:	2010      	movs	r0, #16
 8009fbe:	f000 fdfd 	bl	800abbc <malloc>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8009fc8:	b920      	cbnz	r0, 8009fd4 <_dtoa_r+0x34>
 8009fca:	4ba7      	ldr	r3, [pc, #668]	@ (800a268 <_dtoa_r+0x2c8>)
 8009fcc:	21ef      	movs	r1, #239	@ 0xef
 8009fce:	48a7      	ldr	r0, [pc, #668]	@ (800a26c <_dtoa_r+0x2cc>)
 8009fd0:	f001 fb6c 	bl	800b6ac <__assert_func>
 8009fd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009fd8:	6007      	str	r7, [r0, #0]
 8009fda:	60c7      	str	r7, [r0, #12]
 8009fdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009fe0:	6819      	ldr	r1, [r3, #0]
 8009fe2:	b159      	cbz	r1, 8009ffc <_dtoa_r+0x5c>
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	604a      	str	r2, [r1, #4]
 8009fe8:	2301      	movs	r3, #1
 8009fea:	4093      	lsls	r3, r2
 8009fec:	608b      	str	r3, [r1, #8]
 8009fee:	4658      	mov	r0, fp
 8009ff0:	f000 feda 	bl	800ada8 <_Bfree>
 8009ff4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]
 8009ffc:	1e2b      	subs	r3, r5, #0
 8009ffe:	bfb9      	ittee	lt
 800a000:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a004:	9303      	strlt	r3, [sp, #12]
 800a006:	2300      	movge	r3, #0
 800a008:	6033      	strge	r3, [r6, #0]
 800a00a:	9f03      	ldr	r7, [sp, #12]
 800a00c:	4b98      	ldr	r3, [pc, #608]	@ (800a270 <_dtoa_r+0x2d0>)
 800a00e:	bfbc      	itt	lt
 800a010:	2201      	movlt	r2, #1
 800a012:	6032      	strlt	r2, [r6, #0]
 800a014:	43bb      	bics	r3, r7
 800a016:	d112      	bne.n	800a03e <_dtoa_r+0x9e>
 800a018:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a01a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a024:	4323      	orrs	r3, r4
 800a026:	f000 854d 	beq.w	800aac4 <_dtoa_r+0xb24>
 800a02a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a02c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a284 <_dtoa_r+0x2e4>
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 854f 	beq.w	800aad4 <_dtoa_r+0xb34>
 800a036:	f10a 0303 	add.w	r3, sl, #3
 800a03a:	f000 bd49 	b.w	800aad0 <_dtoa_r+0xb30>
 800a03e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a042:	2200      	movs	r2, #0
 800a044:	ec51 0b17 	vmov	r0, r1, d7
 800a048:	2300      	movs	r3, #0
 800a04a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a04e:	f7f6 fd5b 	bl	8000b08 <__aeabi_dcmpeq>
 800a052:	4680      	mov	r8, r0
 800a054:	b158      	cbz	r0, 800a06e <_dtoa_r+0xce>
 800a056:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a058:	2301      	movs	r3, #1
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a05e:	b113      	cbz	r3, 800a066 <_dtoa_r+0xc6>
 800a060:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a062:	4b84      	ldr	r3, [pc, #528]	@ (800a274 <_dtoa_r+0x2d4>)
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a288 <_dtoa_r+0x2e8>
 800a06a:	f000 bd33 	b.w	800aad4 <_dtoa_r+0xb34>
 800a06e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a072:	aa16      	add	r2, sp, #88	@ 0x58
 800a074:	a917      	add	r1, sp, #92	@ 0x5c
 800a076:	4658      	mov	r0, fp
 800a078:	f001 f980 	bl	800b37c <__d2b>
 800a07c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a080:	4681      	mov	r9, r0
 800a082:	2e00      	cmp	r6, #0
 800a084:	d077      	beq.n	800a176 <_dtoa_r+0x1d6>
 800a086:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a088:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a08c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a094:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a098:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a09c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	4b74      	ldr	r3, [pc, #464]	@ (800a278 <_dtoa_r+0x2d8>)
 800a0a6:	f7f6 f90f 	bl	80002c8 <__aeabi_dsub>
 800a0aa:	a369      	add	r3, pc, #420	@ (adr r3, 800a250 <_dtoa_r+0x2b0>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	f7f6 fac2 	bl	8000638 <__aeabi_dmul>
 800a0b4:	a368      	add	r3, pc, #416	@ (adr r3, 800a258 <_dtoa_r+0x2b8>)
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	f7f6 f907 	bl	80002cc <__adddf3>
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	f7f6 fa4e 	bl	8000564 <__aeabi_i2d>
 800a0c8:	a365      	add	r3, pc, #404	@ (adr r3, 800a260 <_dtoa_r+0x2c0>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 fab3 	bl	8000638 <__aeabi_dmul>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	4629      	mov	r1, r5
 800a0da:	f7f6 f8f7 	bl	80002cc <__adddf3>
 800a0de:	4604      	mov	r4, r0
 800a0e0:	460d      	mov	r5, r1
 800a0e2:	f7f6 fd59 	bl	8000b98 <__aeabi_d2iz>
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	4607      	mov	r7, r0
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f7f6 fd14 	bl	8000b1c <__aeabi_dcmplt>
 800a0f4:	b140      	cbz	r0, 800a108 <_dtoa_r+0x168>
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	f7f6 fa34 	bl	8000564 <__aeabi_i2d>
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	462b      	mov	r3, r5
 800a100:	f7f6 fd02 	bl	8000b08 <__aeabi_dcmpeq>
 800a104:	b900      	cbnz	r0, 800a108 <_dtoa_r+0x168>
 800a106:	3f01      	subs	r7, #1
 800a108:	2f16      	cmp	r7, #22
 800a10a:	d851      	bhi.n	800a1b0 <_dtoa_r+0x210>
 800a10c:	4b5b      	ldr	r3, [pc, #364]	@ (800a27c <_dtoa_r+0x2dc>)
 800a10e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a11a:	f7f6 fcff 	bl	8000b1c <__aeabi_dcmplt>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d048      	beq.n	800a1b4 <_dtoa_r+0x214>
 800a122:	3f01      	subs	r7, #1
 800a124:	2300      	movs	r3, #0
 800a126:	9312      	str	r3, [sp, #72]	@ 0x48
 800a128:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a12a:	1b9b      	subs	r3, r3, r6
 800a12c:	1e5a      	subs	r2, r3, #1
 800a12e:	bf44      	itt	mi
 800a130:	f1c3 0801 	rsbmi	r8, r3, #1
 800a134:	2300      	movmi	r3, #0
 800a136:	9208      	str	r2, [sp, #32]
 800a138:	bf54      	ite	pl
 800a13a:	f04f 0800 	movpl.w	r8, #0
 800a13e:	9308      	strmi	r3, [sp, #32]
 800a140:	2f00      	cmp	r7, #0
 800a142:	db39      	blt.n	800a1b8 <_dtoa_r+0x218>
 800a144:	9b08      	ldr	r3, [sp, #32]
 800a146:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a148:	443b      	add	r3, r7
 800a14a:	9308      	str	r3, [sp, #32]
 800a14c:	2300      	movs	r3, #0
 800a14e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a152:	2b09      	cmp	r3, #9
 800a154:	d864      	bhi.n	800a220 <_dtoa_r+0x280>
 800a156:	2b05      	cmp	r3, #5
 800a158:	bfc4      	itt	gt
 800a15a:	3b04      	subgt	r3, #4
 800a15c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a15e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a160:	f1a3 0302 	sub.w	r3, r3, #2
 800a164:	bfcc      	ite	gt
 800a166:	2400      	movgt	r4, #0
 800a168:	2401      	movle	r4, #1
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d863      	bhi.n	800a236 <_dtoa_r+0x296>
 800a16e:	e8df f003 	tbb	[pc, r3]
 800a172:	372a      	.short	0x372a
 800a174:	5535      	.short	0x5535
 800a176:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a17a:	441e      	add	r6, r3
 800a17c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a180:	2b20      	cmp	r3, #32
 800a182:	bfc1      	itttt	gt
 800a184:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a188:	409f      	lslgt	r7, r3
 800a18a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a18e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a192:	bfd6      	itet	le
 800a194:	f1c3 0320 	rsble	r3, r3, #32
 800a198:	ea47 0003 	orrgt.w	r0, r7, r3
 800a19c:	fa04 f003 	lslle.w	r0, r4, r3
 800a1a0:	f7f6 f9d0 	bl	8000544 <__aeabi_ui2d>
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a1aa:	3e01      	subs	r6, #1
 800a1ac:	9214      	str	r2, [sp, #80]	@ 0x50
 800a1ae:	e777      	b.n	800a0a0 <_dtoa_r+0x100>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e7b8      	b.n	800a126 <_dtoa_r+0x186>
 800a1b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a1b6:	e7b7      	b.n	800a128 <_dtoa_r+0x188>
 800a1b8:	427b      	negs	r3, r7
 800a1ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1bc:	2300      	movs	r3, #0
 800a1be:	eba8 0807 	sub.w	r8, r8, r7
 800a1c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1c4:	e7c4      	b.n	800a150 <_dtoa_r+0x1b0>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dc35      	bgt.n	800a23c <_dtoa_r+0x29c>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	9307      	str	r3, [sp, #28]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1da:	e00b      	b.n	800a1f4 <_dtoa_r+0x254>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e7f3      	b.n	800a1c8 <_dtoa_r+0x228>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1e6:	18fb      	adds	r3, r7, r3
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	9307      	str	r3, [sp, #28]
 800a1f0:	bfb8      	it	lt
 800a1f2:	2301      	movlt	r3, #1
 800a1f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	2204      	movs	r2, #4
 800a1fc:	f102 0514 	add.w	r5, r2, #20
 800a200:	429d      	cmp	r5, r3
 800a202:	d91f      	bls.n	800a244 <_dtoa_r+0x2a4>
 800a204:	6041      	str	r1, [r0, #4]
 800a206:	4658      	mov	r0, fp
 800a208:	f000 fd8e 	bl	800ad28 <_Balloc>
 800a20c:	4682      	mov	sl, r0
 800a20e:	2800      	cmp	r0, #0
 800a210:	d13c      	bne.n	800a28c <_dtoa_r+0x2ec>
 800a212:	4b1b      	ldr	r3, [pc, #108]	@ (800a280 <_dtoa_r+0x2e0>)
 800a214:	4602      	mov	r2, r0
 800a216:	f240 11af 	movw	r1, #431	@ 0x1af
 800a21a:	e6d8      	b.n	8009fce <_dtoa_r+0x2e>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e7e0      	b.n	800a1e2 <_dtoa_r+0x242>
 800a220:	2401      	movs	r4, #1
 800a222:	2300      	movs	r3, #0
 800a224:	9309      	str	r3, [sp, #36]	@ 0x24
 800a226:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a228:	f04f 33ff 	mov.w	r3, #4294967295
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	9307      	str	r3, [sp, #28]
 800a230:	2200      	movs	r2, #0
 800a232:	2312      	movs	r3, #18
 800a234:	e7d0      	b.n	800a1d8 <_dtoa_r+0x238>
 800a236:	2301      	movs	r3, #1
 800a238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a23a:	e7f5      	b.n	800a228 <_dtoa_r+0x288>
 800a23c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	9307      	str	r3, [sp, #28]
 800a242:	e7d7      	b.n	800a1f4 <_dtoa_r+0x254>
 800a244:	3101      	adds	r1, #1
 800a246:	0052      	lsls	r2, r2, #1
 800a248:	e7d8      	b.n	800a1fc <_dtoa_r+0x25c>
 800a24a:	bf00      	nop
 800a24c:	f3af 8000 	nop.w
 800a250:	636f4361 	.word	0x636f4361
 800a254:	3fd287a7 	.word	0x3fd287a7
 800a258:	8b60c8b3 	.word	0x8b60c8b3
 800a25c:	3fc68a28 	.word	0x3fc68a28
 800a260:	509f79fb 	.word	0x509f79fb
 800a264:	3fd34413 	.word	0x3fd34413
 800a268:	0800bc3d 	.word	0x0800bc3d
 800a26c:	0800bc54 	.word	0x0800bc54
 800a270:	7ff00000 	.word	0x7ff00000
 800a274:	0800bc0d 	.word	0x0800bc0d
 800a278:	3ff80000 	.word	0x3ff80000
 800a27c:	0800bd50 	.word	0x0800bd50
 800a280:	0800bcac 	.word	0x0800bcac
 800a284:	0800bc39 	.word	0x0800bc39
 800a288:	0800bc0c 	.word	0x0800bc0c
 800a28c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a290:	6018      	str	r0, [r3, #0]
 800a292:	9b07      	ldr	r3, [sp, #28]
 800a294:	2b0e      	cmp	r3, #14
 800a296:	f200 80a4 	bhi.w	800a3e2 <_dtoa_r+0x442>
 800a29a:	2c00      	cmp	r4, #0
 800a29c:	f000 80a1 	beq.w	800a3e2 <_dtoa_r+0x442>
 800a2a0:	2f00      	cmp	r7, #0
 800a2a2:	dd33      	ble.n	800a30c <_dtoa_r+0x36c>
 800a2a4:	4bad      	ldr	r3, [pc, #692]	@ (800a55c <_dtoa_r+0x5bc>)
 800a2a6:	f007 020f 	and.w	r2, r7, #15
 800a2aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ae:	ed93 7b00 	vldr	d7, [r3]
 800a2b2:	05f8      	lsls	r0, r7, #23
 800a2b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a2b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a2bc:	d516      	bpl.n	800a2ec <_dtoa_r+0x34c>
 800a2be:	4ba8      	ldr	r3, [pc, #672]	@ (800a560 <_dtoa_r+0x5c0>)
 800a2c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2c8:	f7f6 fae0 	bl	800088c <__aeabi_ddiv>
 800a2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2d0:	f004 040f 	and.w	r4, r4, #15
 800a2d4:	2603      	movs	r6, #3
 800a2d6:	4da2      	ldr	r5, [pc, #648]	@ (800a560 <_dtoa_r+0x5c0>)
 800a2d8:	b954      	cbnz	r4, 800a2f0 <_dtoa_r+0x350>
 800a2da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2e2:	f7f6 fad3 	bl	800088c <__aeabi_ddiv>
 800a2e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ea:	e028      	b.n	800a33e <_dtoa_r+0x39e>
 800a2ec:	2602      	movs	r6, #2
 800a2ee:	e7f2      	b.n	800a2d6 <_dtoa_r+0x336>
 800a2f0:	07e1      	lsls	r1, r4, #31
 800a2f2:	d508      	bpl.n	800a306 <_dtoa_r+0x366>
 800a2f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2fc:	f7f6 f99c 	bl	8000638 <__aeabi_dmul>
 800a300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a304:	3601      	adds	r6, #1
 800a306:	1064      	asrs	r4, r4, #1
 800a308:	3508      	adds	r5, #8
 800a30a:	e7e5      	b.n	800a2d8 <_dtoa_r+0x338>
 800a30c:	f000 80d2 	beq.w	800a4b4 <_dtoa_r+0x514>
 800a310:	427c      	negs	r4, r7
 800a312:	4b92      	ldr	r3, [pc, #584]	@ (800a55c <_dtoa_r+0x5bc>)
 800a314:	4d92      	ldr	r5, [pc, #584]	@ (800a560 <_dtoa_r+0x5c0>)
 800a316:	f004 020f 	and.w	r2, r4, #15
 800a31a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a326:	f7f6 f987 	bl	8000638 <__aeabi_dmul>
 800a32a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a32e:	1124      	asrs	r4, r4, #4
 800a330:	2300      	movs	r3, #0
 800a332:	2602      	movs	r6, #2
 800a334:	2c00      	cmp	r4, #0
 800a336:	f040 80b2 	bne.w	800a49e <_dtoa_r+0x4fe>
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1d3      	bne.n	800a2e6 <_dtoa_r+0x346>
 800a33e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a340:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	f000 80b7 	beq.w	800a4b8 <_dtoa_r+0x518>
 800a34a:	4b86      	ldr	r3, [pc, #536]	@ (800a564 <_dtoa_r+0x5c4>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	4620      	mov	r0, r4
 800a350:	4629      	mov	r1, r5
 800a352:	f7f6 fbe3 	bl	8000b1c <__aeabi_dcmplt>
 800a356:	2800      	cmp	r0, #0
 800a358:	f000 80ae 	beq.w	800a4b8 <_dtoa_r+0x518>
 800a35c:	9b07      	ldr	r3, [sp, #28]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 80aa 	beq.w	800a4b8 <_dtoa_r+0x518>
 800a364:	9b00      	ldr	r3, [sp, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	dd37      	ble.n	800a3da <_dtoa_r+0x43a>
 800a36a:	1e7b      	subs	r3, r7, #1
 800a36c:	9304      	str	r3, [sp, #16]
 800a36e:	4620      	mov	r0, r4
 800a370:	4b7d      	ldr	r3, [pc, #500]	@ (800a568 <_dtoa_r+0x5c8>)
 800a372:	2200      	movs	r2, #0
 800a374:	4629      	mov	r1, r5
 800a376:	f7f6 f95f 	bl	8000638 <__aeabi_dmul>
 800a37a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a37e:	9c00      	ldr	r4, [sp, #0]
 800a380:	3601      	adds	r6, #1
 800a382:	4630      	mov	r0, r6
 800a384:	f7f6 f8ee 	bl	8000564 <__aeabi_i2d>
 800a388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a38c:	f7f6 f954 	bl	8000638 <__aeabi_dmul>
 800a390:	4b76      	ldr	r3, [pc, #472]	@ (800a56c <_dtoa_r+0x5cc>)
 800a392:	2200      	movs	r2, #0
 800a394:	f7f5 ff9a 	bl	80002cc <__adddf3>
 800a398:	4605      	mov	r5, r0
 800a39a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a39e:	2c00      	cmp	r4, #0
 800a3a0:	f040 808d 	bne.w	800a4be <_dtoa_r+0x51e>
 800a3a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a8:	4b71      	ldr	r3, [pc, #452]	@ (800a570 <_dtoa_r+0x5d0>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f7f5 ff8c 	bl	80002c8 <__aeabi_dsub>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3b8:	462a      	mov	r2, r5
 800a3ba:	4633      	mov	r3, r6
 800a3bc:	f7f6 fbcc 	bl	8000b58 <__aeabi_dcmpgt>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	f040 828b 	bne.w	800a8dc <_dtoa_r+0x93c>
 800a3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a3d0:	f7f6 fba4 	bl	8000b1c <__aeabi_dcmplt>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	f040 8128 	bne.w	800a62a <_dtoa_r+0x68a>
 800a3da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a3de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a3e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f2c0 815a 	blt.w	800a69e <_dtoa_r+0x6fe>
 800a3ea:	2f0e      	cmp	r7, #14
 800a3ec:	f300 8157 	bgt.w	800a69e <_dtoa_r+0x6fe>
 800a3f0:	4b5a      	ldr	r3, [pc, #360]	@ (800a55c <_dtoa_r+0x5bc>)
 800a3f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3f6:	ed93 7b00 	vldr	d7, [r3]
 800a3fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	ed8d 7b00 	vstr	d7, [sp]
 800a402:	da03      	bge.n	800a40c <_dtoa_r+0x46c>
 800a404:	9b07      	ldr	r3, [sp, #28]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f340 8101 	ble.w	800a60e <_dtoa_r+0x66e>
 800a40c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a410:	4656      	mov	r6, sl
 800a412:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	f7f6 fa37 	bl	800088c <__aeabi_ddiv>
 800a41e:	f7f6 fbbb 	bl	8000b98 <__aeabi_d2iz>
 800a422:	4680      	mov	r8, r0
 800a424:	f7f6 f89e 	bl	8000564 <__aeabi_i2d>
 800a428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a42c:	f7f6 f904 	bl	8000638 <__aeabi_dmul>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4620      	mov	r0, r4
 800a436:	4629      	mov	r1, r5
 800a438:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a43c:	f7f5 ff44 	bl	80002c8 <__aeabi_dsub>
 800a440:	f806 4b01 	strb.w	r4, [r6], #1
 800a444:	9d07      	ldr	r5, [sp, #28]
 800a446:	eba6 040a 	sub.w	r4, r6, sl
 800a44a:	42a5      	cmp	r5, r4
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	f040 8117 	bne.w	800a682 <_dtoa_r+0x6e2>
 800a454:	f7f5 ff3a 	bl	80002cc <__adddf3>
 800a458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a45c:	4604      	mov	r4, r0
 800a45e:	460d      	mov	r5, r1
 800a460:	f7f6 fb7a 	bl	8000b58 <__aeabi_dcmpgt>
 800a464:	2800      	cmp	r0, #0
 800a466:	f040 80f9 	bne.w	800a65c <_dtoa_r+0x6bc>
 800a46a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a46e:	4620      	mov	r0, r4
 800a470:	4629      	mov	r1, r5
 800a472:	f7f6 fb49 	bl	8000b08 <__aeabi_dcmpeq>
 800a476:	b118      	cbz	r0, 800a480 <_dtoa_r+0x4e0>
 800a478:	f018 0f01 	tst.w	r8, #1
 800a47c:	f040 80ee 	bne.w	800a65c <_dtoa_r+0x6bc>
 800a480:	4649      	mov	r1, r9
 800a482:	4658      	mov	r0, fp
 800a484:	f000 fc90 	bl	800ada8 <_Bfree>
 800a488:	2300      	movs	r3, #0
 800a48a:	7033      	strb	r3, [r6, #0]
 800a48c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a48e:	3701      	adds	r7, #1
 800a490:	601f      	str	r7, [r3, #0]
 800a492:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 831d 	beq.w	800aad4 <_dtoa_r+0xb34>
 800a49a:	601e      	str	r6, [r3, #0]
 800a49c:	e31a      	b.n	800aad4 <_dtoa_r+0xb34>
 800a49e:	07e2      	lsls	r2, r4, #31
 800a4a0:	d505      	bpl.n	800a4ae <_dtoa_r+0x50e>
 800a4a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4a6:	f7f6 f8c7 	bl	8000638 <__aeabi_dmul>
 800a4aa:	3601      	adds	r6, #1
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	1064      	asrs	r4, r4, #1
 800a4b0:	3508      	adds	r5, #8
 800a4b2:	e73f      	b.n	800a334 <_dtoa_r+0x394>
 800a4b4:	2602      	movs	r6, #2
 800a4b6:	e742      	b.n	800a33e <_dtoa_r+0x39e>
 800a4b8:	9c07      	ldr	r4, [sp, #28]
 800a4ba:	9704      	str	r7, [sp, #16]
 800a4bc:	e761      	b.n	800a382 <_dtoa_r+0x3e2>
 800a4be:	4b27      	ldr	r3, [pc, #156]	@ (800a55c <_dtoa_r+0x5bc>)
 800a4c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4ca:	4454      	add	r4, sl
 800a4cc:	2900      	cmp	r1, #0
 800a4ce:	d053      	beq.n	800a578 <_dtoa_r+0x5d8>
 800a4d0:	4928      	ldr	r1, [pc, #160]	@ (800a574 <_dtoa_r+0x5d4>)
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	f7f6 f9da 	bl	800088c <__aeabi_ddiv>
 800a4d8:	4633      	mov	r3, r6
 800a4da:	462a      	mov	r2, r5
 800a4dc:	f7f5 fef4 	bl	80002c8 <__aeabi_dsub>
 800a4e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a4e4:	4656      	mov	r6, sl
 800a4e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4ea:	f7f6 fb55 	bl	8000b98 <__aeabi_d2iz>
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	f7f6 f838 	bl	8000564 <__aeabi_i2d>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4fc:	f7f5 fee4 	bl	80002c8 <__aeabi_dsub>
 800a500:	3530      	adds	r5, #48	@ 0x30
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a50a:	f806 5b01 	strb.w	r5, [r6], #1
 800a50e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a512:	f7f6 fb03 	bl	8000b1c <__aeabi_dcmplt>
 800a516:	2800      	cmp	r0, #0
 800a518:	d171      	bne.n	800a5fe <_dtoa_r+0x65e>
 800a51a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a51e:	4911      	ldr	r1, [pc, #68]	@ (800a564 <_dtoa_r+0x5c4>)
 800a520:	2000      	movs	r0, #0
 800a522:	f7f5 fed1 	bl	80002c8 <__aeabi_dsub>
 800a526:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a52a:	f7f6 faf7 	bl	8000b1c <__aeabi_dcmplt>
 800a52e:	2800      	cmp	r0, #0
 800a530:	f040 8095 	bne.w	800a65e <_dtoa_r+0x6be>
 800a534:	42a6      	cmp	r6, r4
 800a536:	f43f af50 	beq.w	800a3da <_dtoa_r+0x43a>
 800a53a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a53e:	4b0a      	ldr	r3, [pc, #40]	@ (800a568 <_dtoa_r+0x5c8>)
 800a540:	2200      	movs	r2, #0
 800a542:	f7f6 f879 	bl	8000638 <__aeabi_dmul>
 800a546:	4b08      	ldr	r3, [pc, #32]	@ (800a568 <_dtoa_r+0x5c8>)
 800a548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a54c:	2200      	movs	r2, #0
 800a54e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a552:	f7f6 f871 	bl	8000638 <__aeabi_dmul>
 800a556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a55a:	e7c4      	b.n	800a4e6 <_dtoa_r+0x546>
 800a55c:	0800bd50 	.word	0x0800bd50
 800a560:	0800bd28 	.word	0x0800bd28
 800a564:	3ff00000 	.word	0x3ff00000
 800a568:	40240000 	.word	0x40240000
 800a56c:	401c0000 	.word	0x401c0000
 800a570:	40140000 	.word	0x40140000
 800a574:	3fe00000 	.word	0x3fe00000
 800a578:	4631      	mov	r1, r6
 800a57a:	4628      	mov	r0, r5
 800a57c:	f7f6 f85c 	bl	8000638 <__aeabi_dmul>
 800a580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a584:	9415      	str	r4, [sp, #84]	@ 0x54
 800a586:	4656      	mov	r6, sl
 800a588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a58c:	f7f6 fb04 	bl	8000b98 <__aeabi_d2iz>
 800a590:	4605      	mov	r5, r0
 800a592:	f7f5 ffe7 	bl	8000564 <__aeabi_i2d>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a59e:	f7f5 fe93 	bl	80002c8 <__aeabi_dsub>
 800a5a2:	3530      	adds	r5, #48	@ 0x30
 800a5a4:	f806 5b01 	strb.w	r5, [r6], #1
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	42a6      	cmp	r6, r4
 800a5ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5b2:	f04f 0200 	mov.w	r2, #0
 800a5b6:	d124      	bne.n	800a602 <_dtoa_r+0x662>
 800a5b8:	4bac      	ldr	r3, [pc, #688]	@ (800a86c <_dtoa_r+0x8cc>)
 800a5ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a5be:	f7f5 fe85 	bl	80002cc <__adddf3>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ca:	f7f6 fac5 	bl	8000b58 <__aeabi_dcmpgt>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d145      	bne.n	800a65e <_dtoa_r+0x6be>
 800a5d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a5d6:	49a5      	ldr	r1, [pc, #660]	@ (800a86c <_dtoa_r+0x8cc>)
 800a5d8:	2000      	movs	r0, #0
 800a5da:	f7f5 fe75 	bl	80002c8 <__aeabi_dsub>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5e6:	f7f6 fa99 	bl	8000b1c <__aeabi_dcmplt>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	f43f aef5 	beq.w	800a3da <_dtoa_r+0x43a>
 800a5f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a5f2:	1e73      	subs	r3, r6, #1
 800a5f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a5f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5fa:	2b30      	cmp	r3, #48	@ 0x30
 800a5fc:	d0f8      	beq.n	800a5f0 <_dtoa_r+0x650>
 800a5fe:	9f04      	ldr	r7, [sp, #16]
 800a600:	e73e      	b.n	800a480 <_dtoa_r+0x4e0>
 800a602:	4b9b      	ldr	r3, [pc, #620]	@ (800a870 <_dtoa_r+0x8d0>)
 800a604:	f7f6 f818 	bl	8000638 <__aeabi_dmul>
 800a608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a60c:	e7bc      	b.n	800a588 <_dtoa_r+0x5e8>
 800a60e:	d10c      	bne.n	800a62a <_dtoa_r+0x68a>
 800a610:	4b98      	ldr	r3, [pc, #608]	@ (800a874 <_dtoa_r+0x8d4>)
 800a612:	2200      	movs	r2, #0
 800a614:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a618:	f7f6 f80e 	bl	8000638 <__aeabi_dmul>
 800a61c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a620:	f7f6 fa90 	bl	8000b44 <__aeabi_dcmpge>
 800a624:	2800      	cmp	r0, #0
 800a626:	f000 8157 	beq.w	800a8d8 <_dtoa_r+0x938>
 800a62a:	2400      	movs	r4, #0
 800a62c:	4625      	mov	r5, r4
 800a62e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a630:	43db      	mvns	r3, r3
 800a632:	9304      	str	r3, [sp, #16]
 800a634:	4656      	mov	r6, sl
 800a636:	2700      	movs	r7, #0
 800a638:	4621      	mov	r1, r4
 800a63a:	4658      	mov	r0, fp
 800a63c:	f000 fbb4 	bl	800ada8 <_Bfree>
 800a640:	2d00      	cmp	r5, #0
 800a642:	d0dc      	beq.n	800a5fe <_dtoa_r+0x65e>
 800a644:	b12f      	cbz	r7, 800a652 <_dtoa_r+0x6b2>
 800a646:	42af      	cmp	r7, r5
 800a648:	d003      	beq.n	800a652 <_dtoa_r+0x6b2>
 800a64a:	4639      	mov	r1, r7
 800a64c:	4658      	mov	r0, fp
 800a64e:	f000 fbab 	bl	800ada8 <_Bfree>
 800a652:	4629      	mov	r1, r5
 800a654:	4658      	mov	r0, fp
 800a656:	f000 fba7 	bl	800ada8 <_Bfree>
 800a65a:	e7d0      	b.n	800a5fe <_dtoa_r+0x65e>
 800a65c:	9704      	str	r7, [sp, #16]
 800a65e:	4633      	mov	r3, r6
 800a660:	461e      	mov	r6, r3
 800a662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a666:	2a39      	cmp	r2, #57	@ 0x39
 800a668:	d107      	bne.n	800a67a <_dtoa_r+0x6da>
 800a66a:	459a      	cmp	sl, r3
 800a66c:	d1f8      	bne.n	800a660 <_dtoa_r+0x6c0>
 800a66e:	9a04      	ldr	r2, [sp, #16]
 800a670:	3201      	adds	r2, #1
 800a672:	9204      	str	r2, [sp, #16]
 800a674:	2230      	movs	r2, #48	@ 0x30
 800a676:	f88a 2000 	strb.w	r2, [sl]
 800a67a:	781a      	ldrb	r2, [r3, #0]
 800a67c:	3201      	adds	r2, #1
 800a67e:	701a      	strb	r2, [r3, #0]
 800a680:	e7bd      	b.n	800a5fe <_dtoa_r+0x65e>
 800a682:	4b7b      	ldr	r3, [pc, #492]	@ (800a870 <_dtoa_r+0x8d0>)
 800a684:	2200      	movs	r2, #0
 800a686:	f7f5 ffd7 	bl	8000638 <__aeabi_dmul>
 800a68a:	2200      	movs	r2, #0
 800a68c:	2300      	movs	r3, #0
 800a68e:	4604      	mov	r4, r0
 800a690:	460d      	mov	r5, r1
 800a692:	f7f6 fa39 	bl	8000b08 <__aeabi_dcmpeq>
 800a696:	2800      	cmp	r0, #0
 800a698:	f43f aebb 	beq.w	800a412 <_dtoa_r+0x472>
 800a69c:	e6f0      	b.n	800a480 <_dtoa_r+0x4e0>
 800a69e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a6a0:	2a00      	cmp	r2, #0
 800a6a2:	f000 80db 	beq.w	800a85c <_dtoa_r+0x8bc>
 800a6a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6a8:	2a01      	cmp	r2, #1
 800a6aa:	f300 80bf 	bgt.w	800a82c <_dtoa_r+0x88c>
 800a6ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	f000 80b7 	beq.w	800a824 <_dtoa_r+0x884>
 800a6b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a6ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6bc:	4646      	mov	r6, r8
 800a6be:	9a08      	ldr	r2, [sp, #32]
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	441a      	add	r2, r3
 800a6c4:	4658      	mov	r0, fp
 800a6c6:	4498      	add	r8, r3
 800a6c8:	9208      	str	r2, [sp, #32]
 800a6ca:	f000 fc21 	bl	800af10 <__i2b>
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	b15e      	cbz	r6, 800a6ea <_dtoa_r+0x74a>
 800a6d2:	9b08      	ldr	r3, [sp, #32]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dd08      	ble.n	800a6ea <_dtoa_r+0x74a>
 800a6d8:	42b3      	cmp	r3, r6
 800a6da:	9a08      	ldr	r2, [sp, #32]
 800a6dc:	bfa8      	it	ge
 800a6de:	4633      	movge	r3, r6
 800a6e0:	eba8 0803 	sub.w	r8, r8, r3
 800a6e4:	1af6      	subs	r6, r6, r3
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	9308      	str	r3, [sp, #32]
 800a6ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6ec:	b1f3      	cbz	r3, 800a72c <_dtoa_r+0x78c>
 800a6ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 80b7 	beq.w	800a864 <_dtoa_r+0x8c4>
 800a6f6:	b18c      	cbz	r4, 800a71c <_dtoa_r+0x77c>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4622      	mov	r2, r4
 800a6fc:	4658      	mov	r0, fp
 800a6fe:	f000 fcc7 	bl	800b090 <__pow5mult>
 800a702:	464a      	mov	r2, r9
 800a704:	4601      	mov	r1, r0
 800a706:	4605      	mov	r5, r0
 800a708:	4658      	mov	r0, fp
 800a70a:	f000 fc17 	bl	800af3c <__multiply>
 800a70e:	4649      	mov	r1, r9
 800a710:	9004      	str	r0, [sp, #16]
 800a712:	4658      	mov	r0, fp
 800a714:	f000 fb48 	bl	800ada8 <_Bfree>
 800a718:	9b04      	ldr	r3, [sp, #16]
 800a71a:	4699      	mov	r9, r3
 800a71c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a71e:	1b1a      	subs	r2, r3, r4
 800a720:	d004      	beq.n	800a72c <_dtoa_r+0x78c>
 800a722:	4649      	mov	r1, r9
 800a724:	4658      	mov	r0, fp
 800a726:	f000 fcb3 	bl	800b090 <__pow5mult>
 800a72a:	4681      	mov	r9, r0
 800a72c:	2101      	movs	r1, #1
 800a72e:	4658      	mov	r0, fp
 800a730:	f000 fbee 	bl	800af10 <__i2b>
 800a734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a736:	4604      	mov	r4, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 81cf 	beq.w	800aadc <_dtoa_r+0xb3c>
 800a73e:	461a      	mov	r2, r3
 800a740:	4601      	mov	r1, r0
 800a742:	4658      	mov	r0, fp
 800a744:	f000 fca4 	bl	800b090 <__pow5mult>
 800a748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	4604      	mov	r4, r0
 800a74e:	f300 8095 	bgt.w	800a87c <_dtoa_r+0x8dc>
 800a752:	9b02      	ldr	r3, [sp, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	f040 8087 	bne.w	800a868 <_dtoa_r+0x8c8>
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a760:	2b00      	cmp	r3, #0
 800a762:	f040 8089 	bne.w	800a878 <_dtoa_r+0x8d8>
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a76c:	0d1b      	lsrs	r3, r3, #20
 800a76e:	051b      	lsls	r3, r3, #20
 800a770:	b12b      	cbz	r3, 800a77e <_dtoa_r+0x7de>
 800a772:	9b08      	ldr	r3, [sp, #32]
 800a774:	3301      	adds	r3, #1
 800a776:	9308      	str	r3, [sp, #32]
 800a778:	f108 0801 	add.w	r8, r8, #1
 800a77c:	2301      	movs	r3, #1
 800a77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 81b0 	beq.w	800aae8 <_dtoa_r+0xb48>
 800a788:	6923      	ldr	r3, [r4, #16]
 800a78a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a78e:	6918      	ldr	r0, [r3, #16]
 800a790:	f000 fb72 	bl	800ae78 <__hi0bits>
 800a794:	f1c0 0020 	rsb	r0, r0, #32
 800a798:	9b08      	ldr	r3, [sp, #32]
 800a79a:	4418      	add	r0, r3
 800a79c:	f010 001f 	ands.w	r0, r0, #31
 800a7a0:	d077      	beq.n	800a892 <_dtoa_r+0x8f2>
 800a7a2:	f1c0 0320 	rsb	r3, r0, #32
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	dd6b      	ble.n	800a882 <_dtoa_r+0x8e2>
 800a7aa:	9b08      	ldr	r3, [sp, #32]
 800a7ac:	f1c0 001c 	rsb	r0, r0, #28
 800a7b0:	4403      	add	r3, r0
 800a7b2:	4480      	add	r8, r0
 800a7b4:	4406      	add	r6, r0
 800a7b6:	9308      	str	r3, [sp, #32]
 800a7b8:	f1b8 0f00 	cmp.w	r8, #0
 800a7bc:	dd05      	ble.n	800a7ca <_dtoa_r+0x82a>
 800a7be:	4649      	mov	r1, r9
 800a7c0:	4642      	mov	r2, r8
 800a7c2:	4658      	mov	r0, fp
 800a7c4:	f000 fcbe 	bl	800b144 <__lshift>
 800a7c8:	4681      	mov	r9, r0
 800a7ca:	9b08      	ldr	r3, [sp, #32]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dd05      	ble.n	800a7dc <_dtoa_r+0x83c>
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	4658      	mov	r0, fp
 800a7d6:	f000 fcb5 	bl	800b144 <__lshift>
 800a7da:	4604      	mov	r4, r0
 800a7dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d059      	beq.n	800a896 <_dtoa_r+0x8f6>
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	4648      	mov	r0, r9
 800a7e6:	f000 fd19 	bl	800b21c <__mcmp>
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	da53      	bge.n	800a896 <_dtoa_r+0x8f6>
 800a7ee:	1e7b      	subs	r3, r7, #1
 800a7f0:	9304      	str	r3, [sp, #16]
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	220a      	movs	r2, #10
 800a7f8:	4658      	mov	r0, fp
 800a7fa:	f000 faf7 	bl	800adec <__multadd>
 800a7fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a800:	4681      	mov	r9, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	f000 8172 	beq.w	800aaec <_dtoa_r+0xb4c>
 800a808:	2300      	movs	r3, #0
 800a80a:	4629      	mov	r1, r5
 800a80c:	220a      	movs	r2, #10
 800a80e:	4658      	mov	r0, fp
 800a810:	f000 faec 	bl	800adec <__multadd>
 800a814:	9b00      	ldr	r3, [sp, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	4605      	mov	r5, r0
 800a81a:	dc67      	bgt.n	800a8ec <_dtoa_r+0x94c>
 800a81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a81e:	2b02      	cmp	r3, #2
 800a820:	dc41      	bgt.n	800a8a6 <_dtoa_r+0x906>
 800a822:	e063      	b.n	800a8ec <_dtoa_r+0x94c>
 800a824:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a826:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a82a:	e746      	b.n	800a6ba <_dtoa_r+0x71a>
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	1e5c      	subs	r4, r3, #1
 800a830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a832:	42a3      	cmp	r3, r4
 800a834:	bfbf      	itttt	lt
 800a836:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a838:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a83a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a83c:	1ae3      	sublt	r3, r4, r3
 800a83e:	bfb4      	ite	lt
 800a840:	18d2      	addlt	r2, r2, r3
 800a842:	1b1c      	subge	r4, r3, r4
 800a844:	9b07      	ldr	r3, [sp, #28]
 800a846:	bfbc      	itt	lt
 800a848:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a84a:	2400      	movlt	r4, #0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	bfb5      	itete	lt
 800a850:	eba8 0603 	sublt.w	r6, r8, r3
 800a854:	9b07      	ldrge	r3, [sp, #28]
 800a856:	2300      	movlt	r3, #0
 800a858:	4646      	movge	r6, r8
 800a85a:	e730      	b.n	800a6be <_dtoa_r+0x71e>
 800a85c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a85e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a860:	4646      	mov	r6, r8
 800a862:	e735      	b.n	800a6d0 <_dtoa_r+0x730>
 800a864:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a866:	e75c      	b.n	800a722 <_dtoa_r+0x782>
 800a868:	2300      	movs	r3, #0
 800a86a:	e788      	b.n	800a77e <_dtoa_r+0x7de>
 800a86c:	3fe00000 	.word	0x3fe00000
 800a870:	40240000 	.word	0x40240000
 800a874:	40140000 	.word	0x40140000
 800a878:	9b02      	ldr	r3, [sp, #8]
 800a87a:	e780      	b.n	800a77e <_dtoa_r+0x7de>
 800a87c:	2300      	movs	r3, #0
 800a87e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a880:	e782      	b.n	800a788 <_dtoa_r+0x7e8>
 800a882:	d099      	beq.n	800a7b8 <_dtoa_r+0x818>
 800a884:	9a08      	ldr	r2, [sp, #32]
 800a886:	331c      	adds	r3, #28
 800a888:	441a      	add	r2, r3
 800a88a:	4498      	add	r8, r3
 800a88c:	441e      	add	r6, r3
 800a88e:	9208      	str	r2, [sp, #32]
 800a890:	e792      	b.n	800a7b8 <_dtoa_r+0x818>
 800a892:	4603      	mov	r3, r0
 800a894:	e7f6      	b.n	800a884 <_dtoa_r+0x8e4>
 800a896:	9b07      	ldr	r3, [sp, #28]
 800a898:	9704      	str	r7, [sp, #16]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	dc20      	bgt.n	800a8e0 <_dtoa_r+0x940>
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	dd1e      	ble.n	800a8e4 <_dtoa_r+0x944>
 800a8a6:	9b00      	ldr	r3, [sp, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f47f aec0 	bne.w	800a62e <_dtoa_r+0x68e>
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	2205      	movs	r2, #5
 800a8b2:	4658      	mov	r0, fp
 800a8b4:	f000 fa9a 	bl	800adec <__multadd>
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	4648      	mov	r0, r9
 800a8be:	f000 fcad 	bl	800b21c <__mcmp>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	f77f aeb3 	ble.w	800a62e <_dtoa_r+0x68e>
 800a8c8:	4656      	mov	r6, sl
 800a8ca:	2331      	movs	r3, #49	@ 0x31
 800a8cc:	f806 3b01 	strb.w	r3, [r6], #1
 800a8d0:	9b04      	ldr	r3, [sp, #16]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	9304      	str	r3, [sp, #16]
 800a8d6:	e6ae      	b.n	800a636 <_dtoa_r+0x696>
 800a8d8:	9c07      	ldr	r4, [sp, #28]
 800a8da:	9704      	str	r7, [sp, #16]
 800a8dc:	4625      	mov	r5, r4
 800a8de:	e7f3      	b.n	800a8c8 <_dtoa_r+0x928>
 800a8e0:	9b07      	ldr	r3, [sp, #28]
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 8104 	beq.w	800aaf4 <_dtoa_r+0xb54>
 800a8ec:	2e00      	cmp	r6, #0
 800a8ee:	dd05      	ble.n	800a8fc <_dtoa_r+0x95c>
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	4632      	mov	r2, r6
 800a8f4:	4658      	mov	r0, fp
 800a8f6:	f000 fc25 	bl	800b144 <__lshift>
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d05a      	beq.n	800a9b8 <_dtoa_r+0xa18>
 800a902:	6869      	ldr	r1, [r5, #4]
 800a904:	4658      	mov	r0, fp
 800a906:	f000 fa0f 	bl	800ad28 <_Balloc>
 800a90a:	4606      	mov	r6, r0
 800a90c:	b928      	cbnz	r0, 800a91a <_dtoa_r+0x97a>
 800a90e:	4b84      	ldr	r3, [pc, #528]	@ (800ab20 <_dtoa_r+0xb80>)
 800a910:	4602      	mov	r2, r0
 800a912:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a916:	f7ff bb5a 	b.w	8009fce <_dtoa_r+0x2e>
 800a91a:	692a      	ldr	r2, [r5, #16]
 800a91c:	3202      	adds	r2, #2
 800a91e:	0092      	lsls	r2, r2, #2
 800a920:	f105 010c 	add.w	r1, r5, #12
 800a924:	300c      	adds	r0, #12
 800a926:	f7ff faa2 	bl	8009e6e <memcpy>
 800a92a:	2201      	movs	r2, #1
 800a92c:	4631      	mov	r1, r6
 800a92e:	4658      	mov	r0, fp
 800a930:	f000 fc08 	bl	800b144 <__lshift>
 800a934:	f10a 0301 	add.w	r3, sl, #1
 800a938:	9307      	str	r3, [sp, #28]
 800a93a:	9b00      	ldr	r3, [sp, #0]
 800a93c:	4453      	add	r3, sl
 800a93e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a940:	9b02      	ldr	r3, [sp, #8]
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	462f      	mov	r7, r5
 800a948:	930a      	str	r3, [sp, #40]	@ 0x28
 800a94a:	4605      	mov	r5, r0
 800a94c:	9b07      	ldr	r3, [sp, #28]
 800a94e:	4621      	mov	r1, r4
 800a950:	3b01      	subs	r3, #1
 800a952:	4648      	mov	r0, r9
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	f7ff fa98 	bl	8009e8a <quorem>
 800a95a:	4639      	mov	r1, r7
 800a95c:	9002      	str	r0, [sp, #8]
 800a95e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a962:	4648      	mov	r0, r9
 800a964:	f000 fc5a 	bl	800b21c <__mcmp>
 800a968:	462a      	mov	r2, r5
 800a96a:	9008      	str	r0, [sp, #32]
 800a96c:	4621      	mov	r1, r4
 800a96e:	4658      	mov	r0, fp
 800a970:	f000 fc70 	bl	800b254 <__mdiff>
 800a974:	68c2      	ldr	r2, [r0, #12]
 800a976:	4606      	mov	r6, r0
 800a978:	bb02      	cbnz	r2, 800a9bc <_dtoa_r+0xa1c>
 800a97a:	4601      	mov	r1, r0
 800a97c:	4648      	mov	r0, r9
 800a97e:	f000 fc4d 	bl	800b21c <__mcmp>
 800a982:	4602      	mov	r2, r0
 800a984:	4631      	mov	r1, r6
 800a986:	4658      	mov	r0, fp
 800a988:	920e      	str	r2, [sp, #56]	@ 0x38
 800a98a:	f000 fa0d 	bl	800ada8 <_Bfree>
 800a98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a990:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a992:	9e07      	ldr	r6, [sp, #28]
 800a994:	ea43 0102 	orr.w	r1, r3, r2
 800a998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a99a:	4319      	orrs	r1, r3
 800a99c:	d110      	bne.n	800a9c0 <_dtoa_r+0xa20>
 800a99e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a9a2:	d029      	beq.n	800a9f8 <_dtoa_r+0xa58>
 800a9a4:	9b08      	ldr	r3, [sp, #32]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	dd02      	ble.n	800a9b0 <_dtoa_r+0xa10>
 800a9aa:	9b02      	ldr	r3, [sp, #8]
 800a9ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a9b0:	9b00      	ldr	r3, [sp, #0]
 800a9b2:	f883 8000 	strb.w	r8, [r3]
 800a9b6:	e63f      	b.n	800a638 <_dtoa_r+0x698>
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	e7bb      	b.n	800a934 <_dtoa_r+0x994>
 800a9bc:	2201      	movs	r2, #1
 800a9be:	e7e1      	b.n	800a984 <_dtoa_r+0x9e4>
 800a9c0:	9b08      	ldr	r3, [sp, #32]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	db04      	blt.n	800a9d0 <_dtoa_r+0xa30>
 800a9c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9c8:	430b      	orrs	r3, r1
 800a9ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a9cc:	430b      	orrs	r3, r1
 800a9ce:	d120      	bne.n	800aa12 <_dtoa_r+0xa72>
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	dded      	ble.n	800a9b0 <_dtoa_r+0xa10>
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	4658      	mov	r0, fp
 800a9da:	f000 fbb3 	bl	800b144 <__lshift>
 800a9de:	4621      	mov	r1, r4
 800a9e0:	4681      	mov	r9, r0
 800a9e2:	f000 fc1b 	bl	800b21c <__mcmp>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	dc03      	bgt.n	800a9f2 <_dtoa_r+0xa52>
 800a9ea:	d1e1      	bne.n	800a9b0 <_dtoa_r+0xa10>
 800a9ec:	f018 0f01 	tst.w	r8, #1
 800a9f0:	d0de      	beq.n	800a9b0 <_dtoa_r+0xa10>
 800a9f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a9f6:	d1d8      	bne.n	800a9aa <_dtoa_r+0xa0a>
 800a9f8:	9a00      	ldr	r2, [sp, #0]
 800a9fa:	2339      	movs	r3, #57	@ 0x39
 800a9fc:	7013      	strb	r3, [r2, #0]
 800a9fe:	4633      	mov	r3, r6
 800aa00:	461e      	mov	r6, r3
 800aa02:	3b01      	subs	r3, #1
 800aa04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa08:	2a39      	cmp	r2, #57	@ 0x39
 800aa0a:	d052      	beq.n	800aab2 <_dtoa_r+0xb12>
 800aa0c:	3201      	adds	r2, #1
 800aa0e:	701a      	strb	r2, [r3, #0]
 800aa10:	e612      	b.n	800a638 <_dtoa_r+0x698>
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	dd07      	ble.n	800aa26 <_dtoa_r+0xa86>
 800aa16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa1a:	d0ed      	beq.n	800a9f8 <_dtoa_r+0xa58>
 800aa1c:	9a00      	ldr	r2, [sp, #0]
 800aa1e:	f108 0301 	add.w	r3, r8, #1
 800aa22:	7013      	strb	r3, [r2, #0]
 800aa24:	e608      	b.n	800a638 <_dtoa_r+0x698>
 800aa26:	9b07      	ldr	r3, [sp, #28]
 800aa28:	9a07      	ldr	r2, [sp, #28]
 800aa2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aa2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d028      	beq.n	800aa86 <_dtoa_r+0xae6>
 800aa34:	4649      	mov	r1, r9
 800aa36:	2300      	movs	r3, #0
 800aa38:	220a      	movs	r2, #10
 800aa3a:	4658      	mov	r0, fp
 800aa3c:	f000 f9d6 	bl	800adec <__multadd>
 800aa40:	42af      	cmp	r7, r5
 800aa42:	4681      	mov	r9, r0
 800aa44:	f04f 0300 	mov.w	r3, #0
 800aa48:	f04f 020a 	mov.w	r2, #10
 800aa4c:	4639      	mov	r1, r7
 800aa4e:	4658      	mov	r0, fp
 800aa50:	d107      	bne.n	800aa62 <_dtoa_r+0xac2>
 800aa52:	f000 f9cb 	bl	800adec <__multadd>
 800aa56:	4607      	mov	r7, r0
 800aa58:	4605      	mov	r5, r0
 800aa5a:	9b07      	ldr	r3, [sp, #28]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	9307      	str	r3, [sp, #28]
 800aa60:	e774      	b.n	800a94c <_dtoa_r+0x9ac>
 800aa62:	f000 f9c3 	bl	800adec <__multadd>
 800aa66:	4629      	mov	r1, r5
 800aa68:	4607      	mov	r7, r0
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	220a      	movs	r2, #10
 800aa6e:	4658      	mov	r0, fp
 800aa70:	f000 f9bc 	bl	800adec <__multadd>
 800aa74:	4605      	mov	r5, r0
 800aa76:	e7f0      	b.n	800aa5a <_dtoa_r+0xaba>
 800aa78:	9b00      	ldr	r3, [sp, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	bfcc      	ite	gt
 800aa7e:	461e      	movgt	r6, r3
 800aa80:	2601      	movle	r6, #1
 800aa82:	4456      	add	r6, sl
 800aa84:	2700      	movs	r7, #0
 800aa86:	4649      	mov	r1, r9
 800aa88:	2201      	movs	r2, #1
 800aa8a:	4658      	mov	r0, fp
 800aa8c:	f000 fb5a 	bl	800b144 <__lshift>
 800aa90:	4621      	mov	r1, r4
 800aa92:	4681      	mov	r9, r0
 800aa94:	f000 fbc2 	bl	800b21c <__mcmp>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	dcb0      	bgt.n	800a9fe <_dtoa_r+0xa5e>
 800aa9c:	d102      	bne.n	800aaa4 <_dtoa_r+0xb04>
 800aa9e:	f018 0f01 	tst.w	r8, #1
 800aaa2:	d1ac      	bne.n	800a9fe <_dtoa_r+0xa5e>
 800aaa4:	4633      	mov	r3, r6
 800aaa6:	461e      	mov	r6, r3
 800aaa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaac:	2a30      	cmp	r2, #48	@ 0x30
 800aaae:	d0fa      	beq.n	800aaa6 <_dtoa_r+0xb06>
 800aab0:	e5c2      	b.n	800a638 <_dtoa_r+0x698>
 800aab2:	459a      	cmp	sl, r3
 800aab4:	d1a4      	bne.n	800aa00 <_dtoa_r+0xa60>
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	3301      	adds	r3, #1
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	2331      	movs	r3, #49	@ 0x31
 800aabe:	f88a 3000 	strb.w	r3, [sl]
 800aac2:	e5b9      	b.n	800a638 <_dtoa_r+0x698>
 800aac4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aac6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ab24 <_dtoa_r+0xb84>
 800aaca:	b11b      	cbz	r3, 800aad4 <_dtoa_r+0xb34>
 800aacc:	f10a 0308 	add.w	r3, sl, #8
 800aad0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	4650      	mov	r0, sl
 800aad6:	b019      	add	sp, #100	@ 0x64
 800aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aadc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aade:	2b01      	cmp	r3, #1
 800aae0:	f77f ae37 	ble.w	800a752 <_dtoa_r+0x7b2>
 800aae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aae6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aae8:	2001      	movs	r0, #1
 800aaea:	e655      	b.n	800a798 <_dtoa_r+0x7f8>
 800aaec:	9b00      	ldr	r3, [sp, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f77f aed6 	ble.w	800a8a0 <_dtoa_r+0x900>
 800aaf4:	4656      	mov	r6, sl
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	4648      	mov	r0, r9
 800aafa:	f7ff f9c6 	bl	8009e8a <quorem>
 800aafe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab02:	f806 8b01 	strb.w	r8, [r6], #1
 800ab06:	9b00      	ldr	r3, [sp, #0]
 800ab08:	eba6 020a 	sub.w	r2, r6, sl
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	ddb3      	ble.n	800aa78 <_dtoa_r+0xad8>
 800ab10:	4649      	mov	r1, r9
 800ab12:	2300      	movs	r3, #0
 800ab14:	220a      	movs	r2, #10
 800ab16:	4658      	mov	r0, fp
 800ab18:	f000 f968 	bl	800adec <__multadd>
 800ab1c:	4681      	mov	r9, r0
 800ab1e:	e7ea      	b.n	800aaf6 <_dtoa_r+0xb56>
 800ab20:	0800bcac 	.word	0x0800bcac
 800ab24:	0800bc30 	.word	0x0800bc30

0800ab28 <_free_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d041      	beq.n	800abb4 <_free_r+0x8c>
 800ab30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab34:	1f0c      	subs	r4, r1, #4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bfb8      	it	lt
 800ab3a:	18e4      	addlt	r4, r4, r3
 800ab3c:	f000 f8e8 	bl	800ad10 <__malloc_lock>
 800ab40:	4a1d      	ldr	r2, [pc, #116]	@ (800abb8 <_free_r+0x90>)
 800ab42:	6813      	ldr	r3, [r2, #0]
 800ab44:	b933      	cbnz	r3, 800ab54 <_free_r+0x2c>
 800ab46:	6063      	str	r3, [r4, #4]
 800ab48:	6014      	str	r4, [r2, #0]
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab50:	f000 b8e4 	b.w	800ad1c <__malloc_unlock>
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	d908      	bls.n	800ab6a <_free_r+0x42>
 800ab58:	6820      	ldr	r0, [r4, #0]
 800ab5a:	1821      	adds	r1, r4, r0
 800ab5c:	428b      	cmp	r3, r1
 800ab5e:	bf01      	itttt	eq
 800ab60:	6819      	ldreq	r1, [r3, #0]
 800ab62:	685b      	ldreq	r3, [r3, #4]
 800ab64:	1809      	addeq	r1, r1, r0
 800ab66:	6021      	streq	r1, [r4, #0]
 800ab68:	e7ed      	b.n	800ab46 <_free_r+0x1e>
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	b10b      	cbz	r3, 800ab74 <_free_r+0x4c>
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	d9fa      	bls.n	800ab6a <_free_r+0x42>
 800ab74:	6811      	ldr	r1, [r2, #0]
 800ab76:	1850      	adds	r0, r2, r1
 800ab78:	42a0      	cmp	r0, r4
 800ab7a:	d10b      	bne.n	800ab94 <_free_r+0x6c>
 800ab7c:	6820      	ldr	r0, [r4, #0]
 800ab7e:	4401      	add	r1, r0
 800ab80:	1850      	adds	r0, r2, r1
 800ab82:	4283      	cmp	r3, r0
 800ab84:	6011      	str	r1, [r2, #0]
 800ab86:	d1e0      	bne.n	800ab4a <_free_r+0x22>
 800ab88:	6818      	ldr	r0, [r3, #0]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	6053      	str	r3, [r2, #4]
 800ab8e:	4408      	add	r0, r1
 800ab90:	6010      	str	r0, [r2, #0]
 800ab92:	e7da      	b.n	800ab4a <_free_r+0x22>
 800ab94:	d902      	bls.n	800ab9c <_free_r+0x74>
 800ab96:	230c      	movs	r3, #12
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	e7d6      	b.n	800ab4a <_free_r+0x22>
 800ab9c:	6820      	ldr	r0, [r4, #0]
 800ab9e:	1821      	adds	r1, r4, r0
 800aba0:	428b      	cmp	r3, r1
 800aba2:	bf04      	itt	eq
 800aba4:	6819      	ldreq	r1, [r3, #0]
 800aba6:	685b      	ldreq	r3, [r3, #4]
 800aba8:	6063      	str	r3, [r4, #4]
 800abaa:	bf04      	itt	eq
 800abac:	1809      	addeq	r1, r1, r0
 800abae:	6021      	streq	r1, [r4, #0]
 800abb0:	6054      	str	r4, [r2, #4]
 800abb2:	e7ca      	b.n	800ab4a <_free_r+0x22>
 800abb4:	bd38      	pop	{r3, r4, r5, pc}
 800abb6:	bf00      	nop
 800abb8:	20020984 	.word	0x20020984

0800abbc <malloc>:
 800abbc:	4b02      	ldr	r3, [pc, #8]	@ (800abc8 <malloc+0xc>)
 800abbe:	4601      	mov	r1, r0
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	f000 b825 	b.w	800ac10 <_malloc_r>
 800abc6:	bf00      	nop
 800abc8:	20000058 	.word	0x20000058

0800abcc <sbrk_aligned>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	4e0f      	ldr	r6, [pc, #60]	@ (800ac0c <sbrk_aligned+0x40>)
 800abd0:	460c      	mov	r4, r1
 800abd2:	6831      	ldr	r1, [r6, #0]
 800abd4:	4605      	mov	r5, r0
 800abd6:	b911      	cbnz	r1, 800abde <sbrk_aligned+0x12>
 800abd8:	f000 fd58 	bl	800b68c <_sbrk_r>
 800abdc:	6030      	str	r0, [r6, #0]
 800abde:	4621      	mov	r1, r4
 800abe0:	4628      	mov	r0, r5
 800abe2:	f000 fd53 	bl	800b68c <_sbrk_r>
 800abe6:	1c43      	adds	r3, r0, #1
 800abe8:	d103      	bne.n	800abf2 <sbrk_aligned+0x26>
 800abea:	f04f 34ff 	mov.w	r4, #4294967295
 800abee:	4620      	mov	r0, r4
 800abf0:	bd70      	pop	{r4, r5, r6, pc}
 800abf2:	1cc4      	adds	r4, r0, #3
 800abf4:	f024 0403 	bic.w	r4, r4, #3
 800abf8:	42a0      	cmp	r0, r4
 800abfa:	d0f8      	beq.n	800abee <sbrk_aligned+0x22>
 800abfc:	1a21      	subs	r1, r4, r0
 800abfe:	4628      	mov	r0, r5
 800ac00:	f000 fd44 	bl	800b68c <_sbrk_r>
 800ac04:	3001      	adds	r0, #1
 800ac06:	d1f2      	bne.n	800abee <sbrk_aligned+0x22>
 800ac08:	e7ef      	b.n	800abea <sbrk_aligned+0x1e>
 800ac0a:	bf00      	nop
 800ac0c:	20020980 	.word	0x20020980

0800ac10 <_malloc_r>:
 800ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac14:	1ccd      	adds	r5, r1, #3
 800ac16:	f025 0503 	bic.w	r5, r5, #3
 800ac1a:	3508      	adds	r5, #8
 800ac1c:	2d0c      	cmp	r5, #12
 800ac1e:	bf38      	it	cc
 800ac20:	250c      	movcc	r5, #12
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	4606      	mov	r6, r0
 800ac26:	db01      	blt.n	800ac2c <_malloc_r+0x1c>
 800ac28:	42a9      	cmp	r1, r5
 800ac2a:	d904      	bls.n	800ac36 <_malloc_r+0x26>
 800ac2c:	230c      	movs	r3, #12
 800ac2e:	6033      	str	r3, [r6, #0]
 800ac30:	2000      	movs	r0, #0
 800ac32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad0c <_malloc_r+0xfc>
 800ac3a:	f000 f869 	bl	800ad10 <__malloc_lock>
 800ac3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac42:	461c      	mov	r4, r3
 800ac44:	bb44      	cbnz	r4, 800ac98 <_malloc_r+0x88>
 800ac46:	4629      	mov	r1, r5
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f7ff ffbf 	bl	800abcc <sbrk_aligned>
 800ac4e:	1c43      	adds	r3, r0, #1
 800ac50:	4604      	mov	r4, r0
 800ac52:	d158      	bne.n	800ad06 <_malloc_r+0xf6>
 800ac54:	f8d8 4000 	ldr.w	r4, [r8]
 800ac58:	4627      	mov	r7, r4
 800ac5a:	2f00      	cmp	r7, #0
 800ac5c:	d143      	bne.n	800ace6 <_malloc_r+0xd6>
 800ac5e:	2c00      	cmp	r4, #0
 800ac60:	d04b      	beq.n	800acfa <_malloc_r+0xea>
 800ac62:	6823      	ldr	r3, [r4, #0]
 800ac64:	4639      	mov	r1, r7
 800ac66:	4630      	mov	r0, r6
 800ac68:	eb04 0903 	add.w	r9, r4, r3
 800ac6c:	f000 fd0e 	bl	800b68c <_sbrk_r>
 800ac70:	4581      	cmp	r9, r0
 800ac72:	d142      	bne.n	800acfa <_malloc_r+0xea>
 800ac74:	6821      	ldr	r1, [r4, #0]
 800ac76:	1a6d      	subs	r5, r5, r1
 800ac78:	4629      	mov	r1, r5
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f7ff ffa6 	bl	800abcc <sbrk_aligned>
 800ac80:	3001      	adds	r0, #1
 800ac82:	d03a      	beq.n	800acfa <_malloc_r+0xea>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	442b      	add	r3, r5
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	bb62      	cbnz	r2, 800acec <_malloc_r+0xdc>
 800ac92:	f8c8 7000 	str.w	r7, [r8]
 800ac96:	e00f      	b.n	800acb8 <_malloc_r+0xa8>
 800ac98:	6822      	ldr	r2, [r4, #0]
 800ac9a:	1b52      	subs	r2, r2, r5
 800ac9c:	d420      	bmi.n	800ace0 <_malloc_r+0xd0>
 800ac9e:	2a0b      	cmp	r2, #11
 800aca0:	d917      	bls.n	800acd2 <_malloc_r+0xc2>
 800aca2:	1961      	adds	r1, r4, r5
 800aca4:	42a3      	cmp	r3, r4
 800aca6:	6025      	str	r5, [r4, #0]
 800aca8:	bf18      	it	ne
 800acaa:	6059      	strne	r1, [r3, #4]
 800acac:	6863      	ldr	r3, [r4, #4]
 800acae:	bf08      	it	eq
 800acb0:	f8c8 1000 	streq.w	r1, [r8]
 800acb4:	5162      	str	r2, [r4, r5]
 800acb6:	604b      	str	r3, [r1, #4]
 800acb8:	4630      	mov	r0, r6
 800acba:	f000 f82f 	bl	800ad1c <__malloc_unlock>
 800acbe:	f104 000b 	add.w	r0, r4, #11
 800acc2:	1d23      	adds	r3, r4, #4
 800acc4:	f020 0007 	bic.w	r0, r0, #7
 800acc8:	1ac2      	subs	r2, r0, r3
 800acca:	bf1c      	itt	ne
 800accc:	1a1b      	subne	r3, r3, r0
 800acce:	50a3      	strne	r3, [r4, r2]
 800acd0:	e7af      	b.n	800ac32 <_malloc_r+0x22>
 800acd2:	6862      	ldr	r2, [r4, #4]
 800acd4:	42a3      	cmp	r3, r4
 800acd6:	bf0c      	ite	eq
 800acd8:	f8c8 2000 	streq.w	r2, [r8]
 800acdc:	605a      	strne	r2, [r3, #4]
 800acde:	e7eb      	b.n	800acb8 <_malloc_r+0xa8>
 800ace0:	4623      	mov	r3, r4
 800ace2:	6864      	ldr	r4, [r4, #4]
 800ace4:	e7ae      	b.n	800ac44 <_malloc_r+0x34>
 800ace6:	463c      	mov	r4, r7
 800ace8:	687f      	ldr	r7, [r7, #4]
 800acea:	e7b6      	b.n	800ac5a <_malloc_r+0x4a>
 800acec:	461a      	mov	r2, r3
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	42a3      	cmp	r3, r4
 800acf2:	d1fb      	bne.n	800acec <_malloc_r+0xdc>
 800acf4:	2300      	movs	r3, #0
 800acf6:	6053      	str	r3, [r2, #4]
 800acf8:	e7de      	b.n	800acb8 <_malloc_r+0xa8>
 800acfa:	230c      	movs	r3, #12
 800acfc:	6033      	str	r3, [r6, #0]
 800acfe:	4630      	mov	r0, r6
 800ad00:	f000 f80c 	bl	800ad1c <__malloc_unlock>
 800ad04:	e794      	b.n	800ac30 <_malloc_r+0x20>
 800ad06:	6005      	str	r5, [r0, #0]
 800ad08:	e7d6      	b.n	800acb8 <_malloc_r+0xa8>
 800ad0a:	bf00      	nop
 800ad0c:	20020984 	.word	0x20020984

0800ad10 <__malloc_lock>:
 800ad10:	4801      	ldr	r0, [pc, #4]	@ (800ad18 <__malloc_lock+0x8>)
 800ad12:	f7ff b8aa 	b.w	8009e6a <__retarget_lock_acquire_recursive>
 800ad16:	bf00      	nop
 800ad18:	2002097c 	.word	0x2002097c

0800ad1c <__malloc_unlock>:
 800ad1c:	4801      	ldr	r0, [pc, #4]	@ (800ad24 <__malloc_unlock+0x8>)
 800ad1e:	f7ff b8a5 	b.w	8009e6c <__retarget_lock_release_recursive>
 800ad22:	bf00      	nop
 800ad24:	2002097c 	.word	0x2002097c

0800ad28 <_Balloc>:
 800ad28:	b570      	push	{r4, r5, r6, lr}
 800ad2a:	69c6      	ldr	r6, [r0, #28]
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	460d      	mov	r5, r1
 800ad30:	b976      	cbnz	r6, 800ad50 <_Balloc+0x28>
 800ad32:	2010      	movs	r0, #16
 800ad34:	f7ff ff42 	bl	800abbc <malloc>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	61e0      	str	r0, [r4, #28]
 800ad3c:	b920      	cbnz	r0, 800ad48 <_Balloc+0x20>
 800ad3e:	4b18      	ldr	r3, [pc, #96]	@ (800ada0 <_Balloc+0x78>)
 800ad40:	4818      	ldr	r0, [pc, #96]	@ (800ada4 <_Balloc+0x7c>)
 800ad42:	216b      	movs	r1, #107	@ 0x6b
 800ad44:	f000 fcb2 	bl	800b6ac <__assert_func>
 800ad48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad4c:	6006      	str	r6, [r0, #0]
 800ad4e:	60c6      	str	r6, [r0, #12]
 800ad50:	69e6      	ldr	r6, [r4, #28]
 800ad52:	68f3      	ldr	r3, [r6, #12]
 800ad54:	b183      	cbz	r3, 800ad78 <_Balloc+0x50>
 800ad56:	69e3      	ldr	r3, [r4, #28]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad5e:	b9b8      	cbnz	r0, 800ad90 <_Balloc+0x68>
 800ad60:	2101      	movs	r1, #1
 800ad62:	fa01 f605 	lsl.w	r6, r1, r5
 800ad66:	1d72      	adds	r2, r6, #5
 800ad68:	0092      	lsls	r2, r2, #2
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 fcbc 	bl	800b6e8 <_calloc_r>
 800ad70:	b160      	cbz	r0, 800ad8c <_Balloc+0x64>
 800ad72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad76:	e00e      	b.n	800ad96 <_Balloc+0x6e>
 800ad78:	2221      	movs	r2, #33	@ 0x21
 800ad7a:	2104      	movs	r1, #4
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 fcb3 	bl	800b6e8 <_calloc_r>
 800ad82:	69e3      	ldr	r3, [r4, #28]
 800ad84:	60f0      	str	r0, [r6, #12]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e4      	bne.n	800ad56 <_Balloc+0x2e>
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	6802      	ldr	r2, [r0, #0]
 800ad92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad96:	2300      	movs	r3, #0
 800ad98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad9c:	e7f7      	b.n	800ad8e <_Balloc+0x66>
 800ad9e:	bf00      	nop
 800ada0:	0800bc3d 	.word	0x0800bc3d
 800ada4:	0800bcbd 	.word	0x0800bcbd

0800ada8 <_Bfree>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	69c6      	ldr	r6, [r0, #28]
 800adac:	4605      	mov	r5, r0
 800adae:	460c      	mov	r4, r1
 800adb0:	b976      	cbnz	r6, 800add0 <_Bfree+0x28>
 800adb2:	2010      	movs	r0, #16
 800adb4:	f7ff ff02 	bl	800abbc <malloc>
 800adb8:	4602      	mov	r2, r0
 800adba:	61e8      	str	r0, [r5, #28]
 800adbc:	b920      	cbnz	r0, 800adc8 <_Bfree+0x20>
 800adbe:	4b09      	ldr	r3, [pc, #36]	@ (800ade4 <_Bfree+0x3c>)
 800adc0:	4809      	ldr	r0, [pc, #36]	@ (800ade8 <_Bfree+0x40>)
 800adc2:	218f      	movs	r1, #143	@ 0x8f
 800adc4:	f000 fc72 	bl	800b6ac <__assert_func>
 800adc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adcc:	6006      	str	r6, [r0, #0]
 800adce:	60c6      	str	r6, [r0, #12]
 800add0:	b13c      	cbz	r4, 800ade2 <_Bfree+0x3a>
 800add2:	69eb      	ldr	r3, [r5, #28]
 800add4:	6862      	ldr	r2, [r4, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800addc:	6021      	str	r1, [r4, #0]
 800adde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	0800bc3d 	.word	0x0800bc3d
 800ade8:	0800bcbd 	.word	0x0800bcbd

0800adec <__multadd>:
 800adec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf0:	690d      	ldr	r5, [r1, #16]
 800adf2:	4607      	mov	r7, r0
 800adf4:	460c      	mov	r4, r1
 800adf6:	461e      	mov	r6, r3
 800adf8:	f101 0c14 	add.w	ip, r1, #20
 800adfc:	2000      	movs	r0, #0
 800adfe:	f8dc 3000 	ldr.w	r3, [ip]
 800ae02:	b299      	uxth	r1, r3
 800ae04:	fb02 6101 	mla	r1, r2, r1, r6
 800ae08:	0c1e      	lsrs	r6, r3, #16
 800ae0a:	0c0b      	lsrs	r3, r1, #16
 800ae0c:	fb02 3306 	mla	r3, r2, r6, r3
 800ae10:	b289      	uxth	r1, r1
 800ae12:	3001      	adds	r0, #1
 800ae14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae18:	4285      	cmp	r5, r0
 800ae1a:	f84c 1b04 	str.w	r1, [ip], #4
 800ae1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae22:	dcec      	bgt.n	800adfe <__multadd+0x12>
 800ae24:	b30e      	cbz	r6, 800ae6a <__multadd+0x7e>
 800ae26:	68a3      	ldr	r3, [r4, #8]
 800ae28:	42ab      	cmp	r3, r5
 800ae2a:	dc19      	bgt.n	800ae60 <__multadd+0x74>
 800ae2c:	6861      	ldr	r1, [r4, #4]
 800ae2e:	4638      	mov	r0, r7
 800ae30:	3101      	adds	r1, #1
 800ae32:	f7ff ff79 	bl	800ad28 <_Balloc>
 800ae36:	4680      	mov	r8, r0
 800ae38:	b928      	cbnz	r0, 800ae46 <__multadd+0x5a>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ae70 <__multadd+0x84>)
 800ae3e:	480d      	ldr	r0, [pc, #52]	@ (800ae74 <__multadd+0x88>)
 800ae40:	21ba      	movs	r1, #186	@ 0xba
 800ae42:	f000 fc33 	bl	800b6ac <__assert_func>
 800ae46:	6922      	ldr	r2, [r4, #16]
 800ae48:	3202      	adds	r2, #2
 800ae4a:	f104 010c 	add.w	r1, r4, #12
 800ae4e:	0092      	lsls	r2, r2, #2
 800ae50:	300c      	adds	r0, #12
 800ae52:	f7ff f80c 	bl	8009e6e <memcpy>
 800ae56:	4621      	mov	r1, r4
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7ff ffa5 	bl	800ada8 <_Bfree>
 800ae5e:	4644      	mov	r4, r8
 800ae60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae64:	3501      	adds	r5, #1
 800ae66:	615e      	str	r6, [r3, #20]
 800ae68:	6125      	str	r5, [r4, #16]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae70:	0800bcac 	.word	0x0800bcac
 800ae74:	0800bcbd 	.word	0x0800bcbd

0800ae78 <__hi0bits>:
 800ae78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	bf36      	itet	cc
 800ae80:	0403      	lslcc	r3, r0, #16
 800ae82:	2000      	movcs	r0, #0
 800ae84:	2010      	movcc	r0, #16
 800ae86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae8a:	bf3c      	itt	cc
 800ae8c:	021b      	lslcc	r3, r3, #8
 800ae8e:	3008      	addcc	r0, #8
 800ae90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae94:	bf3c      	itt	cc
 800ae96:	011b      	lslcc	r3, r3, #4
 800ae98:	3004      	addcc	r0, #4
 800ae9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae9e:	bf3c      	itt	cc
 800aea0:	009b      	lslcc	r3, r3, #2
 800aea2:	3002      	addcc	r0, #2
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	db05      	blt.n	800aeb4 <__hi0bits+0x3c>
 800aea8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aeac:	f100 0001 	add.w	r0, r0, #1
 800aeb0:	bf08      	it	eq
 800aeb2:	2020      	moveq	r0, #32
 800aeb4:	4770      	bx	lr

0800aeb6 <__lo0bits>:
 800aeb6:	6803      	ldr	r3, [r0, #0]
 800aeb8:	4602      	mov	r2, r0
 800aeba:	f013 0007 	ands.w	r0, r3, #7
 800aebe:	d00b      	beq.n	800aed8 <__lo0bits+0x22>
 800aec0:	07d9      	lsls	r1, r3, #31
 800aec2:	d421      	bmi.n	800af08 <__lo0bits+0x52>
 800aec4:	0798      	lsls	r0, r3, #30
 800aec6:	bf49      	itett	mi
 800aec8:	085b      	lsrmi	r3, r3, #1
 800aeca:	089b      	lsrpl	r3, r3, #2
 800aecc:	2001      	movmi	r0, #1
 800aece:	6013      	strmi	r3, [r2, #0]
 800aed0:	bf5c      	itt	pl
 800aed2:	6013      	strpl	r3, [r2, #0]
 800aed4:	2002      	movpl	r0, #2
 800aed6:	4770      	bx	lr
 800aed8:	b299      	uxth	r1, r3
 800aeda:	b909      	cbnz	r1, 800aee0 <__lo0bits+0x2a>
 800aedc:	0c1b      	lsrs	r3, r3, #16
 800aede:	2010      	movs	r0, #16
 800aee0:	b2d9      	uxtb	r1, r3
 800aee2:	b909      	cbnz	r1, 800aee8 <__lo0bits+0x32>
 800aee4:	3008      	adds	r0, #8
 800aee6:	0a1b      	lsrs	r3, r3, #8
 800aee8:	0719      	lsls	r1, r3, #28
 800aeea:	bf04      	itt	eq
 800aeec:	091b      	lsreq	r3, r3, #4
 800aeee:	3004      	addeq	r0, #4
 800aef0:	0799      	lsls	r1, r3, #30
 800aef2:	bf04      	itt	eq
 800aef4:	089b      	lsreq	r3, r3, #2
 800aef6:	3002      	addeq	r0, #2
 800aef8:	07d9      	lsls	r1, r3, #31
 800aefa:	d403      	bmi.n	800af04 <__lo0bits+0x4e>
 800aefc:	085b      	lsrs	r3, r3, #1
 800aefe:	f100 0001 	add.w	r0, r0, #1
 800af02:	d003      	beq.n	800af0c <__lo0bits+0x56>
 800af04:	6013      	str	r3, [r2, #0]
 800af06:	4770      	bx	lr
 800af08:	2000      	movs	r0, #0
 800af0a:	4770      	bx	lr
 800af0c:	2020      	movs	r0, #32
 800af0e:	4770      	bx	lr

0800af10 <__i2b>:
 800af10:	b510      	push	{r4, lr}
 800af12:	460c      	mov	r4, r1
 800af14:	2101      	movs	r1, #1
 800af16:	f7ff ff07 	bl	800ad28 <_Balloc>
 800af1a:	4602      	mov	r2, r0
 800af1c:	b928      	cbnz	r0, 800af2a <__i2b+0x1a>
 800af1e:	4b05      	ldr	r3, [pc, #20]	@ (800af34 <__i2b+0x24>)
 800af20:	4805      	ldr	r0, [pc, #20]	@ (800af38 <__i2b+0x28>)
 800af22:	f240 1145 	movw	r1, #325	@ 0x145
 800af26:	f000 fbc1 	bl	800b6ac <__assert_func>
 800af2a:	2301      	movs	r3, #1
 800af2c:	6144      	str	r4, [r0, #20]
 800af2e:	6103      	str	r3, [r0, #16]
 800af30:	bd10      	pop	{r4, pc}
 800af32:	bf00      	nop
 800af34:	0800bcac 	.word	0x0800bcac
 800af38:	0800bcbd 	.word	0x0800bcbd

0800af3c <__multiply>:
 800af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af40:	4614      	mov	r4, r2
 800af42:	690a      	ldr	r2, [r1, #16]
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	429a      	cmp	r2, r3
 800af48:	bfa8      	it	ge
 800af4a:	4623      	movge	r3, r4
 800af4c:	460f      	mov	r7, r1
 800af4e:	bfa4      	itt	ge
 800af50:	460c      	movge	r4, r1
 800af52:	461f      	movge	r7, r3
 800af54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800af58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800af5c:	68a3      	ldr	r3, [r4, #8]
 800af5e:	6861      	ldr	r1, [r4, #4]
 800af60:	eb0a 0609 	add.w	r6, sl, r9
 800af64:	42b3      	cmp	r3, r6
 800af66:	b085      	sub	sp, #20
 800af68:	bfb8      	it	lt
 800af6a:	3101      	addlt	r1, #1
 800af6c:	f7ff fedc 	bl	800ad28 <_Balloc>
 800af70:	b930      	cbnz	r0, 800af80 <__multiply+0x44>
 800af72:	4602      	mov	r2, r0
 800af74:	4b44      	ldr	r3, [pc, #272]	@ (800b088 <__multiply+0x14c>)
 800af76:	4845      	ldr	r0, [pc, #276]	@ (800b08c <__multiply+0x150>)
 800af78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af7c:	f000 fb96 	bl	800b6ac <__assert_func>
 800af80:	f100 0514 	add.w	r5, r0, #20
 800af84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af88:	462b      	mov	r3, r5
 800af8a:	2200      	movs	r2, #0
 800af8c:	4543      	cmp	r3, r8
 800af8e:	d321      	bcc.n	800afd4 <__multiply+0x98>
 800af90:	f107 0114 	add.w	r1, r7, #20
 800af94:	f104 0214 	add.w	r2, r4, #20
 800af98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800af9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800afa0:	9302      	str	r3, [sp, #8]
 800afa2:	1b13      	subs	r3, r2, r4
 800afa4:	3b15      	subs	r3, #21
 800afa6:	f023 0303 	bic.w	r3, r3, #3
 800afaa:	3304      	adds	r3, #4
 800afac:	f104 0715 	add.w	r7, r4, #21
 800afb0:	42ba      	cmp	r2, r7
 800afb2:	bf38      	it	cc
 800afb4:	2304      	movcc	r3, #4
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	9b02      	ldr	r3, [sp, #8]
 800afba:	9103      	str	r1, [sp, #12]
 800afbc:	428b      	cmp	r3, r1
 800afbe:	d80c      	bhi.n	800afda <__multiply+0x9e>
 800afc0:	2e00      	cmp	r6, #0
 800afc2:	dd03      	ble.n	800afcc <__multiply+0x90>
 800afc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d05b      	beq.n	800b084 <__multiply+0x148>
 800afcc:	6106      	str	r6, [r0, #16]
 800afce:	b005      	add	sp, #20
 800afd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd4:	f843 2b04 	str.w	r2, [r3], #4
 800afd8:	e7d8      	b.n	800af8c <__multiply+0x50>
 800afda:	f8b1 a000 	ldrh.w	sl, [r1]
 800afde:	f1ba 0f00 	cmp.w	sl, #0
 800afe2:	d024      	beq.n	800b02e <__multiply+0xf2>
 800afe4:	f104 0e14 	add.w	lr, r4, #20
 800afe8:	46a9      	mov	r9, r5
 800afea:	f04f 0c00 	mov.w	ip, #0
 800afee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aff2:	f8d9 3000 	ldr.w	r3, [r9]
 800aff6:	fa1f fb87 	uxth.w	fp, r7
 800affa:	b29b      	uxth	r3, r3
 800affc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b000:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b004:	f8d9 7000 	ldr.w	r7, [r9]
 800b008:	4463      	add	r3, ip
 800b00a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b00e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b012:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b016:	b29b      	uxth	r3, r3
 800b018:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b01c:	4572      	cmp	r2, lr
 800b01e:	f849 3b04 	str.w	r3, [r9], #4
 800b022:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b026:	d8e2      	bhi.n	800afee <__multiply+0xb2>
 800b028:	9b01      	ldr	r3, [sp, #4]
 800b02a:	f845 c003 	str.w	ip, [r5, r3]
 800b02e:	9b03      	ldr	r3, [sp, #12]
 800b030:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b034:	3104      	adds	r1, #4
 800b036:	f1b9 0f00 	cmp.w	r9, #0
 800b03a:	d021      	beq.n	800b080 <__multiply+0x144>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	f104 0c14 	add.w	ip, r4, #20
 800b042:	46ae      	mov	lr, r5
 800b044:	f04f 0a00 	mov.w	sl, #0
 800b048:	f8bc b000 	ldrh.w	fp, [ip]
 800b04c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b050:	fb09 770b 	mla	r7, r9, fp, r7
 800b054:	4457      	add	r7, sl
 800b056:	b29b      	uxth	r3, r3
 800b058:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b05c:	f84e 3b04 	str.w	r3, [lr], #4
 800b060:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b064:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b068:	f8be 3000 	ldrh.w	r3, [lr]
 800b06c:	fb09 330a 	mla	r3, r9, sl, r3
 800b070:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b074:	4562      	cmp	r2, ip
 800b076:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b07a:	d8e5      	bhi.n	800b048 <__multiply+0x10c>
 800b07c:	9f01      	ldr	r7, [sp, #4]
 800b07e:	51eb      	str	r3, [r5, r7]
 800b080:	3504      	adds	r5, #4
 800b082:	e799      	b.n	800afb8 <__multiply+0x7c>
 800b084:	3e01      	subs	r6, #1
 800b086:	e79b      	b.n	800afc0 <__multiply+0x84>
 800b088:	0800bcac 	.word	0x0800bcac
 800b08c:	0800bcbd 	.word	0x0800bcbd

0800b090 <__pow5mult>:
 800b090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b094:	4615      	mov	r5, r2
 800b096:	f012 0203 	ands.w	r2, r2, #3
 800b09a:	4607      	mov	r7, r0
 800b09c:	460e      	mov	r6, r1
 800b09e:	d007      	beq.n	800b0b0 <__pow5mult+0x20>
 800b0a0:	4c25      	ldr	r4, [pc, #148]	@ (800b138 <__pow5mult+0xa8>)
 800b0a2:	3a01      	subs	r2, #1
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0aa:	f7ff fe9f 	bl	800adec <__multadd>
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	10ad      	asrs	r5, r5, #2
 800b0b2:	d03d      	beq.n	800b130 <__pow5mult+0xa0>
 800b0b4:	69fc      	ldr	r4, [r7, #28]
 800b0b6:	b97c      	cbnz	r4, 800b0d8 <__pow5mult+0x48>
 800b0b8:	2010      	movs	r0, #16
 800b0ba:	f7ff fd7f 	bl	800abbc <malloc>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	61f8      	str	r0, [r7, #28]
 800b0c2:	b928      	cbnz	r0, 800b0d0 <__pow5mult+0x40>
 800b0c4:	4b1d      	ldr	r3, [pc, #116]	@ (800b13c <__pow5mult+0xac>)
 800b0c6:	481e      	ldr	r0, [pc, #120]	@ (800b140 <__pow5mult+0xb0>)
 800b0c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b0cc:	f000 faee 	bl	800b6ac <__assert_func>
 800b0d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0d4:	6004      	str	r4, [r0, #0]
 800b0d6:	60c4      	str	r4, [r0, #12]
 800b0d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b0dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0e0:	b94c      	cbnz	r4, 800b0f6 <__pow5mult+0x66>
 800b0e2:	f240 2171 	movw	r1, #625	@ 0x271
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	f7ff ff12 	bl	800af10 <__i2b>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	6003      	str	r3, [r0, #0]
 800b0f6:	f04f 0900 	mov.w	r9, #0
 800b0fa:	07eb      	lsls	r3, r5, #31
 800b0fc:	d50a      	bpl.n	800b114 <__pow5mult+0x84>
 800b0fe:	4631      	mov	r1, r6
 800b100:	4622      	mov	r2, r4
 800b102:	4638      	mov	r0, r7
 800b104:	f7ff ff1a 	bl	800af3c <__multiply>
 800b108:	4631      	mov	r1, r6
 800b10a:	4680      	mov	r8, r0
 800b10c:	4638      	mov	r0, r7
 800b10e:	f7ff fe4b 	bl	800ada8 <_Bfree>
 800b112:	4646      	mov	r6, r8
 800b114:	106d      	asrs	r5, r5, #1
 800b116:	d00b      	beq.n	800b130 <__pow5mult+0xa0>
 800b118:	6820      	ldr	r0, [r4, #0]
 800b11a:	b938      	cbnz	r0, 800b12c <__pow5mult+0x9c>
 800b11c:	4622      	mov	r2, r4
 800b11e:	4621      	mov	r1, r4
 800b120:	4638      	mov	r0, r7
 800b122:	f7ff ff0b 	bl	800af3c <__multiply>
 800b126:	6020      	str	r0, [r4, #0]
 800b128:	f8c0 9000 	str.w	r9, [r0]
 800b12c:	4604      	mov	r4, r0
 800b12e:	e7e4      	b.n	800b0fa <__pow5mult+0x6a>
 800b130:	4630      	mov	r0, r6
 800b132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b136:	bf00      	nop
 800b138:	0800bd18 	.word	0x0800bd18
 800b13c:	0800bc3d 	.word	0x0800bc3d
 800b140:	0800bcbd 	.word	0x0800bcbd

0800b144 <__lshift>:
 800b144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b148:	460c      	mov	r4, r1
 800b14a:	6849      	ldr	r1, [r1, #4]
 800b14c:	6923      	ldr	r3, [r4, #16]
 800b14e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	4607      	mov	r7, r0
 800b156:	4691      	mov	r9, r2
 800b158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b15c:	f108 0601 	add.w	r6, r8, #1
 800b160:	42b3      	cmp	r3, r6
 800b162:	db0b      	blt.n	800b17c <__lshift+0x38>
 800b164:	4638      	mov	r0, r7
 800b166:	f7ff fddf 	bl	800ad28 <_Balloc>
 800b16a:	4605      	mov	r5, r0
 800b16c:	b948      	cbnz	r0, 800b182 <__lshift+0x3e>
 800b16e:	4602      	mov	r2, r0
 800b170:	4b28      	ldr	r3, [pc, #160]	@ (800b214 <__lshift+0xd0>)
 800b172:	4829      	ldr	r0, [pc, #164]	@ (800b218 <__lshift+0xd4>)
 800b174:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b178:	f000 fa98 	bl	800b6ac <__assert_func>
 800b17c:	3101      	adds	r1, #1
 800b17e:	005b      	lsls	r3, r3, #1
 800b180:	e7ee      	b.n	800b160 <__lshift+0x1c>
 800b182:	2300      	movs	r3, #0
 800b184:	f100 0114 	add.w	r1, r0, #20
 800b188:	f100 0210 	add.w	r2, r0, #16
 800b18c:	4618      	mov	r0, r3
 800b18e:	4553      	cmp	r3, sl
 800b190:	db33      	blt.n	800b1fa <__lshift+0xb6>
 800b192:	6920      	ldr	r0, [r4, #16]
 800b194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b198:	f104 0314 	add.w	r3, r4, #20
 800b19c:	f019 091f 	ands.w	r9, r9, #31
 800b1a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1a8:	d02b      	beq.n	800b202 <__lshift+0xbe>
 800b1aa:	f1c9 0e20 	rsb	lr, r9, #32
 800b1ae:	468a      	mov	sl, r1
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	6818      	ldr	r0, [r3, #0]
 800b1b4:	fa00 f009 	lsl.w	r0, r0, r9
 800b1b8:	4310      	orrs	r0, r2
 800b1ba:	f84a 0b04 	str.w	r0, [sl], #4
 800b1be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1c2:	459c      	cmp	ip, r3
 800b1c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b1c8:	d8f3      	bhi.n	800b1b2 <__lshift+0x6e>
 800b1ca:	ebac 0304 	sub.w	r3, ip, r4
 800b1ce:	3b15      	subs	r3, #21
 800b1d0:	f023 0303 	bic.w	r3, r3, #3
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	f104 0015 	add.w	r0, r4, #21
 800b1da:	4584      	cmp	ip, r0
 800b1dc:	bf38      	it	cc
 800b1de:	2304      	movcc	r3, #4
 800b1e0:	50ca      	str	r2, [r1, r3]
 800b1e2:	b10a      	cbz	r2, 800b1e8 <__lshift+0xa4>
 800b1e4:	f108 0602 	add.w	r6, r8, #2
 800b1e8:	3e01      	subs	r6, #1
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	612e      	str	r6, [r5, #16]
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	f7ff fdda 	bl	800ada8 <_Bfree>
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1fe:	3301      	adds	r3, #1
 800b200:	e7c5      	b.n	800b18e <__lshift+0x4a>
 800b202:	3904      	subs	r1, #4
 800b204:	f853 2b04 	ldr.w	r2, [r3], #4
 800b208:	f841 2f04 	str.w	r2, [r1, #4]!
 800b20c:	459c      	cmp	ip, r3
 800b20e:	d8f9      	bhi.n	800b204 <__lshift+0xc0>
 800b210:	e7ea      	b.n	800b1e8 <__lshift+0xa4>
 800b212:	bf00      	nop
 800b214:	0800bcac 	.word	0x0800bcac
 800b218:	0800bcbd 	.word	0x0800bcbd

0800b21c <__mcmp>:
 800b21c:	690a      	ldr	r2, [r1, #16]
 800b21e:	4603      	mov	r3, r0
 800b220:	6900      	ldr	r0, [r0, #16]
 800b222:	1a80      	subs	r0, r0, r2
 800b224:	b530      	push	{r4, r5, lr}
 800b226:	d10e      	bne.n	800b246 <__mcmp+0x2a>
 800b228:	3314      	adds	r3, #20
 800b22a:	3114      	adds	r1, #20
 800b22c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b230:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b234:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b238:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b23c:	4295      	cmp	r5, r2
 800b23e:	d003      	beq.n	800b248 <__mcmp+0x2c>
 800b240:	d205      	bcs.n	800b24e <__mcmp+0x32>
 800b242:	f04f 30ff 	mov.w	r0, #4294967295
 800b246:	bd30      	pop	{r4, r5, pc}
 800b248:	42a3      	cmp	r3, r4
 800b24a:	d3f3      	bcc.n	800b234 <__mcmp+0x18>
 800b24c:	e7fb      	b.n	800b246 <__mcmp+0x2a>
 800b24e:	2001      	movs	r0, #1
 800b250:	e7f9      	b.n	800b246 <__mcmp+0x2a>
	...

0800b254 <__mdiff>:
 800b254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	4689      	mov	r9, r1
 800b25a:	4606      	mov	r6, r0
 800b25c:	4611      	mov	r1, r2
 800b25e:	4648      	mov	r0, r9
 800b260:	4614      	mov	r4, r2
 800b262:	f7ff ffdb 	bl	800b21c <__mcmp>
 800b266:	1e05      	subs	r5, r0, #0
 800b268:	d112      	bne.n	800b290 <__mdiff+0x3c>
 800b26a:	4629      	mov	r1, r5
 800b26c:	4630      	mov	r0, r6
 800b26e:	f7ff fd5b 	bl	800ad28 <_Balloc>
 800b272:	4602      	mov	r2, r0
 800b274:	b928      	cbnz	r0, 800b282 <__mdiff+0x2e>
 800b276:	4b3f      	ldr	r3, [pc, #252]	@ (800b374 <__mdiff+0x120>)
 800b278:	f240 2137 	movw	r1, #567	@ 0x237
 800b27c:	483e      	ldr	r0, [pc, #248]	@ (800b378 <__mdiff+0x124>)
 800b27e:	f000 fa15 	bl	800b6ac <__assert_func>
 800b282:	2301      	movs	r3, #1
 800b284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b288:	4610      	mov	r0, r2
 800b28a:	b003      	add	sp, #12
 800b28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b290:	bfbc      	itt	lt
 800b292:	464b      	movlt	r3, r9
 800b294:	46a1      	movlt	r9, r4
 800b296:	4630      	mov	r0, r6
 800b298:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b29c:	bfba      	itte	lt
 800b29e:	461c      	movlt	r4, r3
 800b2a0:	2501      	movlt	r5, #1
 800b2a2:	2500      	movge	r5, #0
 800b2a4:	f7ff fd40 	bl	800ad28 <_Balloc>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	b918      	cbnz	r0, 800b2b4 <__mdiff+0x60>
 800b2ac:	4b31      	ldr	r3, [pc, #196]	@ (800b374 <__mdiff+0x120>)
 800b2ae:	f240 2145 	movw	r1, #581	@ 0x245
 800b2b2:	e7e3      	b.n	800b27c <__mdiff+0x28>
 800b2b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b2b8:	6926      	ldr	r6, [r4, #16]
 800b2ba:	60c5      	str	r5, [r0, #12]
 800b2bc:	f109 0310 	add.w	r3, r9, #16
 800b2c0:	f109 0514 	add.w	r5, r9, #20
 800b2c4:	f104 0e14 	add.w	lr, r4, #20
 800b2c8:	f100 0b14 	add.w	fp, r0, #20
 800b2cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b2d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	46d9      	mov	r9, fp
 800b2d8:	f04f 0c00 	mov.w	ip, #0
 800b2dc:	9b01      	ldr	r3, [sp, #4]
 800b2de:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b2e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	fa1f f38a 	uxth.w	r3, sl
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	b283      	uxth	r3, r0
 800b2f0:	1acb      	subs	r3, r1, r3
 800b2f2:	0c00      	lsrs	r0, r0, #16
 800b2f4:	4463      	add	r3, ip
 800b2f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b2fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b304:	4576      	cmp	r6, lr
 800b306:	f849 3b04 	str.w	r3, [r9], #4
 800b30a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b30e:	d8e5      	bhi.n	800b2dc <__mdiff+0x88>
 800b310:	1b33      	subs	r3, r6, r4
 800b312:	3b15      	subs	r3, #21
 800b314:	f023 0303 	bic.w	r3, r3, #3
 800b318:	3415      	adds	r4, #21
 800b31a:	3304      	adds	r3, #4
 800b31c:	42a6      	cmp	r6, r4
 800b31e:	bf38      	it	cc
 800b320:	2304      	movcc	r3, #4
 800b322:	441d      	add	r5, r3
 800b324:	445b      	add	r3, fp
 800b326:	461e      	mov	r6, r3
 800b328:	462c      	mov	r4, r5
 800b32a:	4544      	cmp	r4, r8
 800b32c:	d30e      	bcc.n	800b34c <__mdiff+0xf8>
 800b32e:	f108 0103 	add.w	r1, r8, #3
 800b332:	1b49      	subs	r1, r1, r5
 800b334:	f021 0103 	bic.w	r1, r1, #3
 800b338:	3d03      	subs	r5, #3
 800b33a:	45a8      	cmp	r8, r5
 800b33c:	bf38      	it	cc
 800b33e:	2100      	movcc	r1, #0
 800b340:	440b      	add	r3, r1
 800b342:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b346:	b191      	cbz	r1, 800b36e <__mdiff+0x11a>
 800b348:	6117      	str	r7, [r2, #16]
 800b34a:	e79d      	b.n	800b288 <__mdiff+0x34>
 800b34c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b350:	46e6      	mov	lr, ip
 800b352:	0c08      	lsrs	r0, r1, #16
 800b354:	fa1c fc81 	uxtah	ip, ip, r1
 800b358:	4471      	add	r1, lr
 800b35a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b35e:	b289      	uxth	r1, r1
 800b360:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b364:	f846 1b04 	str.w	r1, [r6], #4
 800b368:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b36c:	e7dd      	b.n	800b32a <__mdiff+0xd6>
 800b36e:	3f01      	subs	r7, #1
 800b370:	e7e7      	b.n	800b342 <__mdiff+0xee>
 800b372:	bf00      	nop
 800b374:	0800bcac 	.word	0x0800bcac
 800b378:	0800bcbd 	.word	0x0800bcbd

0800b37c <__d2b>:
 800b37c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b380:	460f      	mov	r7, r1
 800b382:	2101      	movs	r1, #1
 800b384:	ec59 8b10 	vmov	r8, r9, d0
 800b388:	4616      	mov	r6, r2
 800b38a:	f7ff fccd 	bl	800ad28 <_Balloc>
 800b38e:	4604      	mov	r4, r0
 800b390:	b930      	cbnz	r0, 800b3a0 <__d2b+0x24>
 800b392:	4602      	mov	r2, r0
 800b394:	4b23      	ldr	r3, [pc, #140]	@ (800b424 <__d2b+0xa8>)
 800b396:	4824      	ldr	r0, [pc, #144]	@ (800b428 <__d2b+0xac>)
 800b398:	f240 310f 	movw	r1, #783	@ 0x30f
 800b39c:	f000 f986 	bl	800b6ac <__assert_func>
 800b3a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b3a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3a8:	b10d      	cbz	r5, 800b3ae <__d2b+0x32>
 800b3aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	f1b8 0300 	subs.w	r3, r8, #0
 800b3b4:	d023      	beq.n	800b3fe <__d2b+0x82>
 800b3b6:	4668      	mov	r0, sp
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	f7ff fd7c 	bl	800aeb6 <__lo0bits>
 800b3be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b3c2:	b1d0      	cbz	r0, 800b3fa <__d2b+0x7e>
 800b3c4:	f1c0 0320 	rsb	r3, r0, #32
 800b3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3cc:	430b      	orrs	r3, r1
 800b3ce:	40c2      	lsrs	r2, r0
 800b3d0:	6163      	str	r3, [r4, #20]
 800b3d2:	9201      	str	r2, [sp, #4]
 800b3d4:	9b01      	ldr	r3, [sp, #4]
 800b3d6:	61a3      	str	r3, [r4, #24]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	bf0c      	ite	eq
 800b3dc:	2201      	moveq	r2, #1
 800b3de:	2202      	movne	r2, #2
 800b3e0:	6122      	str	r2, [r4, #16]
 800b3e2:	b1a5      	cbz	r5, 800b40e <__d2b+0x92>
 800b3e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b3e8:	4405      	add	r5, r0
 800b3ea:	603d      	str	r5, [r7, #0]
 800b3ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b3f0:	6030      	str	r0, [r6, #0]
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	b003      	add	sp, #12
 800b3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3fa:	6161      	str	r1, [r4, #20]
 800b3fc:	e7ea      	b.n	800b3d4 <__d2b+0x58>
 800b3fe:	a801      	add	r0, sp, #4
 800b400:	f7ff fd59 	bl	800aeb6 <__lo0bits>
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	6163      	str	r3, [r4, #20]
 800b408:	3020      	adds	r0, #32
 800b40a:	2201      	movs	r2, #1
 800b40c:	e7e8      	b.n	800b3e0 <__d2b+0x64>
 800b40e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b412:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b416:	6038      	str	r0, [r7, #0]
 800b418:	6918      	ldr	r0, [r3, #16]
 800b41a:	f7ff fd2d 	bl	800ae78 <__hi0bits>
 800b41e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b422:	e7e5      	b.n	800b3f0 <__d2b+0x74>
 800b424:	0800bcac 	.word	0x0800bcac
 800b428:	0800bcbd 	.word	0x0800bcbd

0800b42c <__sflush_r>:
 800b42c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b434:	0716      	lsls	r6, r2, #28
 800b436:	4605      	mov	r5, r0
 800b438:	460c      	mov	r4, r1
 800b43a:	d454      	bmi.n	800b4e6 <__sflush_r+0xba>
 800b43c:	684b      	ldr	r3, [r1, #4]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	dc02      	bgt.n	800b448 <__sflush_r+0x1c>
 800b442:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b444:	2b00      	cmp	r3, #0
 800b446:	dd48      	ble.n	800b4da <__sflush_r+0xae>
 800b448:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b44a:	2e00      	cmp	r6, #0
 800b44c:	d045      	beq.n	800b4da <__sflush_r+0xae>
 800b44e:	2300      	movs	r3, #0
 800b450:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b454:	682f      	ldr	r7, [r5, #0]
 800b456:	6a21      	ldr	r1, [r4, #32]
 800b458:	602b      	str	r3, [r5, #0]
 800b45a:	d030      	beq.n	800b4be <__sflush_r+0x92>
 800b45c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	0759      	lsls	r1, r3, #29
 800b462:	d505      	bpl.n	800b470 <__sflush_r+0x44>
 800b464:	6863      	ldr	r3, [r4, #4]
 800b466:	1ad2      	subs	r2, r2, r3
 800b468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b46a:	b10b      	cbz	r3, 800b470 <__sflush_r+0x44>
 800b46c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b46e:	1ad2      	subs	r2, r2, r3
 800b470:	2300      	movs	r3, #0
 800b472:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b474:	6a21      	ldr	r1, [r4, #32]
 800b476:	4628      	mov	r0, r5
 800b478:	47b0      	blx	r6
 800b47a:	1c43      	adds	r3, r0, #1
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	d106      	bne.n	800b48e <__sflush_r+0x62>
 800b480:	6829      	ldr	r1, [r5, #0]
 800b482:	291d      	cmp	r1, #29
 800b484:	d82b      	bhi.n	800b4de <__sflush_r+0xb2>
 800b486:	4a2a      	ldr	r2, [pc, #168]	@ (800b530 <__sflush_r+0x104>)
 800b488:	410a      	asrs	r2, r1
 800b48a:	07d6      	lsls	r6, r2, #31
 800b48c:	d427      	bmi.n	800b4de <__sflush_r+0xb2>
 800b48e:	2200      	movs	r2, #0
 800b490:	6062      	str	r2, [r4, #4]
 800b492:	04d9      	lsls	r1, r3, #19
 800b494:	6922      	ldr	r2, [r4, #16]
 800b496:	6022      	str	r2, [r4, #0]
 800b498:	d504      	bpl.n	800b4a4 <__sflush_r+0x78>
 800b49a:	1c42      	adds	r2, r0, #1
 800b49c:	d101      	bne.n	800b4a2 <__sflush_r+0x76>
 800b49e:	682b      	ldr	r3, [r5, #0]
 800b4a0:	b903      	cbnz	r3, 800b4a4 <__sflush_r+0x78>
 800b4a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4a6:	602f      	str	r7, [r5, #0]
 800b4a8:	b1b9      	cbz	r1, 800b4da <__sflush_r+0xae>
 800b4aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4ae:	4299      	cmp	r1, r3
 800b4b0:	d002      	beq.n	800b4b8 <__sflush_r+0x8c>
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	f7ff fb38 	bl	800ab28 <_free_r>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4bc:	e00d      	b.n	800b4da <__sflush_r+0xae>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	47b0      	blx	r6
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	1c50      	adds	r0, r2, #1
 800b4c8:	d1c9      	bne.n	800b45e <__sflush_r+0x32>
 800b4ca:	682b      	ldr	r3, [r5, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d0c6      	beq.n	800b45e <__sflush_r+0x32>
 800b4d0:	2b1d      	cmp	r3, #29
 800b4d2:	d001      	beq.n	800b4d8 <__sflush_r+0xac>
 800b4d4:	2b16      	cmp	r3, #22
 800b4d6:	d11e      	bne.n	800b516 <__sflush_r+0xea>
 800b4d8:	602f      	str	r7, [r5, #0]
 800b4da:	2000      	movs	r0, #0
 800b4dc:	e022      	b.n	800b524 <__sflush_r+0xf8>
 800b4de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4e2:	b21b      	sxth	r3, r3
 800b4e4:	e01b      	b.n	800b51e <__sflush_r+0xf2>
 800b4e6:	690f      	ldr	r7, [r1, #16]
 800b4e8:	2f00      	cmp	r7, #0
 800b4ea:	d0f6      	beq.n	800b4da <__sflush_r+0xae>
 800b4ec:	0793      	lsls	r3, r2, #30
 800b4ee:	680e      	ldr	r6, [r1, #0]
 800b4f0:	bf08      	it	eq
 800b4f2:	694b      	ldreq	r3, [r1, #20]
 800b4f4:	600f      	str	r7, [r1, #0]
 800b4f6:	bf18      	it	ne
 800b4f8:	2300      	movne	r3, #0
 800b4fa:	eba6 0807 	sub.w	r8, r6, r7
 800b4fe:	608b      	str	r3, [r1, #8]
 800b500:	f1b8 0f00 	cmp.w	r8, #0
 800b504:	dde9      	ble.n	800b4da <__sflush_r+0xae>
 800b506:	6a21      	ldr	r1, [r4, #32]
 800b508:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b50a:	4643      	mov	r3, r8
 800b50c:	463a      	mov	r2, r7
 800b50e:	4628      	mov	r0, r5
 800b510:	47b0      	blx	r6
 800b512:	2800      	cmp	r0, #0
 800b514:	dc08      	bgt.n	800b528 <__sflush_r+0xfc>
 800b516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b51a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b51e:	81a3      	strh	r3, [r4, #12]
 800b520:	f04f 30ff 	mov.w	r0, #4294967295
 800b524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b528:	4407      	add	r7, r0
 800b52a:	eba8 0800 	sub.w	r8, r8, r0
 800b52e:	e7e7      	b.n	800b500 <__sflush_r+0xd4>
 800b530:	dfbffffe 	.word	0xdfbffffe

0800b534 <_fflush_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	690b      	ldr	r3, [r1, #16]
 800b538:	4605      	mov	r5, r0
 800b53a:	460c      	mov	r4, r1
 800b53c:	b913      	cbnz	r3, 800b544 <_fflush_r+0x10>
 800b53e:	2500      	movs	r5, #0
 800b540:	4628      	mov	r0, r5
 800b542:	bd38      	pop	{r3, r4, r5, pc}
 800b544:	b118      	cbz	r0, 800b54e <_fflush_r+0x1a>
 800b546:	6a03      	ldr	r3, [r0, #32]
 800b548:	b90b      	cbnz	r3, 800b54e <_fflush_r+0x1a>
 800b54a:	f7fe faa5 	bl	8009a98 <__sinit>
 800b54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0f3      	beq.n	800b53e <_fflush_r+0xa>
 800b556:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b558:	07d0      	lsls	r0, r2, #31
 800b55a:	d404      	bmi.n	800b566 <_fflush_r+0x32>
 800b55c:	0599      	lsls	r1, r3, #22
 800b55e:	d402      	bmi.n	800b566 <_fflush_r+0x32>
 800b560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b562:	f7fe fc82 	bl	8009e6a <__retarget_lock_acquire_recursive>
 800b566:	4628      	mov	r0, r5
 800b568:	4621      	mov	r1, r4
 800b56a:	f7ff ff5f 	bl	800b42c <__sflush_r>
 800b56e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b570:	07da      	lsls	r2, r3, #31
 800b572:	4605      	mov	r5, r0
 800b574:	d4e4      	bmi.n	800b540 <_fflush_r+0xc>
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	059b      	lsls	r3, r3, #22
 800b57a:	d4e1      	bmi.n	800b540 <_fflush_r+0xc>
 800b57c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b57e:	f7fe fc75 	bl	8009e6c <__retarget_lock_release_recursive>
 800b582:	e7dd      	b.n	800b540 <_fflush_r+0xc>

0800b584 <__swhatbuf_r>:
 800b584:	b570      	push	{r4, r5, r6, lr}
 800b586:	460c      	mov	r4, r1
 800b588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b58c:	2900      	cmp	r1, #0
 800b58e:	b096      	sub	sp, #88	@ 0x58
 800b590:	4615      	mov	r5, r2
 800b592:	461e      	mov	r6, r3
 800b594:	da0d      	bge.n	800b5b2 <__swhatbuf_r+0x2e>
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b59c:	f04f 0100 	mov.w	r1, #0
 800b5a0:	bf14      	ite	ne
 800b5a2:	2340      	movne	r3, #64	@ 0x40
 800b5a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	6031      	str	r1, [r6, #0]
 800b5ac:	602b      	str	r3, [r5, #0]
 800b5ae:	b016      	add	sp, #88	@ 0x58
 800b5b0:	bd70      	pop	{r4, r5, r6, pc}
 800b5b2:	466a      	mov	r2, sp
 800b5b4:	f000 f848 	bl	800b648 <_fstat_r>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	dbec      	blt.n	800b596 <__swhatbuf_r+0x12>
 800b5bc:	9901      	ldr	r1, [sp, #4]
 800b5be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5c6:	4259      	negs	r1, r3
 800b5c8:	4159      	adcs	r1, r3
 800b5ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5ce:	e7eb      	b.n	800b5a8 <__swhatbuf_r+0x24>

0800b5d0 <__smakebuf_r>:
 800b5d0:	898b      	ldrh	r3, [r1, #12]
 800b5d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5d4:	079d      	lsls	r5, r3, #30
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	460c      	mov	r4, r1
 800b5da:	d507      	bpl.n	800b5ec <__smakebuf_r+0x1c>
 800b5dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	6123      	str	r3, [r4, #16]
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	6163      	str	r3, [r4, #20]
 800b5e8:	b003      	add	sp, #12
 800b5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ec:	ab01      	add	r3, sp, #4
 800b5ee:	466a      	mov	r2, sp
 800b5f0:	f7ff ffc8 	bl	800b584 <__swhatbuf_r>
 800b5f4:	9f00      	ldr	r7, [sp, #0]
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	4639      	mov	r1, r7
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f7ff fb08 	bl	800ac10 <_malloc_r>
 800b600:	b948      	cbnz	r0, 800b616 <__smakebuf_r+0x46>
 800b602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b606:	059a      	lsls	r2, r3, #22
 800b608:	d4ee      	bmi.n	800b5e8 <__smakebuf_r+0x18>
 800b60a:	f023 0303 	bic.w	r3, r3, #3
 800b60e:	f043 0302 	orr.w	r3, r3, #2
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	e7e2      	b.n	800b5dc <__smakebuf_r+0xc>
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	6020      	str	r0, [r4, #0]
 800b61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	9b01      	ldr	r3, [sp, #4]
 800b622:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b626:	b15b      	cbz	r3, 800b640 <__smakebuf_r+0x70>
 800b628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b62c:	4630      	mov	r0, r6
 800b62e:	f000 f81d 	bl	800b66c <_isatty_r>
 800b632:	b128      	cbz	r0, 800b640 <__smakebuf_r+0x70>
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	f023 0303 	bic.w	r3, r3, #3
 800b63a:	f043 0301 	orr.w	r3, r3, #1
 800b63e:	81a3      	strh	r3, [r4, #12]
 800b640:	89a3      	ldrh	r3, [r4, #12]
 800b642:	431d      	orrs	r5, r3
 800b644:	81a5      	strh	r5, [r4, #12]
 800b646:	e7cf      	b.n	800b5e8 <__smakebuf_r+0x18>

0800b648 <_fstat_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4d07      	ldr	r5, [pc, #28]	@ (800b668 <_fstat_r+0x20>)
 800b64c:	2300      	movs	r3, #0
 800b64e:	4604      	mov	r4, r0
 800b650:	4608      	mov	r0, r1
 800b652:	4611      	mov	r1, r2
 800b654:	602b      	str	r3, [r5, #0]
 800b656:	f7f6 fb65 	bl	8001d24 <_fstat>
 800b65a:	1c43      	adds	r3, r0, #1
 800b65c:	d102      	bne.n	800b664 <_fstat_r+0x1c>
 800b65e:	682b      	ldr	r3, [r5, #0]
 800b660:	b103      	cbz	r3, 800b664 <_fstat_r+0x1c>
 800b662:	6023      	str	r3, [r4, #0]
 800b664:	bd38      	pop	{r3, r4, r5, pc}
 800b666:	bf00      	nop
 800b668:	20020978 	.word	0x20020978

0800b66c <_isatty_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4d06      	ldr	r5, [pc, #24]	@ (800b688 <_isatty_r+0x1c>)
 800b670:	2300      	movs	r3, #0
 800b672:	4604      	mov	r4, r0
 800b674:	4608      	mov	r0, r1
 800b676:	602b      	str	r3, [r5, #0]
 800b678:	f7f6 fb64 	bl	8001d44 <_isatty>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d102      	bne.n	800b686 <_isatty_r+0x1a>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	b103      	cbz	r3, 800b686 <_isatty_r+0x1a>
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	20020978 	.word	0x20020978

0800b68c <_sbrk_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4d06      	ldr	r5, [pc, #24]	@ (800b6a8 <_sbrk_r+0x1c>)
 800b690:	2300      	movs	r3, #0
 800b692:	4604      	mov	r4, r0
 800b694:	4608      	mov	r0, r1
 800b696:	602b      	str	r3, [r5, #0]
 800b698:	f7f6 fb6c 	bl	8001d74 <_sbrk>
 800b69c:	1c43      	adds	r3, r0, #1
 800b69e:	d102      	bne.n	800b6a6 <_sbrk_r+0x1a>
 800b6a0:	682b      	ldr	r3, [r5, #0]
 800b6a2:	b103      	cbz	r3, 800b6a6 <_sbrk_r+0x1a>
 800b6a4:	6023      	str	r3, [r4, #0]
 800b6a6:	bd38      	pop	{r3, r4, r5, pc}
 800b6a8:	20020978 	.word	0x20020978

0800b6ac <__assert_func>:
 800b6ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6ae:	4614      	mov	r4, r2
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	4b09      	ldr	r3, [pc, #36]	@ (800b6d8 <__assert_func+0x2c>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	68d8      	ldr	r0, [r3, #12]
 800b6ba:	b954      	cbnz	r4, 800b6d2 <__assert_func+0x26>
 800b6bc:	4b07      	ldr	r3, [pc, #28]	@ (800b6dc <__assert_func+0x30>)
 800b6be:	461c      	mov	r4, r3
 800b6c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6c4:	9100      	str	r1, [sp, #0]
 800b6c6:	462b      	mov	r3, r5
 800b6c8:	4905      	ldr	r1, [pc, #20]	@ (800b6e0 <__assert_func+0x34>)
 800b6ca:	f000 f841 	bl	800b750 <fiprintf>
 800b6ce:	f000 f851 	bl	800b774 <abort>
 800b6d2:	4b04      	ldr	r3, [pc, #16]	@ (800b6e4 <__assert_func+0x38>)
 800b6d4:	e7f4      	b.n	800b6c0 <__assert_func+0x14>
 800b6d6:	bf00      	nop
 800b6d8:	20000058 	.word	0x20000058
 800b6dc:	0800be5d 	.word	0x0800be5d
 800b6e0:	0800be2f 	.word	0x0800be2f
 800b6e4:	0800be22 	.word	0x0800be22

0800b6e8 <_calloc_r>:
 800b6e8:	b570      	push	{r4, r5, r6, lr}
 800b6ea:	fba1 5402 	umull	r5, r4, r1, r2
 800b6ee:	b93c      	cbnz	r4, 800b700 <_calloc_r+0x18>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	f7ff fa8d 	bl	800ac10 <_malloc_r>
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	b928      	cbnz	r0, 800b706 <_calloc_r+0x1e>
 800b6fa:	2600      	movs	r6, #0
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	220c      	movs	r2, #12
 800b702:	6002      	str	r2, [r0, #0]
 800b704:	e7f9      	b.n	800b6fa <_calloc_r+0x12>
 800b706:	462a      	mov	r2, r5
 800b708:	4621      	mov	r1, r4
 800b70a:	f7fe fb31 	bl	8009d70 <memset>
 800b70e:	e7f5      	b.n	800b6fc <_calloc_r+0x14>

0800b710 <__ascii_mbtowc>:
 800b710:	b082      	sub	sp, #8
 800b712:	b901      	cbnz	r1, 800b716 <__ascii_mbtowc+0x6>
 800b714:	a901      	add	r1, sp, #4
 800b716:	b142      	cbz	r2, 800b72a <__ascii_mbtowc+0x1a>
 800b718:	b14b      	cbz	r3, 800b72e <__ascii_mbtowc+0x1e>
 800b71a:	7813      	ldrb	r3, [r2, #0]
 800b71c:	600b      	str	r3, [r1, #0]
 800b71e:	7812      	ldrb	r2, [r2, #0]
 800b720:	1e10      	subs	r0, r2, #0
 800b722:	bf18      	it	ne
 800b724:	2001      	movne	r0, #1
 800b726:	b002      	add	sp, #8
 800b728:	4770      	bx	lr
 800b72a:	4610      	mov	r0, r2
 800b72c:	e7fb      	b.n	800b726 <__ascii_mbtowc+0x16>
 800b72e:	f06f 0001 	mvn.w	r0, #1
 800b732:	e7f8      	b.n	800b726 <__ascii_mbtowc+0x16>

0800b734 <__ascii_wctomb>:
 800b734:	4603      	mov	r3, r0
 800b736:	4608      	mov	r0, r1
 800b738:	b141      	cbz	r1, 800b74c <__ascii_wctomb+0x18>
 800b73a:	2aff      	cmp	r2, #255	@ 0xff
 800b73c:	d904      	bls.n	800b748 <__ascii_wctomb+0x14>
 800b73e:	228a      	movs	r2, #138	@ 0x8a
 800b740:	601a      	str	r2, [r3, #0]
 800b742:	f04f 30ff 	mov.w	r0, #4294967295
 800b746:	4770      	bx	lr
 800b748:	700a      	strb	r2, [r1, #0]
 800b74a:	2001      	movs	r0, #1
 800b74c:	4770      	bx	lr
	...

0800b750 <fiprintf>:
 800b750:	b40e      	push	{r1, r2, r3}
 800b752:	b503      	push	{r0, r1, lr}
 800b754:	4601      	mov	r1, r0
 800b756:	ab03      	add	r3, sp, #12
 800b758:	4805      	ldr	r0, [pc, #20]	@ (800b770 <fiprintf+0x20>)
 800b75a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75e:	6800      	ldr	r0, [r0, #0]
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	f000 f837 	bl	800b7d4 <_vfiprintf_r>
 800b766:	b002      	add	sp, #8
 800b768:	f85d eb04 	ldr.w	lr, [sp], #4
 800b76c:	b003      	add	sp, #12
 800b76e:	4770      	bx	lr
 800b770:	20000058 	.word	0x20000058

0800b774 <abort>:
 800b774:	b508      	push	{r3, lr}
 800b776:	2006      	movs	r0, #6
 800b778:	f000 f96c 	bl	800ba54 <raise>
 800b77c:	2001      	movs	r0, #1
 800b77e:	f7f6 fa81 	bl	8001c84 <_exit>

0800b782 <__sfputc_r>:
 800b782:	6893      	ldr	r3, [r2, #8]
 800b784:	3b01      	subs	r3, #1
 800b786:	2b00      	cmp	r3, #0
 800b788:	b410      	push	{r4}
 800b78a:	6093      	str	r3, [r2, #8]
 800b78c:	da08      	bge.n	800b7a0 <__sfputc_r+0x1e>
 800b78e:	6994      	ldr	r4, [r2, #24]
 800b790:	42a3      	cmp	r3, r4
 800b792:	db01      	blt.n	800b798 <__sfputc_r+0x16>
 800b794:	290a      	cmp	r1, #10
 800b796:	d103      	bne.n	800b7a0 <__sfputc_r+0x1e>
 800b798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b79c:	f7fe ba53 	b.w	8009c46 <__swbuf_r>
 800b7a0:	6813      	ldr	r3, [r2, #0]
 800b7a2:	1c58      	adds	r0, r3, #1
 800b7a4:	6010      	str	r0, [r2, #0]
 800b7a6:	7019      	strb	r1, [r3, #0]
 800b7a8:	4608      	mov	r0, r1
 800b7aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <__sfputs_r>:
 800b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	460f      	mov	r7, r1
 800b7b6:	4614      	mov	r4, r2
 800b7b8:	18d5      	adds	r5, r2, r3
 800b7ba:	42ac      	cmp	r4, r5
 800b7bc:	d101      	bne.n	800b7c2 <__sfputs_r+0x12>
 800b7be:	2000      	movs	r0, #0
 800b7c0:	e007      	b.n	800b7d2 <__sfputs_r+0x22>
 800b7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c6:	463a      	mov	r2, r7
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f7ff ffda 	bl	800b782 <__sfputc_r>
 800b7ce:	1c43      	adds	r3, r0, #1
 800b7d0:	d1f3      	bne.n	800b7ba <__sfputs_r+0xa>
 800b7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7d4 <_vfiprintf_r>:
 800b7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d8:	460d      	mov	r5, r1
 800b7da:	b09d      	sub	sp, #116	@ 0x74
 800b7dc:	4614      	mov	r4, r2
 800b7de:	4698      	mov	r8, r3
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	b118      	cbz	r0, 800b7ec <_vfiprintf_r+0x18>
 800b7e4:	6a03      	ldr	r3, [r0, #32]
 800b7e6:	b90b      	cbnz	r3, 800b7ec <_vfiprintf_r+0x18>
 800b7e8:	f7fe f956 	bl	8009a98 <__sinit>
 800b7ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7ee:	07d9      	lsls	r1, r3, #31
 800b7f0:	d405      	bmi.n	800b7fe <_vfiprintf_r+0x2a>
 800b7f2:	89ab      	ldrh	r3, [r5, #12]
 800b7f4:	059a      	lsls	r2, r3, #22
 800b7f6:	d402      	bmi.n	800b7fe <_vfiprintf_r+0x2a>
 800b7f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7fa:	f7fe fb36 	bl	8009e6a <__retarget_lock_acquire_recursive>
 800b7fe:	89ab      	ldrh	r3, [r5, #12]
 800b800:	071b      	lsls	r3, r3, #28
 800b802:	d501      	bpl.n	800b808 <_vfiprintf_r+0x34>
 800b804:	692b      	ldr	r3, [r5, #16]
 800b806:	b99b      	cbnz	r3, 800b830 <_vfiprintf_r+0x5c>
 800b808:	4629      	mov	r1, r5
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7fe fa5a 	bl	8009cc4 <__swsetup_r>
 800b810:	b170      	cbz	r0, 800b830 <_vfiprintf_r+0x5c>
 800b812:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b814:	07dc      	lsls	r4, r3, #31
 800b816:	d504      	bpl.n	800b822 <_vfiprintf_r+0x4e>
 800b818:	f04f 30ff 	mov.w	r0, #4294967295
 800b81c:	b01d      	add	sp, #116	@ 0x74
 800b81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b822:	89ab      	ldrh	r3, [r5, #12]
 800b824:	0598      	lsls	r0, r3, #22
 800b826:	d4f7      	bmi.n	800b818 <_vfiprintf_r+0x44>
 800b828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b82a:	f7fe fb1f 	bl	8009e6c <__retarget_lock_release_recursive>
 800b82e:	e7f3      	b.n	800b818 <_vfiprintf_r+0x44>
 800b830:	2300      	movs	r3, #0
 800b832:	9309      	str	r3, [sp, #36]	@ 0x24
 800b834:	2320      	movs	r3, #32
 800b836:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b83a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b83e:	2330      	movs	r3, #48	@ 0x30
 800b840:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b9f0 <_vfiprintf_r+0x21c>
 800b844:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b848:	f04f 0901 	mov.w	r9, #1
 800b84c:	4623      	mov	r3, r4
 800b84e:	469a      	mov	sl, r3
 800b850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b854:	b10a      	cbz	r2, 800b85a <_vfiprintf_r+0x86>
 800b856:	2a25      	cmp	r2, #37	@ 0x25
 800b858:	d1f9      	bne.n	800b84e <_vfiprintf_r+0x7a>
 800b85a:	ebba 0b04 	subs.w	fp, sl, r4
 800b85e:	d00b      	beq.n	800b878 <_vfiprintf_r+0xa4>
 800b860:	465b      	mov	r3, fp
 800b862:	4622      	mov	r2, r4
 800b864:	4629      	mov	r1, r5
 800b866:	4630      	mov	r0, r6
 800b868:	f7ff ffa2 	bl	800b7b0 <__sfputs_r>
 800b86c:	3001      	adds	r0, #1
 800b86e:	f000 80a7 	beq.w	800b9c0 <_vfiprintf_r+0x1ec>
 800b872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b874:	445a      	add	r2, fp
 800b876:	9209      	str	r2, [sp, #36]	@ 0x24
 800b878:	f89a 3000 	ldrb.w	r3, [sl]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 809f 	beq.w	800b9c0 <_vfiprintf_r+0x1ec>
 800b882:	2300      	movs	r3, #0
 800b884:	f04f 32ff 	mov.w	r2, #4294967295
 800b888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88c:	f10a 0a01 	add.w	sl, sl, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	9307      	str	r3, [sp, #28]
 800b894:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b898:	931a      	str	r3, [sp, #104]	@ 0x68
 800b89a:	4654      	mov	r4, sl
 800b89c:	2205      	movs	r2, #5
 800b89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a2:	4853      	ldr	r0, [pc, #332]	@ (800b9f0 <_vfiprintf_r+0x21c>)
 800b8a4:	f7f4 fcb4 	bl	8000210 <memchr>
 800b8a8:	9a04      	ldr	r2, [sp, #16]
 800b8aa:	b9d8      	cbnz	r0, 800b8e4 <_vfiprintf_r+0x110>
 800b8ac:	06d1      	lsls	r1, r2, #27
 800b8ae:	bf44      	itt	mi
 800b8b0:	2320      	movmi	r3, #32
 800b8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8b6:	0713      	lsls	r3, r2, #28
 800b8b8:	bf44      	itt	mi
 800b8ba:	232b      	movmi	r3, #43	@ 0x2b
 800b8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8c6:	d015      	beq.n	800b8f4 <_vfiprintf_r+0x120>
 800b8c8:	9a07      	ldr	r2, [sp, #28]
 800b8ca:	4654      	mov	r4, sl
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	f04f 0c0a 	mov.w	ip, #10
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d8:	3b30      	subs	r3, #48	@ 0x30
 800b8da:	2b09      	cmp	r3, #9
 800b8dc:	d94b      	bls.n	800b976 <_vfiprintf_r+0x1a2>
 800b8de:	b1b0      	cbz	r0, 800b90e <_vfiprintf_r+0x13a>
 800b8e0:	9207      	str	r2, [sp, #28]
 800b8e2:	e014      	b.n	800b90e <_vfiprintf_r+0x13a>
 800b8e4:	eba0 0308 	sub.w	r3, r0, r8
 800b8e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	9304      	str	r3, [sp, #16]
 800b8f0:	46a2      	mov	sl, r4
 800b8f2:	e7d2      	b.n	800b89a <_vfiprintf_r+0xc6>
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	1d19      	adds	r1, r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	9103      	str	r1, [sp, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	bfbb      	ittet	lt
 800b900:	425b      	neglt	r3, r3
 800b902:	f042 0202 	orrlt.w	r2, r2, #2
 800b906:	9307      	strge	r3, [sp, #28]
 800b908:	9307      	strlt	r3, [sp, #28]
 800b90a:	bfb8      	it	lt
 800b90c:	9204      	strlt	r2, [sp, #16]
 800b90e:	7823      	ldrb	r3, [r4, #0]
 800b910:	2b2e      	cmp	r3, #46	@ 0x2e
 800b912:	d10a      	bne.n	800b92a <_vfiprintf_r+0x156>
 800b914:	7863      	ldrb	r3, [r4, #1]
 800b916:	2b2a      	cmp	r3, #42	@ 0x2a
 800b918:	d132      	bne.n	800b980 <_vfiprintf_r+0x1ac>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	1d1a      	adds	r2, r3, #4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	9203      	str	r2, [sp, #12]
 800b922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b926:	3402      	adds	r4, #2
 800b928:	9305      	str	r3, [sp, #20]
 800b92a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ba00 <_vfiprintf_r+0x22c>
 800b92e:	7821      	ldrb	r1, [r4, #0]
 800b930:	2203      	movs	r2, #3
 800b932:	4650      	mov	r0, sl
 800b934:	f7f4 fc6c 	bl	8000210 <memchr>
 800b938:	b138      	cbz	r0, 800b94a <_vfiprintf_r+0x176>
 800b93a:	9b04      	ldr	r3, [sp, #16]
 800b93c:	eba0 000a 	sub.w	r0, r0, sl
 800b940:	2240      	movs	r2, #64	@ 0x40
 800b942:	4082      	lsls	r2, r0
 800b944:	4313      	orrs	r3, r2
 800b946:	3401      	adds	r4, #1
 800b948:	9304      	str	r3, [sp, #16]
 800b94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b94e:	4829      	ldr	r0, [pc, #164]	@ (800b9f4 <_vfiprintf_r+0x220>)
 800b950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b954:	2206      	movs	r2, #6
 800b956:	f7f4 fc5b 	bl	8000210 <memchr>
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d03f      	beq.n	800b9de <_vfiprintf_r+0x20a>
 800b95e:	4b26      	ldr	r3, [pc, #152]	@ (800b9f8 <_vfiprintf_r+0x224>)
 800b960:	bb1b      	cbnz	r3, 800b9aa <_vfiprintf_r+0x1d6>
 800b962:	9b03      	ldr	r3, [sp, #12]
 800b964:	3307      	adds	r3, #7
 800b966:	f023 0307 	bic.w	r3, r3, #7
 800b96a:	3308      	adds	r3, #8
 800b96c:	9303      	str	r3, [sp, #12]
 800b96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b970:	443b      	add	r3, r7
 800b972:	9309      	str	r3, [sp, #36]	@ 0x24
 800b974:	e76a      	b.n	800b84c <_vfiprintf_r+0x78>
 800b976:	fb0c 3202 	mla	r2, ip, r2, r3
 800b97a:	460c      	mov	r4, r1
 800b97c:	2001      	movs	r0, #1
 800b97e:	e7a8      	b.n	800b8d2 <_vfiprintf_r+0xfe>
 800b980:	2300      	movs	r3, #0
 800b982:	3401      	adds	r4, #1
 800b984:	9305      	str	r3, [sp, #20]
 800b986:	4619      	mov	r1, r3
 800b988:	f04f 0c0a 	mov.w	ip, #10
 800b98c:	4620      	mov	r0, r4
 800b98e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b992:	3a30      	subs	r2, #48	@ 0x30
 800b994:	2a09      	cmp	r2, #9
 800b996:	d903      	bls.n	800b9a0 <_vfiprintf_r+0x1cc>
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d0c6      	beq.n	800b92a <_vfiprintf_r+0x156>
 800b99c:	9105      	str	r1, [sp, #20]
 800b99e:	e7c4      	b.n	800b92a <_vfiprintf_r+0x156>
 800b9a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e7f0      	b.n	800b98c <_vfiprintf_r+0x1b8>
 800b9aa:	ab03      	add	r3, sp, #12
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	462a      	mov	r2, r5
 800b9b0:	4b12      	ldr	r3, [pc, #72]	@ (800b9fc <_vfiprintf_r+0x228>)
 800b9b2:	a904      	add	r1, sp, #16
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7fd fc2b 	bl	8009210 <_printf_float>
 800b9ba:	4607      	mov	r7, r0
 800b9bc:	1c78      	adds	r0, r7, #1
 800b9be:	d1d6      	bne.n	800b96e <_vfiprintf_r+0x19a>
 800b9c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9c2:	07d9      	lsls	r1, r3, #31
 800b9c4:	d405      	bmi.n	800b9d2 <_vfiprintf_r+0x1fe>
 800b9c6:	89ab      	ldrh	r3, [r5, #12]
 800b9c8:	059a      	lsls	r2, r3, #22
 800b9ca:	d402      	bmi.n	800b9d2 <_vfiprintf_r+0x1fe>
 800b9cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9ce:	f7fe fa4d 	bl	8009e6c <__retarget_lock_release_recursive>
 800b9d2:	89ab      	ldrh	r3, [r5, #12]
 800b9d4:	065b      	lsls	r3, r3, #25
 800b9d6:	f53f af1f 	bmi.w	800b818 <_vfiprintf_r+0x44>
 800b9da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9dc:	e71e      	b.n	800b81c <_vfiprintf_r+0x48>
 800b9de:	ab03      	add	r3, sp, #12
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	462a      	mov	r2, r5
 800b9e4:	4b05      	ldr	r3, [pc, #20]	@ (800b9fc <_vfiprintf_r+0x228>)
 800b9e6:	a904      	add	r1, sp, #16
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f7fd fea9 	bl	8009740 <_printf_i>
 800b9ee:	e7e4      	b.n	800b9ba <_vfiprintf_r+0x1e6>
 800b9f0:	0800bf5f 	.word	0x0800bf5f
 800b9f4:	0800bf69 	.word	0x0800bf69
 800b9f8:	08009211 	.word	0x08009211
 800b9fc:	0800b7b1 	.word	0x0800b7b1
 800ba00:	0800bf65 	.word	0x0800bf65

0800ba04 <_raise_r>:
 800ba04:	291f      	cmp	r1, #31
 800ba06:	b538      	push	{r3, r4, r5, lr}
 800ba08:	4605      	mov	r5, r0
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	d904      	bls.n	800ba18 <_raise_r+0x14>
 800ba0e:	2316      	movs	r3, #22
 800ba10:	6003      	str	r3, [r0, #0]
 800ba12:	f04f 30ff 	mov.w	r0, #4294967295
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba1a:	b112      	cbz	r2, 800ba22 <_raise_r+0x1e>
 800ba1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba20:	b94b      	cbnz	r3, 800ba36 <_raise_r+0x32>
 800ba22:	4628      	mov	r0, r5
 800ba24:	f000 f830 	bl	800ba88 <_getpid_r>
 800ba28:	4622      	mov	r2, r4
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba32:	f000 b817 	b.w	800ba64 <_kill_r>
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d00a      	beq.n	800ba50 <_raise_r+0x4c>
 800ba3a:	1c59      	adds	r1, r3, #1
 800ba3c:	d103      	bne.n	800ba46 <_raise_r+0x42>
 800ba3e:	2316      	movs	r3, #22
 800ba40:	6003      	str	r3, [r0, #0]
 800ba42:	2001      	movs	r0, #1
 800ba44:	e7e7      	b.n	800ba16 <_raise_r+0x12>
 800ba46:	2100      	movs	r1, #0
 800ba48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4798      	blx	r3
 800ba50:	2000      	movs	r0, #0
 800ba52:	e7e0      	b.n	800ba16 <_raise_r+0x12>

0800ba54 <raise>:
 800ba54:	4b02      	ldr	r3, [pc, #8]	@ (800ba60 <raise+0xc>)
 800ba56:	4601      	mov	r1, r0
 800ba58:	6818      	ldr	r0, [r3, #0]
 800ba5a:	f7ff bfd3 	b.w	800ba04 <_raise_r>
 800ba5e:	bf00      	nop
 800ba60:	20000058 	.word	0x20000058

0800ba64 <_kill_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4d07      	ldr	r5, [pc, #28]	@ (800ba84 <_kill_r+0x20>)
 800ba68:	2300      	movs	r3, #0
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	4608      	mov	r0, r1
 800ba6e:	4611      	mov	r1, r2
 800ba70:	602b      	str	r3, [r5, #0]
 800ba72:	f7f6 f8f7 	bl	8001c64 <_kill>
 800ba76:	1c43      	adds	r3, r0, #1
 800ba78:	d102      	bne.n	800ba80 <_kill_r+0x1c>
 800ba7a:	682b      	ldr	r3, [r5, #0]
 800ba7c:	b103      	cbz	r3, 800ba80 <_kill_r+0x1c>
 800ba7e:	6023      	str	r3, [r4, #0]
 800ba80:	bd38      	pop	{r3, r4, r5, pc}
 800ba82:	bf00      	nop
 800ba84:	20020978 	.word	0x20020978

0800ba88 <_getpid_r>:
 800ba88:	f7f6 b8e4 	b.w	8001c54 <_getpid>

0800ba8c <_init>:
 800ba8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8e:	bf00      	nop
 800ba90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba92:	bc08      	pop	{r3}
 800ba94:	469e      	mov	lr, r3
 800ba96:	4770      	bx	lr

0800ba98 <_fini>:
 800ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9a:	bf00      	nop
 800ba9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba9e:	bc08      	pop	{r3}
 800baa0:	469e      	mov	lr, r3
 800baa2:	4770      	bx	lr

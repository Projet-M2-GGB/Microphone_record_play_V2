
Microphone_record_play_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b430  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  0800b600  0800b600  0000c600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb48  0800bb48  0000d214  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb48  0800bb48  0000cb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb50  0800bb50  0000d214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb50  0800bb50  0000cb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb54  0800bb54  0000cb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800bb58  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00020768  20000220  0800bd6c  0000d220  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20020988  0800bd6c  0000d988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001649f  00000000  00000000  0000d244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363e  00000000  00000000  000236e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00026d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e29  00000000  00000000  00027fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002870d  00000000  00000000  00028dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001813d  00000000  00000000  000514d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f284e  00000000  00000000  00069613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015be61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b3c  00000000  00000000  0015bea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001619e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b5e8 	.word	0x0800b5e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800b5e8 	.word	0x0800b5e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <MX_DMA_Init+0x38>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <MX_DMA_Init+0x38>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_DMA_Init+0x38>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2039      	movs	r0, #57	@ 0x39
 8000efc:	f003 fb83 	bl	8004606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f00:	2039      	movs	r0, #57	@ 0x39
 8000f02:	f003 fb9c 	bl	800463e <HAL_NVIC_EnableIRQ>

}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800

08000f14 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	615a      	str	r2, [r3, #20]
 8000f2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f2c:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f2e:	4a21      	ldr	r2, [pc, #132]	@ (8000fb4 <MX_FMC_Init+0xa0>)
 8000f30:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f40:	2208      	movs	r2, #8
 8000f42:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f46:	2220      	movs	r2, #32
 8000f48:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f4c:	2240      	movs	r2, #64	@ 0x40
 8000f4e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f50:	4b17      	ldr	r3, [pc, #92]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f52:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000f56:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f64:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000f82:	2306      	movs	r3, #6
 8000f84:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <MX_FMC_Init+0x9c>)
 8000f98:	f007 f837 	bl	800800a <HAL_SDRAM_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 8000fa2:	f000 fc93 	bl	80018cc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000fa6:	bf00      	nop
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000023c 	.word	0x2000023c
 8000fb4:	a0000140 	.word	0xa0000140

08000fb8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80010bc <HAL_FMC_MspInit+0x104>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d16f      	bne.n	80010b4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000fd4:	4b39      	ldr	r3, [pc, #228]	@ (80010bc <HAL_FMC_MspInit+0x104>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fda:	4b39      	ldr	r3, [pc, #228]	@ (80010c0 <HAL_FMC_MspInit+0x108>)
 8000fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fde:	4a38      	ldr	r2, [pc, #224]	@ (80010c0 <HAL_FMC_MspInit+0x108>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000fe6:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <HAL_FMC_MspInit+0x108>)
 8000fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 8000ff2:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000ff6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001004:	230c      	movs	r3, #12
 8001006:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	482d      	ldr	r0, [pc, #180]	@ (80010c4 <HAL_FMC_MspInit+0x10c>)
 800100e:	f003 ff91 	bl	8004f34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001012:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001016:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001024:	230c      	movs	r3, #12
 8001026:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4826      	ldr	r0, [pc, #152]	@ (80010c8 <HAL_FMC_MspInit+0x110>)
 800102e:	f003 ff81 	bl	8004f34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10
 8001032:	f240 63cf 	movw	r3, #1743	@ 0x6cf
 8001036:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001044:	230c      	movs	r3, #12
 8001046:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	481f      	ldr	r0, [pc, #124]	@ (80010cc <HAL_FMC_MspInit+0x114>)
 800104e:	f003 ff71 	bl	8004f34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001052:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001056:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001064:	230c      	movs	r3, #12
 8001066:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	4818      	ldr	r0, [pc, #96]	@ (80010d0 <HAL_FMC_MspInit+0x118>)
 800106e:	f003 ff61 	bl	8004f34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 8001072:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 8001076:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001084:	230c      	movs	r3, #12
 8001086:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4811      	ldr	r0, [pc, #68]	@ (80010d4 <HAL_FMC_MspInit+0x11c>)
 800108e:	f003 ff51 	bl	8004f34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 8001092:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001096:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a4:	230c      	movs	r3, #12
 80010a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	480a      	ldr	r0, [pc, #40]	@ (80010d8 <HAL_FMC_MspInit+0x120>)
 80010ae:	f003 ff41 	bl	8004f34 <HAL_GPIO_Init>
 80010b2:	e000      	b.n	80010b6 <HAL_FMC_MspInit+0xfe>
    return;
 80010b4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000270 	.word	0x20000270
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40021800 	.word	0x40021800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40022000 	.word	0x40022000
 80010d0:	40021400 	.word	0x40021400
 80010d4:	40021c00 	.word	0x40021c00
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80010e4:	f7ff ff68 	bl	8000fb8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b090      	sub	sp, #64	@ 0x40
 80010f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001106:	4b95      	ldr	r3, [pc, #596]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a94      	ldr	r2, [pc, #592]	@ (800135c <MX_GPIO_Init+0x26c>)
 800110c:	f043 0310 	orr.w	r3, r3, #16
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b92      	ldr	r3, [pc, #584]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800111c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800111e:	4b8f      	ldr	r3, [pc, #572]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a8e      	ldr	r2, [pc, #568]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b8c      	ldr	r3, [pc, #560]	@ (800135c <MX_GPIO_Init+0x26c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b89      	ldr	r3, [pc, #548]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a88      	ldr	r2, [pc, #544]	@ (800135c <MX_GPIO_Init+0x26c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b86      	ldr	r3, [pc, #536]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	623b      	str	r3, [r7, #32]
 800114c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	4b83      	ldr	r3, [pc, #524]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a82      	ldr	r2, [pc, #520]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b80      	ldr	r3, [pc, #512]	@ (800135c <MX_GPIO_Init+0x26c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b7d      	ldr	r3, [pc, #500]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a7c      	ldr	r2, [pc, #496]	@ (800135c <MX_GPIO_Init+0x26c>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b7a      	ldr	r3, [pc, #488]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	61bb      	str	r3, [r7, #24]
 800117c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b77      	ldr	r3, [pc, #476]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a76      	ldr	r2, [pc, #472]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b74      	ldr	r3, [pc, #464]	@ (800135c <MX_GPIO_Init+0x26c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001196:	4b71      	ldr	r3, [pc, #452]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a70      	ldr	r2, [pc, #448]	@ (800135c <MX_GPIO_Init+0x26c>)
 800119c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b6e      	ldr	r3, [pc, #440]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011ae:	4b6b      	ldr	r3, [pc, #428]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a6a      	ldr	r2, [pc, #424]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b68      	ldr	r3, [pc, #416]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011c6:	4b65      	ldr	r3, [pc, #404]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a64      	ldr	r2, [pc, #400]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b62      	ldr	r3, [pc, #392]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011de:	4b5f      	ldr	r3, [pc, #380]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a5e      	ldr	r2, [pc, #376]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b5c      	ldr	r3, [pc, #368]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0320 	and.w	r3, r3, #32
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	4b59      	ldr	r3, [pc, #356]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a58      	ldr	r2, [pc, #352]	@ (800135c <MX_GPIO_Init+0x26c>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b56      	ldr	r3, [pc, #344]	@ (800135c <MX_GPIO_Init+0x26c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE3 PE2 PE1 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 800120e:	230f      	movs	r3, #15
 8001210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001212:	2303      	movs	r3, #3
 8001214:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800121e:	4619      	mov	r1, r3
 8001220:	484f      	ldr	r0, [pc, #316]	@ (8001360 <MX_GPIO_Init+0x270>)
 8001222:	f003 fe87 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG11 PG12
                           PG10 PG9 PG7 PG6
                           PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12
 8001226:	f647 63c8 	movw	r3, #32456	@ 0x7ec8
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122c:	2303      	movs	r3, #3
 800122e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001234:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001238:	4619      	mov	r1, r3
 800123a:	484a      	ldr	r0, [pc, #296]	@ (8001364 <MX_GPIO_Init+0x274>)
 800123c:	f003 fe7a 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001240:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001246:	2303      	movs	r3, #3
 8001248:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001252:	4619      	mov	r1, r3
 8001254:	4844      	ldr	r0, [pc, #272]	@ (8001368 <MX_GPIO_Init+0x278>)
 8001256:	f003 fe6d 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD3
                           PD4 PD2 PD12 PD13
                           PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 800125a:	f643 03fc 	movw	r3, #14588	@ 0x38fc
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001260:	2303      	movs	r3, #3
 8001262:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001268:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800126c:	4619      	mov	r1, r3
 800126e:	483f      	ldr	r0, [pc, #252]	@ (800136c <MX_GPIO_Init+0x27c>)
 8001270:	f003 fe60 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC3 PC0
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 8001274:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001278:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001282:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001286:	4619      	mov	r1, r3
 8001288:	4839      	ldr	r0, [pc, #228]	@ (8001370 <MX_GPIO_Init+0x280>)
 800128a:	f003 fe53 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 800128e:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001294:	2303      	movs	r3, #3
 8001296:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012a0:	4619      	mov	r1, r3
 80012a2:	4834      	ldr	r0, [pc, #208]	@ (8001374 <MX_GPIO_Init+0x284>)
 80012a4:	f003 fe46 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80012a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ae:	2303      	movs	r3, #3
 80012b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ba:	4619      	mov	r1, r3
 80012bc:	482e      	ldr	r0, [pc, #184]	@ (8001378 <MX_GPIO_Init+0x288>)
 80012be:	f003 fe39 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI5 PI12
                           PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12
 80012c2:	f24f 1330 	movw	r3, #61744	@ 0xf130
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d4:	4619      	mov	r1, r3
 80012d6:	4829      	ldr	r0, [pc, #164]	@ (800137c <MX_GPIO_Init+0x28c>)
 80012d8:	f003 fe2c 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80012dc:	23ff      	movs	r3, #255	@ 0xff
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e0:	2303      	movs	r3, #3
 80012e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4824      	ldr	r0, [pc, #144]	@ (8001380 <MX_GPIO_Init+0x290>)
 80012f0:	f003 fe20 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_user_Pin;
 80012f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Button_user_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001308:	4619      	mov	r1, r3
 800130a:	481c      	ldr	r0, [pc, #112]	@ (800137c <MX_GPIO_Init+0x28c>)
 800130c:	f003 fe12 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH4 PH7 PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6;
 8001310:	23d0      	movs	r3, #208	@ 0xd0
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001314:	2303      	movs	r3, #3
 8001316:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800131c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001320:	4619      	mov	r1, r3
 8001322:	4818      	ldr	r0, [pc, #96]	@ (8001384 <MX_GPIO_Init+0x294>)
 8001324:	f003 fe06 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8001328:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800132c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132e:	2303      	movs	r3, #3
 8001330:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800133a:	4619      	mov	r1, r3
 800133c:	4812      	ldr	r0, [pc, #72]	@ (8001388 <MX_GPIO_Init+0x298>)
 800133e:	f003 fdf9 	bl	8004f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2028      	movs	r0, #40	@ 0x28
 8001348:	f003 f95d 	bl	8004606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800134c:	2028      	movs	r0, #40	@ 0x28
 800134e:	f003 f976 	bl	800463e <HAL_NVIC_EnableIRQ>

}
 8001352:	bf00      	nop
 8001354:	3740      	adds	r7, #64	@ 0x40
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40021000 	.word	0x40021000
 8001364:	40021800 	.word	0x40021800
 8001368:	40020400 	.word	0x40020400
 800136c:	40020c00 	.word	0x40020c00
 8001370:	40020800 	.word	0x40020800
 8001374:	40020000 	.word	0x40020000
 8001378:	40022400 	.word	0x40022400
 800137c:	40022000 	.word	0x40022000
 8001380:	40022800 	.word	0x40022800
 8001384:	40021c00 	.word	0x40021c00
 8001388:	40021400 	.word	0x40021400

0800138c <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800139e:	2320      	movs	r3, #32
 80013a0:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013a2:	f3bf 8f4f 	dsb	sy
}
 80013a6:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80013a8:	e00b      	b.n	80013c2 <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 80013aa:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <SCB_CleanDCache_by_Addr+0x54>)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4413      	add	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	dcf0      	bgt.n	80013aa <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80013c8:	f3bf 8f4f 	dsb	sy
}
 80013cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013ce:	f3bf 8f6f 	isb	sy
}
 80013d2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ea:	f002 ffaf 	bl	800434c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ee:	f000 f8e5 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f2:	f7ff fe7d 	bl	80010f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013f6:	f7ff fd6f 	bl	8000ed8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013fa:	f000 fcdd 	bl	8001db8 <MX_USART1_UART_Init>
  printf("DMA State: %d\r\n", HAL_DMA_GetState(&hdma_sai1_a));
 80013fe:	485f      	ldr	r0, [pc, #380]	@ (800157c <main+0x198>)
 8001400:	f003 fc9e 	bl	8004d40 <HAL_DMA_GetState>
 8001404:	4603      	mov	r3, r0
 8001406:	4619      	mov	r1, r3
 8001408:	485d      	ldr	r0, [pc, #372]	@ (8001580 <main+0x19c>)
 800140a:	f008 f917 	bl	800963c <iprintf>
  MX_SAI1_Init();
 800140e:	f000 fa63 	bl	80018d8 <MX_SAI1_Init>
  MX_FMC_Init();
 8001412:	f7ff fd7f 	bl	8000f14 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize Audio Recorder */
	if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8001416:	2202      	movs	r2, #2
 8001418:	2110      	movs	r1, #16
 800141a:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800141e:	f002 fd4b 	bl	8003eb8 <BSP_AUDIO_IN_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <main+0x4a>
	{
		printf("Audio input setup OK\r\n");
 8001428:	4856      	ldr	r0, [pc, #344]	@ (8001584 <main+0x1a0>)
 800142a:	f008 f96f 	bl	800970c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  check_button_release();
 800142e:	f000 fa39 	bl	80018a4 <check_button_release>
	  printf("Waiting for input to record...\r\n");
 8001432:	4855      	ldr	r0, [pc, #340]	@ (8001588 <main+0x1a4>)
 8001434:	f008 f96a 	bl	800970c <puts>
	  HAL_Delay(1000);
 8001438:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800143c:	f002 ffe4 	bl	8004408 <HAL_Delay>
	  if (button_pressed == 1)
 8001440:	4b52      	ldr	r3, [pc, #328]	@ (800158c <main+0x1a8>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d1f1      	bne.n	800142e <main+0x4a>
	  {
		  check_button_release();
 800144a:	f000 fa2b 	bl	80018a4 <check_button_release>
		  printf("recording...\r\n");
 800144e:	4850      	ldr	r0, [pc, #320]	@ (8001590 <main+0x1ac>)
 8001450:	f008 f95c 	bl	800970c <puts>
		  /* Start Recording */
		  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 8001454:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8001458:	484e      	ldr	r0, [pc, #312]	@ (8001594 <main+0x1b0>)
 800145a:	f002 fdab 	bl	8003fb4 <BSP_AUDIO_IN_Record>
		  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	e069      	b.n	8001538 <main+0x154>
		    /* Wait end of half block recording */
		    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
		    {
		      //printf("Waiting for BUFFER_OFFSET_HALF...\r\n");
		      //HAL_Delay(1000);
		      if (button_pressed == 1)
 8001464:	4b49      	ldr	r3, [pc, #292]	@ (800158c <main+0x1a8>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d105      	bne.n	800147a <main+0x96>
		      {
		    	check_button_release();
 800146e:	f000 fa19 	bl	80018a4 <check_button_release>
		        /* Stop Player before close Test */
		        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001472:	2002      	movs	r0, #2
 8001474:	f002 fb0e 	bl	8003a94 <BSP_AUDIO_OUT_Stop>
		        return;
 8001478:	e07c      	b.n	8001574 <main+0x190>
		    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 800147a:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <main+0x1b4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d1f0      	bne.n	8001464 <main+0x80>
		      }
		    }

		    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8001482:	4b45      	ldr	r3, [pc, #276]	@ (8001598 <main+0x1b4>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

		    /* Copy recorded 1st half block in SDRAM */

		    printf("DMA State: %d\r\n", HAL_DMA_GetState(&hdma_sai1_a));
 8001488:	483c      	ldr	r0, [pc, #240]	@ (800157c <main+0x198>)
 800148a:	f003 fc59 	bl	8004d40 <HAL_DMA_GetState>
 800148e:	4603      	mov	r3, r0
 8001490:	4619      	mov	r1, r3
 8001492:	483b      	ldr	r0, [pc, #236]	@ (8001580 <main+0x19c>)
 8001494:	f008 f8d2 	bl	800963c <iprintf>

		    printf("DMA Error: %lu\r\n", HAL_DMA_GetError(&hdma_sai1_a));
 8001498:	4838      	ldr	r0, [pc, #224]	@ (800157c <main+0x198>)
 800149a:	f003 fc5f 	bl	8004d5c <HAL_DMA_GetError>
 800149e:	4603      	mov	r3, r0
 80014a0:	4619      	mov	r1, r3
 80014a2:	483e      	ldr	r0, [pc, #248]	@ (800159c <main+0x1b8>)
 80014a4:	f008 f8ca 	bl	800963c <iprintf>

		    if (HAL_DMA_GetState(&haudio_in_sai) == HAL_DMA_STATE_READY) {
 80014a8:	483d      	ldr	r0, [pc, #244]	@ (80015a0 <main+0x1bc>)
 80014aa:	f003 fc49 	bl	8004d40 <HAL_DMA_GetState>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d11e      	bne.n	80014f2 <main+0x10e>
		        // DMA is ready, it's safe to use memcpy
			    printf("Copying data to memory...\r\n");
 80014b4:	483b      	ldr	r0, [pc, #236]	@ (80015a4 <main+0x1c0>)
 80014b6:	f008 f929 	bl	800970c <puts>
			    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	03db      	lsls	r3, r3, #15
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80014c8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80014cc:	4931      	ldr	r1, [pc, #196]	@ (8001594 <main+0x1b0>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f008 fa7b 	bl	80099ca <memcpy>
			           internal_buffer,
			           AUDIO_BLOCK_SIZE);
			    printf("Copy complete.\r\n");
 80014d4:	4834      	ldr	r0, [pc, #208]	@ (80015a8 <main+0x1c4>)
 80014d6:	f008 f919 	bl	800970c <puts>
		    }


		    /* Wait end of one block recording */
		    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 80014da:	e00a      	b.n	80014f2 <main+0x10e>
		    {
		      if (button_pressed == 1)
 80014dc:	4b2b      	ldr	r3, [pc, #172]	@ (800158c <main+0x1a8>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d105      	bne.n	80014f2 <main+0x10e>
		      {
			    check_button_release();
 80014e6:	f000 f9dd 	bl	80018a4 <check_button_release>
		        /* Stop Player before close Test */
		        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 80014ea:	2002      	movs	r0, #2
 80014ec:	f002 fad2 	bl	8003a94 <BSP_AUDIO_OUT_Stop>
		        return;
 80014f0:	e040      	b.n	8001574 <main+0x190>
		    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 80014f2:	4b29      	ldr	r3, [pc, #164]	@ (8001598 <main+0x1b4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d1f0      	bne.n	80014dc <main+0xf8>
		      }
		    }
		    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <main+0x1b4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
		    /* Copy recorded 2nd half block in SDRAM */



		    if (HAL_DMA_GetState(&hdma_sai1_a) == HAL_DMA_STATE_READY) {
 8001500:	481e      	ldr	r0, [pc, #120]	@ (800157c <main+0x198>)
 8001502:	f003 fc1d 	bl	8004d40 <HAL_DMA_GetState>
 8001506:	4603      	mov	r3, r0
 8001508:	2b01      	cmp	r3, #1
 800150a:	d112      	bne.n	8001532 <main+0x14e>
		        // DMA is ready, it's safe to use memcpy
		    	printf("Copying data to memory...\r\n");
 800150c:	4825      	ldr	r0, [pc, #148]	@ (80015a4 <main+0x1c0>)
 800150e:	f008 f8fd 	bl	800970c <puts>
			    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	03db      	lsls	r3, r3, #15
 8001518:	1a9b      	subs	r3, r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8001520:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001524:	491b      	ldr	r1, [pc, #108]	@ (8001594 <main+0x1b0>)
 8001526:	4618      	mov	r0, r3
 8001528:	f008 fa4f 	bl	80099ca <memcpy>
			           internal_buffer,
			           AUDIO_BLOCK_SIZE);
			    printf("Copy complete.\r\n");
 800152c:	481e      	ldr	r0, [pc, #120]	@ (80015a8 <main+0x1c4>)
 800152e:	f008 f8ed 	bl	800970c <puts>
		  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3301      	adds	r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d99d      	bls.n	800147a <main+0x96>
		    }


		  }
		  printf("stopped recording\r\n");
 800153e:	481b      	ldr	r0, [pc, #108]	@ (80015ac <main+0x1c8>)
 8001540:	f008 f8e4 	bl	800970c <puts>
		  BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8001544:	2002      	movs	r0, #2
 8001546:	f002 fd4d 	bl	8003fe4 <BSP_AUDIO_IN_Stop>

		  printf("playing recording...\r\n");
 800154a:	4819      	ldr	r0, [pc, #100]	@ (80015b0 <main+0x1cc>)
 800154c:	f008 f8de 	bl	800970c <puts>
		  /* -----------Start Playback -------------- */
		  /* Initialize audio IN at REC_FREQ*/
		  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 70, DEFAULT_AUDIO_IN_FREQ);
 8001550:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001554:	2146      	movs	r1, #70	@ 0x46
 8001556:	2002      	movs	r0, #2
 8001558:	f002 fa20 	bl	800399c <BSP_AUDIO_OUT_Init>
		  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 800155c:	2005      	movs	r0, #5
 800155e:	f002 fabb 	bl	8003ad8 <BSP_AUDIO_OUT_SetAudioFrameSlot>

		  /* Play the recorded buffer*/
		  AUDIO_Start(AUDIO_REC_START_ADDR, AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS * 2);  /* Use Audio play demo to playback sound */
 8001562:	4914      	ldr	r1, [pc, #80]	@ (80015b4 <main+0x1d0>)
 8001564:	f04f 4040 	mov.w	r0, #3221225472	@ 0xc0000000
 8001568:	f000 f8a8 	bl	80016bc <AUDIO_Start>
		  printf("playback end...\r\n");
 800156c:	4812      	ldr	r0, [pc, #72]	@ (80015b8 <main+0x1d4>)
 800156e:	f008 f8cd 	bl	800970c <puts>
  {
 8001572:	e75c      	b.n	800142e <main+0x4a>
		  */

	  }
  }
  /* USER CODE END 3 */
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20020520 	.word	0x20020520
 8001580:	0800b600 	.word	0x0800b600
 8001584:	0800b610 	.word	0x0800b610
 8001588:	0800b628 	.word	0x0800b628
 800158c:	20020498 	.word	0x20020498
 8001590:	0800b648 	.word	0x0800b648
 8001594:	20000274 	.word	0x20000274
 8001598:	20020494 	.word	0x20020494
 800159c:	0800b658 	.word	0x0800b658
 80015a0:	200206f4 	.word	0x200206f4
 80015a4:	0800b66c 	.word	0x0800b66c
 80015a8:	0800b688 	.word	0x0800b688
 80015ac:	0800b698 	.word	0x0800b698
 80015b0:	0800b6ac 	.word	0x0800b6ac
 80015b4:	0007fff0 	.word	0x0007fff0
 80015b8:	0800b6c4 	.word	0x0800b6c4

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b094      	sub	sp, #80	@ 0x50
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	2230      	movs	r2, #48	@ 0x30
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f008 f97e 	bl	80098cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <SystemClock_Config+0xd4>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001690 <SystemClock_Config+0xd4>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ec:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <SystemClock_Config+0xd4>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <SystemClock_Config+0xd8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a25      	ldr	r2, [pc, #148]	@ (8001694 <SystemClock_Config+0xd8>)
 80015fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <SystemClock_Config+0xd8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001610:	2301      	movs	r3, #1
 8001612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161a:	2302      	movs	r3, #2
 800161c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800161e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001624:	2319      	movs	r3, #25
 8001626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001628:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 800162c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800162e:	2302      	movs	r3, #2
 8001630:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001632:	2309      	movs	r3, #9
 8001634:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	4618      	mov	r0, r3
 800163c:	f004 fd90 	bl	8006160 <HAL_RCC_OscConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001646:	f000 f941 	bl	80018cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800164a:	f004 fd39 	bl	80060c0 <HAL_PWREx_EnableOverDrive>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001654:	f000 f93a 	bl	80018cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001658:	230f      	movs	r3, #15
 800165a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165c:	2302      	movs	r3, #2
 800165e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001664:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800166a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2107      	movs	r1, #7
 8001676:	4618      	mov	r0, r3
 8001678:	f005 f816 	bl	80066a8 <HAL_RCC_ClockConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001682:	f000 f923 	bl	80018cc <Error_Handler>
  }
}
 8001686:	bf00      	nop
 8001688:	3750      	adds	r7, #80	@ 0x50
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800
 8001694:	40007000 	.word	0x40007000

08001698 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80016a0:	1d39      	adds	r1, r7, #4
 80016a2:	2364      	movs	r3, #100	@ 0x64
 80016a4:	2201      	movs	r2, #1
 80016a6:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <__io_putchar+0x20>)
 80016a8:	f006 fd31 	bl	800810e <HAL_UART_Transmit>
return ch;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20020588 	.word	0x20020588

080016bc <AUDIO_Start>:

AUDIO_ErrorTypeDef AUDIO_Start(uint32_t audio_start_address, uint32_t audio_file_size)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t bytesread;

  buffer_ctl.state = BUFFER_OFFSET_NONE;
 80016c6:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <AUDIO_Start+0x68>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
  AudioStartAddress = audio_start_address;
 80016ce:	4a16      	ldr	r2, [pc, #88]	@ (8001728 <AUDIO_Start+0x6c>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6013      	str	r3, [r2, #0]
  AudioFileSize = audio_file_size;
 80016d4:	4a15      	ldr	r2, [pc, #84]	@ (800172c <AUDIO_Start+0x70>)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6013      	str	r3, [r2, #0]
  bytesread = GetData( (void *)AudioStartAddress,
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <AUDIO_Start+0x6c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001724 <AUDIO_Start+0x68>)
 80016e6:	2100      	movs	r1, #0
 80016e8:	f000 f824 	bl	8001734 <GetData>
 80016ec:	60f8      	str	r0, [r7, #12]
                      0,
                      &buffer_ctl.buff[0],
                      AUDIO_BUFFER_SIZE);
  if(bytesread > 0)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d012      	beq.n	800171a <AUDIO_Start+0x5e>
  {
    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 80016f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f8:	480a      	ldr	r0, [pc, #40]	@ (8001724 <AUDIO_Start+0x68>)
 80016fa:	f7ff fe47 	bl	800138c <SCB_CleanDCache_by_Addr>

    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 80016fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001702:	4808      	ldr	r0, [pc, #32]	@ (8001724 <AUDIO_Start+0x68>)
 8001704:	f002 f99c 	bl	8003a40 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <AUDIO_Start+0x74>)
 800170a:	2202      	movs	r2, #2
 800170c:	701a      	strb	r2, [r3, #0]
    buffer_ctl.fptr = bytesread;
 800170e:	4a05      	ldr	r2, [pc, #20]	@ (8001724 <AUDIO_Start+0x68>)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return AUDIO_ERROR_NONE;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <AUDIO_Start+0x60>
  }
  return AUDIO_ERROR_IO;
 800171a:	2302      	movs	r3, #2
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20020280 	.word	0x20020280
 8001728:	2002048c 	.word	0x2002048c
 800172c:	20020490 	.word	0x20020490
 8001730:	20020488 	.word	0x20020488

08001734 <GetData>:

static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]
  uint8_t *lptr = pdata;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	613b      	str	r3, [r7, #16]
  uint32_t ReadDataNbr;

  ReadDataNbr = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  printf("offset: %lu, AudioFileSize: %lu, NbrOfData: %lu\r\n", offset, AudioFileSize, NbrOfData);
 800174a:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <GetData+0x78>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	4817      	ldr	r0, [pc, #92]	@ (80017b0 <GetData+0x7c>)
 8001754:	f007 ff72 	bl	800963c <iprintf>

  printf("pdata: %p, pbuf: %p\n", pdata, pbuf);
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	68f9      	ldr	r1, [r7, #12]
 800175c:	4815      	ldr	r0, [pc, #84]	@ (80017b4 <GetData+0x80>)
 800175e:	f007 ff6d 	bl	800963c <iprintf>
  printf("buffer ctl.buff : %p", buffer_ctl.buff);
 8001762:	4915      	ldr	r1, [pc, #84]	@ (80017b8 <GetData+0x84>)
 8001764:	4815      	ldr	r0, [pc, #84]	@ (80017bc <GetData+0x88>)
 8001766:	f007 ff69 	bl	800963c <iprintf>

  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 800176a:	e00f      	b.n	800178c <GetData+0x58>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	441a      	add	r2, r3
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	440b      	add	r3, r1
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	701a      	strb	r2, [r3, #0]
    ReadDataNbr++;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
    printf("looptest");
 8001786:	480e      	ldr	r0, [pc, #56]	@ (80017c0 <GetData+0x8c>)
 8001788:	f007 ff58 	bl	800963c <iprintf>
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	441a      	add	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <GetData+0x78>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d203      	bcs.n	80017a2 <GetData+0x6e>
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d3e4      	bcc.n	800176c <GetData+0x38>
  }
  return ReadDataNbr;
 80017a2:	697b      	ldr	r3, [r7, #20]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20020490 	.word	0x20020490
 80017b0:	0800b6d8 	.word	0x0800b6d8
 80017b4:	0800b70c 	.word	0x0800b70c
 80017b8:	20020280 	.word	0x20020280
 80017bc:	0800b724 	.word	0x0800b724
 80017c0:	0800b73c 	.word	0x0800b73c

080017c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == Button_user_Pin && button_pressed == 0)
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017d4:	d10a      	bne.n	80017ec <HAL_GPIO_EXTI_Callback+0x28>
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d105      	bne.n	80017ec <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 80017e6:	4804      	ldr	r0, [pc, #16]	@ (80017f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80017e8:	f007 ff90 	bl	800970c <puts>
      }

}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20020498 	.word	0x20020498
 80017f8:	0800b748 	.word	0x0800b748

080017fc <BSP_AUDIO_OUT_TransferComplete_CallBack>:

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  if(audio_state == AUDIO_STATE_PLAYING)
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d103      	bne.n	8001810 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800180a:	2202      	movs	r2, #2
 800180c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
  }
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20020488 	.word	0x20020488
 8001820:	20020280 	.word	0x20020280

08001824 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  if(audio_state == AUDIO_STATE_PLAYING)
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d103      	bne.n	8001838 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
  }
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20020488 	.word	0x20020488
 8001848:	20020280 	.word	0x20020280

0800184c <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  printf("Full Transfer Callback triggered.\r\n");
 8001850:	4803      	ldr	r0, [pc, #12]	@ (8001860 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8001852:	f007 ff5b 	bl	800970c <puts>
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001856:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <BSP_AUDIO_IN_TransferComplete_CallBack+0x18>)
 8001858:	2202      	movs	r2, #2
 800185a:	601a      	str	r2, [r3, #0]
  return;
 800185c:	bf00      	nop
}
 800185e:	bd80      	pop	{r7, pc}
 8001860:	0800b75c 	.word	0x0800b75c
 8001864:	20020494 	.word	0x20020494

08001868 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  printf("Half Transfer Callback triggered.\r\n");
 800186c:	4803      	ldr	r0, [pc, #12]	@ (800187c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800186e:	f007 ff4d 	bl	800970c <puts>
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001872:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x18>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]
  return;
 8001878:	bf00      	nop
}
 800187a:	bd80      	pop	{r7, pc}
 800187c:	0800b780 	.word	0x0800b780
 8001880:	20020494 	.word	0x20020494

08001884 <BSP_AUDIO_IN_Error_CallBack>:

void BSP_AUDIO_IN_Error_CallBack(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
  /* Display message on the LCD screen */
  printf("DMA ERROR\r\n");
 8001888:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <BSP_AUDIO_IN_Error_CallBack+0x1c>)
 800188a:	f007 ff3f 	bl	800970c <puts>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800188e:	bf00      	nop
 8001890:	2002      	movs	r0, #2
 8001892:	f001 fe9f 	bl	80035d4 <BSP_PB_GetState>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
  {
    return;
 800189a:	bf00      	nop
  }
  /* could also generate a system reset to recover from the error */
  /* .... */
}
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	0800b7a4 	.word	0x0800b7a4

080018a4 <check_button_release>:


void check_button_release()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, Button_user_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 80018a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <check_button_release+0x20>)
 80018ae:	f003 fdf9 	bl	80054a4 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <check_button_release+0x1a>
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <check_button_release+0x24>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40022000 	.word	0x40022000
 80018c8:	20020498 	.word	0x20020498

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <Error_Handler+0x8>

080018d8 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80018dc:	4b27      	ldr	r3, [pc, #156]	@ (800197c <MX_SAI1_Init+0xa4>)
 80018de:	4a28      	ldr	r2, [pc, #160]	@ (8001980 <MX_SAI1_Init+0xa8>)
 80018e0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80018e2:	4b26      	ldr	r3, [pc, #152]	@ (800197c <MX_SAI1_Init+0xa4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 80018e8:	4b24      	ldr	r3, [pc, #144]	@ (800197c <MX_SAI1_Init+0xa4>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80018ee:	4b23      	ldr	r3, [pc, #140]	@ (800197c <MX_SAI1_Init+0xa4>)
 80018f0:	2240      	movs	r2, #64	@ 0x40
 80018f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018f4:	4b21      	ldr	r3, [pc, #132]	@ (800197c <MX_SAI1_Init+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <MX_SAI1_Init+0xa4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001900:	4b1e      	ldr	r3, [pc, #120]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001906:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <MX_SAI1_Init+0xa4>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001918:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_SAI1_Init+0xa4>)
 800191a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800191e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001926:	4b15      	ldr	r3, [pc, #84]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <MX_SAI1_Init+0xa4>)
 800192e:	2200      	movs	r2, #0
 8001930:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001934:	2208      	movs	r2, #8
 8001936:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001938:	4b10      	ldr	r3, [pc, #64]	@ (800197c <MX_SAI1_Init+0xa4>)
 800193a:	2201      	movs	r2, #1
 800193c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800193e:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001940:	2200      	movs	r2, #0
 8001942:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001944:	4b0d      	ldr	r3, [pc, #52]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001946:	2200      	movs	r2, #0
 8001948:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_SAI1_Init+0xa4>)
 800194c:	2200      	movs	r2, #0
 800194e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001950:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001952:	2200      	movs	r2, #0
 8001954:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001958:	2200      	movs	r2, #0
 800195a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800195c:	4b07      	ldr	r3, [pc, #28]	@ (800197c <MX_SAI1_Init+0xa4>)
 800195e:	2201      	movs	r2, #1
 8001960:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_SAI1_Init+0xa4>)
 8001964:	2200      	movs	r2, #0
 8001966:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001968:	4804      	ldr	r0, [pc, #16]	@ (800197c <MX_SAI1_Init+0xa4>)
 800196a:	f005 febf 	bl	80076ec <HAL_SAI_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8001974:	f7ff ffaa 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2002049c 	.word	0x2002049c
 8001980:	40015804 	.word	0x40015804

08001984 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b0aa      	sub	sp, #168	@ 0xa8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	2284      	movs	r2, #132	@ 0x84
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f007 ff99 	bl	80098cc <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a42      	ldr	r2, [pc, #264]	@ (8001aa8 <HAL_SAI_MspInit+0x124>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d17c      	bne.n	8001a9e <HAL_SAI_MspInit+0x11a>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80019a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80019a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 80019aa:	2364      	movs	r3, #100	@ 0x64
 80019ac:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80019ae:	2305      	movs	r3, #5
 80019b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80019b6:	2303      	movs	r3, #3
 80019b8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80019be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80019c4:	2300      	movs	r3, #0
 80019c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	4618      	mov	r0, r3
 80019ce:	f005 f851 	bl	8006a74 <HAL_RCCEx_PeriphCLKConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_SAI_MspInit+0x58>
    {
      Error_Handler();
 80019d8:	f7ff ff78 	bl	80018cc <Error_Handler>
    }

    if (SAI1_client == 0)
 80019dc:	4b33      	ldr	r3, [pc, #204]	@ (8001aac <HAL_SAI_MspInit+0x128>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10b      	bne.n	80019fc <HAL_SAI_MspInit+0x78>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80019e4:	4b32      	ldr	r3, [pc, #200]	@ (8001ab0 <HAL_SAI_MspInit+0x12c>)
 80019e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e8:	4a31      	ldr	r2, [pc, #196]	@ (8001ab0 <HAL_SAI_MspInit+0x12c>)
 80019ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f0:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab0 <HAL_SAI_MspInit+0x12c>)
 80019f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80019fc:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <HAL_SAI_MspInit+0x128>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a2a      	ldr	r2, [pc, #168]	@ (8001aac <HAL_SAI_MspInit+0x128>)
 8001a04:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001a06:	2370      	movs	r3, #112	@ 0x70
 8001a08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001a1e:	2306      	movs	r3, #6
 8001a20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a24:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4822      	ldr	r0, [pc, #136]	@ (8001ab4 <HAL_SAI_MspInit+0x130>)
 8001a2c:	f003 fa82 	bl	8004f34 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001a30:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a32:	4a22      	ldr	r2, [pc, #136]	@ (8001abc <HAL_SAI_MspInit+0x138>)
 8001a34:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a4e:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a56:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a58:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a5e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001a60:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a66:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a6e:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001a76:	4810      	ldr	r0, [pc, #64]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a78:	f002 fdfc 	bl	8004674 <HAL_DMA_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_SAI_MspInit+0x102>
    {
      Error_Handler();
 8001a82:	f7ff ff23 	bl	80018cc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a8a:	671a      	str	r2, [r3, #112]	@ 0x70
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a08      	ldr	r2, [pc, #32]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a96:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001a98:	4a07      	ldr	r2, [pc, #28]	@ (8001ab8 <HAL_SAI_MspInit+0x134>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001a9e:	bf00      	nop
 8001aa0:	37a8      	adds	r7, #168	@ 0xa8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40015804 	.word	0x40015804
 8001aac:	20020580 	.word	0x20020580
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	20020520 	.word	0x20020520
 8001abc:	40026428 	.word	0x40026428

08001ac0 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a11      	ldr	r2, [pc, #68]	@ (8001b14 <HAL_SAI_MspDeInit+0x54>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11c      	bne.n	8001b0c <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <HAL_SAI_MspDeInit+0x58>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b18 <HAL_SAI_MspDeInit+0x58>)
 8001ada:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <HAL_SAI_MspDeInit+0x58>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <HAL_SAI_MspDeInit+0x5c>)
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b1c <HAL_SAI_MspDeInit+0x5c>)
 8001aea:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001aee:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001af0:	2170      	movs	r1, #112	@ 0x70
 8001af2:	480b      	ldr	r0, [pc, #44]	@ (8001b20 <HAL_SAI_MspDeInit+0x60>)
 8001af4:	f003 fbca 	bl	800528c <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fe67 	bl	80047d0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fe62 	bl	80047d0 <HAL_DMA_DeInit>
    }
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40015804 	.word	0x40015804
 8001b18:	20020580 	.word	0x20020580
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	4a08      	ldr	r2, [pc, #32]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_MspInit+0x44>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <NMI_Handler+0x4>

08001b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <MemManage_Handler+0x4>

08001b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc2:	f002 fc01 	bl	80043c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_user_Pin);
 8001bce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001bd2:	f003 fc7f 	bl	80054d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <DMA2_Stream1_IRQHandler+0x10>)
 8001be2:	f002 ff23 	bl	8004a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20020520 	.word	0x20020520

08001bf0 <DMA2_Stream7_IRQHandler>:

/* USER CODE BEGIN 1 */

void AUDIO_IN_SAIx_DMAx_IRQHandler()
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001bf4:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <DMA2_Stream7_IRQHandler+0x14>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 ff17 	bl	8004a2c <HAL_DMA_IRQHandler>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200206f4 	.word	0x200206f4

08001c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return 1;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_kill>:

int _kill(int pid, int sig)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c22:	f007 fea5 	bl	8009970 <__errno>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2216      	movs	r2, #22
 8001c2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_exit>:

void _exit (int status)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ffe7 	bl	8001c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c4a:	bf00      	nop
 8001c4c:	e7fd      	b.n	8001c4a <_exit+0x12>

08001c4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e00a      	b.n	8001c76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c60:	f3af 8000 	nop.w
 8001c64:	4601      	mov	r1, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	60ba      	str	r2, [r7, #8]
 8001c6c:	b2ca      	uxtb	r2, r1
 8001c6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbf0      	blt.n	8001c60 <_read+0x12>
  }

  return len;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e009      	b.n	8001cae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	60ba      	str	r2, [r7, #8]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fcf8 	bl	8001698 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dbf1      	blt.n	8001c9a <_write+0x12>
  }
  return len;
 8001cb6:	687b      	ldr	r3, [r7, #4]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_close>:

int _close(int file)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce8:	605a      	str	r2, [r3, #4]
  return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_isatty>:

int _isatty(int file)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d30:	4a14      	ldr	r2, [pc, #80]	@ (8001d84 <_sbrk+0x5c>)
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <_sbrk+0x60>)
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <_sbrk+0x64>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <_sbrk+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d58:	f007 fe0a 	bl	8009970 <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	e009      	b.n	8001d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	@ (8001d8c <_sbrk+0x64>)
 8001d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20050000 	.word	0x20050000
 8001d88:	00000400 	.word	0x00000400
 8001d8c:	20020584 	.word	0x20020584
 8001d90:	20020988 	.word	0x20020988

08001d94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <SystemInit+0x20>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9e:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <SystemInit+0x20>)
 8001da0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dbe:	4a15      	ldr	r2, [pc, #84]	@ (8001e14 <MX_USART1_UART_Init+0x5c>)
 8001dc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dde:	220c      	movs	r2, #12
 8001de0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de8:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dee:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <MX_USART1_UART_Init+0x58>)
 8001dfc:	f006 f939 	bl	8008072 <HAL_UART_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e06:	f7ff fd61 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20020588 	.word	0x20020588
 8001e14:	40011000 	.word	0x40011000

08001e18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0ac      	sub	sp, #176	@ 0xb0
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e30:	f107 0318 	add.w	r3, r7, #24
 8001e34:	2284      	movs	r2, #132	@ 0x84
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f007 fd47 	bl	80098cc <memset>
  if(uartHandle->Instance==USART1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a32      	ldr	r2, [pc, #200]	@ (8001f0c <HAL_UART_MspInit+0xf4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d15c      	bne.n	8001f02 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e48:	2340      	movs	r3, #64	@ 0x40
 8001e4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	4618      	mov	r0, r3
 8001e56:	f004 fe0d 	bl	8006a74 <HAL_RCCEx_PeriphCLKConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e60:	f7ff fd34 	bl	80018cc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e64:	4b2a      	ldr	r3, [pc, #168]	@ (8001f10 <HAL_UART_MspInit+0xf8>)
 8001e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e68:	4a29      	ldr	r2, [pc, #164]	@ (8001f10 <HAL_UART_MspInit+0xf8>)
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e70:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <HAL_UART_MspInit+0xf8>)
 8001e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_UART_MspInit+0xf8>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e80:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <HAL_UART_MspInit+0xf8>)
 8001e82:	f043 0302 	orr.w	r3, r3, #2
 8001e86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <HAL_UART_MspInit+0xf8>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <HAL_UART_MspInit+0xf8>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e98:	4a1d      	ldr	r2, [pc, #116]	@ (8001f10 <HAL_UART_MspInit+0xf8>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_UART_MspInit+0xf8>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4810      	ldr	r0, [pc, #64]	@ (8001f14 <HAL_UART_MspInit+0xfc>)
 8001ed2:	f003 f82f 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001efa:	4619      	mov	r1, r3
 8001efc:	4806      	ldr	r0, [pc, #24]	@ (8001f18 <HAL_UART_MspInit+0x100>)
 8001efe:	f003 f819 	bl	8004f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f02:	bf00      	nop
 8001f04:	37b0      	adds	r7, #176	@ 0xb0
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020400 	.word	0x40020400
 8001f18:	40020000 	.word	0x40020000

08001f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f20:	f7ff ff38 	bl	8001d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f24:	480c      	ldr	r0, [pc, #48]	@ (8001f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f26:	490d      	ldr	r1, [pc, #52]	@ (8001f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f28:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f2c:	e002      	b.n	8001f34 <LoopCopyDataInit>

08001f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f32:	3304      	adds	r3, #4

08001f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f38:	d3f9      	bcc.n	8001f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f40:	e001      	b.n	8001f46 <LoopFillZerobss>

08001f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f44:	3204      	adds	r2, #4

08001f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f48:	d3fb      	bcc.n	8001f42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f007 fd17 	bl	800997c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f4e:	f7ff fa49 	bl	80013e4 <main>
  bx  lr    
 8001f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f5c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8001f60:	0800bb58 	.word	0x0800bb58
  ldr r2, =_sbss
 8001f64:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001f68:	20020988 	.word	0x20020988

08001f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f6c:	e7fe      	b.n	8001f6c <ADC_IRQHandler>
	...

08001f70 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	4603      	mov	r3, r0
 8001f7a:	81fb      	strh	r3, [r7, #14]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	81bb      	strh	r3, [r7, #12]
 8001f80:	4613      	mov	r3, r2
 8001f82:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001f88:	89bb      	ldrh	r3, [r7, #12]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001f8e:	89bb      	ldrh	r3, [r7, #12]
 8001f90:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f94:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001f9a:	f001 fc8b 	bl	80038b4 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 fafb 	bl	80035a4 <CODEC_IO_Write>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8001fb8:	89fb      	ldrh	r3, [r7, #14]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f640 0117 	movw	r1, #2071	@ 0x817
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 faee 	bl	80035a4 <CODEC_IO_Write>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	4413      	add	r3, r2
 8001fd0:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8001fd2:	89fb      	ldrh	r3, [r7, #14]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 fae1 	bl	80035a4 <CODEC_IO_Write>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8001fec:	89fb      	ldrh	r3, [r7, #14]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	226c      	movs	r2, #108	@ 0x6c
 8001ff2:	2139      	movs	r1, #57	@ 0x39
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 fad5 	bl	80035a4 <CODEC_IO_Write>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002004:	8afb      	ldrh	r3, [r7, #22]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800200a:	89fb      	ldrh	r3, [r7, #14]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2213      	movs	r2, #19
 8002010:	2101      	movs	r1, #1
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fac6 	bl	80035a4 <CODEC_IO_Write>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	4413      	add	r3, r2
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	e00b      	b.n	800203c <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002024:	89fb      	ldrh	r3, [r7, #14]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2203      	movs	r2, #3
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f001 fab9 	bl	80035a4 <CODEC_IO_Write>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 800203c:	2032      	movs	r0, #50	@ 0x32
 800203e:	f001 fca1 	bl	8003984 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002042:	8b3b      	ldrh	r3, [r7, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 815f 	beq.w	8002308 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 800204a:	4bae      	ldr	r3, [pc, #696]	@ (8002304 <wm8994_Init+0x394>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002050:	8b3b      	ldrh	r3, [r7, #24]
 8002052:	2b03      	cmp	r3, #3
 8002054:	f000 808c 	beq.w	8002170 <wm8994_Init+0x200>
 8002058:	2b03      	cmp	r3, #3
 800205a:	f300 8111 	bgt.w	8002280 <wm8994_Init+0x310>
 800205e:	2b01      	cmp	r3, #1
 8002060:	d002      	beq.n	8002068 <wm8994_Init+0xf8>
 8002062:	2b02      	cmp	r3, #2
 8002064:	d042      	beq.n	80020ec <wm8994_Init+0x17c>
 8002066:	e10b      	b.n	8002280 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002068:	89fb      	ldrh	r3, [r7, #14]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002070:	2105      	movs	r1, #5
 8002072:	4618      	mov	r0, r3
 8002074:	f001 fa96 	bl	80035a4 <CODEC_IO_Write>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	4413      	add	r3, r2
 8002080:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002082:	89fb      	ldrh	r3, [r7, #14]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2200      	movs	r2, #0
 8002088:	f240 6101 	movw	r1, #1537	@ 0x601
 800208c:	4618      	mov	r0, r3
 800208e:	f001 fa89 	bl	80035a4 <CODEC_IO_Write>
 8002092:	4603      	mov	r3, r0
 8002094:	461a      	mov	r2, r3
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	4413      	add	r3, r2
 800209a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800209c:	89fb      	ldrh	r3, [r7, #14]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2200      	movs	r2, #0
 80020a2:	f240 6102 	movw	r1, #1538	@ 0x602
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 fa7c 	bl	80035a4 <CODEC_IO_Write>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	4413      	add	r3, r2
 80020b4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80020b6:	89fb      	ldrh	r3, [r7, #14]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2202      	movs	r2, #2
 80020bc:	f240 6104 	movw	r1, #1540	@ 0x604
 80020c0:	4618      	mov	r0, r3
 80020c2:	f001 fa6f 	bl	80035a4 <CODEC_IO_Write>
 80020c6:	4603      	mov	r3, r0
 80020c8:	461a      	mov	r2, r3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80020d0:	89fb      	ldrh	r3, [r7, #14]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2202      	movs	r2, #2
 80020d6:	f240 6105 	movw	r1, #1541	@ 0x605
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 fa62 	bl	80035a4 <CODEC_IO_Write>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	4413      	add	r3, r2
 80020e8:	61fb      	str	r3, [r7, #28]
      break;
 80020ea:	e110      	b.n	800230e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80020ec:	89fb      	ldrh	r3, [r7, #14]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f240 3203 	movw	r2, #771	@ 0x303
 80020f4:	2105      	movs	r1, #5
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 fa54 	bl	80035a4 <CODEC_IO_Write>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461a      	mov	r2, r3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	4413      	add	r3, r2
 8002104:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2201      	movs	r2, #1
 800210c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002110:	4618      	mov	r0, r3
 8002112:	f001 fa47 	bl	80035a4 <CODEC_IO_Write>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4413      	add	r3, r2
 800211e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002120:	89fb      	ldrh	r3, [r7, #14]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2201      	movs	r2, #1
 8002126:	f240 6102 	movw	r1, #1538	@ 0x602
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fa3a 	bl	80035a4 <CODEC_IO_Write>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	4413      	add	r3, r2
 8002138:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2200      	movs	r2, #0
 8002140:	f240 6104 	movw	r1, #1540	@ 0x604
 8002144:	4618      	mov	r0, r3
 8002146:	f001 fa2d 	bl	80035a4 <CODEC_IO_Write>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	4413      	add	r3, r2
 8002152:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2200      	movs	r2, #0
 800215a:	f240 6105 	movw	r1, #1541	@ 0x605
 800215e:	4618      	mov	r0, r3
 8002160:	f001 fa20 	bl	80035a4 <CODEC_IO_Write>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	4413      	add	r3, r2
 800216c:	61fb      	str	r3, [r7, #28]
      break;
 800216e:	e0ce      	b.n	800230e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002170:	8afb      	ldrh	r3, [r7, #22]
 8002172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002176:	d141      	bne.n	80021fc <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002178:	89fb      	ldrh	r3, [r7, #14]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002180:	2105      	movs	r1, #5
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fa0e 	bl	80035a4 <CODEC_IO_Write>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2203      	movs	r2, #3
 8002198:	f240 6101 	movw	r1, #1537	@ 0x601
 800219c:	4618      	mov	r0, r3
 800219e:	f001 fa01 	bl	80035a4 <CODEC_IO_Write>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80021ac:	89fb      	ldrh	r3, [r7, #14]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2203      	movs	r2, #3
 80021b2:	f240 6102 	movw	r1, #1538	@ 0x602
 80021b6:	4618      	mov	r0, r3
 80021b8:	f001 f9f4 	bl	80035a4 <CODEC_IO_Write>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	4413      	add	r3, r2
 80021c4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80021c6:	89fb      	ldrh	r3, [r7, #14]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2203      	movs	r2, #3
 80021cc:	f240 6104 	movw	r1, #1540	@ 0x604
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 f9e7 	bl	80035a4 <CODEC_IO_Write>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80021e0:	89fb      	ldrh	r3, [r7, #14]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2203      	movs	r2, #3
 80021e6:	f240 6105 	movw	r1, #1541	@ 0x605
 80021ea:	4618      	mov	r0, r3
 80021ec:	f001 f9da 	bl	80035a4 <CODEC_IO_Write>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4413      	add	r3, r2
 80021f8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80021fa:	e088      	b.n	800230e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80021fc:	89fb      	ldrh	r3, [r7, #14]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002204:	2105      	movs	r1, #5
 8002206:	4618      	mov	r0, r3
 8002208:	f001 f9cc 	bl	80035a4 <CODEC_IO_Write>
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	4413      	add	r3, r2
 8002214:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002216:	89fb      	ldrh	r3, [r7, #14]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2201      	movs	r2, #1
 800221c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002220:	4618      	mov	r0, r3
 8002222:	f001 f9bf 	bl	80035a4 <CODEC_IO_Write>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	4413      	add	r3, r2
 800222e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002230:	89fb      	ldrh	r3, [r7, #14]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2201      	movs	r2, #1
 8002236:	f240 6102 	movw	r1, #1538	@ 0x602
 800223a:	4618      	mov	r0, r3
 800223c:	f001 f9b2 	bl	80035a4 <CODEC_IO_Write>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	4413      	add	r3, r2
 8002248:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800224a:	89fb      	ldrh	r3, [r7, #14]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2202      	movs	r2, #2
 8002250:	f240 6104 	movw	r1, #1540	@ 0x604
 8002254:	4618      	mov	r0, r3
 8002256:	f001 f9a5 	bl	80035a4 <CODEC_IO_Write>
 800225a:	4603      	mov	r3, r0
 800225c:	461a      	mov	r2, r3
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	4413      	add	r3, r2
 8002262:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2202      	movs	r2, #2
 800226a:	f240 6105 	movw	r1, #1541	@ 0x605
 800226e:	4618      	mov	r0, r3
 8002270:	f001 f998 	bl	80035a4 <CODEC_IO_Write>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	4413      	add	r3, r2
 800227c:	61fb      	str	r3, [r7, #28]
      break;
 800227e:	e046      	b.n	800230e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002280:	89fb      	ldrh	r3, [r7, #14]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f240 3203 	movw	r2, #771	@ 0x303
 8002288:	2105      	movs	r1, #5
 800228a:	4618      	mov	r0, r3
 800228c:	f001 f98a 	bl	80035a4 <CODEC_IO_Write>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4413      	add	r3, r2
 8002298:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800229a:	89fb      	ldrh	r3, [r7, #14]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2201      	movs	r2, #1
 80022a0:	f240 6101 	movw	r1, #1537	@ 0x601
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 f97d 	bl	80035a4 <CODEC_IO_Write>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80022b4:	89fb      	ldrh	r3, [r7, #14]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2201      	movs	r2, #1
 80022ba:	f240 6102 	movw	r1, #1538	@ 0x602
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 f970 	bl	80035a4 <CODEC_IO_Write>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461a      	mov	r2, r3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	4413      	add	r3, r2
 80022cc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80022ce:	89fb      	ldrh	r3, [r7, #14]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2200      	movs	r2, #0
 80022d4:	f240 6104 	movw	r1, #1540	@ 0x604
 80022d8:	4618      	mov	r0, r3
 80022da:	f001 f963 	bl	80035a4 <CODEC_IO_Write>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4413      	add	r3, r2
 80022e6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80022e8:	89fb      	ldrh	r3, [r7, #14]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2200      	movs	r2, #0
 80022ee:	f240 6105 	movw	r1, #1541	@ 0x605
 80022f2:	4618      	mov	r0, r3
 80022f4:	f001 f956 	bl	80035a4 <CODEC_IO_Write>
 80022f8:	4603      	mov	r3, r0
 80022fa:	461a      	mov	r2, r3
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	61fb      	str	r3, [r7, #28]
      break;
 8002302:	e004      	b.n	800230e <wm8994_Init+0x39e>
 8002304:	20020610 	.word	0x20020610
    }
  }
  else
  {
    outputEnabled = 0;
 8002308:	4b99      	ldr	r3, [pc, #612]	@ (8002570 <wm8994_Init+0x600>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800230e:	8afb      	ldrh	r3, [r7, #22]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 81ab 	beq.w	800266c <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8002316:	4b97      	ldr	r3, [pc, #604]	@ (8002574 <wm8994_Init+0x604>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800231c:	8afb      	ldrh	r3, [r7, #22]
 800231e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002322:	f000 8129 	beq.w	8002578 <wm8994_Init+0x608>
 8002326:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800232a:	f300 819b 	bgt.w	8002664 <wm8994_Init+0x6f4>
 800232e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002332:	d05a      	beq.n	80023ea <wm8994_Init+0x47a>
 8002334:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002338:	f300 8194 	bgt.w	8002664 <wm8994_Init+0x6f4>
 800233c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002340:	f000 80c6 	beq.w	80024d0 <wm8994_Init+0x560>
 8002344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002348:	f040 818c 	bne.w	8002664 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002354:	2104      	movs	r1, #4
 8002356:	4618      	mov	r0, r3
 8002358:	f001 f924 	bl	80035a4 <CODEC_IO_Write>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	4413      	add	r3, r2
 8002364:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	22db      	movs	r2, #219	@ 0xdb
 800236c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002370:	4618      	mov	r0, r3
 8002372:	f001 f917 	bl	80035a4 <CODEC_IO_Write>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8002388:	2102      	movs	r1, #2
 800238a:	4618      	mov	r0, r3
 800238c:	f001 f90a 	bl	80035a4 <CODEC_IO_Write>
 8002390:	4603      	mov	r3, r0
 8002392:	461a      	mov	r2, r3
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800239a:	89fb      	ldrh	r3, [r7, #14]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2202      	movs	r2, #2
 80023a0:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 f8fd 	bl	80035a4 <CODEC_IO_Write>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80023b4:	89fb      	ldrh	r3, [r7, #14]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2202      	movs	r2, #2
 80023ba:	f240 6109 	movw	r1, #1545	@ 0x609
 80023be:	4618      	mov	r0, r3
 80023c0:	f001 f8f0 	bl	80035a4 <CODEC_IO_Write>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80023ce:	89fb      	ldrh	r3, [r7, #14]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	220e      	movs	r2, #14
 80023d4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80023d8:	4618      	mov	r0, r3
 80023da:	f001 f8e3 	bl	80035a4 <CODEC_IO_Write>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	61fb      	str	r3, [r7, #28]
      break;
 80023e8:	e143      	b.n	8002672 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80023ea:	89fb      	ldrh	r3, [r7, #14]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2211      	movs	r2, #17
 80023f0:	2128      	movs	r1, #40	@ 0x28
 80023f2:	4618      	mov	r0, r3
 80023f4:	f001 f8d6 	bl	80035a4 <CODEC_IO_Write>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	4413      	add	r3, r2
 8002400:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002402:	89fb      	ldrh	r3, [r7, #14]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2235      	movs	r2, #53	@ 0x35
 8002408:	2129      	movs	r1, #41	@ 0x29
 800240a:	4618      	mov	r0, r3
 800240c:	f001 f8ca 	bl	80035a4 <CODEC_IO_Write>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	4413      	add	r3, r2
 8002418:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800241a:	89fb      	ldrh	r3, [r7, #14]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2235      	movs	r2, #53	@ 0x35
 8002420:	212a      	movs	r1, #42	@ 0x2a
 8002422:	4618      	mov	r0, r3
 8002424:	f001 f8be 	bl	80035a4 <CODEC_IO_Write>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f240 3203 	movw	r2, #771	@ 0x303
 800243a:	2104      	movs	r1, #4
 800243c:	4618      	mov	r0, r3
 800243e:	f001 f8b1 	bl	80035a4 <CODEC_IO_Write>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	4413      	add	r3, r2
 800244a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800244c:	89fb      	ldrh	r3, [r7, #14]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	22db      	movs	r2, #219	@ 0xdb
 8002452:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002456:	4618      	mov	r0, r3
 8002458:	f001 f8a4 	bl	80035a4 <CODEC_IO_Write>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f246 3250 	movw	r2, #25424	@ 0x6350
 800246e:	2102      	movs	r1, #2
 8002470:	4618      	mov	r0, r3
 8002472:	f001 f897 	bl	80035a4 <CODEC_IO_Write>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2202      	movs	r2, #2
 8002486:	f240 6106 	movw	r1, #1542	@ 0x606
 800248a:	4618      	mov	r0, r3
 800248c:	f001 f88a 	bl	80035a4 <CODEC_IO_Write>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2202      	movs	r2, #2
 80024a0:	f240 6107 	movw	r1, #1543	@ 0x607
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 f87d 	bl	80035a4 <CODEC_IO_Write>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	220d      	movs	r2, #13
 80024ba:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 f870 	bl	80035a4 <CODEC_IO_Write>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	61fb      	str	r3, [r7, #28]
      break;
 80024ce:	e0d0      	b.n	8002672 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80024d0:	89fb      	ldrh	r3, [r7, #14]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80024d8:	2104      	movs	r1, #4
 80024da:	4618      	mov	r0, r3
 80024dc:	f001 f862 	bl	80035a4 <CODEC_IO_Write>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	22db      	movs	r2, #219	@ 0xdb
 80024f0:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 f855 	bl	80035a4 <CODEC_IO_Write>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f246 3250 	movw	r2, #25424	@ 0x6350
 800250c:	2102      	movs	r1, #2
 800250e:	4618      	mov	r0, r3
 8002510:	f001 f848 	bl	80035a4 <CODEC_IO_Write>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2202      	movs	r2, #2
 8002524:	f240 6106 	movw	r1, #1542	@ 0x606
 8002528:	4618      	mov	r0, r3
 800252a:	f001 f83b 	bl	80035a4 <CODEC_IO_Write>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	4413      	add	r3, r2
 8002536:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002538:	89fb      	ldrh	r3, [r7, #14]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2202      	movs	r2, #2
 800253e:	f240 6107 	movw	r1, #1543	@ 0x607
 8002542:	4618      	mov	r0, r3
 8002544:	f001 f82e 	bl	80035a4 <CODEC_IO_Write>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	220d      	movs	r2, #13
 8002558:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800255c:	4618      	mov	r0, r3
 800255e:	f001 f821 	bl	80035a4 <CODEC_IO_Write>
 8002562:	4603      	mov	r3, r0
 8002564:	461a      	mov	r2, r3
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	61fb      	str	r3, [r7, #28]
      break; 
 800256c:	e081      	b.n	8002672 <wm8994_Init+0x702>
 800256e:	bf00      	nop
 8002570:	20020610 	.word	0x20020610
 8002574:	20020614 	.word	0x20020614
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002578:	89fb      	ldrh	r3, [r7, #14]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002580:	2104      	movs	r1, #4
 8002582:	4618      	mov	r0, r3
 8002584:	f001 f80e 	bl	80035a4 <CODEC_IO_Write>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	4413      	add	r3, r2
 8002590:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002592:	89fb      	ldrh	r3, [r7, #14]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	22db      	movs	r2, #219	@ 0xdb
 8002598:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800259c:	4618      	mov	r0, r3
 800259e:	f001 f801 	bl	80035a4 <CODEC_IO_Write>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	4413      	add	r3, r2
 80025aa:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80025ac:	89fb      	ldrh	r3, [r7, #14]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	22db      	movs	r2, #219	@ 0xdb
 80025b2:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fff4 	bl	80035a4 <CODEC_IO_Write>
 80025bc:	4603      	mov	r3, r0
 80025be:	461a      	mov	r2, r3
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	4413      	add	r3, r2
 80025c4:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80025c6:	89fb      	ldrh	r3, [r7, #14]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80025ce:	2102      	movs	r1, #2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 ffe7 	bl	80035a4 <CODEC_IO_Write>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80025e0:	89fb      	ldrh	r3, [r7, #14]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2202      	movs	r2, #2
 80025e6:	f240 6106 	movw	r1, #1542	@ 0x606
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 ffda 	bl	80035a4 <CODEC_IO_Write>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	4413      	add	r3, r2
 80025f8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80025fa:	89fb      	ldrh	r3, [r7, #14]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2202      	movs	r2, #2
 8002600:	f240 6107 	movw	r1, #1543	@ 0x607
 8002604:	4618      	mov	r0, r3
 8002606:	f000 ffcd 	bl	80035a4 <CODEC_IO_Write>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	4413      	add	r3, r2
 8002612:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002614:	89fb      	ldrh	r3, [r7, #14]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2202      	movs	r2, #2
 800261a:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 800261e:	4618      	mov	r0, r3
 8002620:	f000 ffc0 	bl	80035a4 <CODEC_IO_Write>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2202      	movs	r2, #2
 8002634:	f240 6109 	movw	r1, #1545	@ 0x609
 8002638:	4618      	mov	r0, r3
 800263a:	f000 ffb3 	bl	80035a4 <CODEC_IO_Write>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002648:	89fb      	ldrh	r3, [r7, #14]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	220d      	movs	r2, #13
 800264e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002652:	4618      	mov	r0, r3
 8002654:	f000 ffa6 	bl	80035a4 <CODEC_IO_Write>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	4413      	add	r3, r2
 8002660:	61fb      	str	r3, [r7, #28]
      break;    
 8002662:	e006      	b.n	8002672 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	3301      	adds	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
      break;
 800266a:	e002      	b.n	8002672 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 800266c:	4ba4      	ldr	r3, [pc, #656]	@ (8002900 <wm8994_Init+0x990>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4aa3      	ldr	r2, [pc, #652]	@ (8002904 <wm8994_Init+0x994>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d079      	beq.n	800276e <wm8994_Init+0x7fe>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4aa1      	ldr	r2, [pc, #644]	@ (8002904 <wm8994_Init+0x994>)
 800267e:	4293      	cmp	r3, r2
 8002680:	f200 80ad 	bhi.w	80027de <wm8994_Init+0x86e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800268a:	4293      	cmp	r3, r2
 800268c:	d061      	beq.n	8002752 <wm8994_Init+0x7e2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002694:	4293      	cmp	r3, r2
 8002696:	f200 80a2 	bhi.w	80027de <wm8994_Init+0x86e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80026a0:	4293      	cmp	r3, r2
 80026a2:	f000 808e 	beq.w	80027c2 <wm8994_Init+0x852>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80026ac:	4293      	cmp	r3, r2
 80026ae:	f200 8096 	bhi.w	80027de <wm8994_Init+0x86e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80026b8:	d03d      	beq.n	8002736 <wm8994_Init+0x7c6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80026c0:	f200 808d 	bhi.w	80027de <wm8994_Init+0x86e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f245 6222 	movw	r2, #22050	@ 0x5622
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d06b      	beq.n	80027a6 <wm8994_Init+0x836>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f245 6222 	movw	r2, #22050	@ 0x5622
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f200 8082 	bhi.w	80027de <wm8994_Init+0x86e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80026e0:	d01b      	beq.n	800271a <wm8994_Init+0x7aa>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80026e8:	d879      	bhi.n	80027de <wm8994_Init+0x86e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80026f0:	d005      	beq.n	80026fe <wm8994_Init+0x78e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d046      	beq.n	800278a <wm8994_Init+0x81a>
 80026fc:	e06f      	b.n	80027de <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80026fe:	89fb      	ldrh	r3, [r7, #14]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2203      	movs	r2, #3
 8002704:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002708:	4618      	mov	r0, r3
 800270a:	f000 ff4b 	bl	80035a4 <CODEC_IO_Write>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	4413      	add	r3, r2
 8002716:	61fb      	str	r3, [r7, #28]
    break;
 8002718:	e06f      	b.n	80027fa <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800271a:	89fb      	ldrh	r3, [r7, #14]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2233      	movs	r2, #51	@ 0x33
 8002720:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002724:	4618      	mov	r0, r3
 8002726:	f000 ff3d 	bl	80035a4 <CODEC_IO_Write>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4413      	add	r3, r2
 8002732:	61fb      	str	r3, [r7, #28]
    break;
 8002734:	e061      	b.n	80027fa <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002736:	89fb      	ldrh	r3, [r7, #14]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2263      	movs	r2, #99	@ 0x63
 800273c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002740:	4618      	mov	r0, r3
 8002742:	f000 ff2f 	bl	80035a4 <CODEC_IO_Write>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]
    break;
 8002750:	e053      	b.n	80027fa <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2283      	movs	r2, #131	@ 0x83
 8002758:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800275c:	4618      	mov	r0, r3
 800275e:	f000 ff21 	bl	80035a4 <CODEC_IO_Write>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	4413      	add	r3, r2
 800276a:	61fb      	str	r3, [r7, #28]
    break;
 800276c:	e045      	b.n	80027fa <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800276e:	89fb      	ldrh	r3, [r7, #14]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	22a3      	movs	r2, #163	@ 0xa3
 8002774:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002778:	4618      	mov	r0, r3
 800277a:	f000 ff13 	bl	80035a4 <CODEC_IO_Write>
 800277e:	4603      	mov	r3, r0
 8002780:	461a      	mov	r2, r3
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	4413      	add	r3, r2
 8002786:	61fb      	str	r3, [r7, #28]
    break;
 8002788:	e037      	b.n	80027fa <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800278a:	89fb      	ldrh	r3, [r7, #14]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2213      	movs	r2, #19
 8002790:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002794:	4618      	mov	r0, r3
 8002796:	f000 ff05 	bl	80035a4 <CODEC_IO_Write>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	61fb      	str	r3, [r7, #28]
    break;
 80027a4:	e029      	b.n	80027fa <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80027a6:	89fb      	ldrh	r3, [r7, #14]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2243      	movs	r2, #67	@ 0x43
 80027ac:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fef7 	bl	80035a4 <CODEC_IO_Write>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461a      	mov	r2, r3
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	61fb      	str	r3, [r7, #28]
    break;
 80027c0:	e01b      	b.n	80027fa <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80027c2:	89fb      	ldrh	r3, [r7, #14]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2273      	movs	r2, #115	@ 0x73
 80027c8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fee9 	bl	80035a4 <CODEC_IO_Write>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	61fb      	str	r3, [r7, #28]
    break; 
 80027dc:	e00d      	b.n	80027fa <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80027de:	89fb      	ldrh	r3, [r7, #14]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2283      	movs	r2, #131	@ 0x83
 80027e4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fedb 	bl	80035a4 <CODEC_IO_Write>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	61fb      	str	r3, [r7, #28]
    break; 
 80027f8:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80027fa:	8afb      	ldrh	r3, [r7, #22]
 80027fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002800:	d10e      	bne.n	8002820 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f244 0218 	movw	r2, #16408	@ 0x4018
 800280a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fec8 	bl	80035a4 <CODEC_IO_Write>
 8002814:	4603      	mov	r3, r0
 8002816:	461a      	mov	r2, r3
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e00d      	b.n	800283c <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f244 0210 	movw	r2, #16400	@ 0x4010
 8002828:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800282c:	4618      	mov	r0, r3
 800282e:	f000 feb9 	bl	80035a4 <CODEC_IO_Write>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	4413      	add	r3, r2
 800283a:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 800283c:	89fb      	ldrh	r3, [r7, #14]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2200      	movs	r2, #0
 8002842:	f240 3102 	movw	r1, #770	@ 0x302
 8002846:	4618      	mov	r0, r3
 8002848:	f000 feac 	bl	80035a4 <CODEC_IO_Write>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	4413      	add	r3, r2
 8002854:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	220a      	movs	r2, #10
 800285c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fe9f 	bl	80035a4 <CODEC_IO_Write>
 8002866:	4603      	mov	r3, r0
 8002868:	461a      	mov	r2, r3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002870:	89fb      	ldrh	r3, [r7, #14]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2201      	movs	r2, #1
 8002876:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800287a:	4618      	mov	r0, r3
 800287c:	f000 fe92 	bl	80035a4 <CODEC_IO_Write>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	4413      	add	r3, r2
 8002888:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800288a:	8b3b      	ldrh	r3, [r7, #24]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 817b 	beq.w	8002b88 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002892:	8b3b      	ldrh	r3, [r7, #24]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d157      	bne.n	8002948 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028a0:	212d      	movs	r1, #45	@ 0x2d
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fe7e 	bl	80035a4 <CODEC_IO_Write>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ba:	212e      	movs	r1, #46	@ 0x2e
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fe71 	bl	80035a4 <CODEC_IO_Write>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80028cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <wm8994_Init+0x998>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01b      	beq.n	800290c <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80028d4:	89fb      	ldrh	r3, [r7, #14]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 80028dc:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 fe5f 	bl	80035a4 <CODEC_IO_Write>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <wm8994_Init+0x998>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80028f6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80028fa:	f001 f843 	bl	8003984 <AUDIO_IO_Delay>
 80028fe:	e016      	b.n	800292e <wm8994_Init+0x9be>
 8002900:	20020614 	.word	0x20020614
 8002904:	00017700 	.word	0x00017700
 8002908:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 800290c:	89fb      	ldrh	r3, [r7, #14]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f248 1208 	movw	r2, #33032	@ 0x8108
 8002914:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002918:	4618      	mov	r0, r3
 800291a:	f000 fe43 	bl	80035a4 <CODEC_IO_Write>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002928:	2032      	movs	r0, #50	@ 0x32
 800292a:	f001 f82b 	bl	8003984 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800292e:	89fb      	ldrh	r3, [r7, #14]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2200      	movs	r2, #0
 8002934:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fe33 	bl	80035a4 <CODEC_IO_Write>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	4413      	add	r3, r2
 8002946:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002948:	89fb      	ldrh	r3, [r7, #14]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002950:	2103      	movs	r1, #3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fe26 	bl	80035a4 <CODEC_IO_Write>
 8002958:	4603      	mov	r3, r0
 800295a:	461a      	mov	r2, r3
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2200      	movs	r2, #0
 8002968:	2122      	movs	r1, #34	@ 0x22
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fe1a 	bl	80035a4 <CODEC_IO_Write>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800297a:	89fb      	ldrh	r3, [r7, #14]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2200      	movs	r2, #0
 8002980:	2123      	movs	r1, #35	@ 0x23
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fe0e 	bl	80035a4 <CODEC_IO_Write>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002992:	89fb      	ldrh	r3, [r7, #14]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800299a:	2136      	movs	r1, #54	@ 0x36
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fe01 	bl	80035a4 <CODEC_IO_Write>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	4413      	add	r3, r2
 80029aa:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80029ac:	89fb      	ldrh	r3, [r7, #14]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f243 0203 	movw	r2, #12291	@ 0x3003
 80029b4:	2101      	movs	r1, #1
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fdf4 	bl	80035a4 <CODEC_IO_Write>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80029c6:	8afb      	ldrh	r3, [r7, #22]
 80029c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029cc:	d10d      	bne.n	80029ea <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80029ce:	89fb      	ldrh	r3, [r7, #14]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f240 2205 	movw	r2, #517	@ 0x205
 80029d6:	2151      	movs	r1, #81	@ 0x51
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fde3 	bl	80035a4 <CODEC_IO_Write>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4413      	add	r3, r2
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	e00b      	b.n	8002a02 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80029ea:	89fb      	ldrh	r3, [r7, #14]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2205      	movs	r2, #5
 80029f0:	2151      	movs	r1, #81	@ 0x51
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fdd6 	bl	80035a4 <CODEC_IO_Write>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	4413      	add	r3, r2
 8002a00:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002a02:	8b7b      	ldrh	r3, [r7, #26]
 8002a04:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8002a08:	f043 0303 	orr.w	r3, r3, #3
 8002a0c:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002a0e:	89fb      	ldrh	r3, [r7, #14]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	8b7a      	ldrh	r2, [r7, #26]
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fdc4 	bl	80035a4 <CODEC_IO_Write>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2222      	movs	r2, #34	@ 0x22
 8002a2c:	2160      	movs	r1, #96	@ 0x60
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fdb8 	bl	80035a4 <CODEC_IO_Write>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8002a46:	214c      	movs	r1, #76	@ 0x4c
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fdab 	bl	80035a4 <CODEC_IO_Write>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461a      	mov	r2, r3
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	4413      	add	r3, r2
 8002a56:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002a58:	200f      	movs	r0, #15
 8002a5a:	f000 ff93 	bl	8003984 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002a5e:	89fb      	ldrh	r3, [r7, #14]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2201      	movs	r2, #1
 8002a64:	212d      	movs	r1, #45	@ 0x2d
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fd9c 	bl	80035a4 <CODEC_IO_Write>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002a76:	89fb      	ldrh	r3, [r7, #14]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	212e      	movs	r1, #46	@ 0x2e
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fd90 	bl	80035a4 <CODEC_IO_Write>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002a8e:	89fb      	ldrh	r3, [r7, #14]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002a96:	2103      	movs	r1, #3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 fd83 	bl	80035a4 <CODEC_IO_Write>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2233      	movs	r2, #51	@ 0x33
 8002aae:	2154      	movs	r1, #84	@ 0x54
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fd77 	bl	80035a4 <CODEC_IO_Write>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002ac0:	f240 1001 	movw	r0, #257	@ 0x101
 8002ac4:	f000 ff5e 	bl	8003984 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002ac8:	89fb      	ldrh	r3, [r7, #14]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	22ee      	movs	r2, #238	@ 0xee
 8002ace:	2160      	movs	r1, #96	@ 0x60
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fd67 	bl	80035a4 <CODEC_IO_Write>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	461a      	mov	r2, r3
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002ae0:	89fb      	ldrh	r3, [r7, #14]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	22c0      	movs	r2, #192	@ 0xc0
 8002ae6:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fd5a 	bl	80035a4 <CODEC_IO_Write>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461a      	mov	r2, r3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002afa:	89fb      	ldrh	r3, [r7, #14]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	22c0      	movs	r2, #192	@ 0xc0
 8002b00:	f240 6111 	movw	r1, #1553	@ 0x611
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fd4d 	bl	80035a4 <CODEC_IO_Write>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002b14:	89fb      	ldrh	r3, [r7, #14]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2210      	movs	r2, #16
 8002b1a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fd40 	bl	80035a4 <CODEC_IO_Write>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002b2e:	89fb      	ldrh	r3, [r7, #14]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	22c0      	movs	r2, #192	@ 0xc0
 8002b34:	f240 6112 	movw	r1, #1554	@ 0x612
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fd33 	bl	80035a4 <CODEC_IO_Write>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002b48:	89fb      	ldrh	r3, [r7, #14]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	22c0      	movs	r2, #192	@ 0xc0
 8002b4e:	f240 6113 	movw	r1, #1555	@ 0x613
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fd26 	bl	80035a4 <CODEC_IO_Write>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	4413      	add	r3, r2
 8002b60:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002b62:	89fb      	ldrh	r3, [r7, #14]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2210      	movs	r2, #16
 8002b68:	f240 4122 	movw	r1, #1058	@ 0x422
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fd19 	bl	80035a4 <CODEC_IO_Write>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002b7c:	7afa      	ldrb	r2, [r7, #11]
 8002b7e:	89fb      	ldrh	r3, [r7, #14]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f984 	bl	8002e90 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002b88:	8afb      	ldrh	r3, [r7, #22]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 80a6 	beq.w	8002cdc <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002b90:	8afb      	ldrh	r3, [r7, #22]
 8002b92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b96:	d003      	beq.n	8002ba0 <wm8994_Init+0xc30>
 8002b98:	8afb      	ldrh	r3, [r7, #22]
 8002b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b9e:	d12b      	bne.n	8002bf8 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002ba0:	8b7b      	ldrh	r3, [r7, #26]
 8002ba2:	f043 0313 	orr.w	r3, r3, #19
 8002ba6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002ba8:	89fb      	ldrh	r3, [r7, #14]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	8b7a      	ldrh	r2, [r7, #26]
 8002bae:	2101      	movs	r1, #1
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fcf7 	bl	80035a4 <CODEC_IO_Write>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002bc0:	89fb      	ldrh	r3, [r7, #14]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fcea 	bl	80035a4 <CODEC_IO_Write>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002bda:	89fb      	ldrh	r3, [r7, #14]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002be2:	f240 4111 	movw	r1, #1041	@ 0x411
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fcdc 	bl	80035a4 <CODEC_IO_Write>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e06b      	b.n	8002cd0 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002bf8:	8afb      	ldrh	r3, [r7, #22]
 8002bfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bfe:	d139      	bne.n	8002c74 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002c00:	8b7b      	ldrh	r3, [r7, #26]
 8002c02:	f043 0313 	orr.w	r3, r3, #19
 8002c06:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002c08:	89fb      	ldrh	r3, [r7, #14]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	8b7a      	ldrh	r2, [r7, #26]
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fcc7 	bl	80035a4 <CODEC_IO_Write>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2202      	movs	r2, #2
 8002c26:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fcba 	bl	80035a4 <CODEC_IO_Write>
 8002c30:	4603      	mov	r3, r0
 8002c32:	461a      	mov	r2, r3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	4413      	add	r3, r2
 8002c38:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002c3a:	89fb      	ldrh	r3, [r7, #14]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002c42:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fcac 	bl	80035a4 <CODEC_IO_Write>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	4413      	add	r3, r2
 8002c54:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8002c56:	89fb      	ldrh	r3, [r7, #14]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002c5e:	f240 4111 	movw	r1, #1041	@ 0x411
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fc9e 	bl	80035a4 <CODEC_IO_Write>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	e02d      	b.n	8002cd0 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8002c74:	8afb      	ldrh	r3, [r7, #22]
 8002c76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c7a:	d003      	beq.n	8002c84 <wm8994_Init+0xd14>
 8002c7c:	8afb      	ldrh	r3, [r7, #22]
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c82:	d125      	bne.n	8002cd0 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002c84:	89fb      	ldrh	r3, [r7, #14]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	220b      	movs	r2, #11
 8002c8a:	2118      	movs	r1, #24
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fc89 	bl	80035a4 <CODEC_IO_Write>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002c9c:	89fb      	ldrh	r3, [r7, #14]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	220b      	movs	r2, #11
 8002ca2:	211a      	movs	r1, #26
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fc7d 	bl	80035a4 <CODEC_IO_Write>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002cbc:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fc6f 	bl	80035a4 <CODEC_IO_Write>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002cd0:	7afa      	ldrb	r2, [r7, #11]
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f8da 	bl	8002e90 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002cdc:	69fb      	ldr	r3, [r7, #28]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop

08002ce8 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002cec:	f000 fdec 	bl	80038c8 <AUDIO_IO_DeInit>
}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002cfe:	f000 fdd9 	bl	80038b4 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fe0f 	bl	800392c <AUDIO_IO_Read>
 8002d0e:	4603      	mov	r3, r0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	80fb      	strh	r3, [r7, #6]
 8002d24:	4613      	mov	r3, r2
 8002d26:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f9d1 	bl	80030d8 <wm8994_SetMute>
 8002d36:	4602      	mov	r2, r0
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f9bc 	bl	80030d8 <wm8994_SetMute>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4413      	add	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	2102      	movs	r1, #2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fc17 	bl	80035a4 <CODEC_IO_Write>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002d80:	68fb      	ldr	r3, [r7, #12]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 f99b 	bl	80030d8 <wm8994_SetMute>
 8002da2:	4602      	mov	r2, r0
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8002dc4:	4b31      	ldr	r3, [pc, #196]	@ (8002e8c <wm8994_Stop+0xd8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d05a      	beq.n	8002e82 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f981 	bl	80030d8 <wm8994_SetMute>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4413      	add	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d04e      	beq.n	8002e82 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dec:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fbd7 	bl	80035a4 <CODEC_IO_Write>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e08:	f240 4122 	movw	r1, #1058	@ 0x422
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fbc9 	bl	80035a4 <CODEC_IO_Write>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4413      	add	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2200      	movs	r2, #0
 8002e22:	212d      	movs	r1, #45	@ 0x2d
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fbbd 	bl	80035a4 <CODEC_IO_Write>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2200      	movs	r2, #0
 8002e3a:	212e      	movs	r1, #46	@ 0x2e
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fbb1 	bl	80035a4 <CODEC_IO_Write>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2200      	movs	r2, #0
 8002e52:	2105      	movs	r1, #5
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fba5 	bl	80035a4 <CODEC_IO_Write>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fb99 	bl	80035a4 <CODEC_IO_Write>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <wm8994_Stop+0xd8>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8002e82:	68fb      	ldr	r3, [r7, #12]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20020610 	.word	0x20020610

08002e90 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	460a      	mov	r2, r1
 8002e9a:	80fb      	strh	r3, [r7, #6]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002ea4:	797b      	ldrb	r3, [r7, #5]
 8002ea6:	2b64      	cmp	r3, #100	@ 0x64
 8002ea8:	d80b      	bhi.n	8002ec2 <wm8994_SetVolume+0x32>
 8002eaa:	797a      	ldrb	r2, [r7, #5]
 8002eac:	4613      	mov	r3, r2
 8002eae:	019b      	lsls	r3, r3, #6
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	4a86      	ldr	r2, [pc, #536]	@ (80030cc <wm8994_SetVolume+0x23c>)
 8002eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8002eb8:	1152      	asrs	r2, r2, #5
 8002eba:	17db      	asrs	r3, r3, #31
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	e000      	b.n	8002ec4 <wm8994_SetVolume+0x34>
 8002ec2:	2364      	movs	r3, #100	@ 0x64
 8002ec4:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002ec6:	4b82      	ldr	r3, [pc, #520]	@ (80030d0 <wm8994_SetVolume+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 809b 	beq.w	8003006 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8002ed0:	7afb      	ldrb	r3, [r7, #11]
 8002ed2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ed4:	d93d      	bls.n	8002f52 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f8fc 	bl	80030d8 <wm8994_SetMute>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f240 127f 	movw	r2, #383	@ 0x17f
 8002ef0:	211c      	movs	r1, #28
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fb56 	bl	80035a4 <CODEC_IO_Write>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8002f02:	88fb      	ldrh	r3, [r7, #6]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f0a:	211d      	movs	r1, #29
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fb49 	bl	80035a4 <CODEC_IO_Write>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461a      	mov	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4413      	add	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f24:	2126      	movs	r1, #38	@ 0x26
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fb3c 	bl	80035a4 <CODEC_IO_Write>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f240 127f 	movw	r2, #383	@ 0x17f
 8002f3e:	2127      	movs	r1, #39	@ 0x27
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fb2f 	bl	80035a4 <CODEC_IO_Write>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e059      	b.n	8003006 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8002f52:	797b      	ldrb	r3, [r7, #5]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f8bb 	bl	80030d8 <wm8994_SetMute>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e04c      	b.n	8003006 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 f8b1 	bl	80030d8 <wm8994_SetMute>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	b2d8      	uxtb	r0, r3
 8002f82:	7afb      	ldrb	r3, [r7, #11]
 8002f84:	b21b      	sxth	r3, r3
 8002f86:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	211c      	movs	r1, #28
 8002f92:	f000 fb07 	bl	80035a4 <CODEC_IO_Write>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	b2d8      	uxtb	r0, r3
 8002fa4:	7afb      	ldrb	r3, [r7, #11]
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002fac:	b21b      	sxth	r3, r3
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	211d      	movs	r1, #29
 8002fb4:	f000 faf6 	bl	80035a4 <CODEC_IO_Write>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	b2d8      	uxtb	r0, r3
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	b21b      	sxth	r3, r3
 8002fca:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2126      	movs	r1, #38	@ 0x26
 8002fd6:	f000 fae5 	bl	80035a4 <CODEC_IO_Write>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	b2d8      	uxtb	r0, r3
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
 8002fea:	b21b      	sxth	r3, r3
 8002fec:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8002ff0:	b21b      	sxth	r3, r3
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2127      	movs	r1, #39	@ 0x27
 8002ff8:	f000 fad4 	bl	80035a4 <CODEC_IO_Write>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8003006:	4b33      	ldr	r3, [pc, #204]	@ (80030d4 <wm8994_SetVolume+0x244>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d059      	beq.n	80030c2 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800300e:	797b      	ldrb	r3, [r7, #5]
 8003010:	2b63      	cmp	r3, #99	@ 0x63
 8003012:	d80c      	bhi.n	800302e <wm8994_SetVolume+0x19e>
 8003014:	797a      	ldrb	r2, [r7, #5]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	4a2b      	ldr	r2, [pc, #172]	@ (80030cc <wm8994_SetVolume+0x23c>)
 8003020:	fb82 1203 	smull	r1, r2, r2, r3
 8003024:	1152      	asrs	r2, r2, #5
 8003026:	17db      	asrs	r3, r3, #31
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e000      	b.n	8003030 <wm8994_SetVolume+0x1a0>
 800302e:	23ef      	movs	r3, #239	@ 0xef
 8003030:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	b2d8      	uxtb	r0, r3
 8003036:	7afb      	ldrb	r3, [r7, #11]
 8003038:	b21b      	sxth	r3, r3
 800303a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303e:	b21b      	sxth	r3, r3
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003048:	f000 faac 	bl	80035a4 <CODEC_IO_Write>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	b2d8      	uxtb	r0, r3
 800305a:	7afb      	ldrb	r3, [r7, #11]
 800305c:	b21b      	sxth	r3, r3
 800305e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003062:	b21b      	sxth	r3, r3
 8003064:	b29b      	uxth	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	f240 4101 	movw	r1, #1025	@ 0x401
 800306c:	f000 fa9a 	bl	80035a4 <CODEC_IO_Write>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	b2d8      	uxtb	r0, r3
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	b21b      	sxth	r3, r3
 8003082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003086:	b21b      	sxth	r3, r3
 8003088:	b29b      	uxth	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	f240 4104 	movw	r1, #1028	@ 0x404
 8003090:	f000 fa88 	bl	80035a4 <CODEC_IO_Write>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	b2d8      	uxtb	r0, r3
 80030a2:	7afb      	ldrb	r3, [r7, #11]
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030aa:	b21b      	sxth	r3, r3
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	f240 4105 	movw	r1, #1029	@ 0x405
 80030b4:	f000 fa76 	bl	80035a4 <CODEC_IO_Write>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	51eb851f 	.word	0x51eb851f
 80030d0:	20020610 	.word	0x20020610
 80030d4:	20020614 	.word	0x20020614

080030d8 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80030e8:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <wm8994_SetMute+0x98>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d039      	beq.n	8003164 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d11c      	bne.n	8003130 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030fe:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fa4e 	bl	80035a4 <CODEC_IO_Write>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800311a:	f240 4122 	movw	r1, #1058	@ 0x422
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fa40 	bl	80035a4 <CODEC_IO_Write>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e019      	b.n	8003164 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2210      	movs	r2, #16
 8003136:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fa32 	bl	80035a4 <CODEC_IO_Write>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2210      	movs	r2, #16
 8003150:	f240 4122 	movw	r1, #1058	@ 0x422
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fa25 	bl	80035a4 <CODEC_IO_Write>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4413      	add	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003164:	68fb      	ldr	r3, [r7, #12]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20020610 	.word	0x20020610

08003174 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	460a      	mov	r2, r1
 800317e:	80fb      	strh	r3, [r7, #6]
 8003180:	4613      	mov	r3, r2
 8003182:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003188:	797b      	ldrb	r3, [r7, #5]
 800318a:	2b03      	cmp	r3, #3
 800318c:	f000 808c 	beq.w	80032a8 <wm8994_SetOutputMode+0x134>
 8003190:	2b03      	cmp	r3, #3
 8003192:	f300 80cb 	bgt.w	800332c <wm8994_SetOutputMode+0x1b8>
 8003196:	2b01      	cmp	r3, #1
 8003198:	d002      	beq.n	80031a0 <wm8994_SetOutputMode+0x2c>
 800319a:	2b02      	cmp	r3, #2
 800319c:	d042      	beq.n	8003224 <wm8994_SetOutputMode+0xb0>
 800319e:	e0c5      	b.n	800332c <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80031a8:	2105      	movs	r1, #5
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f9fa 	bl	80035a4 <CODEC_IO_Write>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2200      	movs	r2, #0
 80031c0:	f240 6101 	movw	r1, #1537	@ 0x601
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f9ed 	bl	80035a4 <CODEC_IO_Write>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461a      	mov	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80031d4:	88fb      	ldrh	r3, [r7, #6]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	f240 6102 	movw	r1, #1538	@ 0x602
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f9e0 	bl	80035a4 <CODEC_IO_Write>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2202      	movs	r2, #2
 80031f4:	f240 6104 	movw	r1, #1540	@ 0x604
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f9d3 	bl	80035a4 <CODEC_IO_Write>
 80031fe:	4603      	mov	r3, r0
 8003200:	461a      	mov	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2202      	movs	r2, #2
 800320e:	f240 6105 	movw	r1, #1541	@ 0x605
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f9c6 	bl	80035a4 <CODEC_IO_Write>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
    break;
 8003222:	e0c5      	b.n	80033b0 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f240 3203 	movw	r2, #771	@ 0x303
 800322c:	2105      	movs	r1, #5
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f9b8 	bl	80035a4 <CODEC_IO_Write>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2201      	movs	r2, #1
 8003244:	f240 6101 	movw	r1, #1537	@ 0x601
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f9ab 	bl	80035a4 <CODEC_IO_Write>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2201      	movs	r2, #1
 800325e:	f240 6102 	movw	r1, #1538	@ 0x602
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f99e 	bl	80035a4 <CODEC_IO_Write>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2200      	movs	r2, #0
 8003278:	f240 6104 	movw	r1, #1540	@ 0x604
 800327c:	4618      	mov	r0, r3
 800327e:	f000 f991 	bl	80035a4 <CODEC_IO_Write>
 8003282:	4603      	mov	r3, r0
 8003284:	461a      	mov	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2200      	movs	r2, #0
 8003292:	f240 6105 	movw	r1, #1541	@ 0x605
 8003296:	4618      	mov	r0, r3
 8003298:	f000 f984 	bl	80035a4 <CODEC_IO_Write>
 800329c:	4603      	mov	r3, r0
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    break;
 80032a6:	e083      	b.n	80033b0 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80032b0:	2105      	movs	r1, #5
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f976 	bl	80035a4 <CODEC_IO_Write>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2201      	movs	r2, #1
 80032c8:	f240 6101 	movw	r1, #1537	@ 0x601
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f969 	bl	80035a4 <CODEC_IO_Write>
 80032d2:	4603      	mov	r3, r0
 80032d4:	461a      	mov	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4413      	add	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2201      	movs	r2, #1
 80032e2:	f240 6102 	movw	r1, #1538	@ 0x602
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f95c 	bl	80035a4 <CODEC_IO_Write>
 80032ec:	4603      	mov	r3, r0
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2202      	movs	r2, #2
 80032fc:	f240 6104 	movw	r1, #1540	@ 0x604
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f94f 	bl	80035a4 <CODEC_IO_Write>
 8003306:	4603      	mov	r3, r0
 8003308:	461a      	mov	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2202      	movs	r2, #2
 8003316:	f240 6105 	movw	r1, #1541	@ 0x605
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f942 	bl	80035a4 <CODEC_IO_Write>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]
    break;
 800332a:	e041      	b.n	80033b0 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f240 3203 	movw	r2, #771	@ 0x303
 8003334:	2105      	movs	r1, #5
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f934 	bl	80035a4 <CODEC_IO_Write>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2201      	movs	r2, #1
 800334c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f927 	bl	80035a4 <CODEC_IO_Write>
 8003356:	4603      	mov	r3, r0
 8003358:	461a      	mov	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4413      	add	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2201      	movs	r2, #1
 8003366:	f240 6102 	movw	r1, #1538	@ 0x602
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f91a 	bl	80035a4 <CODEC_IO_Write>
 8003370:	4603      	mov	r3, r0
 8003372:	461a      	mov	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2200      	movs	r2, #0
 8003380:	f240 6104 	movw	r1, #1540	@ 0x604
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f90d 	bl	80035a4 <CODEC_IO_Write>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4413      	add	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2200      	movs	r2, #0
 800339a:	f240 6105 	movw	r1, #1541	@ 0x605
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f900 	bl	80035a4 <CODEC_IO_Write>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
    break;    
 80033ae:	bf00      	nop
  }  
  return counter;
 80033b0:	68fb      	ldr	r3, [r7, #12]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	6039      	str	r1, [r7, #0]
 80033c6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	4a64      	ldr	r2, [pc, #400]	@ (8003560 <wm8994_SetFrequency+0x1a4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d079      	beq.n	80034c8 <wm8994_SetFrequency+0x10c>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4a62      	ldr	r2, [pc, #392]	@ (8003560 <wm8994_SetFrequency+0x1a4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	f200 80ad 	bhi.w	8003538 <wm8994_SetFrequency+0x17c>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d061      	beq.n	80034ac <wm8994_SetFrequency+0xf0>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80033ee:	4293      	cmp	r3, r2
 80033f0:	f200 80a2 	bhi.w	8003538 <wm8994_SetFrequency+0x17c>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80033fa:	4293      	cmp	r3, r2
 80033fc:	f000 808e 	beq.w	800351c <wm8994_SetFrequency+0x160>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003406:	4293      	cmp	r3, r2
 8003408:	f200 8096 	bhi.w	8003538 <wm8994_SetFrequency+0x17c>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003412:	d03d      	beq.n	8003490 <wm8994_SetFrequency+0xd4>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800341a:	f200 808d 	bhi.w	8003538 <wm8994_SetFrequency+0x17c>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003424:	4293      	cmp	r3, r2
 8003426:	d06b      	beq.n	8003500 <wm8994_SetFrequency+0x144>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f245 6222 	movw	r2, #22050	@ 0x5622
 800342e:	4293      	cmp	r3, r2
 8003430:	f200 8082 	bhi.w	8003538 <wm8994_SetFrequency+0x17c>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800343a:	d01b      	beq.n	8003474 <wm8994_SetFrequency+0xb8>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003442:	d879      	bhi.n	8003538 <wm8994_SetFrequency+0x17c>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800344a:	d005      	beq.n	8003458 <wm8994_SetFrequency+0x9c>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003452:	4293      	cmp	r3, r2
 8003454:	d046      	beq.n	80034e4 <wm8994_SetFrequency+0x128>
 8003456:	e06f      	b.n	8003538 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2203      	movs	r2, #3
 800345e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f89e 	bl	80035a4 <CODEC_IO_Write>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
    break;
 8003472:	e06f      	b.n	8003554 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2233      	movs	r2, #51	@ 0x33
 800347a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f890 	bl	80035a4 <CODEC_IO_Write>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
    break;
 800348e:	e061      	b.n	8003554 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2263      	movs	r2, #99	@ 0x63
 8003496:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f882 	bl	80035a4 <CODEC_IO_Write>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
    break;
 80034aa:	e053      	b.n	8003554 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2283      	movs	r2, #131	@ 0x83
 80034b2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f874 	bl	80035a4 <CODEC_IO_Write>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
    break;
 80034c6:	e045      	b.n	8003554 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	22a3      	movs	r2, #163	@ 0xa3
 80034ce:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f866 	bl	80035a4 <CODEC_IO_Write>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
    break;
 80034e2:	e037      	b.n	8003554 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2213      	movs	r2, #19
 80034ea:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f858 	bl	80035a4 <CODEC_IO_Write>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4413      	add	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
    break;
 80034fe:	e029      	b.n	8003554 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2243      	movs	r2, #67	@ 0x43
 8003506:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f84a 	bl	80035a4 <CODEC_IO_Write>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
    break;
 800351a:	e01b      	b.n	8003554 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2273      	movs	r2, #115	@ 0x73
 8003522:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f83c 	bl	80035a4 <CODEC_IO_Write>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
    break; 
 8003536:	e00d      	b.n	8003554 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2283      	movs	r2, #131	@ 0x83
 800353e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f82e 	bl	80035a4 <CODEC_IO_Write>
 8003548:	4603      	mov	r3, r0
 800354a:	461a      	mov	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
    break; 
 8003552:	bf00      	nop
  }
  return counter;
 8003554:	68fb      	ldr	r3, [r7, #12]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	00017700 	.word	0x00017700

08003564 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f812 	bl	80035a4 <CODEC_IO_Write>
 8003580:	4603      	mov	r3, r0
 8003582:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003584:	4b05      	ldr	r3, [pc, #20]	@ (800359c <wm8994_Reset+0x38>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800358a:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <wm8994_Reset+0x3c>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

  return counter;
 8003590:	68fb      	ldr	r3, [r7, #12]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20020610 	.word	0x20020610
 80035a0:	20020614 	.word	0x20020614

080035a4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
 80035ae:	460b      	mov	r3, r1
 80035b0:	80bb      	strh	r3, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80035ba:	887a      	ldrh	r2, [r7, #2]
 80035bc:	88b9      	ldrh	r1, [r7, #4]
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f989 	bl	80038d8 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	b2db      	uxtb	r3, r3
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	4a07      	ldr	r2, [pc, #28]	@ (8003600 <BSP_PB_GetState+0x2c>)
 80035e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	4906      	ldr	r1, [pc, #24]	@ (8003604 <BSP_PB_GetState+0x30>)
 80035ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f001 ff57 	bl	80054a4 <HAL_GPIO_ReadPin>
 80035f6:	4603      	mov	r3, r0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000038 	.word	0x20000038
 8003604:	0800b7c8 	.word	0x0800b7c8

08003608 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08c      	sub	sp, #48	@ 0x30
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a51      	ldr	r2, [pc, #324]	@ (8003758 <I2Cx_MspInit+0x150>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d14d      	bne.n	80036b4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003618:	4b50      	ldr	r3, [pc, #320]	@ (800375c <I2Cx_MspInit+0x154>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	4a4f      	ldr	r2, [pc, #316]	@ (800375c <I2Cx_MspInit+0x154>)
 800361e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003622:	6313      	str	r3, [r2, #48]	@ 0x30
 8003624:	4b4d      	ldr	r3, [pc, #308]	@ (800375c <I2Cx_MspInit+0x154>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003634:	2312      	movs	r3, #18
 8003636:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800363c:	2302      	movs	r3, #2
 800363e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003640:	2304      	movs	r3, #4
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003644:	f107 031c 	add.w	r3, r7, #28
 8003648:	4619      	mov	r1, r3
 800364a:	4845      	ldr	r0, [pc, #276]	@ (8003760 <I2Cx_MspInit+0x158>)
 800364c:	f001 fc72 	bl	8004f34 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003650:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003656:	f107 031c 	add.w	r3, r7, #28
 800365a:	4619      	mov	r1, r3
 800365c:	4840      	ldr	r0, [pc, #256]	@ (8003760 <I2Cx_MspInit+0x158>)
 800365e:	f001 fc69 	bl	8004f34 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003662:	4b3e      	ldr	r3, [pc, #248]	@ (800375c <I2Cx_MspInit+0x154>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	4a3d      	ldr	r2, [pc, #244]	@ (800375c <I2Cx_MspInit+0x154>)
 8003668:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800366c:	6413      	str	r3, [r2, #64]	@ 0x40
 800366e:	4b3b      	ldr	r3, [pc, #236]	@ (800375c <I2Cx_MspInit+0x154>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800367a:	4b38      	ldr	r3, [pc, #224]	@ (800375c <I2Cx_MspInit+0x154>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a37      	ldr	r2, [pc, #220]	@ (800375c <I2Cx_MspInit+0x154>)
 8003680:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003684:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003686:	4b35      	ldr	r3, [pc, #212]	@ (800375c <I2Cx_MspInit+0x154>)
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4a34      	ldr	r2, [pc, #208]	@ (800375c <I2Cx_MspInit+0x154>)
 800368c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003690:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	210f      	movs	r1, #15
 8003696:	2048      	movs	r0, #72	@ 0x48
 8003698:	f000 ffb5 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800369c:	2048      	movs	r0, #72	@ 0x48
 800369e:	f000 ffce 	bl	800463e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	210f      	movs	r1, #15
 80036a6:	2049      	movs	r0, #73	@ 0x49
 80036a8:	f000 ffad 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80036ac:	2049      	movs	r0, #73	@ 0x49
 80036ae:	f000 ffc6 	bl	800463e <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80036b2:	e04d      	b.n	8003750 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80036b4:	4b29      	ldr	r3, [pc, #164]	@ (800375c <I2Cx_MspInit+0x154>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b8:	4a28      	ldr	r2, [pc, #160]	@ (800375c <I2Cx_MspInit+0x154>)
 80036ba:	f043 0302 	orr.w	r3, r3, #2
 80036be:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c0:	4b26      	ldr	r3, [pc, #152]	@ (800375c <I2Cx_MspInit+0x154>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80036cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036d0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80036d2:	2312      	movs	r3, #18
 80036d4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80036da:	2302      	movs	r3, #2
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80036de:	2304      	movs	r3, #4
 80036e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	4619      	mov	r1, r3
 80036e8:	481e      	ldr	r0, [pc, #120]	@ (8003764 <I2Cx_MspInit+0x15c>)
 80036ea:	f001 fc23 	bl	8004f34 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80036ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036f4:	f107 031c 	add.w	r3, r7, #28
 80036f8:	4619      	mov	r1, r3
 80036fa:	481a      	ldr	r0, [pc, #104]	@ (8003764 <I2Cx_MspInit+0x15c>)
 80036fc:	f001 fc1a 	bl	8004f34 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003700:	4b16      	ldr	r3, [pc, #88]	@ (800375c <I2Cx_MspInit+0x154>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	4a15      	ldr	r2, [pc, #84]	@ (800375c <I2Cx_MspInit+0x154>)
 8003706:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800370a:	6413      	str	r3, [r2, #64]	@ 0x40
 800370c:	4b13      	ldr	r3, [pc, #76]	@ (800375c <I2Cx_MspInit+0x154>)
 800370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003718:	4b10      	ldr	r3, [pc, #64]	@ (800375c <I2Cx_MspInit+0x154>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4a0f      	ldr	r2, [pc, #60]	@ (800375c <I2Cx_MspInit+0x154>)
 800371e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003722:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003724:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <I2Cx_MspInit+0x154>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4a0c      	ldr	r2, [pc, #48]	@ (800375c <I2Cx_MspInit+0x154>)
 800372a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800372e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003730:	2200      	movs	r2, #0
 8003732:	210f      	movs	r1, #15
 8003734:	201f      	movs	r0, #31
 8003736:	f000 ff66 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800373a:	201f      	movs	r0, #31
 800373c:	f000 ff7f 	bl	800463e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003740:	2200      	movs	r2, #0
 8003742:	210f      	movs	r1, #15
 8003744:	2020      	movs	r0, #32
 8003746:	f000 ff5e 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800374a:	2020      	movs	r0, #32
 800374c:	f000 ff77 	bl	800463e <HAL_NVIC_EnableIRQ>
}
 8003750:	bf00      	nop
 8003752:	3730      	adds	r7, #48	@ 0x30
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20020618 	.word	0x20020618
 800375c:	40023800 	.word	0x40023800
 8003760:	40021c00 	.word	0x40021c00
 8003764:	40020400 	.word	0x40020400

08003768 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f002 f9d5 	bl	8005b20 <HAL_I2C_GetState>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d125      	bne.n	80037c8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <I2Cx_Init+0x68>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d103      	bne.n	800378c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a13      	ldr	r2, [pc, #76]	@ (80037d4 <I2Cx_Init+0x6c>)
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e002      	b.n	8003792 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a12      	ldr	r2, [pc, #72]	@ (80037d8 <I2Cx_Init+0x70>)
 8003790:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a11      	ldr	r2, [pc, #68]	@ (80037dc <I2Cx_Init+0x74>)
 8003796:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff23 	bl	8003608 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f001 fe9e 	bl	8005504 <HAL_I2C_Init>
  }
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20020618 	.word	0x20020618
 80037d4:	40005c00 	.word	0x40005c00
 80037d8:	40005400 	.word	0x40005400
 80037dc:	40912732 	.word	0x40912732

080037e0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	@ 0x28
 80037e4:	af04      	add	r7, sp, #16
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	4608      	mov	r0, r1
 80037ea:	4611      	mov	r1, r2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	72fb      	strb	r3, [r7, #11]
 80037f2:	460b      	mov	r3, r1
 80037f4:	813b      	strh	r3, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80037fe:	7afb      	ldrb	r3, [r7, #11]
 8003800:	b299      	uxth	r1, r3
 8003802:	88f8      	ldrh	r0, [r7, #6]
 8003804:	893a      	ldrh	r2, [r7, #8]
 8003806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	4603      	mov	r3, r0
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f002 f868 	bl	80058ec <HAL_I2C_Mem_Read>
 800381c:	4603      	mov	r3, r0
 800381e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d004      	beq.n	8003830 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003826:	7afb      	ldrb	r3, [r7, #11]
 8003828:	4619      	mov	r1, r3
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f832 	bl	8003894 <I2Cx_Error>
  }
  return status;    
 8003830:	7dfb      	ldrb	r3, [r7, #23]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b08a      	sub	sp, #40	@ 0x28
 800383e:	af04      	add	r7, sp, #16
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	4608      	mov	r0, r1
 8003844:	4611      	mov	r1, r2
 8003846:	461a      	mov	r2, r3
 8003848:	4603      	mov	r3, r0
 800384a:	72fb      	strb	r3, [r7, #11]
 800384c:	460b      	mov	r3, r1
 800384e:	813b      	strh	r3, [r7, #8]
 8003850:	4613      	mov	r3, r2
 8003852:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003858:	7afb      	ldrb	r3, [r7, #11]
 800385a:	b299      	uxth	r1, r3
 800385c:	88f8      	ldrh	r0, [r7, #6]
 800385e:	893a      	ldrh	r2, [r7, #8]
 8003860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003864:	9302      	str	r3, [sp, #8]
 8003866:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	4603      	mov	r3, r0
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f001 ff27 	bl	80056c4 <HAL_I2C_Mem_Write>
 8003876:	4603      	mov	r3, r0
 8003878:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003880:	7afb      	ldrb	r3, [r7, #11]
 8003882:	4619      	mov	r1, r3
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f805 	bl	8003894 <I2Cx_Error>
  }
  return status;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f001 fecb 	bl	800563c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff5e 	bl	8003768 <I2Cx_Init>
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80038b8:	4802      	ldr	r0, [pc, #8]	@ (80038c4 <AUDIO_IO_Init+0x10>)
 80038ba:	f7ff ff55 	bl	8003768 <I2Cx_Init>
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20020618 	.word	0x20020618

080038c8 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
 80038e2:	460b      	mov	r3, r1
 80038e4:	80bb      	strh	r3, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80038ea:	887b      	ldrh	r3, [r7, #2]
 80038ec:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80038ee:	89fb      	ldrh	r3, [r7, #14]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80038f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	b21a      	sxth	r2, r3
 80038fe:	887b      	ldrh	r3, [r7, #2]
 8003900:	b21b      	sxth	r3, r3
 8003902:	4313      	orrs	r3, r2
 8003904:	b21b      	sxth	r3, r3
 8003906:	b29b      	uxth	r3, r3
 8003908:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800390a:	88ba      	ldrh	r2, [r7, #4]
 800390c:	79f9      	ldrb	r1, [r7, #7]
 800390e:	2302      	movs	r3, #2
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	1cbb      	adds	r3, r7, #2
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2302      	movs	r3, #2
 8003918:	4803      	ldr	r0, [pc, #12]	@ (8003928 <AUDIO_IO_Write+0x50>)
 800391a:	f7ff ff8e 	bl	800383a <I2Cx_WriteMultiple>
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20020618 	.word	0x20020618

0800392c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af02      	add	r7, sp, #8
 8003932:	4603      	mov	r3, r0
 8003934:	460a      	mov	r2, r1
 8003936:	71fb      	strb	r3, [r7, #7]
 8003938:	4613      	mov	r3, r2
 800393a:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	81bb      	strh	r3, [r7, #12]
 8003940:	2300      	movs	r3, #0
 8003942:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003944:	88ba      	ldrh	r2, [r7, #4]
 8003946:	79f9      	ldrb	r1, [r7, #7]
 8003948:	2302      	movs	r3, #2
 800394a:	9301      	str	r3, [sp, #4]
 800394c:	f107 030c 	add.w	r3, r7, #12
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	2302      	movs	r3, #2
 8003954:	480a      	ldr	r0, [pc, #40]	@ (8003980 <AUDIO_IO_Read+0x54>)
 8003956:	f7ff ff43 	bl	80037e0 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800395a:	89bb      	ldrh	r3, [r7, #12]
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003960:	89bb      	ldrh	r3, [r7, #12]
 8003962:	b21b      	sxth	r3, r3
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	b21a      	sxth	r2, r3
 8003968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800396c:	4313      	orrs	r3, r2
 800396e:	b21b      	sxth	r3, r3
 8003970:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003972:	89fb      	ldrh	r3, [r7, #14]
 8003974:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003976:	89bb      	ldrh	r3, [r7, #12]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20020618 	.word	0x20020618

08003984 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fd3b 	bl	8004408 <HAL_Delay>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	603a      	str	r2, [r7, #0]
 80039a6:	80fb      	strh	r3, [r7, #6]
 80039a8:	460b      	mov	r3, r1
 80039aa:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 80039b4:	f000 fa6a 	bl	8003e8c <SAIx_Out_DeInit>

  /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 80039b8:	2200      	movs	r2, #0
 80039ba:	6839      	ldr	r1, [r7, #0]
 80039bc:	481c      	ldr	r0, [pc, #112]	@ (8003a30 <BSP_AUDIO_OUT_Init+0x94>)
 80039be:	f000 f9c3 	bl	8003d48 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80039c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <BSP_AUDIO_OUT_Init+0x94>)
 80039c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003a34 <BSP_AUDIO_OUT_Init+0x98>)
 80039c6:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80039c8:	4819      	ldr	r0, [pc, #100]	@ (8003a30 <BSP_AUDIO_OUT_Init+0x94>)
 80039ca:	f004 f9f3 	bl	8007db4 <HAL_SAI_GetState>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d103      	bne.n	80039dc <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80039d4:	2100      	movs	r1, #0
 80039d6:	4816      	ldr	r0, [pc, #88]	@ (8003a30 <BSP_AUDIO_OUT_Init+0x94>)
 80039d8:	f000 f8e0 	bl	8003b9c <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 80039dc:	6838      	ldr	r0, [r7, #0]
 80039de:	f000 f9f7 	bl	8003dd0 <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80039e2:	4b15      	ldr	r3, [pc, #84]	@ (8003a38 <BSP_AUDIO_OUT_Init+0x9c>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2034      	movs	r0, #52	@ 0x34
 80039e8:	4798      	blx	r3
 80039ea:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f648 1294 	movw	r2, #35220	@ 0x8994
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d109      	bne.n	8003a0a <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80039f6:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <BSP_AUDIO_OUT_Init+0x9c>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	2034      	movs	r0, #52	@ 0x34
 80039fc:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 80039fe:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <BSP_AUDIO_OUT_Init+0xa0>)
 8003a00:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <BSP_AUDIO_OUT_Init+0x9c>)
 8003a02:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
 8003a08:	e001      	b.n	8003a0e <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8003a14:	4b09      	ldr	r3, [pc, #36]	@ (8003a3c <BSP_AUDIO_OUT_Init+0xa0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681c      	ldr	r4, [r3, #0]
 8003a1a:	797a      	ldrb	r2, [r7, #5]
 8003a1c:	88f9      	ldrh	r1, [r7, #6]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2034      	movs	r0, #52	@ 0x34
 8003a22:	47a0      	blx	r4
  }
 
  return ret;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd90      	pop	{r4, r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20020670 	.word	0x20020670
 8003a34:	40015c04 	.word	0x40015c04
 8003a38:	20000004 	.word	0x20000004
 8003a3c:	2002066c 	.word	0x2002066c

08003a40 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8003a4a:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <BSP_AUDIO_OUT_Play+0x4c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	b292      	uxth	r2, r2
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	2034      	movs	r0, #52	@ 0x34
 8003a58:	4798      	blx	r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e00f      	b.n	8003a84 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a6a:	d203      	bcs.n	8003a74 <BSP_AUDIO_OUT_Play+0x34>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	e001      	b.n	8003a78 <BSP_AUDIO_OUT_Play+0x38>
 8003a74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4804      	ldr	r0, [pc, #16]	@ (8003a90 <BSP_AUDIO_OUT_Play+0x50>)
 8003a7e:	f004 f85b 	bl	8007b38 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 8003a82:	2300      	movs	r3, #0
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	2002066c 	.word	0x2002066c
 8003a90:	20020670 	.word	0x20020670

08003a94 <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_out_sai);
 8003a9c:	480c      	ldr	r0, [pc, #48]	@ (8003ad0 <BSP_AUDIO_OUT_Stop+0x3c>)
 8003a9e:	f003 ffd8 	bl	8007a52 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <BSP_AUDIO_OUT_Stop+0x40>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	2034      	movs	r0, #52	@ 0x34
 8003aac:	4798      	blx	r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <BSP_AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e006      	b.n	8003ac6 <BSP_AUDIO_OUT_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d102      	bne.n	8003ac4 <BSP_AUDIO_OUT_Stop+0x30>
    { 
      /* Wait at least 100us */
      HAL_Delay(1);
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f000 fca2 	bl	8004408 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8003ac4:	2300      	movs	r3, #0
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20020670 	.word	0x20020670
 8003ad4:	2002066c 	.word	0x2002066c

08003ad8 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003aee:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8003af0:	4a08      	ldr	r2, [pc, #32]	@ (8003b14 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6613      	str	r3, [r2, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8003af6:	4807      	ldr	r0, [pc, #28]	@ (8003b14 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003af8:	f003 fdf8 	bl	80076ec <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b04      	ldr	r3, [pc, #16]	@ (8003b14 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003b0a:	601a      	str	r2, [r3, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20020670 	.word	0x20020670

08003b18 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8003b20:	f7fd fe6c 	bl	80017fc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8003b34:	f7fd fe76 	bl	8001824 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003b48:	480e      	ldr	r0, [pc, #56]	@ (8003b84 <HAL_SAI_ErrorCallback+0x44>)
 8003b4a:	f004 f933 	bl	8007db4 <HAL_SAI_GetState>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003b52:	480d      	ldr	r0, [pc, #52]	@ (8003b88 <HAL_SAI_ErrorCallback+0x48>)
 8003b54:	f004 f92e 	bl	8007db4 <HAL_SAI_GetState>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d002      	beq.n	8003b68 <HAL_SAI_ErrorCallback+0x28>
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b12      	cmp	r3, #18
 8003b66:	d101      	bne.n	8003b6c <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003b68:	f000 f810 	bl	8003b8c <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d002      	beq.n	8003b78 <HAL_SAI_ErrorCallback+0x38>
 8003b72:	7bbb      	ldrb	r3, [r7, #14]
 8003b74:	2b22      	cmp	r3, #34	@ 0x22
 8003b76:	d101      	bne.n	8003b7c <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8003b78:	f7fd fe84 	bl	8001884 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20020670 	.word	0x20020670
 8003b88:	200206f4 	.word	0x200206f4

08003b8c <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08c      	sub	sp, #48	@ 0x30
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8003ba6:	4b63      	ldr	r3, [pc, #396]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	4a62      	ldr	r2, [pc, #392]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bb2:	4b60      	ldr	r3, [pc, #384]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	4a5c      	ldr	r2, [pc, #368]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bca:	4b5a      	ldr	r3, [pc, #360]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003bd6:	4b57      	ldr	r3, [pc, #348]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	4a56      	ldr	r2, [pc, #344]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be2:	4b54      	ldr	r3, [pc, #336]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8003bee:	4b51      	ldr	r3, [pc, #324]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	4a50      	ldr	r2, [pc, #320]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003c06:	2380      	movs	r3, #128	@ 0x80
 8003c08:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c12:	2303      	movs	r3, #3
 8003c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003c16:	230a      	movs	r3, #10
 8003c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003c1a:	f107 031c 	add.w	r3, r7, #28
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4845      	ldr	r0, [pc, #276]	@ (8003d38 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003c22:	f001 f987 	bl	8004f34 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003c26:	2320      	movs	r3, #32
 8003c28:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c32:	2303      	movs	r3, #3
 8003c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003c36:	230a      	movs	r3, #10
 8003c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003c3a:	f107 031c 	add.w	r3, r7, #28
 8003c3e:	4619      	mov	r1, r3
 8003c40:	483d      	ldr	r0, [pc, #244]	@ (8003d38 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003c42:	f001 f977 	bl	8004f34 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003c46:	2340      	movs	r3, #64	@ 0x40
 8003c48:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c52:	2303      	movs	r3, #3
 8003c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003c56:	230a      	movs	r3, #10
 8003c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003c5a:	f107 031c 	add.w	r3, r7, #28
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4835      	ldr	r0, [pc, #212]	@ (8003d38 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003c62:	f001 f967 	bl	8004f34 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003c66:	2310      	movs	r3, #16
 8003c68:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c72:	2303      	movs	r3, #3
 8003c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003c76:	230a      	movs	r3, #10
 8003c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8003c7a:	f107 031c 	add.w	r3, r7, #28
 8003c7e:	4619      	mov	r1, r3
 8003c80:	482d      	ldr	r0, [pc, #180]	@ (8003d38 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003c82:	f001 f957 	bl	8004f34 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003c86:	4b2b      	ldr	r3, [pc, #172]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c92:	4b28      	ldr	r3, [pc, #160]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a26      	ldr	r2, [pc, #152]	@ (8003d3c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d138      	bne.n	8003d1a <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003ca8:	4b25      	ldr	r3, [pc, #148]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003caa:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003cae:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003cb0:	4b23      	ldr	r3, [pc, #140]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cb2:	2240      	movs	r2, #64	@ 0x40
 8003cb4:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003cb6:	4b22      	ldr	r3, [pc, #136]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003cbc:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cc2:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cca:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cd2:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cda:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003cdc:	4b18      	ldr	r3, [pc, #96]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ce2:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003ce4:	4b16      	ldr	r3, [pc, #88]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003cea:	4b15      	ldr	r3, [pc, #84]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cec:	2203      	movs	r2, #3
 8003cee:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003cf6:	4b12      	ldr	r3, [pc, #72]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003cfc:	4b10      	ldr	r3, [pc, #64]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cfe:	4a11      	ldr	r2, [pc, #68]	@ (8003d44 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003d00:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a0e      	ldr	r2, [pc, #56]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d06:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003d08:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8003d0e:	480c      	ldr	r0, [pc, #48]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d10:	f000 fd5e 	bl	80047d0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003d14:	480a      	ldr	r0, [pc, #40]	@ (8003d40 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d16:	f000 fcad 	bl	8004674 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	210e      	movs	r1, #14
 8003d1e:	203c      	movs	r0, #60	@ 0x3c
 8003d20:	f000 fc71 	bl	8004606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003d24:	203c      	movs	r0, #60	@ 0x3c
 8003d26:	f000 fc8a 	bl	800463e <HAL_NVIC_EnableIRQ>
}
 8003d2a:	bf00      	nop
 8003d2c:	3730      	adds	r7, #48	@ 0x30
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40022000 	.word	0x40022000
 8003d3c:	40015c04 	.word	0x40015c04
 8003d40:	20020778 	.word	0x20020778
 8003d44:	40026470 	.word	0x40026470

08003d48 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b0a6      	sub	sp, #152	@ 0x98
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f003 fa7b 	bl	8007254 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d112      	bne.n	8003da2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003d7c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003d80:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003d82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d86:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8003d88:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8003d8c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003d92:	2313      	movs	r3, #19
 8003d94:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003d96:	f107 0314 	add.w	r3, r7, #20
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f002 fe6a 	bl	8006a74 <HAL_RCCEx_PeriphCLKConfig>
 8003da0:	e012      	b.n	8003dc8 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003da2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003da6:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003da8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003dac:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8003dae:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8003db2:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003db4:	2307      	movs	r3, #7
 8003db6:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003dbc:	f107 0314 	add.w	r3, r7, #20
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f002 fe57 	bl	8006a74 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	3798      	adds	r7, #152	@ 0x98
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003dda:	4a2b      	ldr	r2, [pc, #172]	@ (8003e88 <SAIx_Out_Init+0xb8>)
 8003ddc:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003dde:	4b29      	ldr	r3, [pc, #164]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b27      	ldr	r3, [pc, #156]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003dec:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8003dee:	4a25      	ldr	r2, [pc, #148]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8003df4:	4b23      	ldr	r3, [pc, #140]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8003dfa:	4b22      	ldr	r3, [pc, #136]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003e00:	4b20      	ldr	r3, [pc, #128]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003e06:	4b1f      	ldr	r3, [pc, #124]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e08:	2280      	movs	r2, #128	@ 0x80
 8003e0a:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003e12:	4b1c      	ldr	r3, [pc, #112]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003e18:	4b1a      	ldr	r3, [pc, #104]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8003e1e:	4b19      	ldr	r3, [pc, #100]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e24:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003e26:	4b17      	ldr	r3, [pc, #92]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 64; 
 8003e2c:	4b15      	ldr	r3, [pc, #84]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e2e:	2240      	movs	r2, #64	@ 0x40
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8003e32:	4b14      	ldr	r3, [pc, #80]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e34:	2220      	movs	r2, #32
 8003e36:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8003e38:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e3e:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003e40:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003e46:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e48:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003e4c:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003e54:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8003e60:	4b08      	ldr	r3, [pc, #32]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e62:	220f      	movs	r2, #15
 8003e64:	661a      	str	r2, [r3, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8003e66:	4807      	ldr	r0, [pc, #28]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e68:	f003 fc40 	bl	80076ec <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8003e6c:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b04      	ldr	r3, [pc, #16]	@ (8003e84 <SAIx_Out_Init+0xb4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e7a:	601a      	str	r2, [r3, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20020670 	.word	0x20020670
 8003e88:	40015c04 	.word	0x40015c04

08003e8c <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003e90:	4b07      	ldr	r3, [pc, #28]	@ (8003eb0 <SAIx_Out_DeInit+0x24>)
 8003e92:	4a08      	ldr	r2, [pc, #32]	@ (8003eb4 <SAIx_Out_DeInit+0x28>)
 8003e94:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003e96:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <SAIx_Out_DeInit+0x24>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <SAIx_Out_DeInit+0x24>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ea4:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8003ea6:	4802      	ldr	r0, [pc, #8]	@ (8003eb0 <SAIx_Out_DeInit+0x24>)
 8003ea8:	f003 fd9e 	bl	80079e8 <HAL_SAI_DeInit>
}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20020670 	.word	0x20020670
 8003eb4:	40015c04 	.word	0x40015c04

08003eb8 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	68f9      	ldr	r1, [r7, #12]
 8003eca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003ece:	f000 f805 	bl	8003edc <BSP_AUDIO_IN_InitEx>
 8003ed2:	4603      	mov	r3, r0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b089      	sub	sp, #36	@ 0x24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4603      	mov	r3, r0
 8003eea:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8003ef4:	89fb      	ldrh	r3, [r7, #14]
 8003ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003efa:	d006      	beq.n	8003f0a <BSP_AUDIO_IN_InitEx+0x2e>
 8003efc:	89fb      	ldrh	r3, [r7, #14]
 8003efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f02:	d002      	beq.n	8003f0a <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e046      	b.n	8003f98 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8003f0a:	f000 fa09 	bl	8004320 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8003f0e:	2200      	movs	r2, #0
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4824      	ldr	r0, [pc, #144]	@ (8003fa4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003f14:	f7ff ff18 	bl	8003d48 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003f18:	4b22      	ldr	r3, [pc, #136]	@ (8003fa4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003f1a:	4a23      	ldr	r2, [pc, #140]	@ (8003fa8 <BSP_AUDIO_IN_InitEx+0xcc>)
 8003f1c:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8003f1e:	4821      	ldr	r0, [pc, #132]	@ (8003fa4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003f20:	f003 ff48 	bl	8007db4 <HAL_SAI_GetState>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d107      	bne.n	8003f3a <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	481d      	ldr	r0, [pc, #116]	@ (8003fa4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003f2e:	f7ff fe35 	bl	8003b9c <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8003f32:	2100      	movs	r1, #0
 8003f34:	481b      	ldr	r0, [pc, #108]	@ (8003fa4 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003f36:	f000 f88b 	bl	8004050 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8003f3a:	89fb      	ldrh	r3, [r7, #14]
 8003f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f40:	d102      	bne.n	8003f48 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8003f42:	230a      	movs	r3, #10
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e001      	b.n	8003f4c <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8003f48:	2305      	movs	r3, #5
 8003f4a:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	69b9      	ldr	r1, [r7, #24]
 8003f50:	2001      	movs	r0, #1
 8003f52:	f000 f92f 	bl	80041b4 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003f56:	4b15      	ldr	r3, [pc, #84]	@ (8003fac <BSP_AUDIO_IN_InitEx+0xd0>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2034      	movs	r0, #52	@ 0x34
 8003f5c:	4798      	blx	r3
 8003f5e:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f648 1294 	movw	r2, #35220	@ 0x8994
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d109      	bne.n	8003f7e <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003f6a:	4b10      	ldr	r3, [pc, #64]	@ (8003fac <BSP_AUDIO_IN_InitEx+0xd0>)
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	2034      	movs	r0, #52	@ 0x34
 8003f70:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8003f72:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <BSP_AUDIO_IN_InitEx+0xd4>)
 8003f74:	4a0d      	ldr	r2, [pc, #52]	@ (8003fac <BSP_AUDIO_IN_InitEx+0xd0>)
 8003f76:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e001      	b.n	8003f82 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8003f82:	7ffb      	ldrb	r3, [r7, #31]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8003f88:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <BSP_AUDIO_IN_InitEx+0xd4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681c      	ldr	r4, [r3, #0]
 8003f8e:	89f9      	ldrh	r1, [r7, #14]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2264      	movs	r2, #100	@ 0x64
 8003f94:	2034      	movs	r0, #52	@ 0x34
 8003f96:	47a0      	blx	r4
    }
  }
  return ret;
 8003f98:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3724      	adds	r7, #36	@ 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200206f4 	.word	0x200206f4
 8003fa8:	40015c24 	.word	0x40015c24
 8003fac:	20000004 	.word	0x20000004
 8003fb0:	2002066c 	.word	0x2002066c

08003fb4 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4805      	ldr	r0, [pc, #20]	@ (8003fe0 <BSP_AUDIO_IN_Record+0x2c>)
 8003fcc:	f003 fe64 	bl	8007c98 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	b2db      	uxtb	r3, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200206f4 	.word	0x200206f4

08003fe4 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8003fec:	480c      	ldr	r0, [pc, #48]	@ (8004020 <BSP_AUDIO_IN_Stop+0x3c>)
 8003fee:	f003 fd30 	bl	8007a52 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8004024 <BSP_AUDIO_IN_Stop+0x40>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	2034      	movs	r0, #52	@ 0x34
 8003ffc:	4798      	blx	r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e006      	b.n	8004016 <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d102      	bne.n	8004014 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 800400e:	2001      	movs	r0, #1
 8004010:	f000 f9fa 	bl	8004408 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004014:	2300      	movs	r3, #0
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	200206f4 	.word	0x200206f4
 8004024:	2002066c 	.word	0x2002066c

08004028 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004030:	f7fd fc0c 	bl	800184c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8004044:	f7fd fc10 	bl	8001868 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08c      	sub	sp, #48	@ 0x30
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 800405a:	4b50      	ldr	r3, [pc, #320]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	4a4f      	ldr	r2, [pc, #316]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004060:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004064:	6453      	str	r3, [r2, #68]	@ 0x44
 8004066:	4b4d      	ldr	r3, [pc, #308]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8004072:	4b4a      	ldr	r3, [pc, #296]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	4a49      	ldr	r2, [pc, #292]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800407c:	6313      	str	r3, [r2, #48]	@ 0x30
 800407e:	4b47      	ldr	r3, [pc, #284]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800408a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800408e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004090:	2302      	movs	r3, #2
 8004092:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004098:	2302      	movs	r3, #2
 800409a:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 800409c:	230a      	movs	r3, #10
 800409e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80040a0:	f107 031c 	add.w	r3, r7, #28
 80040a4:	4619      	mov	r1, r3
 80040a6:	483e      	ldr	r0, [pc, #248]	@ (80041a0 <BSP_AUDIO_IN_MspInit+0x150>)
 80040a8:	f000 ff44 	bl	8004f34 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 80040ac:	4b3b      	ldr	r3, [pc, #236]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	4a3a      	ldr	r2, [pc, #232]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 80040b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80040b8:	4b38      	ldr	r3, [pc, #224]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80040c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040c8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80040d2:	2302      	movs	r3, #2
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80040d6:	f107 031c 	add.w	r3, r7, #28
 80040da:	4619      	mov	r1, r3
 80040dc:	4831      	ldr	r0, [pc, #196]	@ (80041a4 <BSP_AUDIO_IN_MspInit+0x154>)
 80040de:	f000 ff29 	bl	8004f34 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80040e2:	4b2e      	ldr	r3, [pc, #184]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	4a2d      	ldr	r2, [pc, #180]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 80040e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ee:	4b2b      	ldr	r3, [pc, #172]	@ (800419c <BSP_AUDIO_IN_MspInit+0x14c>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2a      	ldr	r2, [pc, #168]	@ (80041a8 <BSP_AUDIO_IN_MspInit+0x158>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d137      	bne.n	8004174 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004104:	4b29      	ldr	r3, [pc, #164]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004106:	2200      	movs	r2, #0
 8004108:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800410a:	4b28      	ldr	r3, [pc, #160]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004110:	4b26      	ldr	r3, [pc, #152]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004112:	2200      	movs	r2, #0
 8004114:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004116:	4b25      	ldr	r3, [pc, #148]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004118:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800411c:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800411e:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004120:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004124:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004126:	4b21      	ldr	r3, [pc, #132]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004128:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800412c:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800412e:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004134:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004136:	4b1d      	ldr	r3, [pc, #116]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004138:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800413c:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800413e:	4b1b      	ldr	r3, [pc, #108]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004140:	2200      	movs	r2, #0
 8004142:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004144:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004146:	2203      	movs	r2, #3
 8004148:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800414a:	4b18      	ldr	r3, [pc, #96]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 800414c:	2200      	movs	r2, #0
 800414e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004156:	4b15      	ldr	r3, [pc, #84]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004158:	4a15      	ldr	r2, [pc, #84]	@ (80041b0 <BSP_AUDIO_IN_MspInit+0x160>)
 800415a:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a13      	ldr	r2, [pc, #76]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004160:	671a      	str	r2, [r3, #112]	@ 0x70
 8004162:	4a12      	ldr	r2, [pc, #72]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004168:	4810      	ldr	r0, [pc, #64]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 800416a:	f000 fb31 	bl	80047d0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800416e:	480f      	ldr	r0, [pc, #60]	@ (80041ac <BSP_AUDIO_IN_MspInit+0x15c>)
 8004170:	f000 fa80 	bl	8004674 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004174:	2200      	movs	r2, #0
 8004176:	210f      	movs	r1, #15
 8004178:	2046      	movs	r0, #70	@ 0x46
 800417a:	f000 fa44 	bl	8004606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800417e:	2046      	movs	r0, #70	@ 0x46
 8004180:	f000 fa5d 	bl	800463e <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004184:	2200      	movs	r2, #0
 8004186:	210f      	movs	r1, #15
 8004188:	2028      	movs	r0, #40	@ 0x28
 800418a:	f000 fa3c 	bl	8004606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800418e:	2028      	movs	r0, #40	@ 0x28
 8004190:	f000 fa55 	bl	800463e <HAL_NVIC_EnableIRQ>
}
 8004194:	bf00      	nop
 8004196:	3730      	adds	r7, #48	@ 0x30
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	40021800 	.word	0x40021800
 80041a4:	40021c00 	.word	0x40021c00
 80041a8:	40015c24 	.word	0x40015c24
 80041ac:	200207d8 	.word	0x200207d8
 80041b0:	400264b8 	.word	0x400264b8

080041b4 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80041c0:	4b53      	ldr	r3, [pc, #332]	@ (8004310 <SAIx_In_Init+0x15c>)
 80041c2:	4a54      	ldr	r2, [pc, #336]	@ (8004314 <SAIx_In_Init+0x160>)
 80041c4:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80041c6:	4b52      	ldr	r3, [pc, #328]	@ (8004310 <SAIx_In_Init+0x15c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	4b50      	ldr	r3, [pc, #320]	@ (8004310 <SAIx_In_Init+0x15c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80041d4:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80041d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004310 <SAIx_In_Init+0x15c>)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 80041dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004310 <SAIx_In_Init+0x15c>)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80041e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004310 <SAIx_In_Init+0x15c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80041e8:	4b49      	ldr	r3, [pc, #292]	@ (8004310 <SAIx_In_Init+0x15c>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80041ee:	4b48      	ldr	r3, [pc, #288]	@ (8004310 <SAIx_In_Init+0x15c>)
 80041f0:	2280      	movs	r2, #128	@ 0x80
 80041f2:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80041f4:	4b46      	ldr	r3, [pc, #280]	@ (8004310 <SAIx_In_Init+0x15c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80041fa:	4b45      	ldr	r3, [pc, #276]	@ (8004310 <SAIx_In_Init+0x15c>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004200:	4b43      	ldr	r3, [pc, #268]	@ (8004310 <SAIx_In_Init+0x15c>)
 8004202:	2200      	movs	r2, #0
 8004204:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004206:	4b42      	ldr	r3, [pc, #264]	@ (8004310 <SAIx_In_Init+0x15c>)
 8004208:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800420c:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800420e:	4b40      	ldr	r3, [pc, #256]	@ (8004310 <SAIx_In_Init+0x15c>)
 8004210:	2201      	movs	r2, #1
 8004212:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004214:	4b3e      	ldr	r3, [pc, #248]	@ (8004310 <SAIx_In_Init+0x15c>)
 8004216:	2240      	movs	r2, #64	@ 0x40
 8004218:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800421a:	4b3d      	ldr	r3, [pc, #244]	@ (8004310 <SAIx_In_Init+0x15c>)
 800421c:	2220      	movs	r2, #32
 800421e:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004220:	4b3b      	ldr	r3, [pc, #236]	@ (8004310 <SAIx_In_Init+0x15c>)
 8004222:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004226:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004228:	4b39      	ldr	r3, [pc, #228]	@ (8004310 <SAIx_In_Init+0x15c>)
 800422a:	2200      	movs	r2, #0
 800422c:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800422e:	4b38      	ldr	r3, [pc, #224]	@ (8004310 <SAIx_In_Init+0x15c>)
 8004230:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004234:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004236:	4b36      	ldr	r3, [pc, #216]	@ (8004310 <SAIx_In_Init+0x15c>)
 8004238:	2200      	movs	r2, #0
 800423a:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800423c:	4b34      	ldr	r3, [pc, #208]	@ (8004310 <SAIx_In_Init+0x15c>)
 800423e:	2200      	movs	r2, #0
 8004240:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8004242:	4b33      	ldr	r3, [pc, #204]	@ (8004310 <SAIx_In_Init+0x15c>)
 8004244:	2204      	movs	r2, #4
 8004246:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004248:	4a31      	ldr	r2, [pc, #196]	@ (8004310 <SAIx_In_Init+0x15c>)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 800424e:	4830      	ldr	r0, [pc, #192]	@ (8004310 <SAIx_In_Init+0x15c>)
 8004250:	f003 fa4c 	bl	80076ec <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004254:	4b30      	ldr	r3, [pc, #192]	@ (8004318 <SAIx_In_Init+0x164>)
 8004256:	4a31      	ldr	r2, [pc, #196]	@ (800431c <SAIx_In_Init+0x168>)
 8004258:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800425a:	4b2f      	ldr	r3, [pc, #188]	@ (8004318 <SAIx_In_Init+0x164>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b2d      	ldr	r3, [pc, #180]	@ (8004318 <SAIx_In_Init+0x164>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004268:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800426a:	4a2b      	ldr	r2, [pc, #172]	@ (8004318 <SAIx_In_Init+0x164>)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004270:	4b29      	ldr	r3, [pc, #164]	@ (8004318 <SAIx_In_Init+0x164>)
 8004272:	2203      	movs	r2, #3
 8004274:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004276:	4b28      	ldr	r3, [pc, #160]	@ (8004318 <SAIx_In_Init+0x164>)
 8004278:	2200      	movs	r2, #0
 800427a:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800427c:	4b26      	ldr	r3, [pc, #152]	@ (8004318 <SAIx_In_Init+0x164>)
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8004282:	4b25      	ldr	r3, [pc, #148]	@ (8004318 <SAIx_In_Init+0x164>)
 8004284:	2280      	movs	r2, #128	@ 0x80
 8004286:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004288:	4b23      	ldr	r3, [pc, #140]	@ (8004318 <SAIx_In_Init+0x164>)
 800428a:	2200      	movs	r2, #0
 800428c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800428e:	4b22      	ldr	r3, [pc, #136]	@ (8004318 <SAIx_In_Init+0x164>)
 8004290:	2201      	movs	r2, #1
 8004292:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8004294:	4b20      	ldr	r3, [pc, #128]	@ (8004318 <SAIx_In_Init+0x164>)
 8004296:	2201      	movs	r2, #1
 8004298:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800429a:	4b1f      	ldr	r3, [pc, #124]	@ (8004318 <SAIx_In_Init+0x164>)
 800429c:	2200      	movs	r2, #0
 800429e:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80042a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <SAIx_In_Init+0x164>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 80042a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004318 <SAIx_In_Init+0x164>)
 80042a8:	2240      	movs	r2, #64	@ 0x40
 80042aa:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80042ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <SAIx_In_Init+0x164>)
 80042ae:	2220      	movs	r2, #32
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80042b2:	4b19      	ldr	r3, [pc, #100]	@ (8004318 <SAIx_In_Init+0x164>)
 80042b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80042b8:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80042ba:	4b17      	ldr	r3, [pc, #92]	@ (8004318 <SAIx_In_Init+0x164>)
 80042bc:	2200      	movs	r2, #0
 80042be:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80042c0:	4b15      	ldr	r3, [pc, #84]	@ (8004318 <SAIx_In_Init+0x164>)
 80042c2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80042c6:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80042c8:	4b13      	ldr	r3, [pc, #76]	@ (8004318 <SAIx_In_Init+0x164>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80042ce:	4b12      	ldr	r3, [pc, #72]	@ (8004318 <SAIx_In_Init+0x164>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 80042d4:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <SAIx_In_Init+0x164>)
 80042d6:	2204      	movs	r2, #4
 80042d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80042da:	4a0f      	ldr	r2, [pc, #60]	@ (8004318 <SAIx_In_Init+0x164>)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 80042e0:	480d      	ldr	r0, [pc, #52]	@ (8004318 <SAIx_In_Init+0x164>)
 80042e2:	f003 fa03 	bl	80076ec <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80042e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <SAIx_In_Init+0x15c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <SAIx_In_Init+0x15c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80042f4:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 80042f6:	4b08      	ldr	r3, [pc, #32]	@ (8004318 <SAIx_In_Init+0x164>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <SAIx_In_Init+0x164>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004304:	601a      	str	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20020670 	.word	0x20020670
 8004314:	40015c04 	.word	0x40015c04
 8004318:	200206f4 	.word	0x200206f4
 800431c:	40015c24 	.word	0x40015c24

08004320 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004324:	4b07      	ldr	r3, [pc, #28]	@ (8004344 <SAIx_In_DeInit+0x24>)
 8004326:	4a08      	ldr	r2, [pc, #32]	@ (8004348 <SAIx_In_DeInit+0x28>)
 8004328:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800432a:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <SAIx_In_DeInit+0x24>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <SAIx_In_DeInit+0x24>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004338:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 800433a:	4802      	ldr	r0, [pc, #8]	@ (8004344 <SAIx_In_DeInit+0x24>)
 800433c:	f003 fb54 	bl	80079e8 <HAL_SAI_DeInit>
}
 8004340:	bf00      	nop
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200206f4 	.word	0x200206f4
 8004348:	40015c24 	.word	0x40015c24

0800434c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004350:	2003      	movs	r0, #3
 8004352:	f000 f94d 	bl	80045f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004356:	200f      	movs	r0, #15
 8004358:	f000 f806 	bl	8004368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800435c:	f7fd fbe2 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004370:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <HAL_InitTick+0x54>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <HAL_InitTick+0x58>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	4619      	mov	r1, r3
 800437a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800437e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f967 	bl	800465a <HAL_SYSTICK_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e00e      	b.n	80043b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b0f      	cmp	r3, #15
 800439a:	d80a      	bhi.n	80043b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800439c:	2200      	movs	r2, #0
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	f000 f92f 	bl	8004606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a8:	4a06      	ldr	r2, [pc, #24]	@ (80043c4 <HAL_InitTick+0x5c>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	20000000 	.word	0x20000000
 80043c0:	20000048 	.word	0x20000048
 80043c4:	20000044 	.word	0x20000044

080043c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043cc:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <HAL_IncTick+0x20>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <HAL_IncTick+0x24>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	4a04      	ldr	r2, [pc, #16]	@ (80043ec <HAL_IncTick+0x24>)
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000048 	.word	0x20000048
 80043ec:	20020838 	.word	0x20020838

080043f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return uwTick;
 80043f4:	4b03      	ldr	r3, [pc, #12]	@ (8004404 <HAL_GetTick+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20020838 	.word	0x20020838

08004408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004410:	f7ff ffee 	bl	80043f0 <HAL_GetTick>
 8004414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d005      	beq.n	800442e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004422:	4b0a      	ldr	r3, [pc, #40]	@ (800444c <HAL_Delay+0x44>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800442e:	bf00      	nop
 8004430:	f7ff ffde 	bl	80043f0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	429a      	cmp	r2, r3
 800443e:	d8f7      	bhi.n	8004430 <HAL_Delay+0x28>
  {
  }
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000048 	.word	0x20000048

08004450 <__NVIC_SetPriorityGrouping>:
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004460:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <__NVIC_SetPriorityGrouping+0x40>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800446c:	4013      	ands	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004478:	4b06      	ldr	r3, [pc, #24]	@ (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 800447a:	4313      	orrs	r3, r2
 800447c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800447e:	4a04      	ldr	r2, [pc, #16]	@ (8004490 <__NVIC_SetPriorityGrouping+0x40>)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	60d3      	str	r3, [r2, #12]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	e000ed00 	.word	0xe000ed00
 8004494:	05fa0000 	.word	0x05fa0000

08004498 <__NVIC_GetPriorityGrouping>:
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800449c:	4b04      	ldr	r3, [pc, #16]	@ (80044b0 <__NVIC_GetPriorityGrouping+0x18>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	f003 0307 	and.w	r3, r3, #7
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <__NVIC_EnableIRQ>:
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	db0b      	blt.n	80044de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	4907      	ldr	r1, [pc, #28]	@ (80044ec <__NVIC_EnableIRQ+0x38>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2001      	movs	r0, #1
 80044d6:	fa00 f202 	lsl.w	r2, r0, r2
 80044da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <__NVIC_SetPriority>:
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004500:	2b00      	cmp	r3, #0
 8004502:	db0a      	blt.n	800451a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	490c      	ldr	r1, [pc, #48]	@ (800453c <__NVIC_SetPriority+0x4c>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	0112      	lsls	r2, r2, #4
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	440b      	add	r3, r1
 8004514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004518:	e00a      	b.n	8004530 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4908      	ldr	r1, [pc, #32]	@ (8004540 <__NVIC_SetPriority+0x50>)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	3b04      	subs	r3, #4
 8004528:	0112      	lsls	r2, r2, #4
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	440b      	add	r3, r1
 800452e:	761a      	strb	r2, [r3, #24]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000e100 	.word	0xe000e100
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <NVIC_EncodePriority>:
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	@ 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f1c3 0307 	rsb	r3, r3, #7
 800455e:	2b04      	cmp	r3, #4
 8004560:	bf28      	it	cs
 8004562:	2304      	movcs	r3, #4
 8004564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3304      	adds	r3, #4
 800456a:	2b06      	cmp	r3, #6
 800456c:	d902      	bls.n	8004574 <NVIC_EncodePriority+0x30>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3b03      	subs	r3, #3
 8004572:	e000      	b.n	8004576 <NVIC_EncodePriority+0x32>
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004578:	f04f 32ff 	mov.w	r2, #4294967295
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	401a      	ands	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800458c:	f04f 31ff 	mov.w	r1, #4294967295
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	43d9      	mvns	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800459c:	4313      	orrs	r3, r2
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3724      	adds	r7, #36	@ 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045bc:	d301      	bcc.n	80045c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045be:	2301      	movs	r3, #1
 80045c0:	e00f      	b.n	80045e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045c2:	4a0a      	ldr	r2, [pc, #40]	@ (80045ec <SysTick_Config+0x40>)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ca:	210f      	movs	r1, #15
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	f7ff ff8e 	bl	80044f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d4:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <SysTick_Config+0x40>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045da:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <SysTick_Config+0x40>)
 80045dc:	2207      	movs	r2, #7
 80045de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	e000e010 	.word	0xe000e010

080045f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff ff29 	bl	8004450 <__NVIC_SetPriorityGrouping>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	4603      	mov	r3, r0
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004618:	f7ff ff3e 	bl	8004498 <__NVIC_GetPriorityGrouping>
 800461c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	6978      	ldr	r0, [r7, #20]
 8004624:	f7ff ff8e 	bl	8004544 <NVIC_EncodePriority>
 8004628:	4602      	mov	r2, r0
 800462a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462e:	4611      	mov	r1, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff ff5d 	bl	80044f0 <__NVIC_SetPriority>
}
 8004636:	bf00      	nop
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	4603      	mov	r3, r0
 8004646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ff31 	bl	80044b4 <__NVIC_EnableIRQ>
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff ffa2 	bl	80045ac <SysTick_Config>
 8004668:	4603      	mov	r3, r0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004680:	f7ff feb6 	bl	80043f0 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e099      	b.n	80047c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046b0:	e00f      	b.n	80046d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046b2:	f7ff fe9d 	bl	80043f0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d908      	bls.n	80046d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2203      	movs	r2, #3
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e078      	b.n	80047c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e8      	bne.n	80046b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4b38      	ldr	r3, [pc, #224]	@ (80047cc <HAL_DMA_Init+0x158>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	2b04      	cmp	r3, #4
 800472a:	d107      	bne.n	800473c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	4313      	orrs	r3, r2
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0307 	bic.w	r3, r3, #7
 8004752:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	2b04      	cmp	r3, #4
 8004764:	d117      	bne.n	8004796 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00e      	beq.n	8004796 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fb5f 	bl	8004e3c <DMA_CheckFifoParam>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2240      	movs	r2, #64	@ 0x40
 8004788:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004792:	2301      	movs	r3, #1
 8004794:	e016      	b.n	80047c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fb16 	bl	8004dd0 <DMA_CalcBaseAndBitshift>
 80047a4:	4603      	mov	r3, r0
 80047a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ac:	223f      	movs	r2, #63	@ 0x3f
 80047ae:	409a      	lsls	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	f010803f 	.word	0xf010803f

080047d0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e050      	b.n	8004884 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d101      	bne.n	80047f2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
 80047f0:	e048      	b.n	8004884 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2221      	movs	r2, #33	@ 0x21
 8004830:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 facc 	bl	8004dd0 <DMA_CalcBaseAndBitshift>
 8004838:	4603      	mov	r3, r0
 800483a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004840:	223f      	movs	r2, #63	@ 0x3f
 8004842:	409a      	lsls	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_DMA_Start_IT+0x26>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e048      	b.n	8004944 <HAL_DMA_Start_IT+0xb8>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d137      	bne.n	8004936 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 fa4a 	bl	8004d74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	223f      	movs	r2, #63	@ 0x3f
 80048e6:	409a      	lsls	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0216 	orr.w	r2, r2, #22
 80048fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800490a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0208 	orr.w	r2, r2, #8
 8004922:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e005      	b.n	8004942 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800493e:	2302      	movs	r3, #2
 8004940:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004942:	7dfb      	ldrb	r3, [r7, #23]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004958:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800495a:	f7ff fd49 	bl	80043f0 <HAL_GetTick>
 800495e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d008      	beq.n	800497e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2280      	movs	r2, #128	@ 0x80
 8004970:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e052      	b.n	8004a24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0216 	bic.w	r2, r2, #22
 800498c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695a      	ldr	r2, [r3, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800499c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <HAL_DMA_Abort+0x62>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0208 	bic.w	r2, r2, #8
 80049bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049ce:	e013      	b.n	80049f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049d0:	f7ff fd0e 	bl	80043f0 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d90c      	bls.n	80049f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2203      	movs	r2, #3
 80049e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e015      	b.n	8004a24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e4      	bne.n	80049d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0a:	223f      	movs	r2, #63	@ 0x3f
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004a38:	4b8e      	ldr	r3, [pc, #568]	@ (8004c74 <HAL_DMA_IRQHandler+0x248>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a8e      	ldr	r2, [pc, #568]	@ (8004c78 <HAL_DMA_IRQHandler+0x24c>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0a9b      	lsrs	r3, r3, #10
 8004a44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a56:	2208      	movs	r2, #8
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01a      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d013      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a84:	2208      	movs	r2, #8
 8004a86:	409a      	lsls	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a90:	f043 0201 	orr.w	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d012      	beq.n	8004ace <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00b      	beq.n	8004ace <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aba:	2201      	movs	r2, #1
 8004abc:	409a      	lsls	r2, r3
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac6:	f043 0202 	orr.w	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d012      	beq.n	8004b04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af0:	2204      	movs	r2, #4
 8004af2:	409a      	lsls	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afc:	f043 0204 	orr.w	r2, r3, #4
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b08:	2210      	movs	r2, #16
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d043      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d03c      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b26:	2210      	movs	r2, #16
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d018      	beq.n	8004b6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d108      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d024      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
 8004b5a:	e01f      	b.n	8004b9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
 8004b6c:	e016      	b.n	8004b9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d107      	bne.n	8004b8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0208 	bic.w	r2, r2, #8
 8004b8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 808f 	beq.w	8004ccc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8087 	beq.w	8004ccc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d136      	bne.n	8004c44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0216 	bic.w	r2, r2, #22
 8004be4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695a      	ldr	r2, [r3, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <HAL_DMA_IRQHandler+0x1da>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0208 	bic.w	r2, r2, #8
 8004c14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1a:	223f      	movs	r2, #63	@ 0x3f
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d07e      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
        }
        return;
 8004c42:	e079      	b.n	8004d38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01d      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10d      	bne.n	8004c7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d031      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
 8004c70:	e02c      	b.n	8004ccc <HAL_DMA_IRQHandler+0x2a0>
 8004c72:	bf00      	nop
 8004c74:	20000000 	.word	0x20000000
 8004c78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d023      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
 8004c8c:	e01e      	b.n	8004ccc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10f      	bne.n	8004cbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0210 	bic.w	r2, r2, #16
 8004caa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d032      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d022      	beq.n	8004d26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2205      	movs	r2, #5
 8004ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d307      	bcc.n	8004d14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f2      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0x2cc>
 8004d12:	e000      	b.n	8004d16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
 8004d36:	e000      	b.n	8004d3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d38:	bf00      	nop
    }
  }
}
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d4e:	b2db      	uxtb	r3, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b40      	cmp	r3, #64	@ 0x40
 8004da0:	d108      	bne.n	8004db4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004db2:	e007      	b.n	8004dc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	60da      	str	r2, [r3, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	3b10      	subs	r3, #16
 8004de0:	4a13      	ldr	r2, [pc, #76]	@ (8004e30 <DMA_CalcBaseAndBitshift+0x60>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dea:	4a12      	ldr	r2, [pc, #72]	@ (8004e34 <DMA_CalcBaseAndBitshift+0x64>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d908      	bls.n	8004e10 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <DMA_CalcBaseAndBitshift+0x68>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	1d1a      	adds	r2, r3, #4
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e0e:	e006      	b.n	8004e1e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b08      	ldr	r3, [pc, #32]	@ (8004e38 <DMA_CalcBaseAndBitshift+0x68>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	aaaaaaab 	.word	0xaaaaaaab
 8004e34:	0800b7d0 	.word	0x0800b7d0
 8004e38:	fffffc00 	.word	0xfffffc00

08004e3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11f      	bne.n	8004e96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d856      	bhi.n	8004f0a <DMA_CheckFifoParam+0xce>
 8004e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e64 <DMA_CheckFifoParam+0x28>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004e75 	.word	0x08004e75
 8004e68:	08004e87 	.word	0x08004e87
 8004e6c:	08004e75 	.word	0x08004e75
 8004e70:	08004f0b 	.word	0x08004f0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d046      	beq.n	8004f0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e84:	e043      	b.n	8004f0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e8e:	d140      	bne.n	8004f12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e94:	e03d      	b.n	8004f12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e9e:	d121      	bne.n	8004ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d837      	bhi.n	8004f16 <DMA_CheckFifoParam+0xda>
 8004ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <DMA_CheckFifoParam+0x70>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ebd 	.word	0x08004ebd
 8004eb0:	08004ec3 	.word	0x08004ec3
 8004eb4:	08004ebd 	.word	0x08004ebd
 8004eb8:	08004ed5 	.word	0x08004ed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e030      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d025      	beq.n	8004f1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed2:	e022      	b.n	8004f1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004edc:	d11f      	bne.n	8004f1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ee2:	e01c      	b.n	8004f1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d903      	bls.n	8004ef2 <DMA_CheckFifoParam+0xb6>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d003      	beq.n	8004ef8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ef0:	e018      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef6:	e015      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e00b      	b.n	8004f22 <DMA_CheckFifoParam+0xe6>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e00a      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e008      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f12:	bf00      	nop
 8004f14:	e006      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f16:	bf00      	nop
 8004f18:	e004      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f22:	bf00      	nop
    }
  } 
  
  return status; 
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	@ 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	e175      	b.n	8005240 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f54:	2201      	movs	r2, #1
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	f040 8164 	bne.w	800523a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d005      	beq.n	8004f8a <HAL_GPIO_Init+0x56>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d130      	bne.n	8004fec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	2203      	movs	r2, #3
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	f003 0201 	and.w	r2, r3, #1
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d017      	beq.n	8005028 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	2203      	movs	r2, #3
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d123      	bne.n	800507c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	08da      	lsrs	r2, r3, #3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3208      	adds	r2, #8
 800503c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	220f      	movs	r2, #15
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	08da      	lsrs	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3208      	adds	r2, #8
 8005076:	69b9      	ldr	r1, [r7, #24]
 8005078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2203      	movs	r2, #3
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 0203 	and.w	r2, r3, #3
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80be 	beq.w	800523a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050be:	4b66      	ldr	r3, [pc, #408]	@ (8005258 <HAL_GPIO_Init+0x324>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c2:	4a65      	ldr	r2, [pc, #404]	@ (8005258 <HAL_GPIO_Init+0x324>)
 80050c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80050ca:	4b63      	ldr	r3, [pc, #396]	@ (8005258 <HAL_GPIO_Init+0x324>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050d6:	4a61      	ldr	r2, [pc, #388]	@ (800525c <HAL_GPIO_Init+0x328>)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	220f      	movs	r2, #15
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a58      	ldr	r2, [pc, #352]	@ (8005260 <HAL_GPIO_Init+0x32c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d037      	beq.n	8005172 <HAL_GPIO_Init+0x23e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a57      	ldr	r2, [pc, #348]	@ (8005264 <HAL_GPIO_Init+0x330>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d031      	beq.n	800516e <HAL_GPIO_Init+0x23a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a56      	ldr	r2, [pc, #344]	@ (8005268 <HAL_GPIO_Init+0x334>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02b      	beq.n	800516a <HAL_GPIO_Init+0x236>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a55      	ldr	r2, [pc, #340]	@ (800526c <HAL_GPIO_Init+0x338>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d025      	beq.n	8005166 <HAL_GPIO_Init+0x232>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a54      	ldr	r2, [pc, #336]	@ (8005270 <HAL_GPIO_Init+0x33c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01f      	beq.n	8005162 <HAL_GPIO_Init+0x22e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a53      	ldr	r2, [pc, #332]	@ (8005274 <HAL_GPIO_Init+0x340>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d019      	beq.n	800515e <HAL_GPIO_Init+0x22a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a52      	ldr	r2, [pc, #328]	@ (8005278 <HAL_GPIO_Init+0x344>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_GPIO_Init+0x226>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a51      	ldr	r2, [pc, #324]	@ (800527c <HAL_GPIO_Init+0x348>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00d      	beq.n	8005156 <HAL_GPIO_Init+0x222>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a50      	ldr	r2, [pc, #320]	@ (8005280 <HAL_GPIO_Init+0x34c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <HAL_GPIO_Init+0x21e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a4f      	ldr	r2, [pc, #316]	@ (8005284 <HAL_GPIO_Init+0x350>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <HAL_GPIO_Init+0x21a>
 800514a:	2309      	movs	r3, #9
 800514c:	e012      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800514e:	230a      	movs	r3, #10
 8005150:	e010      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005152:	2308      	movs	r3, #8
 8005154:	e00e      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005156:	2307      	movs	r3, #7
 8005158:	e00c      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800515a:	2306      	movs	r3, #6
 800515c:	e00a      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800515e:	2305      	movs	r3, #5
 8005160:	e008      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005162:	2304      	movs	r3, #4
 8005164:	e006      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005166:	2303      	movs	r3, #3
 8005168:	e004      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800516a:	2302      	movs	r3, #2
 800516c:	e002      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005172:	2300      	movs	r3, #0
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	f002 0203 	and.w	r2, r2, #3
 800517a:	0092      	lsls	r2, r2, #2
 800517c:	4093      	lsls	r3, r2
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005184:	4935      	ldr	r1, [pc, #212]	@ (800525c <HAL_GPIO_Init+0x328>)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	089b      	lsrs	r3, r3, #2
 800518a:	3302      	adds	r3, #2
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005192:	4b3d      	ldr	r3, [pc, #244]	@ (8005288 <HAL_GPIO_Init+0x354>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	43db      	mvns	r3, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051b6:	4a34      	ldr	r2, [pc, #208]	@ (8005288 <HAL_GPIO_Init+0x354>)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051bc:	4b32      	ldr	r3, [pc, #200]	@ (8005288 <HAL_GPIO_Init+0x354>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051e0:	4a29      	ldr	r2, [pc, #164]	@ (8005288 <HAL_GPIO_Init+0x354>)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051e6:	4b28      	ldr	r3, [pc, #160]	@ (8005288 <HAL_GPIO_Init+0x354>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800520a:	4a1f      	ldr	r2, [pc, #124]	@ (8005288 <HAL_GPIO_Init+0x354>)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005210:	4b1d      	ldr	r3, [pc, #116]	@ (8005288 <HAL_GPIO_Init+0x354>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005234:	4a14      	ldr	r2, [pc, #80]	@ (8005288 <HAL_GPIO_Init+0x354>)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	f67f ae86 	bls.w	8004f54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	3724      	adds	r7, #36	@ 0x24
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40023800 	.word	0x40023800
 800525c:	40013800 	.word	0x40013800
 8005260:	40020000 	.word	0x40020000
 8005264:	40020400 	.word	0x40020400
 8005268:	40020800 	.word	0x40020800
 800526c:	40020c00 	.word	0x40020c00
 8005270:	40021000 	.word	0x40021000
 8005274:	40021400 	.word	0x40021400
 8005278:	40021800 	.word	0x40021800
 800527c:	40021c00 	.word	0x40021c00
 8005280:	40022000 	.word	0x40022000
 8005284:	40022400 	.word	0x40022400
 8005288:	40013c00 	.word	0x40013c00

0800528c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005296:	2300      	movs	r3, #0
 8005298:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800529e:	2300      	movs	r3, #0
 80052a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e0d9      	b.n	800545c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80052a8:	2201      	movs	r2, #1
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4013      	ands	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	429a      	cmp	r2, r3
 80052c0:	f040 80c9 	bne.w	8005456 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80052c4:	4a6b      	ldr	r2, [pc, #428]	@ (8005474 <HAL_GPIO_DeInit+0x1e8>)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	089b      	lsrs	r3, r3, #2
 80052ca:	3302      	adds	r3, #2
 80052cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	220f      	movs	r2, #15
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a63      	ldr	r2, [pc, #396]	@ (8005478 <HAL_GPIO_DeInit+0x1ec>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d037      	beq.n	800535e <HAL_GPIO_DeInit+0xd2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a62      	ldr	r2, [pc, #392]	@ (800547c <HAL_GPIO_DeInit+0x1f0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d031      	beq.n	800535a <HAL_GPIO_DeInit+0xce>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a61      	ldr	r2, [pc, #388]	@ (8005480 <HAL_GPIO_DeInit+0x1f4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d02b      	beq.n	8005356 <HAL_GPIO_DeInit+0xca>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a60      	ldr	r2, [pc, #384]	@ (8005484 <HAL_GPIO_DeInit+0x1f8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d025      	beq.n	8005352 <HAL_GPIO_DeInit+0xc6>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a5f      	ldr	r2, [pc, #380]	@ (8005488 <HAL_GPIO_DeInit+0x1fc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01f      	beq.n	800534e <HAL_GPIO_DeInit+0xc2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a5e      	ldr	r2, [pc, #376]	@ (800548c <HAL_GPIO_DeInit+0x200>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d019      	beq.n	800534a <HAL_GPIO_DeInit+0xbe>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a5d      	ldr	r2, [pc, #372]	@ (8005490 <HAL_GPIO_DeInit+0x204>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_GPIO_DeInit+0xba>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a5c      	ldr	r2, [pc, #368]	@ (8005494 <HAL_GPIO_DeInit+0x208>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00d      	beq.n	8005342 <HAL_GPIO_DeInit+0xb6>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a5b      	ldr	r2, [pc, #364]	@ (8005498 <HAL_GPIO_DeInit+0x20c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <HAL_GPIO_DeInit+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a5a      	ldr	r2, [pc, #360]	@ (800549c <HAL_GPIO_DeInit+0x210>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d101      	bne.n	800533a <HAL_GPIO_DeInit+0xae>
 8005336:	2309      	movs	r3, #9
 8005338:	e012      	b.n	8005360 <HAL_GPIO_DeInit+0xd4>
 800533a:	230a      	movs	r3, #10
 800533c:	e010      	b.n	8005360 <HAL_GPIO_DeInit+0xd4>
 800533e:	2308      	movs	r3, #8
 8005340:	e00e      	b.n	8005360 <HAL_GPIO_DeInit+0xd4>
 8005342:	2307      	movs	r3, #7
 8005344:	e00c      	b.n	8005360 <HAL_GPIO_DeInit+0xd4>
 8005346:	2306      	movs	r3, #6
 8005348:	e00a      	b.n	8005360 <HAL_GPIO_DeInit+0xd4>
 800534a:	2305      	movs	r3, #5
 800534c:	e008      	b.n	8005360 <HAL_GPIO_DeInit+0xd4>
 800534e:	2304      	movs	r3, #4
 8005350:	e006      	b.n	8005360 <HAL_GPIO_DeInit+0xd4>
 8005352:	2303      	movs	r3, #3
 8005354:	e004      	b.n	8005360 <HAL_GPIO_DeInit+0xd4>
 8005356:	2302      	movs	r3, #2
 8005358:	e002      	b.n	8005360 <HAL_GPIO_DeInit+0xd4>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <HAL_GPIO_DeInit+0xd4>
 800535e:	2300      	movs	r3, #0
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	f002 0203 	and.w	r2, r2, #3
 8005366:	0092      	lsls	r2, r2, #2
 8005368:	4093      	lsls	r3, r2
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	429a      	cmp	r2, r3
 800536e:	d132      	bne.n	80053d6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005370:	4b4b      	ldr	r3, [pc, #300]	@ (80054a0 <HAL_GPIO_DeInit+0x214>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	43db      	mvns	r3, r3
 8005378:	4949      	ldr	r1, [pc, #292]	@ (80054a0 <HAL_GPIO_DeInit+0x214>)
 800537a:	4013      	ands	r3, r2
 800537c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800537e:	4b48      	ldr	r3, [pc, #288]	@ (80054a0 <HAL_GPIO_DeInit+0x214>)
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	43db      	mvns	r3, r3
 8005386:	4946      	ldr	r1, [pc, #280]	@ (80054a0 <HAL_GPIO_DeInit+0x214>)
 8005388:	4013      	ands	r3, r2
 800538a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800538c:	4b44      	ldr	r3, [pc, #272]	@ (80054a0 <HAL_GPIO_DeInit+0x214>)
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	43db      	mvns	r3, r3
 8005394:	4942      	ldr	r1, [pc, #264]	@ (80054a0 <HAL_GPIO_DeInit+0x214>)
 8005396:	4013      	ands	r3, r2
 8005398:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800539a:	4b41      	ldr	r3, [pc, #260]	@ (80054a0 <HAL_GPIO_DeInit+0x214>)
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	493f      	ldr	r1, [pc, #252]	@ (80054a0 <HAL_GPIO_DeInit+0x214>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	220f      	movs	r2, #15
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80053b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005474 <HAL_GPIO_DeInit+0x1e8>)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	089b      	lsrs	r3, r3, #2
 80053be:	3302      	adds	r3, #2
 80053c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	43da      	mvns	r2, r3
 80053c8:	482a      	ldr	r0, [pc, #168]	@ (8005474 <HAL_GPIO_DeInit+0x1e8>)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	089b      	lsrs	r3, r3, #2
 80053ce:	400a      	ands	r2, r1
 80053d0:	3302      	adds	r3, #2
 80053d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	2103      	movs	r1, #3
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	401a      	ands	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	08da      	lsrs	r2, r3, #3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3208      	adds	r2, #8
 80053f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	220f      	movs	r2, #15
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	43db      	mvns	r3, r3
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	08d2      	lsrs	r2, r2, #3
 800540c:	4019      	ands	r1, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3208      	adds	r2, #8
 8005412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	2103      	movs	r1, #3
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	43db      	mvns	r3, r3
 8005426:	401a      	ands	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	2101      	movs	r1, #1
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	401a      	ands	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	2103      	movs	r1, #3
 800544a:	fa01 f303 	lsl.w	r3, r1, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	401a      	ands	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	3301      	adds	r3, #1
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b0f      	cmp	r3, #15
 8005460:	f67f af22 	bls.w	80052a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40013800 	.word	0x40013800
 8005478:	40020000 	.word	0x40020000
 800547c:	40020400 	.word	0x40020400
 8005480:	40020800 	.word	0x40020800
 8005484:	40020c00 	.word	0x40020c00
 8005488:	40021000 	.word	0x40021000
 800548c:	40021400 	.word	0x40021400
 8005490:	40021800 	.word	0x40021800
 8005494:	40021c00 	.word	0x40021c00
 8005498:	40022000 	.word	0x40022000
 800549c:	40022400 	.word	0x40022400
 80054a0:	40013c00 	.word	0x40013c00

080054a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	887b      	ldrh	r3, [r7, #2]
 80054b6:	4013      	ands	r3, r2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
 80054c0:	e001      	b.n	80054c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054de:	4b08      	ldr	r3, [pc, #32]	@ (8005500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d006      	beq.n	80054f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054ea:	4a05      	ldr	r2, [pc, #20]	@ (8005500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fc f966 	bl	80017c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40013c00 	.word	0x40013c00

08005504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e08b      	b.n	800562e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8b5 	bl	800569a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2224      	movs	r2, #36	@ 0x24
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005554:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005564:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d107      	bne.n	800557e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	e006      	b.n	800558c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800558a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d108      	bne.n	80055a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	e007      	b.n	80055b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005638 <HAL_I2C_Init+0x134>)
 80055c2:	430b      	orrs	r3, r1
 80055c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69d9      	ldr	r1, [r3, #28]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1a      	ldr	r2, [r3, #32]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	02008000 	.word	0x02008000

0800563c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e021      	b.n	8005692 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2224      	movs	r2, #36	@ 0x24
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f821 	bl	80056ae <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	817b      	strh	r3, [r7, #10]
 80056d6:	460b      	mov	r3, r1
 80056d8:	813b      	strh	r3, [r7, #8]
 80056da:	4613      	mov	r3, r2
 80056dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	f040 80f9 	bne.w	80058de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <HAL_I2C_Mem_Write+0x34>
 80056f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d105      	bne.n	8005704 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0ed      	b.n	80058e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_I2C_Mem_Write+0x4e>
 800570e:	2302      	movs	r3, #2
 8005710:	e0e6      	b.n	80058e0 <HAL_I2C_Mem_Write+0x21c>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800571a:	f7fe fe69 	bl	80043f0 <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	2319      	movs	r3, #25
 8005726:	2201      	movs	r2, #1
 8005728:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fad1 	bl	8005cd4 <I2C_WaitOnFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0d1      	b.n	80058e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2221      	movs	r2, #33	@ 0x21
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2240      	movs	r2, #64	@ 0x40
 8005748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a3a      	ldr	r2, [r7, #32]
 8005756:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800575c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005764:	88f8      	ldrh	r0, [r7, #6]
 8005766:	893a      	ldrh	r2, [r7, #8]
 8005768:	8979      	ldrh	r1, [r7, #10]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	4603      	mov	r3, r0
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f9e1 	bl	8005b3c <I2C_RequestMemoryWrite>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0a9      	b.n	80058e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2bff      	cmp	r3, #255	@ 0xff
 8005794:	d90e      	bls.n	80057b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	22ff      	movs	r2, #255	@ 0xff
 800579a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	8979      	ldrh	r1, [r7, #10]
 80057a4:	2300      	movs	r3, #0
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fc55 	bl	800605c <I2C_TransferConfig>
 80057b2:	e00f      	b.n	80057d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	8979      	ldrh	r1, [r7, #10]
 80057c6:	2300      	movs	r3, #0
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fc44 	bl	800605c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fad4 	bl	8005d86 <I2C_WaitOnTXISFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e07b      	b.n	80058e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	781a      	ldrb	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d034      	beq.n	800588c <HAL_I2C_Mem_Write+0x1c8>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005826:	2b00      	cmp	r3, #0
 8005828:	d130      	bne.n	800588c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	2200      	movs	r2, #0
 8005832:	2180      	movs	r1, #128	@ 0x80
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 fa4d 	bl	8005cd4 <I2C_WaitOnFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e04d      	b.n	80058e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	2bff      	cmp	r3, #255	@ 0xff
 800584c:	d90e      	bls.n	800586c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	22ff      	movs	r2, #255	@ 0xff
 8005852:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005858:	b2da      	uxtb	r2, r3
 800585a:	8979      	ldrh	r1, [r7, #10]
 800585c:	2300      	movs	r3, #0
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fbf9 	bl	800605c <I2C_TransferConfig>
 800586a:	e00f      	b.n	800588c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800587a:	b2da      	uxtb	r2, r3
 800587c:	8979      	ldrh	r1, [r7, #10]
 800587e:	2300      	movs	r3, #0
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fbe8 	bl	800605c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d19e      	bne.n	80057d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 faba 	bl	8005e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e01a      	b.n	80058e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2220      	movs	r2, #32
 80058b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6859      	ldr	r1, [r3, #4]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b0a      	ldr	r3, [pc, #40]	@ (80058e8 <HAL_I2C_Mem_Write+0x224>)
 80058be:	400b      	ands	r3, r1
 80058c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2302      	movs	r3, #2
  }
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	fe00e800 	.word	0xfe00e800

080058ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	817b      	strh	r3, [r7, #10]
 80058fe:	460b      	mov	r3, r1
 8005900:	813b      	strh	r3, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b20      	cmp	r3, #32
 8005910:	f040 80fd 	bne.w	8005b0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_I2C_Mem_Read+0x34>
 800591a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d105      	bne.n	800592c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005926:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0f1      	b.n	8005b10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_I2C_Mem_Read+0x4e>
 8005936:	2302      	movs	r3, #2
 8005938:	e0ea      	b.n	8005b10 <HAL_I2C_Mem_Read+0x224>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005942:	f7fe fd55 	bl	80043f0 <HAL_GetTick>
 8005946:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2319      	movs	r3, #25
 800594e:	2201      	movs	r2, #1
 8005950:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 f9bd 	bl	8005cd4 <I2C_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e0d5      	b.n	8005b10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2222      	movs	r2, #34	@ 0x22
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2240      	movs	r2, #64	@ 0x40
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a3a      	ldr	r2, [r7, #32]
 800597e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005984:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800598c:	88f8      	ldrh	r0, [r7, #6]
 800598e:	893a      	ldrh	r2, [r7, #8]
 8005990:	8979      	ldrh	r1, [r7, #10]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	4603      	mov	r3, r0
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f921 	bl	8005be4 <I2C_RequestMemoryRead>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0ad      	b.n	8005b10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2bff      	cmp	r3, #255	@ 0xff
 80059bc:	d90e      	bls.n	80059dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	8979      	ldrh	r1, [r7, #10]
 80059cc:	4b52      	ldr	r3, [pc, #328]	@ (8005b18 <HAL_I2C_Mem_Read+0x22c>)
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fb41 	bl	800605c <I2C_TransferConfig>
 80059da:	e00f      	b.n	80059fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	8979      	ldrh	r1, [r7, #10]
 80059ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005b18 <HAL_I2C_Mem_Read+0x22c>)
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 fb30 	bl	800605c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	2200      	movs	r2, #0
 8005a04:	2104      	movs	r1, #4
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f964 	bl	8005cd4 <I2C_WaitOnFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e07c      	b.n	8005b10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d034      	beq.n	8005abc <HAL_I2C_Mem_Read+0x1d0>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d130      	bne.n	8005abc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a60:	2200      	movs	r2, #0
 8005a62:	2180      	movs	r1, #128	@ 0x80
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f935 	bl	8005cd4 <I2C_WaitOnFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e04d      	b.n	8005b10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2bff      	cmp	r3, #255	@ 0xff
 8005a7c:	d90e      	bls.n	8005a9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	8979      	ldrh	r1, [r7, #10]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fae1 	bl	800605c <I2C_TransferConfig>
 8005a9a:	e00f      	b.n	8005abc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	8979      	ldrh	r1, [r7, #10]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fad0 	bl	800605c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d19a      	bne.n	80059fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f9a2 	bl	8005e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e01a      	b.n	8005b10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6859      	ldr	r1, [r3, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <HAL_I2C_Mem_Read+0x230>)
 8005aee:	400b      	ands	r3, r1
 8005af0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	80002400 	.word	0x80002400
 8005b1c:	fe00e800 	.word	0xfe00e800

08005b20 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b2e:	b2db      	uxtb	r3, r3
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	4608      	mov	r0, r1
 8005b46:	4611      	mov	r1, r2
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	817b      	strh	r3, [r7, #10]
 8005b4e:	460b      	mov	r3, r1
 8005b50:	813b      	strh	r3, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	8979      	ldrh	r1, [r7, #10]
 8005b5c:	4b20      	ldr	r3, [pc, #128]	@ (8005be0 <I2C_RequestMemoryWrite+0xa4>)
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fa79 	bl	800605c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	69b9      	ldr	r1, [r7, #24]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f909 	bl	8005d86 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e02c      	b.n	8005bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d105      	bne.n	8005b90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b84:	893b      	ldrh	r3, [r7, #8]
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b8e:	e015      	b.n	8005bbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b90:	893b      	ldrh	r3, [r7, #8]
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	69b9      	ldr	r1, [r7, #24]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f8ef 	bl	8005d86 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e012      	b.n	8005bd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb2:	893b      	ldrh	r3, [r7, #8]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2180      	movs	r1, #128	@ 0x80
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f884 	bl	8005cd4 <I2C_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	80002000 	.word	0x80002000

08005be4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	4608      	mov	r0, r1
 8005bee:	4611      	mov	r1, r2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	817b      	strh	r3, [r7, #10]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	813b      	strh	r3, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	8979      	ldrh	r1, [r7, #10]
 8005c04:	4b20      	ldr	r3, [pc, #128]	@ (8005c88 <I2C_RequestMemoryRead+0xa4>)
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fa26 	bl	800605c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c10:	69fa      	ldr	r2, [r7, #28]
 8005c12:	69b9      	ldr	r1, [r7, #24]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f8b6 	bl	8005d86 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e02c      	b.n	8005c7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d105      	bne.n	8005c36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c2a:	893b      	ldrh	r3, [r7, #8]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c34:	e015      	b.n	8005c62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c36:	893b      	ldrh	r3, [r7, #8]
 8005c38:	0a1b      	lsrs	r3, r3, #8
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	69b9      	ldr	r1, [r7, #24]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f89c 	bl	8005d86 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e012      	b.n	8005c7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c58:	893b      	ldrh	r3, [r7, #8]
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2140      	movs	r1, #64	@ 0x40
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 f831 	bl	8005cd4 <I2C_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	80002000 	.word	0x80002000

08005c8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d103      	bne.n	8005caa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d007      	beq.n	8005cc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f042 0201 	orr.w	r2, r2, #1
 8005cc6:	619a      	str	r2, [r3, #24]
  }
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce4:	e03b      	b.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f8d6 	bl	8005e9c <I2C_IsErrorOccurred>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e041      	b.n	8005d7e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d02d      	beq.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d02:	f7fe fb75 	bl	80043f0 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d302      	bcc.n	8005d18 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d122      	bne.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699a      	ldr	r2, [r3, #24]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	4013      	ands	r3, r2
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	bf0c      	ite	eq
 8005d28:	2301      	moveq	r3, #1
 8005d2a:	2300      	movne	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d113      	bne.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3a:	f043 0220 	orr.w	r2, r3, #32
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e00f      	b.n	8005d7e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699a      	ldr	r2, [r3, #24]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4013      	ands	r3, r2
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	bf0c      	ite	eq
 8005d6e:	2301      	moveq	r3, #1
 8005d70:	2300      	movne	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d0b4      	beq.n	8005ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d92:	e033      	b.n	8005dfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f87f 	bl	8005e9c <I2C_IsErrorOccurred>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e031      	b.n	8005e0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d025      	beq.n	8005dfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db0:	f7fe fb1e 	bl	80043f0 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d302      	bcc.n	8005dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d11a      	bne.n	8005dfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d013      	beq.n	8005dfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd8:	f043 0220 	orr.w	r2, r3, #32
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e007      	b.n	8005e0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d1c4      	bne.n	8005d94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e20:	e02f      	b.n	8005e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f838 	bl	8005e9c <I2C_IsErrorOccurred>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e02d      	b.n	8005e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e36:	f7fe fadb 	bl	80043f0 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d302      	bcc.n	8005e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d11a      	bne.n	8005e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d013      	beq.n	8005e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	f043 0220 	orr.w	r2, r3, #32
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e007      	b.n	8005e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d1c8      	bne.n	8005e22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	@ 0x28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d068      	beq.n	8005f9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2210      	movs	r2, #16
 8005ece:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ed0:	e049      	b.n	8005f66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d045      	beq.n	8005f66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005eda:	f7fe fa89 	bl	80043f0 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d302      	bcc.n	8005ef0 <I2C_IsErrorOccurred+0x54>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d13a      	bne.n	8005f66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005efa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f12:	d121      	bne.n	8005f58 <I2C_IsErrorOccurred+0xbc>
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f1a:	d01d      	beq.n	8005f58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f1c:	7cfb      	ldrb	r3, [r7, #19]
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d01a      	beq.n	8005f58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f32:	f7fe fa5d 	bl	80043f0 <HAL_GetTick>
 8005f36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f38:	e00e      	b.n	8005f58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f3a:	f7fe fa59 	bl	80043f0 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b19      	cmp	r3, #25
 8005f46:	d907      	bls.n	8005f58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	f043 0320 	orr.w	r3, r3, #32
 8005f4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005f56:	e006      	b.n	8005f66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f003 0320 	and.w	r3, r3, #32
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	d1e9      	bne.n	8005f3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d003      	beq.n	8005f7c <I2C_IsErrorOccurred+0xe0>
 8005f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0aa      	beq.n	8005ed2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	f043 0304 	orr.w	r3, r3, #4
 8005f92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00b      	beq.n	8005fc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00b      	beq.n	8005fe6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	f043 0308 	orr.w	r3, r3, #8
 8005fd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	f043 0302 	orr.w	r3, r3, #2
 8005ff6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006000:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01c      	beq.n	800604a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fe3b 	bl	8005c8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6859      	ldr	r1, [r3, #4]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <I2C_IsErrorOccurred+0x1bc>)
 8006022:	400b      	ands	r3, r1
 8006024:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	431a      	orrs	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800604a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800604e:	4618      	mov	r0, r3
 8006050:	3728      	adds	r7, #40	@ 0x28
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	fe00e800 	.word	0xfe00e800

0800605c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	607b      	str	r3, [r7, #4]
 8006066:	460b      	mov	r3, r1
 8006068:	817b      	strh	r3, [r7, #10]
 800606a:	4613      	mov	r3, r2
 800606c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800606e:	897b      	ldrh	r3, [r7, #10]
 8006070:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006074:	7a7b      	ldrb	r3, [r7, #9]
 8006076:	041b      	lsls	r3, r3, #16
 8006078:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800607c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	4313      	orrs	r3, r2
 8006086:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800608a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	0d5b      	lsrs	r3, r3, #21
 8006096:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800609a:	4b08      	ldr	r3, [pc, #32]	@ (80060bc <I2C_TransferConfig+0x60>)
 800609c:	430b      	orrs	r3, r1
 800609e:	43db      	mvns	r3, r3
 80060a0:	ea02 0103 	and.w	r1, r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	03ff63ff 	.word	0x03ff63ff

080060c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80060ca:	4b23      	ldr	r3, [pc, #140]	@ (8006158 <HAL_PWREx_EnableOverDrive+0x98>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ce:	4a22      	ldr	r2, [pc, #136]	@ (8006158 <HAL_PWREx_EnableOverDrive+0x98>)
 80060d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80060d6:	4b20      	ldr	r3, [pc, #128]	@ (8006158 <HAL_PWREx_EnableOverDrive+0x98>)
 80060d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80060e2:	4b1e      	ldr	r3, [pc, #120]	@ (800615c <HAL_PWREx_EnableOverDrive+0x9c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1d      	ldr	r2, [pc, #116]	@ (800615c <HAL_PWREx_EnableOverDrive+0x9c>)
 80060e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060ee:	f7fe f97f 	bl	80043f0 <HAL_GetTick>
 80060f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060f4:	e009      	b.n	800610a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060f6:	f7fe f97b 	bl	80043f0 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006104:	d901      	bls.n	800610a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e022      	b.n	8006150 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800610a:	4b14      	ldr	r3, [pc, #80]	@ (800615c <HAL_PWREx_EnableOverDrive+0x9c>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006116:	d1ee      	bne.n	80060f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006118:	4b10      	ldr	r3, [pc, #64]	@ (800615c <HAL_PWREx_EnableOverDrive+0x9c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a0f      	ldr	r2, [pc, #60]	@ (800615c <HAL_PWREx_EnableOverDrive+0x9c>)
 800611e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006122:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006124:	f7fe f964 	bl	80043f0 <HAL_GetTick>
 8006128:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800612a:	e009      	b.n	8006140 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800612c:	f7fe f960 	bl	80043f0 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800613a:	d901      	bls.n	8006140 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e007      	b.n	8006150 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006140:	4b06      	ldr	r3, [pc, #24]	@ (800615c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800614c:	d1ee      	bne.n	800612c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40023800 	.word	0x40023800
 800615c:	40007000 	.word	0x40007000

08006160 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006168:	2300      	movs	r3, #0
 800616a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e291      	b.n	800669a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8087 	beq.w	8006292 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006184:	4b96      	ldr	r3, [pc, #600]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b04      	cmp	r3, #4
 800618e:	d00c      	beq.n	80061aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006190:	4b93      	ldr	r3, [pc, #588]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 030c 	and.w	r3, r3, #12
 8006198:	2b08      	cmp	r3, #8
 800619a:	d112      	bne.n	80061c2 <HAL_RCC_OscConfig+0x62>
 800619c:	4b90      	ldr	r3, [pc, #576]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061a8:	d10b      	bne.n	80061c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061aa:	4b8d      	ldr	r3, [pc, #564]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d06c      	beq.n	8006290 <HAL_RCC_OscConfig+0x130>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d168      	bne.n	8006290 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e26b      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ca:	d106      	bne.n	80061da <HAL_RCC_OscConfig+0x7a>
 80061cc:	4b84      	ldr	r3, [pc, #528]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a83      	ldr	r2, [pc, #524]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80061d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	e02e      	b.n	8006238 <HAL_RCC_OscConfig+0xd8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10c      	bne.n	80061fc <HAL_RCC_OscConfig+0x9c>
 80061e2:	4b7f      	ldr	r3, [pc, #508]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a7e      	ldr	r2, [pc, #504]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80061e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	4b7c      	ldr	r3, [pc, #496]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a7b      	ldr	r2, [pc, #492]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80061f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e01d      	b.n	8006238 <HAL_RCC_OscConfig+0xd8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006204:	d10c      	bne.n	8006220 <HAL_RCC_OscConfig+0xc0>
 8006206:	4b76      	ldr	r3, [pc, #472]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a75      	ldr	r2, [pc, #468]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 800620c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	4b73      	ldr	r3, [pc, #460]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a72      	ldr	r2, [pc, #456]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	e00b      	b.n	8006238 <HAL_RCC_OscConfig+0xd8>
 8006220:	4b6f      	ldr	r3, [pc, #444]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a6e      	ldr	r2, [pc, #440]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	4b6c      	ldr	r3, [pc, #432]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a6b      	ldr	r2, [pc, #428]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d013      	beq.n	8006268 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006240:	f7fe f8d6 	bl	80043f0 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006248:	f7fe f8d2 	bl	80043f0 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b64      	cmp	r3, #100	@ 0x64
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e21f      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800625a:	4b61      	ldr	r3, [pc, #388]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0xe8>
 8006266:	e014      	b.n	8006292 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fe f8c2 	bl	80043f0 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006270:	f7fe f8be 	bl	80043f0 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b64      	cmp	r3, #100	@ 0x64
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e20b      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006282:	4b57      	ldr	r3, [pc, #348]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f0      	bne.n	8006270 <HAL_RCC_OscConfig+0x110>
 800628e:	e000      	b.n	8006292 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d069      	beq.n	8006372 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800629e:	4b50      	ldr	r3, [pc, #320]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 030c 	and.w	r3, r3, #12
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062aa:	4b4d      	ldr	r3, [pc, #308]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 030c 	and.w	r3, r3, #12
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d11c      	bne.n	80062f0 <HAL_RCC_OscConfig+0x190>
 80062b6:	4b4a      	ldr	r3, [pc, #296]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d116      	bne.n	80062f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062c2:	4b47      	ldr	r3, [pc, #284]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <HAL_RCC_OscConfig+0x17a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d001      	beq.n	80062da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e1df      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062da:	4b41      	ldr	r3, [pc, #260]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	493d      	ldr	r1, [pc, #244]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ee:	e040      	b.n	8006372 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d023      	beq.n	8006340 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062f8:	4b39      	ldr	r3, [pc, #228]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a38      	ldr	r2, [pc, #224]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006304:	f7fe f874 	bl	80043f0 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800630c:	f7fe f870 	bl	80043f0 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e1bd      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800631e:	4b30      	ldr	r3, [pc, #192]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f0      	beq.n	800630c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632a:	4b2d      	ldr	r3, [pc, #180]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4929      	ldr	r1, [pc, #164]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 800633a:	4313      	orrs	r3, r2
 800633c:	600b      	str	r3, [r1, #0]
 800633e:	e018      	b.n	8006372 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006340:	4b27      	ldr	r3, [pc, #156]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a26      	ldr	r2, [pc, #152]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fe f850 	bl	80043f0 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006354:	f7fe f84c 	bl	80043f0 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e199      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006366:	4b1e      	ldr	r3, [pc, #120]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f0      	bne.n	8006354 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d038      	beq.n	80063f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d019      	beq.n	80063ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006386:	4b16      	ldr	r3, [pc, #88]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 8006388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800638a:	4a15      	ldr	r2, [pc, #84]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006392:	f7fe f82d 	bl	80043f0 <HAL_GetTick>
 8006396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800639a:	f7fe f829 	bl	80043f0 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e176      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ac:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80063ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0f0      	beq.n	800639a <HAL_RCC_OscConfig+0x23a>
 80063b8:	e01a      	b.n	80063f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063ba:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80063bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063be:	4a08      	ldr	r2, [pc, #32]	@ (80063e0 <HAL_RCC_OscConfig+0x280>)
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c6:	f7fe f813 	bl	80043f0 <HAL_GetTick>
 80063ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063cc:	e00a      	b.n	80063e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ce:	f7fe f80f 	bl	80043f0 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d903      	bls.n	80063e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e15c      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
 80063e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e4:	4b91      	ldr	r3, [pc, #580]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80063e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1ee      	bne.n	80063ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 80a4 	beq.w	8006546 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063fe:	4b8b      	ldr	r3, [pc, #556]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10d      	bne.n	8006426 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800640a:	4b88      	ldr	r3, [pc, #544]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640e:	4a87      	ldr	r2, [pc, #540]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006414:	6413      	str	r3, [r2, #64]	@ 0x40
 8006416:	4b85      	ldr	r3, [pc, #532]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800641e:	60bb      	str	r3, [r7, #8]
 8006420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006426:	4b82      	ldr	r3, [pc, #520]	@ (8006630 <HAL_RCC_OscConfig+0x4d0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d118      	bne.n	8006464 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006432:	4b7f      	ldr	r3, [pc, #508]	@ (8006630 <HAL_RCC_OscConfig+0x4d0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a7e      	ldr	r2, [pc, #504]	@ (8006630 <HAL_RCC_OscConfig+0x4d0>)
 8006438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800643c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800643e:	f7fd ffd7 	bl	80043f0 <HAL_GetTick>
 8006442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006444:	e008      	b.n	8006458 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006446:	f7fd ffd3 	bl	80043f0 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b64      	cmp	r3, #100	@ 0x64
 8006452:	d901      	bls.n	8006458 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e120      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006458:	4b75      	ldr	r3, [pc, #468]	@ (8006630 <HAL_RCC_OscConfig+0x4d0>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0f0      	beq.n	8006446 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d106      	bne.n	800647a <HAL_RCC_OscConfig+0x31a>
 800646c:	4b6f      	ldr	r3, [pc, #444]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 800646e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006470:	4a6e      	ldr	r2, [pc, #440]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	6713      	str	r3, [r2, #112]	@ 0x70
 8006478:	e02d      	b.n	80064d6 <HAL_RCC_OscConfig+0x376>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10c      	bne.n	800649c <HAL_RCC_OscConfig+0x33c>
 8006482:	4b6a      	ldr	r3, [pc, #424]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006486:	4a69      	ldr	r2, [pc, #420]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006488:	f023 0301 	bic.w	r3, r3, #1
 800648c:	6713      	str	r3, [r2, #112]	@ 0x70
 800648e:	4b67      	ldr	r3, [pc, #412]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006492:	4a66      	ldr	r2, [pc, #408]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006494:	f023 0304 	bic.w	r3, r3, #4
 8006498:	6713      	str	r3, [r2, #112]	@ 0x70
 800649a:	e01c      	b.n	80064d6 <HAL_RCC_OscConfig+0x376>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	2b05      	cmp	r3, #5
 80064a2:	d10c      	bne.n	80064be <HAL_RCC_OscConfig+0x35e>
 80064a4:	4b61      	ldr	r3, [pc, #388]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80064a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a8:	4a60      	ldr	r2, [pc, #384]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80064aa:	f043 0304 	orr.w	r3, r3, #4
 80064ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80064b0:	4b5e      	ldr	r3, [pc, #376]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b4:	4a5d      	ldr	r2, [pc, #372]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80064bc:	e00b      	b.n	80064d6 <HAL_RCC_OscConfig+0x376>
 80064be:	4b5b      	ldr	r3, [pc, #364]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064c2:	4a5a      	ldr	r2, [pc, #360]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ca:	4b58      	ldr	r3, [pc, #352]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ce:	4a57      	ldr	r2, [pc, #348]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80064d0:	f023 0304 	bic.w	r3, r3, #4
 80064d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d015      	beq.n	800650a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064de:	f7fd ff87 	bl	80043f0 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e4:	e00a      	b.n	80064fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e6:	f7fd ff83 	bl	80043f0 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e0ce      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fc:	4b4b      	ldr	r3, [pc, #300]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0ee      	beq.n	80064e6 <HAL_RCC_OscConfig+0x386>
 8006508:	e014      	b.n	8006534 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650a:	f7fd ff71 	bl	80043f0 <HAL_GetTick>
 800650e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006510:	e00a      	b.n	8006528 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006512:	f7fd ff6d 	bl	80043f0 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006520:	4293      	cmp	r3, r2
 8006522:	d901      	bls.n	8006528 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e0b8      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006528:	4b40      	ldr	r3, [pc, #256]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 800652a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1ee      	bne.n	8006512 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d105      	bne.n	8006546 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800653a:	4b3c      	ldr	r3, [pc, #240]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653e:	4a3b      	ldr	r2, [pc, #236]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006540:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006544:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 80a4 	beq.w	8006698 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006550:	4b36      	ldr	r3, [pc, #216]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f003 030c 	and.w	r3, r3, #12
 8006558:	2b08      	cmp	r3, #8
 800655a:	d06b      	beq.n	8006634 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d149      	bne.n	80065f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006564:	4b31      	ldr	r3, [pc, #196]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a30      	ldr	r2, [pc, #192]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 800656a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800656e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006570:	f7fd ff3e 	bl	80043f0 <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006578:	f7fd ff3a 	bl	80043f0 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e087      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800658a:	4b28      	ldr	r3, [pc, #160]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f0      	bne.n	8006578 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a4:	019b      	lsls	r3, r3, #6
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	3b01      	subs	r3, #1
 80065b0:	041b      	lsls	r3, r3, #16
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	061b      	lsls	r3, r3, #24
 80065ba:	4313      	orrs	r3, r2
 80065bc:	4a1b      	ldr	r2, [pc, #108]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80065be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065c4:	4b19      	ldr	r3, [pc, #100]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a18      	ldr	r2, [pc, #96]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80065ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d0:	f7fd ff0e 	bl	80043f0 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d8:	f7fd ff0a 	bl	80043f0 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e057      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ea:	4b10      	ldr	r3, [pc, #64]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0x478>
 80065f6:	e04f      	b.n	8006698 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f8:	4b0c      	ldr	r3, [pc, #48]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a0b      	ldr	r2, [pc, #44]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 80065fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006604:	f7fd fef4 	bl	80043f0 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800660c:	f7fd fef0 	bl	80043f0 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e03d      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800661e:	4b03      	ldr	r3, [pc, #12]	@ (800662c <HAL_RCC_OscConfig+0x4cc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1f0      	bne.n	800660c <HAL_RCC_OscConfig+0x4ac>
 800662a:	e035      	b.n	8006698 <HAL_RCC_OscConfig+0x538>
 800662c:	40023800 	.word	0x40023800
 8006630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006634:	4b1b      	ldr	r3, [pc, #108]	@ (80066a4 <HAL_RCC_OscConfig+0x544>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d028      	beq.n	8006694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800664c:	429a      	cmp	r2, r3
 800664e:	d121      	bne.n	8006694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665a:	429a      	cmp	r2, r3
 800665c:	d11a      	bne.n	8006694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006664:	4013      	ands	r3, r2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800666a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800666c:	4293      	cmp	r3, r2
 800666e:	d111      	bne.n	8006694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	3b01      	subs	r3, #1
 800667e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006680:	429a      	cmp	r2, r3
 8006682:	d107      	bne.n	8006694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006690:	429a      	cmp	r2, r3
 8006692:	d001      	beq.n	8006698 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40023800 	.word	0x40023800

080066a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e0d0      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066c0:	4b6a      	ldr	r3, [pc, #424]	@ (800686c <HAL_RCC_ClockConfig+0x1c4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 030f 	and.w	r3, r3, #15
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d910      	bls.n	80066f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ce:	4b67      	ldr	r3, [pc, #412]	@ (800686c <HAL_RCC_ClockConfig+0x1c4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f023 020f 	bic.w	r2, r3, #15
 80066d6:	4965      	ldr	r1, [pc, #404]	@ (800686c <HAL_RCC_ClockConfig+0x1c4>)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	4313      	orrs	r3, r2
 80066dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066de:	4b63      	ldr	r3, [pc, #396]	@ (800686c <HAL_RCC_ClockConfig+0x1c4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d001      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0b8      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d020      	beq.n	800673e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006708:	4b59      	ldr	r3, [pc, #356]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	4a58      	ldr	r2, [pc, #352]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 800670e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006712:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006720:	4b53      	ldr	r3, [pc, #332]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	4a52      	ldr	r2, [pc, #328]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 8006726:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800672a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800672c:	4b50      	ldr	r3, [pc, #320]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	494d      	ldr	r1, [pc, #308]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d040      	beq.n	80067cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d107      	bne.n	8006762 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006752:	4b47      	ldr	r3, [pc, #284]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d115      	bne.n	800678a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e07f      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d107      	bne.n	800677a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800676a:	4b41      	ldr	r3, [pc, #260]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d109      	bne.n	800678a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e073      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677a:	4b3d      	ldr	r3, [pc, #244]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e06b      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800678a:	4b39      	ldr	r3, [pc, #228]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f023 0203 	bic.w	r2, r3, #3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	4936      	ldr	r1, [pc, #216]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 8006798:	4313      	orrs	r3, r2
 800679a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800679c:	f7fd fe28 	bl	80043f0 <HAL_GetTick>
 80067a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a2:	e00a      	b.n	80067ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a4:	f7fd fe24 	bl	80043f0 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e053      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 020c 	and.w	r2, r3, #12
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d1eb      	bne.n	80067a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067cc:	4b27      	ldr	r3, [pc, #156]	@ (800686c <HAL_RCC_ClockConfig+0x1c4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d210      	bcs.n	80067fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067da:	4b24      	ldr	r3, [pc, #144]	@ (800686c <HAL_RCC_ClockConfig+0x1c4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f023 020f 	bic.w	r2, r3, #15
 80067e2:	4922      	ldr	r1, [pc, #136]	@ (800686c <HAL_RCC_ClockConfig+0x1c4>)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ea:	4b20      	ldr	r3, [pc, #128]	@ (800686c <HAL_RCC_ClockConfig+0x1c4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d001      	beq.n	80067fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e032      	b.n	8006862 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006808:	4b19      	ldr	r3, [pc, #100]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	4916      	ldr	r1, [pc, #88]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 8006816:	4313      	orrs	r3, r2
 8006818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006826:	4b12      	ldr	r3, [pc, #72]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	490e      	ldr	r1, [pc, #56]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 8006836:	4313      	orrs	r3, r2
 8006838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800683a:	f000 f821 	bl	8006880 <HAL_RCC_GetSysClockFreq>
 800683e:	4602      	mov	r2, r0
 8006840:	4b0b      	ldr	r3, [pc, #44]	@ (8006870 <HAL_RCC_ClockConfig+0x1c8>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	490a      	ldr	r1, [pc, #40]	@ (8006874 <HAL_RCC_ClockConfig+0x1cc>)
 800684c:	5ccb      	ldrb	r3, [r1, r3]
 800684e:	fa22 f303 	lsr.w	r3, r2, r3
 8006852:	4a09      	ldr	r2, [pc, #36]	@ (8006878 <HAL_RCC_ClockConfig+0x1d0>)
 8006854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006856:	4b09      	ldr	r3, [pc, #36]	@ (800687c <HAL_RCC_ClockConfig+0x1d4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7fd fd84 	bl	8004368 <HAL_InitTick>

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40023c00 	.word	0x40023c00
 8006870:	40023800 	.word	0x40023800
 8006874:	0800b7b0 	.word	0x0800b7b0
 8006878:	20000000 	.word	0x20000000
 800687c:	20000044 	.word	0x20000044

08006880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006884:	b090      	sub	sp, #64	@ 0x40
 8006886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
 800688c:	2300      	movs	r3, #0
 800688e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006890:	2300      	movs	r3, #0
 8006892:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006898:	4b59      	ldr	r3, [pc, #356]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x180>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 030c 	and.w	r3, r3, #12
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d00d      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0x40>
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	f200 80a1 	bhi.w	80069ec <HAL_RCC_GetSysClockFreq+0x16c>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_RCC_GetSysClockFreq+0x34>
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d003      	beq.n	80068ba <HAL_RCC_GetSysClockFreq+0x3a>
 80068b2:	e09b      	b.n	80069ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068b4:	4b53      	ldr	r3, [pc, #332]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x184>)
 80068b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068b8:	e09b      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ba:	4b53      	ldr	r3, [pc, #332]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80068bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068be:	e098      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068c0:	4b4f      	ldr	r3, [pc, #316]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80068ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d028      	beq.n	8006928 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	099b      	lsrs	r3, r3, #6
 80068dc:	2200      	movs	r2, #0
 80068de:	623b      	str	r3, [r7, #32]
 80068e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068e8:	2100      	movs	r1, #0
 80068ea:	4b47      	ldr	r3, [pc, #284]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80068ec:	fb03 f201 	mul.w	r2, r3, r1
 80068f0:	2300      	movs	r3, #0
 80068f2:	fb00 f303 	mul.w	r3, r0, r3
 80068f6:	4413      	add	r3, r2
 80068f8:	4a43      	ldr	r2, [pc, #268]	@ (8006a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80068fa:	fba0 1202 	umull	r1, r2, r0, r2
 80068fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006900:	460a      	mov	r2, r1
 8006902:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006906:	4413      	add	r3, r2
 8006908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800690a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690c:	2200      	movs	r2, #0
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	61fa      	str	r2, [r7, #28]
 8006912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006916:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800691a:	f7fa f965 	bl	8000be8 <__aeabi_uldivmod>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4613      	mov	r3, r2
 8006924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006926:	e053      	b.n	80069d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006928:	4b35      	ldr	r3, [pc, #212]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x180>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	099b      	lsrs	r3, r3, #6
 800692e:	2200      	movs	r2, #0
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	617a      	str	r2, [r7, #20]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800693a:	f04f 0b00 	mov.w	fp, #0
 800693e:	4652      	mov	r2, sl
 8006940:	465b      	mov	r3, fp
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f04f 0100 	mov.w	r1, #0
 800694a:	0159      	lsls	r1, r3, #5
 800694c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006950:	0150      	lsls	r0, r2, #5
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	ebb2 080a 	subs.w	r8, r2, sl
 800695a:	eb63 090b 	sbc.w	r9, r3, fp
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800696a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800696e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006972:	ebb2 0408 	subs.w	r4, r2, r8
 8006976:	eb63 0509 	sbc.w	r5, r3, r9
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	00eb      	lsls	r3, r5, #3
 8006984:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006988:	00e2      	lsls	r2, r4, #3
 800698a:	4614      	mov	r4, r2
 800698c:	461d      	mov	r5, r3
 800698e:	eb14 030a 	adds.w	r3, r4, sl
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	eb45 030b 	adc.w	r3, r5, fp
 8006998:	607b      	str	r3, [r7, #4]
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069a6:	4629      	mov	r1, r5
 80069a8:	028b      	lsls	r3, r1, #10
 80069aa:	4621      	mov	r1, r4
 80069ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069b0:	4621      	mov	r1, r4
 80069b2:	028a      	lsls	r2, r1, #10
 80069b4:	4610      	mov	r0, r2
 80069b6:	4619      	mov	r1, r3
 80069b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ba:	2200      	movs	r2, #0
 80069bc:	60bb      	str	r3, [r7, #8]
 80069be:	60fa      	str	r2, [r7, #12]
 80069c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069c4:	f7fa f910 	bl	8000be8 <__aeabi_uldivmod>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4613      	mov	r3, r2
 80069ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80069d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	3301      	adds	r3, #1
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80069e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80069ea:	e002      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <HAL_RCC_GetSysClockFreq+0x184>)
 80069ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80069f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3740      	adds	r7, #64	@ 0x40
 80069f8:	46bd      	mov	sp, r7
 80069fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069fe:	bf00      	nop
 8006a00:	40023800 	.word	0x40023800
 8006a04:	00f42400 	.word	0x00f42400
 8006a08:	017d7840 	.word	0x017d7840

08006a0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a10:	4b03      	ldr	r3, [pc, #12]	@ (8006a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a12:	681b      	ldr	r3, [r3, #0]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	20000000 	.word	0x20000000

08006a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a28:	f7ff fff0 	bl	8006a0c <HAL_RCC_GetHCLKFreq>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	0a9b      	lsrs	r3, r3, #10
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	4903      	ldr	r1, [pc, #12]	@ (8006a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a3a:	5ccb      	ldrb	r3, [r1, r3]
 8006a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40023800 	.word	0x40023800
 8006a48:	0800b7c0 	.word	0x0800b7c0

08006a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a50:	f7ff ffdc 	bl	8006a0c <HAL_RCC_GetHCLKFreq>
 8006a54:	4602      	mov	r2, r0
 8006a56:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	0b5b      	lsrs	r3, r3, #13
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	4903      	ldr	r1, [pc, #12]	@ (8006a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a62:	5ccb      	ldrb	r3, [r1, r3]
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	0800b7c0 	.word	0x0800b7c0

08006a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d012      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a9c:	4b69      	ldr	r3, [pc, #420]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4a68      	ldr	r2, [pc, #416]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006aa6:	6093      	str	r3, [r2, #8]
 8006aa8:	4b66      	ldr	r3, [pc, #408]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab0:	4964      	ldr	r1, [pc, #400]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d017      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ace:	4b5d      	ldr	r3, [pc, #372]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ad4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006adc:	4959      	ldr	r1, [pc, #356]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aec:	d101      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006aee:	2301      	movs	r3, #1
 8006af0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006afa:	2301      	movs	r3, #1
 8006afc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d017      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b18:	494a      	ldr	r1, [pc, #296]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b28:	d101      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006b36:	2301      	movs	r3, #1
 8006b38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006b46:	2301      	movs	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 808b 	beq.w	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b58:	4b3a      	ldr	r3, [pc, #232]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	4a39      	ldr	r2, [pc, #228]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b62:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b64:	4b37      	ldr	r3, [pc, #220]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b70:	4b35      	ldr	r3, [pc, #212]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a34      	ldr	r2, [pc, #208]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b7c:	f7fd fc38 	bl	80043f0 <HAL_GetTick>
 8006b80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b84:	f7fd fc34 	bl	80043f0 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b64      	cmp	r3, #100	@ 0x64
 8006b90:	d901      	bls.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e357      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b96:	4b2c      	ldr	r3, [pc, #176]	@ (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ba2:	4b28      	ldr	r3, [pc, #160]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006baa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d035      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d02e      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bc0:	4b20      	ldr	r3, [pc, #128]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bca:	4b1e      	ldr	r3, [pc, #120]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bce:	4a1d      	ldr	r2, [pc, #116]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bd4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bd6:	4b1b      	ldr	r3, [pc, #108]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bda:	4a1a      	ldr	r2, [pc, #104]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006be0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006be2:	4a18      	ldr	r2, [pc, #96]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006be8:	4b16      	ldr	r3, [pc, #88]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d114      	bne.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf4:	f7fd fbfc 	bl	80043f0 <HAL_GetTick>
 8006bf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bfa:	e00a      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bfc:	f7fd fbf8 	bl	80043f0 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e319      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c12:	4b0c      	ldr	r3, [pc, #48]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0ee      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c2a:	d111      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006c2c:	4b05      	ldr	r3, [pc, #20]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006c38:	4b04      	ldr	r3, [pc, #16]	@ (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c3a:	400b      	ands	r3, r1
 8006c3c:	4901      	ldr	r1, [pc, #4]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
 8006c42:	e00b      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006c44:	40023800 	.word	0x40023800
 8006c48:	40007000 	.word	0x40007000
 8006c4c:	0ffffcff 	.word	0x0ffffcff
 8006c50:	4baa      	ldr	r3, [pc, #680]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4aa9      	ldr	r2, [pc, #676]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c56:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006c5a:	6093      	str	r3, [r2, #8]
 8006c5c:	4ba7      	ldr	r3, [pc, #668]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c68:	49a4      	ldr	r1, [pc, #656]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0310 	and.w	r3, r3, #16
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d010      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c7a:	4ba0      	ldr	r3, [pc, #640]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c80:	4a9e      	ldr	r2, [pc, #632]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006c8a:	4b9c      	ldr	r3, [pc, #624]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c94:	4999      	ldr	r1, [pc, #612]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ca8:	4b94      	ldr	r3, [pc, #592]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cb6:	4991      	ldr	r1, [pc, #580]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006cca:	4b8c      	ldr	r3, [pc, #560]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cd8:	4988      	ldr	r1, [pc, #544]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006cec:	4b83      	ldr	r3, [pc, #524]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cfa:	4980      	ldr	r1, [pc, #512]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d0e:	4b7b      	ldr	r3, [pc, #492]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d14:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d1c:	4977      	ldr	r1, [pc, #476]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d30:	4b72      	ldr	r3, [pc, #456]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d36:	f023 0203 	bic.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d3e:	496f      	ldr	r1, [pc, #444]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d52:	4b6a      	ldr	r3, [pc, #424]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d58:	f023 020c 	bic.w	r2, r3, #12
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d60:	4966      	ldr	r1, [pc, #408]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d74:	4b61      	ldr	r3, [pc, #388]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d82:	495e      	ldr	r1, [pc, #376]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d96:	4b59      	ldr	r3, [pc, #356]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da4:	4955      	ldr	r1, [pc, #340]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006db8:	4b50      	ldr	r3, [pc, #320]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc6:	494d      	ldr	r1, [pc, #308]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006dda:	4b48      	ldr	r3, [pc, #288]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de8:	4944      	ldr	r1, [pc, #272]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e02:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e0a:	493c      	ldr	r1, [pc, #240]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006e1e:	4b37      	ldr	r3, [pc, #220]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e2c:	4933      	ldr	r1, [pc, #204]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00a      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e40:	4b2e      	ldr	r3, [pc, #184]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e46:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e4e:	492b      	ldr	r1, [pc, #172]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d011      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006e62:	4b26      	ldr	r3, [pc, #152]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e68:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e70:	4922      	ldr	r1, [pc, #136]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e80:	d101      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006e92:	2301      	movs	r3, #1
 8006e94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ea2:	4b16      	ldr	r3, [pc, #88]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eb0:	4912      	ldr	r1, [pc, #72]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ed4:	4909      	ldr	r1, [pc, #36]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d006      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80d9 	beq.w	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ef0:	4b02      	ldr	r3, [pc, #8]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a01      	ldr	r2, [pc, #4]	@ (8006efc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ef6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006efa:	e001      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006efc:	40023800 	.word	0x40023800
 8006f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f02:	f7fd fa75 	bl	80043f0 <HAL_GetTick>
 8006f06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f08:	e008      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f0a:	f7fd fa71 	bl	80043f0 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b64      	cmp	r3, #100	@ 0x64
 8006f16:	d901      	bls.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e194      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f0      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d021      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d11d      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f3c:	4b64      	ldr	r3, [pc, #400]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f42:	0c1b      	lsrs	r3, r3, #16
 8006f44:	f003 0303 	and.w	r3, r3, #3
 8006f48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f4a:	4b61      	ldr	r3, [pc, #388]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f50:	0e1b      	lsrs	r3, r3, #24
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	019a      	lsls	r2, r3, #6
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	041b      	lsls	r3, r3, #16
 8006f62:	431a      	orrs	r2, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	061b      	lsls	r3, r3, #24
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	071b      	lsls	r3, r3, #28
 8006f70:	4957      	ldr	r1, [pc, #348]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d004      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f8c:	d00a      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d02e      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fa2:	d129      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006fa4:	4b4a      	ldr	r3, [pc, #296]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006faa:	0c1b      	lsrs	r3, r3, #16
 8006fac:	f003 0303 	and.w	r3, r3, #3
 8006fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fb2:	4b47      	ldr	r3, [pc, #284]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fb8:	0f1b      	lsrs	r3, r3, #28
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	019a      	lsls	r2, r3, #6
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	041b      	lsls	r3, r3, #16
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	061b      	lsls	r3, r3, #24
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	071b      	lsls	r3, r3, #28
 8006fd8:	493d      	ldr	r1, [pc, #244]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fe6:	f023 021f 	bic.w	r2, r3, #31
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	4937      	ldr	r1, [pc, #220]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d01d      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007004:	4b32      	ldr	r3, [pc, #200]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800700a:	0e1b      	lsrs	r3, r3, #24
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007012:	4b2f      	ldr	r3, [pc, #188]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007018:	0f1b      	lsrs	r3, r3, #28
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	019a      	lsls	r2, r3, #6
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	041b      	lsls	r3, r3, #16
 800702c:	431a      	orrs	r2, r3
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	061b      	lsls	r3, r3, #24
 8007032:	431a      	orrs	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	071b      	lsls	r3, r3, #28
 8007038:	4925      	ldr	r1, [pc, #148]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800703a:	4313      	orrs	r3, r2
 800703c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d011      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	019a      	lsls	r2, r3, #6
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	041b      	lsls	r3, r3, #16
 8007058:	431a      	orrs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	061b      	lsls	r3, r3, #24
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	071b      	lsls	r3, r3, #28
 8007068:	4919      	ldr	r1, [pc, #100]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800706a:	4313      	orrs	r3, r2
 800706c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007070:	4b17      	ldr	r3, [pc, #92]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a16      	ldr	r2, [pc, #88]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007076:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800707a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800707c:	f7fd f9b8 	bl	80043f0 <HAL_GetTick>
 8007080:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007082:	e008      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007084:	f7fd f9b4 	bl	80043f0 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b64      	cmp	r3, #100	@ 0x64
 8007090:	d901      	bls.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e0d7      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007096:	4b0e      	ldr	r3, [pc, #56]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0f0      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	f040 80cd 	bne.w	8007244 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070aa:	4b09      	ldr	r3, [pc, #36]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a08      	ldr	r2, [pc, #32]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070b6:	f7fd f99b 	bl	80043f0 <HAL_GetTick>
 80070ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070bc:	e00a      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070be:	f7fd f997 	bl	80043f0 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b64      	cmp	r3, #100	@ 0x64
 80070ca:	d903      	bls.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e0ba      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80070d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070d4:	4b5e      	ldr	r3, [pc, #376]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070e0:	d0ed      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d02e      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d12a      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800710a:	4b51      	ldr	r3, [pc, #324]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800710c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007110:	0c1b      	lsrs	r3, r3, #16
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007118:	4b4d      	ldr	r3, [pc, #308]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800711a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711e:	0f1b      	lsrs	r3, r3, #28
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	019a      	lsls	r2, r3, #6
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	041b      	lsls	r3, r3, #16
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	061b      	lsls	r3, r3, #24
 8007138:	431a      	orrs	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	071b      	lsls	r3, r3, #28
 800713e:	4944      	ldr	r1, [pc, #272]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007140:	4313      	orrs	r3, r2
 8007142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007146:	4b42      	ldr	r3, [pc, #264]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800714c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007154:	3b01      	subs	r3, #1
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	493d      	ldr	r1, [pc, #244]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800715a:	4313      	orrs	r3, r2
 800715c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d022      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007174:	d11d      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007176:	4b36      	ldr	r3, [pc, #216]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717c:	0e1b      	lsrs	r3, r3, #24
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007184:	4b32      	ldr	r3, [pc, #200]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800718a:	0f1b      	lsrs	r3, r3, #28
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	019a      	lsls	r2, r3, #6
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	041b      	lsls	r3, r3, #16
 800719e:	431a      	orrs	r2, r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	061b      	lsls	r3, r3, #24
 80071a4:	431a      	orrs	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	071b      	lsls	r3, r3, #28
 80071aa:	4929      	ldr	r1, [pc, #164]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d028      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071be:	4b24      	ldr	r3, [pc, #144]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c4:	0e1b      	lsrs	r3, r3, #24
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80071cc:	4b20      	ldr	r3, [pc, #128]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071d2:	0c1b      	lsrs	r3, r3, #16
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	019a      	lsls	r2, r3, #6
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	041b      	lsls	r3, r3, #16
 80071e4:	431a      	orrs	r2, r3
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	061b      	lsls	r3, r3, #24
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	071b      	lsls	r3, r3, #28
 80071f2:	4917      	ldr	r1, [pc, #92]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071fa:	4b15      	ldr	r3, [pc, #84]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007200:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	4911      	ldr	r1, [pc, #68]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800720a:	4313      	orrs	r3, r2
 800720c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007210:	4b0f      	ldr	r3, [pc, #60]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a0e      	ldr	r2, [pc, #56]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800721a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721c:	f7fd f8e8 	bl	80043f0 <HAL_GetTick>
 8007220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007222:	e008      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007224:	f7fd f8e4 	bl	80043f0 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b64      	cmp	r3, #100	@ 0x64
 8007230:	d901      	bls.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e007      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007236:	4b06      	ldr	r3, [pc, #24]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800723e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007242:	d1ef      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40023800 	.word	0x40023800

08007254 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a80      	ldr	r2, [pc, #512]	@ (8007464 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8007264:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007266:	4b80      	ldr	r3, [pc, #512]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800726c:	099b      	lsrs	r3, r3, #6
 800726e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007276:	4b7c      	ldr	r3, [pc, #496]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	f003 0203 	and.w	r2, r3, #3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007286:	4b78      	ldr	r3, [pc, #480]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800728c:	0e1b      	lsrs	r3, r3, #24
 800728e:	f003 020f 	and.w	r2, r3, #15
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007296:	4b74      	ldr	r3, [pc, #464]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800729c:	0f1b      	lsrs	r3, r3, #28
 800729e:	f003 0207 	and.w	r2, r3, #7
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 80072a6:	4b70      	ldr	r3, [pc, #448]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ac:	099b      	lsrs	r3, r3, #6
 80072ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072b6:	4b6c      	ldr	r3, [pc, #432]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072bc:	0c1b      	lsrs	r3, r3, #16
 80072be:	f003 0203 	and.w	r2, r3, #3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072c6:	4b68      	ldr	r3, [pc, #416]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072cc:	0e1b      	lsrs	r3, r3, #24
 80072ce:	f003 020f 	and.w	r2, r3, #15
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072d6:	4b64      	ldr	r3, [pc, #400]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072dc:	0f1b      	lsrs	r3, r3, #28
 80072de:	f003 0207 	and.w	r2, r3, #7
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80072e6:	4b60      	ldr	r3, [pc, #384]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072ec:	f003 021f 	and.w	r2, r3, #31
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80072f4:	4b5c      	ldr	r3, [pc, #368]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072fa:	0a1b      	lsrs	r3, r3, #8
 80072fc:	f003 021f 	and.w	r2, r3, #31
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8007304:	4b58      	ldr	r3, [pc, #352]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800730a:	0c1b      	lsrs	r3, r3, #16
 800730c:	f003 0203 	and.w	r2, r3, #3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8007314:	4b54      	ldr	r3, [pc, #336]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007316:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800731a:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8007322:	4b51      	ldr	r3, [pc, #324]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007328:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007330:	4b4d      	ldr	r3, [pc, #308]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800733c:	4b4a      	ldr	r3, [pc, #296]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007342:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800734a:	4b47      	ldr	r3, [pc, #284]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007350:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007358:	4b43      	ldr	r3, [pc, #268]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800735a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735e:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8007366:	4b40      	ldr	r3, [pc, #256]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800736c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007374:	4b3c      	ldr	r3, [pc, #240]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737a:	f003 0203 	and.w	r2, r3, #3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8007382:	4b39      	ldr	r3, [pc, #228]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007388:	f003 020c 	and.w	r2, r3, #12
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007390:	4b35      	ldr	r3, [pc, #212]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007396:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800739e:	4b32      	ldr	r3, [pc, #200]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a4:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 80073ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b2:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80073ba:	4b2b      	ldr	r3, [pc, #172]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c0:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80073c8:	4b27      	ldr	r3, [pc, #156]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ce:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80073d6:	4b24      	ldr	r3, [pc, #144]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073dc:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80073e4:	4b20      	ldr	r3, [pc, #128]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ea:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80073f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073f8:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007400:	4b19      	ldr	r3, [pc, #100]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007406:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800740e:	4b16      	ldr	r3, [pc, #88]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007414:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800741e:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007426:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007428:	4b0f      	ldr	r3, [pc, #60]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800742a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007438:	4b0b      	ldr	r3, [pc, #44]	@ (8007468 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800743a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800743e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d103      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800744c:	e003      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007454:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007456:	bf00      	nop
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	00fffff1 	.word	0x00fffff1
 8007468:	40023800 	.word	0x40023800

0800746c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800748a:	f040 808d 	bne.w	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800748e:	4b93      	ldr	r3, [pc, #588]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007494:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800749c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074a4:	d07c      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074ac:	d87b      	bhi.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ba:	d039      	beq.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80074bc:	e073      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80074be:	4b87      	ldr	r3, [pc, #540]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d108      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074ca:	4b84      	ldr	r3, [pc, #528]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074d2:	4a83      	ldr	r2, [pc, #524]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80074d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	e007      	b.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80074dc:	4b7f      	ldr	r3, [pc, #508]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074e4:	4a7f      	ldr	r2, [pc, #508]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ea:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80074ec:	4b7b      	ldr	r3, [pc, #492]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f2:	0e1b      	lsrs	r3, r3, #24
 80074f4:	f003 030f 	and.w	r3, r3, #15
 80074f8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80074fa:	4b78      	ldr	r3, [pc, #480]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007500:	099b      	lsrs	r3, r3, #6
 8007502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	fb03 f202 	mul.w	r2, r3, r2
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007512:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007514:	4b71      	ldr	r3, [pc, #452]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800751a:	0a1b      	lsrs	r3, r3, #8
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	3301      	adds	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	fbb2 f3f3 	udiv	r3, r2, r3
 800752c:	617b      	str	r3, [r7, #20]
        break;
 800752e:	e03b      	b.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007530:	4b6a      	ldr	r3, [pc, #424]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d108      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800753c:	4b67      	ldr	r3, [pc, #412]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007544:	4a66      	ldr	r2, [pc, #408]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007546:	fbb2 f3f3 	udiv	r3, r2, r3
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	e007      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800754e:	4b63      	ldr	r3, [pc, #396]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007556:	4a63      	ldr	r2, [pc, #396]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007558:	fbb2 f3f3 	udiv	r3, r2, r3
 800755c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800755e:	4b5f      	ldr	r3, [pc, #380]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007564:	0e1b      	lsrs	r3, r3, #24
 8007566:	f003 030f 	and.w	r3, r3, #15
 800756a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800756c:	4b5b      	ldr	r3, [pc, #364]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800756e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007572:	099b      	lsrs	r3, r3, #6
 8007574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	fb03 f202 	mul.w	r2, r3, r2
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	fbb2 f3f3 	udiv	r3, r2, r3
 8007584:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007586:	4b55      	ldr	r3, [pc, #340]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800758c:	f003 031f 	and.w	r3, r3, #31
 8007590:	3301      	adds	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	fbb2 f3f3 	udiv	r3, r2, r3
 800759c:	617b      	str	r3, [r7, #20]
        break;
 800759e:	e003      	b.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80075a0:	4b51      	ldr	r3, [pc, #324]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80075a2:	617b      	str	r3, [r7, #20]
        break;
 80075a4:	e000      	b.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 80075a6:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075ae:	f040 808d 	bne.w	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 80075b2:	4b4a      	ldr	r3, [pc, #296]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075b8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80075c0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075c8:	d07c      	beq.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075d0:	d87b      	bhi.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075de:	d039      	beq.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80075e0:	e073      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80075e2:	4b3e      	ldr	r3, [pc, #248]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d108      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80075ee:	4b3b      	ldr	r3, [pc, #236]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075f6:	4a3a      	ldr	r2, [pc, #232]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80075f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fc:	613b      	str	r3, [r7, #16]
 80075fe:	e007      	b.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007600:	4b36      	ldr	r3, [pc, #216]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007608:	4a36      	ldr	r2, [pc, #216]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800760a:	fbb2 f3f3 	udiv	r3, r2, r3
 800760e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007610:	4b32      	ldr	r3, [pc, #200]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007616:	0e1b      	lsrs	r3, r3, #24
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800761e:	4b2f      	ldr	r3, [pc, #188]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007624:	099b      	lsrs	r3, r3, #6
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	fb03 f202 	mul.w	r2, r3, r2
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	fbb2 f3f3 	udiv	r3, r2, r3
 8007636:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007638:	4b28      	ldr	r3, [pc, #160]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800763a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800763e:	0a1b      	lsrs	r3, r3, #8
 8007640:	f003 031f 	and.w	r3, r3, #31
 8007644:	3301      	adds	r3, #1
 8007646:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007650:	617b      	str	r3, [r7, #20]
        break;
 8007652:	e03b      	b.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007654:	4b21      	ldr	r3, [pc, #132]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d108      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007660:	4b1e      	ldr	r3, [pc, #120]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007668:	4a1d      	ldr	r2, [pc, #116]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800766a:	fbb2 f3f3 	udiv	r3, r2, r3
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	e007      	b.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007672:	4b1a      	ldr	r3, [pc, #104]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800767a:	4a1a      	ldr	r2, [pc, #104]	@ (80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800767c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007680:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007682:	4b16      	ldr	r3, [pc, #88]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007688:	0e1b      	lsrs	r3, r3, #24
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007690:	4b12      	ldr	r3, [pc, #72]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007696:	099b      	lsrs	r3, r3, #6
 8007698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	fb03 f202 	mul.w	r2, r3, r2
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80076aa:	4b0c      	ldr	r3, [pc, #48]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80076ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c0:	617b      	str	r3, [r7, #20]
        break;
 80076c2:	e003      	b.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80076c4:	4b08      	ldr	r3, [pc, #32]	@ (80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80076c6:	617b      	str	r3, [r7, #20]
        break;
 80076c8:	e000      	b.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80076ca:	bf00      	nop
      }
    }
  }

  return frequency;
 80076cc:	697b      	ldr	r3, [r7, #20]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40023800 	.word	0x40023800
 80076e0:	00f42400 	.word	0x00f42400
 80076e4:	017d7840 	.word	0x017d7840
 80076e8:	00bb8000 	.word	0x00bb8000

080076ec <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e156      	b.n	80079b8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fa f930 	bl	8001984 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fb85 	bl	8007e3c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	2b02      	cmp	r3, #2
 8007738:	d00c      	beq.n	8007754 <HAL_SAI_Init+0x68>
 800773a:	2b02      	cmp	r3, #2
 800773c:	d80d      	bhi.n	800775a <HAL_SAI_Init+0x6e>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_SAI_Init+0x5c>
 8007742:	2b01      	cmp	r3, #1
 8007744:	d003      	beq.n	800774e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007746:	e008      	b.n	800775a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	61fb      	str	r3, [r7, #28]
      break;
 800774c:	e006      	b.n	800775c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800774e:	2310      	movs	r3, #16
 8007750:	61fb      	str	r3, [r7, #28]
      break;
 8007752:	e003      	b.n	800775c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007754:	2320      	movs	r3, #32
 8007756:	61fb      	str	r3, [r7, #28]
      break;
 8007758:	e000      	b.n	800775c <HAL_SAI_Init+0x70>
      break;
 800775a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2b03      	cmp	r3, #3
 8007762:	d81e      	bhi.n	80077a2 <HAL_SAI_Init+0xb6>
 8007764:	a201      	add	r2, pc, #4	@ (adr r2, 800776c <HAL_SAI_Init+0x80>)
 8007766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776a:	bf00      	nop
 800776c:	0800777d 	.word	0x0800777d
 8007770:	08007783 	.word	0x08007783
 8007774:	0800778b 	.word	0x0800778b
 8007778:	08007793 	.word	0x08007793
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007780:	e010      	b.n	80077a4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007786:	617b      	str	r3, [r7, #20]
    }
    break;
 8007788:	e00c      	b.n	80077a4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800778a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800778e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007790:	e008      	b.n	80077a4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007792:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007796:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	f043 0301 	orr.w	r3, r3, #1
 800779e:	61fb      	str	r3, [r7, #28]
    }
    break;
 80077a0:	e000      	b.n	80077a4 <HAL_SAI_Init+0xb8>
    default:
      break;
 80077a2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a85      	ldr	r2, [pc, #532]	@ (80079c0 <HAL_SAI_Init+0x2d4>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d004      	beq.n	80077b8 <HAL_SAI_Init+0xcc>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a84      	ldr	r2, [pc, #528]	@ (80079c4 <HAL_SAI_Init+0x2d8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d103      	bne.n	80077c0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80077b8:	4a83      	ldr	r2, [pc, #524]	@ (80079c8 <HAL_SAI_Init+0x2dc>)
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	e002      	b.n	80077c6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80077c0:	4a82      	ldr	r2, [pc, #520]	@ (80079cc <HAL_SAI_Init+0x2e0>)
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d04c      	beq.n	8007868 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a7a      	ldr	r2, [pc, #488]	@ (80079c0 <HAL_SAI_Init+0x2d4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d004      	beq.n	80077e6 <HAL_SAI_Init+0xfa>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a78      	ldr	r2, [pc, #480]	@ (80079c4 <HAL_SAI_Init+0x2d8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d104      	bne.n	80077f0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80077e6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80077ea:	f7ff fe3f 	bl	800746c <HAL_RCCEx_GetPeriphCLKFreq>
 80077ee:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a76      	ldr	r2, [pc, #472]	@ (80079d0 <HAL_SAI_Init+0x2e4>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d004      	beq.n	8007804 <HAL_SAI_Init+0x118>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a75      	ldr	r2, [pc, #468]	@ (80079d4 <HAL_SAI_Init+0x2e8>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d104      	bne.n	800780e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007804:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007808:	f7ff fe30 	bl	800746c <HAL_RCCEx_GetPeriphCLKFreq>
 800780c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	461a      	mov	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	025b      	lsls	r3, r3, #9
 8007820:	fbb2 f3f3 	udiv	r3, r2, r3
 8007824:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4a6b      	ldr	r2, [pc, #428]	@ (80079d8 <HAL_SAI_Init+0x2ec>)
 800782a:	fba2 2303 	umull	r2, r3, r2, r3
 800782e:	08da      	lsrs	r2, r3, #3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	4b68      	ldr	r3, [pc, #416]	@ (80079d8 <HAL_SAI_Init+0x2ec>)
 8007838:	fba3 2301 	umull	r2, r3, r3, r1
 800783c:	08da      	lsrs	r2, r3, #3
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	1aca      	subs	r2, r1, r3
 8007848:	2a08      	cmp	r2, #8
 800784a:	d904      	bls.n	8007856 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785a:	2b04      	cmp	r3, #4
 800785c:	d104      	bne.n	8007868 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	085a      	lsrs	r2, r3, #1
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <HAL_SAI_Init+0x18c>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	2b02      	cmp	r3, #2
 8007876:	d109      	bne.n	800788c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_SAI_Init+0x198>
 8007880:	2300      	movs	r3, #0
 8007882:	e001      	b.n	8007888 <HAL_SAI_Init+0x19c>
 8007884:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007888:	61bb      	str	r3, [r7, #24]
 800788a:	e008      	b.n	800789e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d102      	bne.n	800789a <HAL_SAI_Init+0x1ae>
 8007894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007898:	e000      	b.n	800789c <HAL_SAI_Init+0x1b0>
 800789a:	2300      	movs	r3, #0
 800789c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6819      	ldr	r1, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	4b4c      	ldr	r3, [pc, #304]	@ (80079dc <HAL_SAI_Init+0x2f0>)
 80078aa:	400b      	ands	r3, r1
 80078ac:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6819      	ldr	r1, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078bc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80078c2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	431a      	orrs	r2, r3
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80078d6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078e2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	051b      	lsls	r3, r3, #20
 80078ea:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6859      	ldr	r1, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	4b38      	ldr	r3, [pc, #224]	@ (80079e0 <HAL_SAI_Init+0x2f4>)
 8007900:	400b      	ands	r3, r1
 8007902:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6859      	ldr	r1, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699a      	ldr	r2, [r3, #24]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007912:	431a      	orrs	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6899      	ldr	r1, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	4b2d      	ldr	r3, [pc, #180]	@ (80079e4 <HAL_SAI_Init+0x2f8>)
 800792e:	400b      	ands	r3, r1
 8007930:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6899      	ldr	r1, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007942:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8007948:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800794e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007954:	3b01      	subs	r3, #1
 8007956:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007958:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68d9      	ldr	r1, [r3, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007970:	400b      	ands	r3, r1
 8007972:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68d9      	ldr	r1, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007982:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007988:	041b      	lsls	r3, r3, #16
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007990:	3b01      	subs	r3, #1
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3720      	adds	r7, #32
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40015804 	.word	0x40015804
 80079c4:	40015824 	.word	0x40015824
 80079c8:	40015800 	.word	0x40015800
 80079cc:	40015c00 	.word	0x40015c00
 80079d0:	40015c04 	.word	0x40015c04
 80079d4:	40015c24 	.word	0x40015c24
 80079d8:	cccccccd 	.word	0xcccccccd
 80079dc:	ff05c010 	.word	0xff05c010
 80079e0:	ffff1ff0 	.word	0xffff1ff0
 80079e4:	fff88000 	.word	0xfff88000

080079e8 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e027      	b.n	8007a4a <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2200      	movs	r2, #0
 8007a08:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a12:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fa11 	bl	8007e3c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0208 	orr.w	r2, r2, #8
 8007a28:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7fa f848 	bl	8001ac0 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_SAI_DMAStop+0x1a>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e061      	b.n	8007b30 <HAL_SAI_DMAStop+0xde>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f9e1 	bl	8007e3c <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007a88:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d01c      	beq.n	8007acc <HAL_SAI_DMAStop+0x7a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b12      	cmp	r3, #18
 8007a9c:	d116      	bne.n	8007acc <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fc ff52 	bl	800494c <HAL_DMA_Abort>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00e      	beq.n	8007acc <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ab4:	2b80      	cmp	r3, #128	@ 0x80
 8007ab6:	d009      	beq.n	8007acc <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01c      	beq.n	8007b0e <HAL_SAI_DMAStop+0xbc>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b22      	cmp	r3, #34	@ 0x22
 8007ade:	d116      	bne.n	8007b0e <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fc ff31 	bl	800494c <HAL_DMA_Abort>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00e      	beq.n	8007b0e <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af6:	2b80      	cmp	r3, #128	@ 0x80
 8007af8:	d009      	beq.n	8007b0e <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 0208 	orr.w	r2, r2, #8
 8007b1c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007b46:	f7fc fc53 	bl	80043f0 <HAL_GetTick>
 8007b4a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_SAI_Transmit_DMA+0x20>
 8007b52:	88fb      	ldrh	r3, [r7, #6]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e093      	b.n	8007c84 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	f040 808c 	bne.w	8007c82 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d101      	bne.n	8007b78 <HAL_SAI_Transmit_DMA+0x40>
 8007b74:	2302      	movs	r3, #2
 8007b76:	e085      	b.n	8007c84 <HAL_SAI_Transmit_DMA+0x14c>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	88fa      	ldrh	r2, [r7, #6]
 8007b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	88fa      	ldrh	r2, [r7, #6]
 8007b92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2212      	movs	r2, #18
 8007ba2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007baa:	4a38      	ldr	r2, [pc, #224]	@ (8007c8c <HAL_SAI_Transmit_DMA+0x154>)
 8007bac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb2:	4a37      	ldr	r2, [pc, #220]	@ (8007c90 <HAL_SAI_Transmit_DMA+0x158>)
 8007bb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bba:	4a36      	ldr	r2, [pc, #216]	@ (8007c94 <HAL_SAI_Transmit_DMA+0x15c>)
 8007bbc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bce:	4619      	mov	r1, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	331c      	adds	r3, #28
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007bde:	f7fc fe55 	bl	800488c <HAL_DMA_Start_IT>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e047      	b.n	8007c84 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f8ea 	bl	8007dd0 <SAI_InterruptFlag>
 8007bfc:	4601      	mov	r1, r0
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007c1a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007c1c:	e015      	b.n	8007c4a <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007c1e:	f7fc fbe7 	bl	80043f0 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c2c:	d90d      	bls.n	8007c4a <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e01c      	b.n	8007c84 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0e2      	beq.n	8007c1e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d107      	bne.n	8007c76 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007c74:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e000      	b.n	8007c84 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8007c82:	2302      	movs	r3, #2
  }
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	08007f0d 	.word	0x08007f0d
 8007c90:	08007ead 	.word	0x08007ead
 8007c94:	08007fa5 	.word	0x08007fa5

08007c98 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <HAL_SAI_Receive_DMA+0x1a>
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e074      	b.n	8007da0 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d16d      	bne.n	8007d9e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_SAI_Receive_DMA+0x38>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e067      	b.n	8007da0 <HAL_SAI_Receive_DMA+0x108>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	88fa      	ldrh	r2, [r7, #6]
 8007ce2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	88fa      	ldrh	r2, [r7, #6]
 8007cea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2222      	movs	r2, #34	@ 0x22
 8007cfa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d02:	4a29      	ldr	r2, [pc, #164]	@ (8007da8 <HAL_SAI_Receive_DMA+0x110>)
 8007d04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d0a:	4a28      	ldr	r2, [pc, #160]	@ (8007dac <HAL_SAI_Receive_DMA+0x114>)
 8007d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d12:	4a27      	ldr	r2, [pc, #156]	@ (8007db0 <HAL_SAI_Receive_DMA+0x118>)
 8007d14:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	331c      	adds	r3, #28
 8007d28:	4619      	mov	r1, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d36:	f7fc fda9 	bl	800488c <HAL_DMA_Start_IT>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e029      	b.n	8007da0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 f83e 	bl	8007dd0 <SAI_InterruptFlag>
 8007d54:	4601      	mov	r1, r0
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691a      	ldr	r2, [r3, #16]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007d72:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d107      	bne.n	8007d92 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007d90:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e000      	b.n	8007da0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8007d9e:	2302      	movs	r3, #2
  }
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	08007f89 	.word	0x08007f89
 8007dac:	08007f29 	.word	0x08007f29
 8007db0:	08007fa5 	.word	0x08007fa5

08007db4 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007dc2:	b2db      	uxtb	r3, r3
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d103      	bne.n	8007dec <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f043 0308 	orr.w	r3, r3, #8
 8007dea:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d10b      	bne.n	8007e0c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d003      	beq.n	8007e04 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d103      	bne.n	8007e0c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f043 0310 	orr.w	r3, r3, #16
 8007e0a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d003      	beq.n	8007e1c <SAI_InterruptFlag+0x4c>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d104      	bne.n	8007e26 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	e003      	b.n	8007e2e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f043 0304 	orr.w	r3, r3, #4
 8007e2c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8007e44:	4b17      	ldr	r3, [pc, #92]	@ (8007ea4 <SAI_Disable+0x68>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a17      	ldr	r2, [pc, #92]	@ (8007ea8 <SAI_Disable+0x6c>)
 8007e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4e:	0b1b      	lsrs	r3, r3, #12
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007e66:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	1e5a      	subs	r2, r3, #1
 8007e6c:	60fa      	str	r2, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10a      	bne.n	8007e88 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	72fb      	strb	r3, [r7, #11]
      break;
 8007e86:	e006      	b.n	8007e96 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e8      	bne.n	8007e68 <SAI_Disable+0x2c>

  return status;
 8007e96:	7afb      	ldrb	r3, [r7, #11]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	20000000 	.word	0x20000000
 8007ea8:	95cbec1b 	.word	0x95cbec1b

08007eac <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec2:	d01c      	beq.n	8007efe <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007eda:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007edc:	2100      	movs	r1, #0
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f7ff ff76 	bl	8007dd0 <SAI_InterruptFlag>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	43d9      	mvns	r1, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691a      	ldr	r2, [r3, #16]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	400a      	ands	r2, r1
 8007ef4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7fb fe0a 	bl	8003b18 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f7fb fe06 	bl	8003b2c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f34:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f3e:	d01c      	beq.n	8007f7a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007f4e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007f58:	2100      	movs	r1, #0
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff ff38 	bl	8007dd0 <SAI_InterruptFlag>
 8007f60:	4603      	mov	r3, r0
 8007f62:	43d9      	mvns	r1, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691a      	ldr	r2, [r3, #16]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	400a      	ands	r2, r1
 8007f70:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7fc f854 	bl	8004028 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f94:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7fc f850 	bl	800403c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007f9c:	bf00      	nop
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fb8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d004      	beq.n	8007fd6 <SAI_DMAError+0x32>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d112      	bne.n	8007ffc <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007fe4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f7ff ff28 	bl	8007e3c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f7fb fd9f 	bl	8003b40 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008002:	bf00      	nop
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e025      	b.n	800806a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7f9 f852 	bl	80010dc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3304      	adds	r3, #4
 8008048:	4619      	mov	r1, r3
 800804a:	4610      	mov	r0, r2
 800804c:	f000 fd16 	bl	8008a7c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	461a      	mov	r2, r3
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	f000 fd6a 	bl	8008b34 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e040      	b.n	8008106 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d106      	bne.n	800809a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7f9 febf 	bl	8001e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2224      	movs	r2, #36	@ 0x24
 800809e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0201 	bic.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fb15 	bl	80086e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f8ae 	bl	8008220 <UART_SetConfig>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e01b      	b.n	8008106 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0201 	orr.w	r2, r2, #1
 80080fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fb94 	bl	800882c <UART_CheckIdleState>
 8008104:	4603      	mov	r3, r0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b08a      	sub	sp, #40	@ 0x28
 8008112:	af02      	add	r7, sp, #8
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	603b      	str	r3, [r7, #0]
 800811a:	4613      	mov	r3, r2
 800811c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008122:	2b20      	cmp	r3, #32
 8008124:	d177      	bne.n	8008216 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <HAL_UART_Transmit+0x24>
 800812c:	88fb      	ldrh	r3, [r7, #6]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e070      	b.n	8008218 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2221      	movs	r2, #33	@ 0x21
 8008142:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008144:	f7fc f954 	bl	80043f0 <HAL_GetTick>
 8008148:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	88fa      	ldrh	r2, [r7, #6]
 800814e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	88fa      	ldrh	r2, [r7, #6]
 8008156:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008162:	d108      	bne.n	8008176 <HAL_UART_Transmit+0x68>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d104      	bne.n	8008176 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800816c:	2300      	movs	r3, #0
 800816e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	61bb      	str	r3, [r7, #24]
 8008174:	e003      	b.n	800817e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800817a:	2300      	movs	r3, #0
 800817c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800817e:	e02f      	b.n	80081e0 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2200      	movs	r2, #0
 8008188:	2180      	movs	r1, #128	@ 0x80
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 fba5 	bl	80088da <UART_WaitOnFlagUntilTimeout>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d004      	beq.n	80081a0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e03b      	b.n	8008218 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10b      	bne.n	80081be <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	3302      	adds	r3, #2
 80081ba:	61bb      	str	r3, [r7, #24]
 80081bc:	e007      	b.n	80081ce <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	781a      	ldrb	r2, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	3301      	adds	r3, #1
 80081cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1c9      	bne.n	8008180 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2200      	movs	r2, #0
 80081f4:	2140      	movs	r1, #64	@ 0x40
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 fb6f 	bl	80088da <UART_WaitOnFlagUntilTimeout>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e005      	b.n	8008218 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2220      	movs	r2, #32
 8008210:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e000      	b.n	8008218 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008216:	2302      	movs	r3, #2
  }
}
 8008218:	4618      	mov	r0, r3
 800821a:	3720      	adds	r7, #32
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b088      	sub	sp, #32
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	431a      	orrs	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	431a      	orrs	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4ba6      	ldr	r3, [pc, #664]	@ (80084e4 <UART_SetConfig+0x2c4>)
 800824c:	4013      	ands	r3, r2
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	6979      	ldr	r1, [r7, #20]
 8008254:	430b      	orrs	r3, r1
 8008256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	4313      	orrs	r3, r2
 800827c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	430a      	orrs	r2, r1
 8008290:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a94      	ldr	r2, [pc, #592]	@ (80084e8 <UART_SetConfig+0x2c8>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d120      	bne.n	80082de <UART_SetConfig+0xbe>
 800829c:	4b93      	ldr	r3, [pc, #588]	@ (80084ec <UART_SetConfig+0x2cc>)
 800829e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a2:	f003 0303 	and.w	r3, r3, #3
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d816      	bhi.n	80082d8 <UART_SetConfig+0xb8>
 80082aa:	a201      	add	r2, pc, #4	@ (adr r2, 80082b0 <UART_SetConfig+0x90>)
 80082ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b0:	080082c1 	.word	0x080082c1
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	080082c7 	.word	0x080082c7
 80082bc:	080082d3 	.word	0x080082d3
 80082c0:	2301      	movs	r3, #1
 80082c2:	77fb      	strb	r3, [r7, #31]
 80082c4:	e150      	b.n	8008568 <UART_SetConfig+0x348>
 80082c6:	2302      	movs	r3, #2
 80082c8:	77fb      	strb	r3, [r7, #31]
 80082ca:	e14d      	b.n	8008568 <UART_SetConfig+0x348>
 80082cc:	2304      	movs	r3, #4
 80082ce:	77fb      	strb	r3, [r7, #31]
 80082d0:	e14a      	b.n	8008568 <UART_SetConfig+0x348>
 80082d2:	2308      	movs	r3, #8
 80082d4:	77fb      	strb	r3, [r7, #31]
 80082d6:	e147      	b.n	8008568 <UART_SetConfig+0x348>
 80082d8:	2310      	movs	r3, #16
 80082da:	77fb      	strb	r3, [r7, #31]
 80082dc:	e144      	b.n	8008568 <UART_SetConfig+0x348>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a83      	ldr	r2, [pc, #524]	@ (80084f0 <UART_SetConfig+0x2d0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d132      	bne.n	800834e <UART_SetConfig+0x12e>
 80082e8:	4b80      	ldr	r3, [pc, #512]	@ (80084ec <UART_SetConfig+0x2cc>)
 80082ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082ee:	f003 030c 	and.w	r3, r3, #12
 80082f2:	2b0c      	cmp	r3, #12
 80082f4:	d828      	bhi.n	8008348 <UART_SetConfig+0x128>
 80082f6:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <UART_SetConfig+0xdc>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	08008331 	.word	0x08008331
 8008300:	08008349 	.word	0x08008349
 8008304:	08008349 	.word	0x08008349
 8008308:	08008349 	.word	0x08008349
 800830c:	0800833d 	.word	0x0800833d
 8008310:	08008349 	.word	0x08008349
 8008314:	08008349 	.word	0x08008349
 8008318:	08008349 	.word	0x08008349
 800831c:	08008337 	.word	0x08008337
 8008320:	08008349 	.word	0x08008349
 8008324:	08008349 	.word	0x08008349
 8008328:	08008349 	.word	0x08008349
 800832c:	08008343 	.word	0x08008343
 8008330:	2300      	movs	r3, #0
 8008332:	77fb      	strb	r3, [r7, #31]
 8008334:	e118      	b.n	8008568 <UART_SetConfig+0x348>
 8008336:	2302      	movs	r3, #2
 8008338:	77fb      	strb	r3, [r7, #31]
 800833a:	e115      	b.n	8008568 <UART_SetConfig+0x348>
 800833c:	2304      	movs	r3, #4
 800833e:	77fb      	strb	r3, [r7, #31]
 8008340:	e112      	b.n	8008568 <UART_SetConfig+0x348>
 8008342:	2308      	movs	r3, #8
 8008344:	77fb      	strb	r3, [r7, #31]
 8008346:	e10f      	b.n	8008568 <UART_SetConfig+0x348>
 8008348:	2310      	movs	r3, #16
 800834a:	77fb      	strb	r3, [r7, #31]
 800834c:	e10c      	b.n	8008568 <UART_SetConfig+0x348>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a68      	ldr	r2, [pc, #416]	@ (80084f4 <UART_SetConfig+0x2d4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d120      	bne.n	800839a <UART_SetConfig+0x17a>
 8008358:	4b64      	ldr	r3, [pc, #400]	@ (80084ec <UART_SetConfig+0x2cc>)
 800835a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800835e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008362:	2b30      	cmp	r3, #48	@ 0x30
 8008364:	d013      	beq.n	800838e <UART_SetConfig+0x16e>
 8008366:	2b30      	cmp	r3, #48	@ 0x30
 8008368:	d814      	bhi.n	8008394 <UART_SetConfig+0x174>
 800836a:	2b20      	cmp	r3, #32
 800836c:	d009      	beq.n	8008382 <UART_SetConfig+0x162>
 800836e:	2b20      	cmp	r3, #32
 8008370:	d810      	bhi.n	8008394 <UART_SetConfig+0x174>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <UART_SetConfig+0x15c>
 8008376:	2b10      	cmp	r3, #16
 8008378:	d006      	beq.n	8008388 <UART_SetConfig+0x168>
 800837a:	e00b      	b.n	8008394 <UART_SetConfig+0x174>
 800837c:	2300      	movs	r3, #0
 800837e:	77fb      	strb	r3, [r7, #31]
 8008380:	e0f2      	b.n	8008568 <UART_SetConfig+0x348>
 8008382:	2302      	movs	r3, #2
 8008384:	77fb      	strb	r3, [r7, #31]
 8008386:	e0ef      	b.n	8008568 <UART_SetConfig+0x348>
 8008388:	2304      	movs	r3, #4
 800838a:	77fb      	strb	r3, [r7, #31]
 800838c:	e0ec      	b.n	8008568 <UART_SetConfig+0x348>
 800838e:	2308      	movs	r3, #8
 8008390:	77fb      	strb	r3, [r7, #31]
 8008392:	e0e9      	b.n	8008568 <UART_SetConfig+0x348>
 8008394:	2310      	movs	r3, #16
 8008396:	77fb      	strb	r3, [r7, #31]
 8008398:	e0e6      	b.n	8008568 <UART_SetConfig+0x348>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a56      	ldr	r2, [pc, #344]	@ (80084f8 <UART_SetConfig+0x2d8>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d120      	bne.n	80083e6 <UART_SetConfig+0x1c6>
 80083a4:	4b51      	ldr	r3, [pc, #324]	@ (80084ec <UART_SetConfig+0x2cc>)
 80083a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80083ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80083b0:	d013      	beq.n	80083da <UART_SetConfig+0x1ba>
 80083b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80083b4:	d814      	bhi.n	80083e0 <UART_SetConfig+0x1c0>
 80083b6:	2b80      	cmp	r3, #128	@ 0x80
 80083b8:	d009      	beq.n	80083ce <UART_SetConfig+0x1ae>
 80083ba:	2b80      	cmp	r3, #128	@ 0x80
 80083bc:	d810      	bhi.n	80083e0 <UART_SetConfig+0x1c0>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <UART_SetConfig+0x1a8>
 80083c2:	2b40      	cmp	r3, #64	@ 0x40
 80083c4:	d006      	beq.n	80083d4 <UART_SetConfig+0x1b4>
 80083c6:	e00b      	b.n	80083e0 <UART_SetConfig+0x1c0>
 80083c8:	2300      	movs	r3, #0
 80083ca:	77fb      	strb	r3, [r7, #31]
 80083cc:	e0cc      	b.n	8008568 <UART_SetConfig+0x348>
 80083ce:	2302      	movs	r3, #2
 80083d0:	77fb      	strb	r3, [r7, #31]
 80083d2:	e0c9      	b.n	8008568 <UART_SetConfig+0x348>
 80083d4:	2304      	movs	r3, #4
 80083d6:	77fb      	strb	r3, [r7, #31]
 80083d8:	e0c6      	b.n	8008568 <UART_SetConfig+0x348>
 80083da:	2308      	movs	r3, #8
 80083dc:	77fb      	strb	r3, [r7, #31]
 80083de:	e0c3      	b.n	8008568 <UART_SetConfig+0x348>
 80083e0:	2310      	movs	r3, #16
 80083e2:	77fb      	strb	r3, [r7, #31]
 80083e4:	e0c0      	b.n	8008568 <UART_SetConfig+0x348>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a44      	ldr	r2, [pc, #272]	@ (80084fc <UART_SetConfig+0x2dc>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d125      	bne.n	800843c <UART_SetConfig+0x21c>
 80083f0:	4b3e      	ldr	r3, [pc, #248]	@ (80084ec <UART_SetConfig+0x2cc>)
 80083f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083fe:	d017      	beq.n	8008430 <UART_SetConfig+0x210>
 8008400:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008404:	d817      	bhi.n	8008436 <UART_SetConfig+0x216>
 8008406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800840a:	d00b      	beq.n	8008424 <UART_SetConfig+0x204>
 800840c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008410:	d811      	bhi.n	8008436 <UART_SetConfig+0x216>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <UART_SetConfig+0x1fe>
 8008416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800841a:	d006      	beq.n	800842a <UART_SetConfig+0x20a>
 800841c:	e00b      	b.n	8008436 <UART_SetConfig+0x216>
 800841e:	2300      	movs	r3, #0
 8008420:	77fb      	strb	r3, [r7, #31]
 8008422:	e0a1      	b.n	8008568 <UART_SetConfig+0x348>
 8008424:	2302      	movs	r3, #2
 8008426:	77fb      	strb	r3, [r7, #31]
 8008428:	e09e      	b.n	8008568 <UART_SetConfig+0x348>
 800842a:	2304      	movs	r3, #4
 800842c:	77fb      	strb	r3, [r7, #31]
 800842e:	e09b      	b.n	8008568 <UART_SetConfig+0x348>
 8008430:	2308      	movs	r3, #8
 8008432:	77fb      	strb	r3, [r7, #31]
 8008434:	e098      	b.n	8008568 <UART_SetConfig+0x348>
 8008436:	2310      	movs	r3, #16
 8008438:	77fb      	strb	r3, [r7, #31]
 800843a:	e095      	b.n	8008568 <UART_SetConfig+0x348>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a2f      	ldr	r2, [pc, #188]	@ (8008500 <UART_SetConfig+0x2e0>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d125      	bne.n	8008492 <UART_SetConfig+0x272>
 8008446:	4b29      	ldr	r3, [pc, #164]	@ (80084ec <UART_SetConfig+0x2cc>)
 8008448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800844c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008450:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008454:	d017      	beq.n	8008486 <UART_SetConfig+0x266>
 8008456:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800845a:	d817      	bhi.n	800848c <UART_SetConfig+0x26c>
 800845c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008460:	d00b      	beq.n	800847a <UART_SetConfig+0x25a>
 8008462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008466:	d811      	bhi.n	800848c <UART_SetConfig+0x26c>
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <UART_SetConfig+0x254>
 800846c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008470:	d006      	beq.n	8008480 <UART_SetConfig+0x260>
 8008472:	e00b      	b.n	800848c <UART_SetConfig+0x26c>
 8008474:	2301      	movs	r3, #1
 8008476:	77fb      	strb	r3, [r7, #31]
 8008478:	e076      	b.n	8008568 <UART_SetConfig+0x348>
 800847a:	2302      	movs	r3, #2
 800847c:	77fb      	strb	r3, [r7, #31]
 800847e:	e073      	b.n	8008568 <UART_SetConfig+0x348>
 8008480:	2304      	movs	r3, #4
 8008482:	77fb      	strb	r3, [r7, #31]
 8008484:	e070      	b.n	8008568 <UART_SetConfig+0x348>
 8008486:	2308      	movs	r3, #8
 8008488:	77fb      	strb	r3, [r7, #31]
 800848a:	e06d      	b.n	8008568 <UART_SetConfig+0x348>
 800848c:	2310      	movs	r3, #16
 800848e:	77fb      	strb	r3, [r7, #31]
 8008490:	e06a      	b.n	8008568 <UART_SetConfig+0x348>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a1b      	ldr	r2, [pc, #108]	@ (8008504 <UART_SetConfig+0x2e4>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d138      	bne.n	800850e <UART_SetConfig+0x2ee>
 800849c:	4b13      	ldr	r3, [pc, #76]	@ (80084ec <UART_SetConfig+0x2cc>)
 800849e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80084a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084aa:	d017      	beq.n	80084dc <UART_SetConfig+0x2bc>
 80084ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084b0:	d82a      	bhi.n	8008508 <UART_SetConfig+0x2e8>
 80084b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084b6:	d00b      	beq.n	80084d0 <UART_SetConfig+0x2b0>
 80084b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084bc:	d824      	bhi.n	8008508 <UART_SetConfig+0x2e8>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <UART_SetConfig+0x2aa>
 80084c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c6:	d006      	beq.n	80084d6 <UART_SetConfig+0x2b6>
 80084c8:	e01e      	b.n	8008508 <UART_SetConfig+0x2e8>
 80084ca:	2300      	movs	r3, #0
 80084cc:	77fb      	strb	r3, [r7, #31]
 80084ce:	e04b      	b.n	8008568 <UART_SetConfig+0x348>
 80084d0:	2302      	movs	r3, #2
 80084d2:	77fb      	strb	r3, [r7, #31]
 80084d4:	e048      	b.n	8008568 <UART_SetConfig+0x348>
 80084d6:	2304      	movs	r3, #4
 80084d8:	77fb      	strb	r3, [r7, #31]
 80084da:	e045      	b.n	8008568 <UART_SetConfig+0x348>
 80084dc:	2308      	movs	r3, #8
 80084de:	77fb      	strb	r3, [r7, #31]
 80084e0:	e042      	b.n	8008568 <UART_SetConfig+0x348>
 80084e2:	bf00      	nop
 80084e4:	efff69f3 	.word	0xefff69f3
 80084e8:	40011000 	.word	0x40011000
 80084ec:	40023800 	.word	0x40023800
 80084f0:	40004400 	.word	0x40004400
 80084f4:	40004800 	.word	0x40004800
 80084f8:	40004c00 	.word	0x40004c00
 80084fc:	40005000 	.word	0x40005000
 8008500:	40011400 	.word	0x40011400
 8008504:	40007800 	.word	0x40007800
 8008508:	2310      	movs	r3, #16
 800850a:	77fb      	strb	r3, [r7, #31]
 800850c:	e02c      	b.n	8008568 <UART_SetConfig+0x348>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a72      	ldr	r2, [pc, #456]	@ (80086dc <UART_SetConfig+0x4bc>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d125      	bne.n	8008564 <UART_SetConfig+0x344>
 8008518:	4b71      	ldr	r3, [pc, #452]	@ (80086e0 <UART_SetConfig+0x4c0>)
 800851a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800851e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008522:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008526:	d017      	beq.n	8008558 <UART_SetConfig+0x338>
 8008528:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800852c:	d817      	bhi.n	800855e <UART_SetConfig+0x33e>
 800852e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008532:	d00b      	beq.n	800854c <UART_SetConfig+0x32c>
 8008534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008538:	d811      	bhi.n	800855e <UART_SetConfig+0x33e>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <UART_SetConfig+0x326>
 800853e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008542:	d006      	beq.n	8008552 <UART_SetConfig+0x332>
 8008544:	e00b      	b.n	800855e <UART_SetConfig+0x33e>
 8008546:	2300      	movs	r3, #0
 8008548:	77fb      	strb	r3, [r7, #31]
 800854a:	e00d      	b.n	8008568 <UART_SetConfig+0x348>
 800854c:	2302      	movs	r3, #2
 800854e:	77fb      	strb	r3, [r7, #31]
 8008550:	e00a      	b.n	8008568 <UART_SetConfig+0x348>
 8008552:	2304      	movs	r3, #4
 8008554:	77fb      	strb	r3, [r7, #31]
 8008556:	e007      	b.n	8008568 <UART_SetConfig+0x348>
 8008558:	2308      	movs	r3, #8
 800855a:	77fb      	strb	r3, [r7, #31]
 800855c:	e004      	b.n	8008568 <UART_SetConfig+0x348>
 800855e:	2310      	movs	r3, #16
 8008560:	77fb      	strb	r3, [r7, #31]
 8008562:	e001      	b.n	8008568 <UART_SetConfig+0x348>
 8008564:	2310      	movs	r3, #16
 8008566:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008570:	d15b      	bne.n	800862a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008572:	7ffb      	ldrb	r3, [r7, #31]
 8008574:	2b08      	cmp	r3, #8
 8008576:	d828      	bhi.n	80085ca <UART_SetConfig+0x3aa>
 8008578:	a201      	add	r2, pc, #4	@ (adr r2, 8008580 <UART_SetConfig+0x360>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	080085a5 	.word	0x080085a5
 8008584:	080085ad 	.word	0x080085ad
 8008588:	080085b5 	.word	0x080085b5
 800858c:	080085cb 	.word	0x080085cb
 8008590:	080085bb 	.word	0x080085bb
 8008594:	080085cb 	.word	0x080085cb
 8008598:	080085cb 	.word	0x080085cb
 800859c:	080085cb 	.word	0x080085cb
 80085a0:	080085c3 	.word	0x080085c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085a4:	f7fe fa3e 	bl	8006a24 <HAL_RCC_GetPCLK1Freq>
 80085a8:	61b8      	str	r0, [r7, #24]
        break;
 80085aa:	e013      	b.n	80085d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085ac:	f7fe fa4e 	bl	8006a4c <HAL_RCC_GetPCLK2Freq>
 80085b0:	61b8      	str	r0, [r7, #24]
        break;
 80085b2:	e00f      	b.n	80085d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085b4:	4b4b      	ldr	r3, [pc, #300]	@ (80086e4 <UART_SetConfig+0x4c4>)
 80085b6:	61bb      	str	r3, [r7, #24]
        break;
 80085b8:	e00c      	b.n	80085d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085ba:	f7fe f961 	bl	8006880 <HAL_RCC_GetSysClockFreq>
 80085be:	61b8      	str	r0, [r7, #24]
        break;
 80085c0:	e008      	b.n	80085d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085c6:	61bb      	str	r3, [r7, #24]
        break;
 80085c8:	e004      	b.n	80085d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	77bb      	strb	r3, [r7, #30]
        break;
 80085d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d074      	beq.n	80086c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	005a      	lsls	r2, r3, #1
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	085b      	lsrs	r3, r3, #1
 80085e4:	441a      	add	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	2b0f      	cmp	r3, #15
 80085f4:	d916      	bls.n	8008624 <UART_SetConfig+0x404>
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085fc:	d212      	bcs.n	8008624 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	b29b      	uxth	r3, r3
 8008602:	f023 030f 	bic.w	r3, r3, #15
 8008606:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	085b      	lsrs	r3, r3, #1
 800860c:	b29b      	uxth	r3, r3
 800860e:	f003 0307 	and.w	r3, r3, #7
 8008612:	b29a      	uxth	r2, r3
 8008614:	89fb      	ldrh	r3, [r7, #14]
 8008616:	4313      	orrs	r3, r2
 8008618:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	89fa      	ldrh	r2, [r7, #14]
 8008620:	60da      	str	r2, [r3, #12]
 8008622:	e04f      	b.n	80086c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	77bb      	strb	r3, [r7, #30]
 8008628:	e04c      	b.n	80086c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800862a:	7ffb      	ldrb	r3, [r7, #31]
 800862c:	2b08      	cmp	r3, #8
 800862e:	d828      	bhi.n	8008682 <UART_SetConfig+0x462>
 8008630:	a201      	add	r2, pc, #4	@ (adr r2, 8008638 <UART_SetConfig+0x418>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	0800865d 	.word	0x0800865d
 800863c:	08008665 	.word	0x08008665
 8008640:	0800866d 	.word	0x0800866d
 8008644:	08008683 	.word	0x08008683
 8008648:	08008673 	.word	0x08008673
 800864c:	08008683 	.word	0x08008683
 8008650:	08008683 	.word	0x08008683
 8008654:	08008683 	.word	0x08008683
 8008658:	0800867b 	.word	0x0800867b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800865c:	f7fe f9e2 	bl	8006a24 <HAL_RCC_GetPCLK1Freq>
 8008660:	61b8      	str	r0, [r7, #24]
        break;
 8008662:	e013      	b.n	800868c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008664:	f7fe f9f2 	bl	8006a4c <HAL_RCC_GetPCLK2Freq>
 8008668:	61b8      	str	r0, [r7, #24]
        break;
 800866a:	e00f      	b.n	800868c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800866c:	4b1d      	ldr	r3, [pc, #116]	@ (80086e4 <UART_SetConfig+0x4c4>)
 800866e:	61bb      	str	r3, [r7, #24]
        break;
 8008670:	e00c      	b.n	800868c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008672:	f7fe f905 	bl	8006880 <HAL_RCC_GetSysClockFreq>
 8008676:	61b8      	str	r0, [r7, #24]
        break;
 8008678:	e008      	b.n	800868c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800867a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800867e:	61bb      	str	r3, [r7, #24]
        break;
 8008680:	e004      	b.n	800868c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	77bb      	strb	r3, [r7, #30]
        break;
 800868a:	bf00      	nop
    }

    if (pclk != 0U)
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d018      	beq.n	80086c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	085a      	lsrs	r2, r3, #1
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	441a      	add	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	2b0f      	cmp	r3, #15
 80086aa:	d909      	bls.n	80086c0 <UART_SetConfig+0x4a0>
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086b2:	d205      	bcs.n	80086c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60da      	str	r2, [r3, #12]
 80086be:	e001      	b.n	80086c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80086d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	40007c00 	.word	0x40007c00
 80086e0:	40023800 	.word	0x40023800
 80086e4:	00f42400 	.word	0x00f42400

080086e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	430a      	orrs	r2, r1
 8008732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875a:	f003 0304 	and.w	r3, r3, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	430a      	orrs	r2, r1
 8008776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877c:	f003 0310 	and.w	r3, r3, #16
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	430a      	orrs	r2, r1
 8008798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879e:	f003 0320 	and.w	r3, r3, #32
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01a      	beq.n	80087fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087e6:	d10a      	bne.n	80087fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	605a      	str	r2, [r3, #4]
  }
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08c      	sub	sp, #48	@ 0x30
 8008830:	af02      	add	r7, sp, #8
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800883c:	f7fb fdd8 	bl	80043f0 <HAL_GetTick>
 8008840:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0308 	and.w	r3, r3, #8
 800884c:	2b08      	cmp	r3, #8
 800884e:	d12e      	bne.n	80088ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008850:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008858:	2200      	movs	r2, #0
 800885a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f83b 	bl	80088da <UART_WaitOnFlagUntilTimeout>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d021      	beq.n	80088ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	60fb      	str	r3, [r7, #12]
   return(result);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800887e:	623b      	str	r3, [r7, #32]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	61fb      	str	r3, [r7, #28]
 800888a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	69b9      	ldr	r1, [r7, #24]
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	617b      	str	r3, [r7, #20]
   return(result);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e6      	bne.n	800886a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e011      	b.n	80088d2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2220      	movs	r2, #32
 80088b2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3728      	adds	r7, #40	@ 0x28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	603b      	str	r3, [r7, #0]
 80088e6:	4613      	mov	r3, r2
 80088e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ea:	e04f      	b.n	800898c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f2:	d04b      	beq.n	800898c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f4:	f7fb fd7c 	bl	80043f0 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	429a      	cmp	r2, r3
 8008902:	d302      	bcc.n	800890a <UART_WaitOnFlagUntilTimeout+0x30>
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e04e      	b.n	80089ac <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d037      	beq.n	800898c <UART_WaitOnFlagUntilTimeout+0xb2>
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b80      	cmp	r3, #128	@ 0x80
 8008920:	d034      	beq.n	800898c <UART_WaitOnFlagUntilTimeout+0xb2>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b40      	cmp	r3, #64	@ 0x40
 8008926:	d031      	beq.n	800898c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f003 0308 	and.w	r3, r3, #8
 8008932:	2b08      	cmp	r3, #8
 8008934:	d110      	bne.n	8008958 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2208      	movs	r2, #8
 800893c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 f838 	bl	80089b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2208      	movs	r2, #8
 8008948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e029      	b.n	80089ac <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008966:	d111      	bne.n	800898c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008970:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 f81e 	bl	80089b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e00f      	b.n	80089ac <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	69da      	ldr	r2, [r3, #28]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4013      	ands	r3, r2
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	429a      	cmp	r2, r3
 800899a:	bf0c      	ite	eq
 800899c:	2301      	moveq	r3, #1
 800899e:	2300      	movne	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d0a0      	beq.n	80088ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b095      	sub	sp, #84	@ 0x54
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089da:	643b      	str	r3, [r7, #64]	@ 0x40
 80089dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e6      	bne.n	80089bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3308      	adds	r3, #8
 80089f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	f023 0301 	bic.w	r3, r3, #1
 8008a04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e5      	bne.n	80089ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d118      	bne.n	8008a5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f023 0310 	bic.w	r3, r3, #16
 8008a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a48:	61bb      	str	r3, [r7, #24]
 8008a4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6979      	ldr	r1, [r7, #20]
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	613b      	str	r3, [r7, #16]
   return(result);
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008a70:	bf00      	nop
 8008a72:	3754      	adds	r7, #84	@ 0x54
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d121      	bne.n	8008ad2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4b27      	ldr	r3, [pc, #156]	@ (8008b30 <FMC_SDRAM_Init+0xb4>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	6851      	ldr	r1, [r2, #4]
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	6892      	ldr	r2, [r2, #8]
 8008a9e:	4311      	orrs	r1, r2
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	68d2      	ldr	r2, [r2, #12]
 8008aa4:	4311      	orrs	r1, r2
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	6912      	ldr	r2, [r2, #16]
 8008aaa:	4311      	orrs	r1, r2
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	6952      	ldr	r2, [r2, #20]
 8008ab0:	4311      	orrs	r1, r2
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	6992      	ldr	r2, [r2, #24]
 8008ab6:	4311      	orrs	r1, r2
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	69d2      	ldr	r2, [r2, #28]
 8008abc:	4311      	orrs	r1, r2
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	6a12      	ldr	r2, [r2, #32]
 8008ac2:	4311      	orrs	r1, r2
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	e026      	b.n	8008b20 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	69d9      	ldr	r1, [r3, #28]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	4319      	orrs	r1, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae8:	430b      	orrs	r3, r1
 8008aea:	431a      	orrs	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	4b0e      	ldr	r3, [pc, #56]	@ (8008b30 <FMC_SDRAM_Init+0xb4>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	6851      	ldr	r1, [r2, #4]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	6892      	ldr	r2, [r2, #8]
 8008b00:	4311      	orrs	r1, r2
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	68d2      	ldr	r2, [r2, #12]
 8008b06:	4311      	orrs	r1, r2
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	6912      	ldr	r2, [r2, #16]
 8008b0c:	4311      	orrs	r1, r2
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	6952      	ldr	r2, [r2, #20]
 8008b12:	4311      	orrs	r1, r2
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	6992      	ldr	r2, [r2, #24]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	ffff8000 	.word	0xffff8000

08008b34 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d128      	bne.n	8008b98 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	1e59      	subs	r1, r3, #1
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	011b      	lsls	r3, r3, #4
 8008b5c:	4319      	orrs	r1, r3
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	4319      	orrs	r1, r3
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	031b      	lsls	r3, r3, #12
 8008b70:	4319      	orrs	r1, r3
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	041b      	lsls	r3, r3, #16
 8008b7a:	4319      	orrs	r1, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	051b      	lsls	r3, r3, #20
 8008b84:	4319      	orrs	r1, r3
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	061b      	lsls	r3, r3, #24
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	431a      	orrs	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	609a      	str	r2, [r3, #8]
 8008b96:	e02d      	b.n	8008bf4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	4b19      	ldr	r3, [pc, #100]	@ (8008c04 <FMC_SDRAM_Timing_Init+0xd0>)
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	68d2      	ldr	r2, [r2, #12]
 8008ba4:	3a01      	subs	r2, #1
 8008ba6:	0311      	lsls	r1, r2, #12
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	6952      	ldr	r2, [r2, #20]
 8008bac:	3a01      	subs	r2, #1
 8008bae:	0512      	lsls	r2, r2, #20
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	1e59      	subs	r1, r3, #1
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	4319      	orrs	r1, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	021b      	lsls	r3, r3, #8
 8008bd8:	4319      	orrs	r1, r3
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	3b01      	subs	r3, #1
 8008be0:	041b      	lsls	r3, r3, #16
 8008be2:	4319      	orrs	r1, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	061b      	lsls	r3, r3, #24
 8008bec:	430b      	orrs	r3, r1
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	ff0f0fff 	.word	0xff0f0fff

08008c08 <__cvt>:
 8008c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	ec57 6b10 	vmov	r6, r7, d0
 8008c10:	2f00      	cmp	r7, #0
 8008c12:	460c      	mov	r4, r1
 8008c14:	4619      	mov	r1, r3
 8008c16:	463b      	mov	r3, r7
 8008c18:	bfbb      	ittet	lt
 8008c1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008c1e:	461f      	movlt	r7, r3
 8008c20:	2300      	movge	r3, #0
 8008c22:	232d      	movlt	r3, #45	@ 0x2d
 8008c24:	700b      	strb	r3, [r1, #0]
 8008c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008c2c:	4691      	mov	r9, r2
 8008c2e:	f023 0820 	bic.w	r8, r3, #32
 8008c32:	bfbc      	itt	lt
 8008c34:	4632      	movlt	r2, r6
 8008c36:	4616      	movlt	r6, r2
 8008c38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c3c:	d005      	beq.n	8008c4a <__cvt+0x42>
 8008c3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c42:	d100      	bne.n	8008c46 <__cvt+0x3e>
 8008c44:	3401      	adds	r4, #1
 8008c46:	2102      	movs	r1, #2
 8008c48:	e000      	b.n	8008c4c <__cvt+0x44>
 8008c4a:	2103      	movs	r1, #3
 8008c4c:	ab03      	add	r3, sp, #12
 8008c4e:	9301      	str	r3, [sp, #4]
 8008c50:	ab02      	add	r3, sp, #8
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	ec47 6b10 	vmov	d0, r6, r7
 8008c58:	4653      	mov	r3, sl
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	f000 ff4c 	bl	8009af8 <_dtoa_r>
 8008c60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c64:	4605      	mov	r5, r0
 8008c66:	d119      	bne.n	8008c9c <__cvt+0x94>
 8008c68:	f019 0f01 	tst.w	r9, #1
 8008c6c:	d00e      	beq.n	8008c8c <__cvt+0x84>
 8008c6e:	eb00 0904 	add.w	r9, r0, r4
 8008c72:	2200      	movs	r2, #0
 8008c74:	2300      	movs	r3, #0
 8008c76:	4630      	mov	r0, r6
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 ff45 	bl	8000b08 <__aeabi_dcmpeq>
 8008c7e:	b108      	cbz	r0, 8008c84 <__cvt+0x7c>
 8008c80:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c84:	2230      	movs	r2, #48	@ 0x30
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	454b      	cmp	r3, r9
 8008c8a:	d31e      	bcc.n	8008cca <__cvt+0xc2>
 8008c8c:	9b03      	ldr	r3, [sp, #12]
 8008c8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c90:	1b5b      	subs	r3, r3, r5
 8008c92:	4628      	mov	r0, r5
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	b004      	add	sp, #16
 8008c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ca0:	eb00 0904 	add.w	r9, r0, r4
 8008ca4:	d1e5      	bne.n	8008c72 <__cvt+0x6a>
 8008ca6:	7803      	ldrb	r3, [r0, #0]
 8008ca8:	2b30      	cmp	r3, #48	@ 0x30
 8008caa:	d10a      	bne.n	8008cc2 <__cvt+0xba>
 8008cac:	2200      	movs	r2, #0
 8008cae:	2300      	movs	r3, #0
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	f7f7 ff28 	bl	8000b08 <__aeabi_dcmpeq>
 8008cb8:	b918      	cbnz	r0, 8008cc2 <__cvt+0xba>
 8008cba:	f1c4 0401 	rsb	r4, r4, #1
 8008cbe:	f8ca 4000 	str.w	r4, [sl]
 8008cc2:	f8da 3000 	ldr.w	r3, [sl]
 8008cc6:	4499      	add	r9, r3
 8008cc8:	e7d3      	b.n	8008c72 <__cvt+0x6a>
 8008cca:	1c59      	adds	r1, r3, #1
 8008ccc:	9103      	str	r1, [sp, #12]
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e7d9      	b.n	8008c86 <__cvt+0x7e>

08008cd2 <__exponent>:
 8008cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	bfba      	itte	lt
 8008cd8:	4249      	neglt	r1, r1
 8008cda:	232d      	movlt	r3, #45	@ 0x2d
 8008cdc:	232b      	movge	r3, #43	@ 0x2b
 8008cde:	2909      	cmp	r1, #9
 8008ce0:	7002      	strb	r2, [r0, #0]
 8008ce2:	7043      	strb	r3, [r0, #1]
 8008ce4:	dd29      	ble.n	8008d3a <__exponent+0x68>
 8008ce6:	f10d 0307 	add.w	r3, sp, #7
 8008cea:	461d      	mov	r5, r3
 8008cec:	270a      	movs	r7, #10
 8008cee:	461a      	mov	r2, r3
 8008cf0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008cf4:	fb07 1416 	mls	r4, r7, r6, r1
 8008cf8:	3430      	adds	r4, #48	@ 0x30
 8008cfa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008cfe:	460c      	mov	r4, r1
 8008d00:	2c63      	cmp	r4, #99	@ 0x63
 8008d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d06:	4631      	mov	r1, r6
 8008d08:	dcf1      	bgt.n	8008cee <__exponent+0x1c>
 8008d0a:	3130      	adds	r1, #48	@ 0x30
 8008d0c:	1e94      	subs	r4, r2, #2
 8008d0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d12:	1c41      	adds	r1, r0, #1
 8008d14:	4623      	mov	r3, r4
 8008d16:	42ab      	cmp	r3, r5
 8008d18:	d30a      	bcc.n	8008d30 <__exponent+0x5e>
 8008d1a:	f10d 0309 	add.w	r3, sp, #9
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	42ac      	cmp	r4, r5
 8008d22:	bf88      	it	hi
 8008d24:	2300      	movhi	r3, #0
 8008d26:	3302      	adds	r3, #2
 8008d28:	4403      	add	r3, r0
 8008d2a:	1a18      	subs	r0, r3, r0
 8008d2c:	b003      	add	sp, #12
 8008d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d30:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d34:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d38:	e7ed      	b.n	8008d16 <__exponent+0x44>
 8008d3a:	2330      	movs	r3, #48	@ 0x30
 8008d3c:	3130      	adds	r1, #48	@ 0x30
 8008d3e:	7083      	strb	r3, [r0, #2]
 8008d40:	70c1      	strb	r1, [r0, #3]
 8008d42:	1d03      	adds	r3, r0, #4
 8008d44:	e7f1      	b.n	8008d2a <__exponent+0x58>
	...

08008d48 <_printf_float>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	b08d      	sub	sp, #52	@ 0x34
 8008d4e:	460c      	mov	r4, r1
 8008d50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008d54:	4616      	mov	r6, r2
 8008d56:	461f      	mov	r7, r3
 8008d58:	4605      	mov	r5, r0
 8008d5a:	f000 fdbf 	bl	80098dc <_localeconv_r>
 8008d5e:	6803      	ldr	r3, [r0, #0]
 8008d60:	9304      	str	r3, [sp, #16]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7f7 faa4 	bl	80002b0 <strlen>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d70:	9005      	str	r0, [sp, #20]
 8008d72:	3307      	adds	r3, #7
 8008d74:	f023 0307 	bic.w	r3, r3, #7
 8008d78:	f103 0208 	add.w	r2, r3, #8
 8008d7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d80:	f8d4 b000 	ldr.w	fp, [r4]
 8008d84:	f8c8 2000 	str.w	r2, [r8]
 8008d88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d90:	9307      	str	r3, [sp, #28]
 8008d92:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d9e:	4b9c      	ldr	r3, [pc, #624]	@ (8009010 <_printf_float+0x2c8>)
 8008da0:	f04f 32ff 	mov.w	r2, #4294967295
 8008da4:	f7f7 fee2 	bl	8000b6c <__aeabi_dcmpun>
 8008da8:	bb70      	cbnz	r0, 8008e08 <_printf_float+0xc0>
 8008daa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dae:	4b98      	ldr	r3, [pc, #608]	@ (8009010 <_printf_float+0x2c8>)
 8008db0:	f04f 32ff 	mov.w	r2, #4294967295
 8008db4:	f7f7 febc 	bl	8000b30 <__aeabi_dcmple>
 8008db8:	bb30      	cbnz	r0, 8008e08 <_printf_float+0xc0>
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	f7f7 feab 	bl	8000b1c <__aeabi_dcmplt>
 8008dc6:	b110      	cbz	r0, 8008dce <_printf_float+0x86>
 8008dc8:	232d      	movs	r3, #45	@ 0x2d
 8008dca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dce:	4a91      	ldr	r2, [pc, #580]	@ (8009014 <_printf_float+0x2cc>)
 8008dd0:	4b91      	ldr	r3, [pc, #580]	@ (8009018 <_printf_float+0x2d0>)
 8008dd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008dd6:	bf94      	ite	ls
 8008dd8:	4690      	movls	r8, r2
 8008dda:	4698      	movhi	r8, r3
 8008ddc:	2303      	movs	r3, #3
 8008dde:	6123      	str	r3, [r4, #16]
 8008de0:	f02b 0304 	bic.w	r3, fp, #4
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	f04f 0900 	mov.w	r9, #0
 8008dea:	9700      	str	r7, [sp, #0]
 8008dec:	4633      	mov	r3, r6
 8008dee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008df0:	4621      	mov	r1, r4
 8008df2:	4628      	mov	r0, r5
 8008df4:	f000 f9d2 	bl	800919c <_printf_common>
 8008df8:	3001      	adds	r0, #1
 8008dfa:	f040 808d 	bne.w	8008f18 <_printf_float+0x1d0>
 8008dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008e02:	b00d      	add	sp, #52	@ 0x34
 8008e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e08:	4642      	mov	r2, r8
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	4649      	mov	r1, r9
 8008e10:	f7f7 feac 	bl	8000b6c <__aeabi_dcmpun>
 8008e14:	b140      	cbz	r0, 8008e28 <_printf_float+0xe0>
 8008e16:	464b      	mov	r3, r9
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	bfbc      	itt	lt
 8008e1c:	232d      	movlt	r3, #45	@ 0x2d
 8008e1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e22:	4a7e      	ldr	r2, [pc, #504]	@ (800901c <_printf_float+0x2d4>)
 8008e24:	4b7e      	ldr	r3, [pc, #504]	@ (8009020 <_printf_float+0x2d8>)
 8008e26:	e7d4      	b.n	8008dd2 <_printf_float+0x8a>
 8008e28:	6863      	ldr	r3, [r4, #4]
 8008e2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008e2e:	9206      	str	r2, [sp, #24]
 8008e30:	1c5a      	adds	r2, r3, #1
 8008e32:	d13b      	bne.n	8008eac <_printf_float+0x164>
 8008e34:	2306      	movs	r3, #6
 8008e36:	6063      	str	r3, [r4, #4]
 8008e38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	6022      	str	r2, [r4, #0]
 8008e40:	9303      	str	r3, [sp, #12]
 8008e42:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008e48:	ab09      	add	r3, sp, #36	@ 0x24
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	6861      	ldr	r1, [r4, #4]
 8008e4e:	ec49 8b10 	vmov	d0, r8, r9
 8008e52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008e56:	4628      	mov	r0, r5
 8008e58:	f7ff fed6 	bl	8008c08 <__cvt>
 8008e5c:	9b06      	ldr	r3, [sp, #24]
 8008e5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e60:	2b47      	cmp	r3, #71	@ 0x47
 8008e62:	4680      	mov	r8, r0
 8008e64:	d129      	bne.n	8008eba <_printf_float+0x172>
 8008e66:	1cc8      	adds	r0, r1, #3
 8008e68:	db02      	blt.n	8008e70 <_printf_float+0x128>
 8008e6a:	6863      	ldr	r3, [r4, #4]
 8008e6c:	4299      	cmp	r1, r3
 8008e6e:	dd41      	ble.n	8008ef4 <_printf_float+0x1ac>
 8008e70:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e74:	fa5f fa8a 	uxtb.w	sl, sl
 8008e78:	3901      	subs	r1, #1
 8008e7a:	4652      	mov	r2, sl
 8008e7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e80:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e82:	f7ff ff26 	bl	8008cd2 <__exponent>
 8008e86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e88:	1813      	adds	r3, r2, r0
 8008e8a:	2a01      	cmp	r2, #1
 8008e8c:	4681      	mov	r9, r0
 8008e8e:	6123      	str	r3, [r4, #16]
 8008e90:	dc02      	bgt.n	8008e98 <_printf_float+0x150>
 8008e92:	6822      	ldr	r2, [r4, #0]
 8008e94:	07d2      	lsls	r2, r2, #31
 8008e96:	d501      	bpl.n	8008e9c <_printf_float+0x154>
 8008e98:	3301      	adds	r3, #1
 8008e9a:	6123      	str	r3, [r4, #16]
 8008e9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0a2      	beq.n	8008dea <_printf_float+0xa2>
 8008ea4:	232d      	movs	r3, #45	@ 0x2d
 8008ea6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eaa:	e79e      	b.n	8008dea <_printf_float+0xa2>
 8008eac:	9a06      	ldr	r2, [sp, #24]
 8008eae:	2a47      	cmp	r2, #71	@ 0x47
 8008eb0:	d1c2      	bne.n	8008e38 <_printf_float+0xf0>
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1c0      	bne.n	8008e38 <_printf_float+0xf0>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e7bd      	b.n	8008e36 <_printf_float+0xee>
 8008eba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ebe:	d9db      	bls.n	8008e78 <_printf_float+0x130>
 8008ec0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ec4:	d118      	bne.n	8008ef8 <_printf_float+0x1b0>
 8008ec6:	2900      	cmp	r1, #0
 8008ec8:	6863      	ldr	r3, [r4, #4]
 8008eca:	dd0b      	ble.n	8008ee4 <_printf_float+0x19c>
 8008ecc:	6121      	str	r1, [r4, #16]
 8008ece:	b913      	cbnz	r3, 8008ed6 <_printf_float+0x18e>
 8008ed0:	6822      	ldr	r2, [r4, #0]
 8008ed2:	07d0      	lsls	r0, r2, #31
 8008ed4:	d502      	bpl.n	8008edc <_printf_float+0x194>
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	440b      	add	r3, r1
 8008eda:	6123      	str	r3, [r4, #16]
 8008edc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008ede:	f04f 0900 	mov.w	r9, #0
 8008ee2:	e7db      	b.n	8008e9c <_printf_float+0x154>
 8008ee4:	b913      	cbnz	r3, 8008eec <_printf_float+0x1a4>
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	07d2      	lsls	r2, r2, #31
 8008eea:	d501      	bpl.n	8008ef0 <_printf_float+0x1a8>
 8008eec:	3302      	adds	r3, #2
 8008eee:	e7f4      	b.n	8008eda <_printf_float+0x192>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e7f2      	b.n	8008eda <_printf_float+0x192>
 8008ef4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008efa:	4299      	cmp	r1, r3
 8008efc:	db05      	blt.n	8008f0a <_printf_float+0x1c2>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	6121      	str	r1, [r4, #16]
 8008f02:	07d8      	lsls	r0, r3, #31
 8008f04:	d5ea      	bpl.n	8008edc <_printf_float+0x194>
 8008f06:	1c4b      	adds	r3, r1, #1
 8008f08:	e7e7      	b.n	8008eda <_printf_float+0x192>
 8008f0a:	2900      	cmp	r1, #0
 8008f0c:	bfd4      	ite	le
 8008f0e:	f1c1 0202 	rsble	r2, r1, #2
 8008f12:	2201      	movgt	r2, #1
 8008f14:	4413      	add	r3, r2
 8008f16:	e7e0      	b.n	8008eda <_printf_float+0x192>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	055a      	lsls	r2, r3, #21
 8008f1c:	d407      	bmi.n	8008f2e <_printf_float+0x1e6>
 8008f1e:	6923      	ldr	r3, [r4, #16]
 8008f20:	4642      	mov	r2, r8
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b8      	blx	r7
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d12b      	bne.n	8008f84 <_printf_float+0x23c>
 8008f2c:	e767      	b.n	8008dfe <_printf_float+0xb6>
 8008f2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f32:	f240 80dd 	bls.w	80090f0 <_printf_float+0x3a8>
 8008f36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f7f7 fde3 	bl	8000b08 <__aeabi_dcmpeq>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d033      	beq.n	8008fae <_printf_float+0x266>
 8008f46:	4a37      	ldr	r2, [pc, #220]	@ (8009024 <_printf_float+0x2dc>)
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4631      	mov	r1, r6
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	47b8      	blx	r7
 8008f50:	3001      	adds	r0, #1
 8008f52:	f43f af54 	beq.w	8008dfe <_printf_float+0xb6>
 8008f56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008f5a:	4543      	cmp	r3, r8
 8008f5c:	db02      	blt.n	8008f64 <_printf_float+0x21c>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	07d8      	lsls	r0, r3, #31
 8008f62:	d50f      	bpl.n	8008f84 <_printf_float+0x23c>
 8008f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f68:	4631      	mov	r1, r6
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	47b8      	blx	r7
 8008f6e:	3001      	adds	r0, #1
 8008f70:	f43f af45 	beq.w	8008dfe <_printf_float+0xb6>
 8008f74:	f04f 0900 	mov.w	r9, #0
 8008f78:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f7c:	f104 0a1a 	add.w	sl, r4, #26
 8008f80:	45c8      	cmp	r8, r9
 8008f82:	dc09      	bgt.n	8008f98 <_printf_float+0x250>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	079b      	lsls	r3, r3, #30
 8008f88:	f100 8103 	bmi.w	8009192 <_printf_float+0x44a>
 8008f8c:	68e0      	ldr	r0, [r4, #12]
 8008f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f90:	4298      	cmp	r0, r3
 8008f92:	bfb8      	it	lt
 8008f94:	4618      	movlt	r0, r3
 8008f96:	e734      	b.n	8008e02 <_printf_float+0xba>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	4652      	mov	r2, sl
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	47b8      	blx	r7
 8008fa2:	3001      	adds	r0, #1
 8008fa4:	f43f af2b 	beq.w	8008dfe <_printf_float+0xb6>
 8008fa8:	f109 0901 	add.w	r9, r9, #1
 8008fac:	e7e8      	b.n	8008f80 <_printf_float+0x238>
 8008fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	dc39      	bgt.n	8009028 <_printf_float+0x2e0>
 8008fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8009024 <_printf_float+0x2dc>)
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4631      	mov	r1, r6
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b8      	blx	r7
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	f43f af1d 	beq.w	8008dfe <_printf_float+0xb6>
 8008fc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008fc8:	ea59 0303 	orrs.w	r3, r9, r3
 8008fcc:	d102      	bne.n	8008fd4 <_printf_float+0x28c>
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	07d9      	lsls	r1, r3, #31
 8008fd2:	d5d7      	bpl.n	8008f84 <_printf_float+0x23c>
 8008fd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fd8:	4631      	mov	r1, r6
 8008fda:	4628      	mov	r0, r5
 8008fdc:	47b8      	blx	r7
 8008fde:	3001      	adds	r0, #1
 8008fe0:	f43f af0d 	beq.w	8008dfe <_printf_float+0xb6>
 8008fe4:	f04f 0a00 	mov.w	sl, #0
 8008fe8:	f104 0b1a 	add.w	fp, r4, #26
 8008fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fee:	425b      	negs	r3, r3
 8008ff0:	4553      	cmp	r3, sl
 8008ff2:	dc01      	bgt.n	8008ff8 <_printf_float+0x2b0>
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	e793      	b.n	8008f20 <_printf_float+0x1d8>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	465a      	mov	r2, fp
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	4628      	mov	r0, r5
 8009000:	47b8      	blx	r7
 8009002:	3001      	adds	r0, #1
 8009004:	f43f aefb 	beq.w	8008dfe <_printf_float+0xb6>
 8009008:	f10a 0a01 	add.w	sl, sl, #1
 800900c:	e7ee      	b.n	8008fec <_printf_float+0x2a4>
 800900e:	bf00      	nop
 8009010:	7fefffff 	.word	0x7fefffff
 8009014:	0800b7d8 	.word	0x0800b7d8
 8009018:	0800b7dc 	.word	0x0800b7dc
 800901c:	0800b7e0 	.word	0x0800b7e0
 8009020:	0800b7e4 	.word	0x0800b7e4
 8009024:	0800b7e8 	.word	0x0800b7e8
 8009028:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800902a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800902e:	4553      	cmp	r3, sl
 8009030:	bfa8      	it	ge
 8009032:	4653      	movge	r3, sl
 8009034:	2b00      	cmp	r3, #0
 8009036:	4699      	mov	r9, r3
 8009038:	dc36      	bgt.n	80090a8 <_printf_float+0x360>
 800903a:	f04f 0b00 	mov.w	fp, #0
 800903e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009042:	f104 021a 	add.w	r2, r4, #26
 8009046:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009048:	9306      	str	r3, [sp, #24]
 800904a:	eba3 0309 	sub.w	r3, r3, r9
 800904e:	455b      	cmp	r3, fp
 8009050:	dc31      	bgt.n	80090b6 <_printf_float+0x36e>
 8009052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009054:	459a      	cmp	sl, r3
 8009056:	dc3a      	bgt.n	80090ce <_printf_float+0x386>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	07da      	lsls	r2, r3, #31
 800905c:	d437      	bmi.n	80090ce <_printf_float+0x386>
 800905e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009060:	ebaa 0903 	sub.w	r9, sl, r3
 8009064:	9b06      	ldr	r3, [sp, #24]
 8009066:	ebaa 0303 	sub.w	r3, sl, r3
 800906a:	4599      	cmp	r9, r3
 800906c:	bfa8      	it	ge
 800906e:	4699      	movge	r9, r3
 8009070:	f1b9 0f00 	cmp.w	r9, #0
 8009074:	dc33      	bgt.n	80090de <_printf_float+0x396>
 8009076:	f04f 0800 	mov.w	r8, #0
 800907a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800907e:	f104 0b1a 	add.w	fp, r4, #26
 8009082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009084:	ebaa 0303 	sub.w	r3, sl, r3
 8009088:	eba3 0309 	sub.w	r3, r3, r9
 800908c:	4543      	cmp	r3, r8
 800908e:	f77f af79 	ble.w	8008f84 <_printf_float+0x23c>
 8009092:	2301      	movs	r3, #1
 8009094:	465a      	mov	r2, fp
 8009096:	4631      	mov	r1, r6
 8009098:	4628      	mov	r0, r5
 800909a:	47b8      	blx	r7
 800909c:	3001      	adds	r0, #1
 800909e:	f43f aeae 	beq.w	8008dfe <_printf_float+0xb6>
 80090a2:	f108 0801 	add.w	r8, r8, #1
 80090a6:	e7ec      	b.n	8009082 <_printf_float+0x33a>
 80090a8:	4642      	mov	r2, r8
 80090aa:	4631      	mov	r1, r6
 80090ac:	4628      	mov	r0, r5
 80090ae:	47b8      	blx	r7
 80090b0:	3001      	adds	r0, #1
 80090b2:	d1c2      	bne.n	800903a <_printf_float+0x2f2>
 80090b4:	e6a3      	b.n	8008dfe <_printf_float+0xb6>
 80090b6:	2301      	movs	r3, #1
 80090b8:	4631      	mov	r1, r6
 80090ba:	4628      	mov	r0, r5
 80090bc:	9206      	str	r2, [sp, #24]
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	f43f ae9c 	beq.w	8008dfe <_printf_float+0xb6>
 80090c6:	9a06      	ldr	r2, [sp, #24]
 80090c8:	f10b 0b01 	add.w	fp, fp, #1
 80090cc:	e7bb      	b.n	8009046 <_printf_float+0x2fe>
 80090ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090d2:	4631      	mov	r1, r6
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	d1c0      	bne.n	800905e <_printf_float+0x316>
 80090dc:	e68f      	b.n	8008dfe <_printf_float+0xb6>
 80090de:	9a06      	ldr	r2, [sp, #24]
 80090e0:	464b      	mov	r3, r9
 80090e2:	4442      	add	r2, r8
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b8      	blx	r7
 80090ea:	3001      	adds	r0, #1
 80090ec:	d1c3      	bne.n	8009076 <_printf_float+0x32e>
 80090ee:	e686      	b.n	8008dfe <_printf_float+0xb6>
 80090f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090f4:	f1ba 0f01 	cmp.w	sl, #1
 80090f8:	dc01      	bgt.n	80090fe <_printf_float+0x3b6>
 80090fa:	07db      	lsls	r3, r3, #31
 80090fc:	d536      	bpl.n	800916c <_printf_float+0x424>
 80090fe:	2301      	movs	r3, #1
 8009100:	4642      	mov	r2, r8
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	47b8      	blx	r7
 8009108:	3001      	adds	r0, #1
 800910a:	f43f ae78 	beq.w	8008dfe <_printf_float+0xb6>
 800910e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009112:	4631      	mov	r1, r6
 8009114:	4628      	mov	r0, r5
 8009116:	47b8      	blx	r7
 8009118:	3001      	adds	r0, #1
 800911a:	f43f ae70 	beq.w	8008dfe <_printf_float+0xb6>
 800911e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009122:	2200      	movs	r2, #0
 8009124:	2300      	movs	r3, #0
 8009126:	f10a 3aff 	add.w	sl, sl, #4294967295
 800912a:	f7f7 fced 	bl	8000b08 <__aeabi_dcmpeq>
 800912e:	b9c0      	cbnz	r0, 8009162 <_printf_float+0x41a>
 8009130:	4653      	mov	r3, sl
 8009132:	f108 0201 	add.w	r2, r8, #1
 8009136:	4631      	mov	r1, r6
 8009138:	4628      	mov	r0, r5
 800913a:	47b8      	blx	r7
 800913c:	3001      	adds	r0, #1
 800913e:	d10c      	bne.n	800915a <_printf_float+0x412>
 8009140:	e65d      	b.n	8008dfe <_printf_float+0xb6>
 8009142:	2301      	movs	r3, #1
 8009144:	465a      	mov	r2, fp
 8009146:	4631      	mov	r1, r6
 8009148:	4628      	mov	r0, r5
 800914a:	47b8      	blx	r7
 800914c:	3001      	adds	r0, #1
 800914e:	f43f ae56 	beq.w	8008dfe <_printf_float+0xb6>
 8009152:	f108 0801 	add.w	r8, r8, #1
 8009156:	45d0      	cmp	r8, sl
 8009158:	dbf3      	blt.n	8009142 <_printf_float+0x3fa>
 800915a:	464b      	mov	r3, r9
 800915c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009160:	e6df      	b.n	8008f22 <_printf_float+0x1da>
 8009162:	f04f 0800 	mov.w	r8, #0
 8009166:	f104 0b1a 	add.w	fp, r4, #26
 800916a:	e7f4      	b.n	8009156 <_printf_float+0x40e>
 800916c:	2301      	movs	r3, #1
 800916e:	4642      	mov	r2, r8
 8009170:	e7e1      	b.n	8009136 <_printf_float+0x3ee>
 8009172:	2301      	movs	r3, #1
 8009174:	464a      	mov	r2, r9
 8009176:	4631      	mov	r1, r6
 8009178:	4628      	mov	r0, r5
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	f43f ae3e 	beq.w	8008dfe <_printf_float+0xb6>
 8009182:	f108 0801 	add.w	r8, r8, #1
 8009186:	68e3      	ldr	r3, [r4, #12]
 8009188:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800918a:	1a5b      	subs	r3, r3, r1
 800918c:	4543      	cmp	r3, r8
 800918e:	dcf0      	bgt.n	8009172 <_printf_float+0x42a>
 8009190:	e6fc      	b.n	8008f8c <_printf_float+0x244>
 8009192:	f04f 0800 	mov.w	r8, #0
 8009196:	f104 0919 	add.w	r9, r4, #25
 800919a:	e7f4      	b.n	8009186 <_printf_float+0x43e>

0800919c <_printf_common>:
 800919c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091a0:	4616      	mov	r6, r2
 80091a2:	4698      	mov	r8, r3
 80091a4:	688a      	ldr	r2, [r1, #8]
 80091a6:	690b      	ldr	r3, [r1, #16]
 80091a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091ac:	4293      	cmp	r3, r2
 80091ae:	bfb8      	it	lt
 80091b0:	4613      	movlt	r3, r2
 80091b2:	6033      	str	r3, [r6, #0]
 80091b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091b8:	4607      	mov	r7, r0
 80091ba:	460c      	mov	r4, r1
 80091bc:	b10a      	cbz	r2, 80091c2 <_printf_common+0x26>
 80091be:	3301      	adds	r3, #1
 80091c0:	6033      	str	r3, [r6, #0]
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	0699      	lsls	r1, r3, #26
 80091c6:	bf42      	ittt	mi
 80091c8:	6833      	ldrmi	r3, [r6, #0]
 80091ca:	3302      	addmi	r3, #2
 80091cc:	6033      	strmi	r3, [r6, #0]
 80091ce:	6825      	ldr	r5, [r4, #0]
 80091d0:	f015 0506 	ands.w	r5, r5, #6
 80091d4:	d106      	bne.n	80091e4 <_printf_common+0x48>
 80091d6:	f104 0a19 	add.w	sl, r4, #25
 80091da:	68e3      	ldr	r3, [r4, #12]
 80091dc:	6832      	ldr	r2, [r6, #0]
 80091de:	1a9b      	subs	r3, r3, r2
 80091e0:	42ab      	cmp	r3, r5
 80091e2:	dc26      	bgt.n	8009232 <_printf_common+0x96>
 80091e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091e8:	6822      	ldr	r2, [r4, #0]
 80091ea:	3b00      	subs	r3, #0
 80091ec:	bf18      	it	ne
 80091ee:	2301      	movne	r3, #1
 80091f0:	0692      	lsls	r2, r2, #26
 80091f2:	d42b      	bmi.n	800924c <_printf_common+0xb0>
 80091f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091f8:	4641      	mov	r1, r8
 80091fa:	4638      	mov	r0, r7
 80091fc:	47c8      	blx	r9
 80091fe:	3001      	adds	r0, #1
 8009200:	d01e      	beq.n	8009240 <_printf_common+0xa4>
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	6922      	ldr	r2, [r4, #16]
 8009206:	f003 0306 	and.w	r3, r3, #6
 800920a:	2b04      	cmp	r3, #4
 800920c:	bf02      	ittt	eq
 800920e:	68e5      	ldreq	r5, [r4, #12]
 8009210:	6833      	ldreq	r3, [r6, #0]
 8009212:	1aed      	subeq	r5, r5, r3
 8009214:	68a3      	ldr	r3, [r4, #8]
 8009216:	bf0c      	ite	eq
 8009218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800921c:	2500      	movne	r5, #0
 800921e:	4293      	cmp	r3, r2
 8009220:	bfc4      	itt	gt
 8009222:	1a9b      	subgt	r3, r3, r2
 8009224:	18ed      	addgt	r5, r5, r3
 8009226:	2600      	movs	r6, #0
 8009228:	341a      	adds	r4, #26
 800922a:	42b5      	cmp	r5, r6
 800922c:	d11a      	bne.n	8009264 <_printf_common+0xc8>
 800922e:	2000      	movs	r0, #0
 8009230:	e008      	b.n	8009244 <_printf_common+0xa8>
 8009232:	2301      	movs	r3, #1
 8009234:	4652      	mov	r2, sl
 8009236:	4641      	mov	r1, r8
 8009238:	4638      	mov	r0, r7
 800923a:	47c8      	blx	r9
 800923c:	3001      	adds	r0, #1
 800923e:	d103      	bne.n	8009248 <_printf_common+0xac>
 8009240:	f04f 30ff 	mov.w	r0, #4294967295
 8009244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009248:	3501      	adds	r5, #1
 800924a:	e7c6      	b.n	80091da <_printf_common+0x3e>
 800924c:	18e1      	adds	r1, r4, r3
 800924e:	1c5a      	adds	r2, r3, #1
 8009250:	2030      	movs	r0, #48	@ 0x30
 8009252:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009256:	4422      	add	r2, r4
 8009258:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800925c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009260:	3302      	adds	r3, #2
 8009262:	e7c7      	b.n	80091f4 <_printf_common+0x58>
 8009264:	2301      	movs	r3, #1
 8009266:	4622      	mov	r2, r4
 8009268:	4641      	mov	r1, r8
 800926a:	4638      	mov	r0, r7
 800926c:	47c8      	blx	r9
 800926e:	3001      	adds	r0, #1
 8009270:	d0e6      	beq.n	8009240 <_printf_common+0xa4>
 8009272:	3601      	adds	r6, #1
 8009274:	e7d9      	b.n	800922a <_printf_common+0x8e>
	...

08009278 <_printf_i>:
 8009278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800927c:	7e0f      	ldrb	r7, [r1, #24]
 800927e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009280:	2f78      	cmp	r7, #120	@ 0x78
 8009282:	4691      	mov	r9, r2
 8009284:	4680      	mov	r8, r0
 8009286:	460c      	mov	r4, r1
 8009288:	469a      	mov	sl, r3
 800928a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800928e:	d807      	bhi.n	80092a0 <_printf_i+0x28>
 8009290:	2f62      	cmp	r7, #98	@ 0x62
 8009292:	d80a      	bhi.n	80092aa <_printf_i+0x32>
 8009294:	2f00      	cmp	r7, #0
 8009296:	f000 80d2 	beq.w	800943e <_printf_i+0x1c6>
 800929a:	2f58      	cmp	r7, #88	@ 0x58
 800929c:	f000 80b9 	beq.w	8009412 <_printf_i+0x19a>
 80092a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092a8:	e03a      	b.n	8009320 <_printf_i+0xa8>
 80092aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092ae:	2b15      	cmp	r3, #21
 80092b0:	d8f6      	bhi.n	80092a0 <_printf_i+0x28>
 80092b2:	a101      	add	r1, pc, #4	@ (adr r1, 80092b8 <_printf_i+0x40>)
 80092b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092b8:	08009311 	.word	0x08009311
 80092bc:	08009325 	.word	0x08009325
 80092c0:	080092a1 	.word	0x080092a1
 80092c4:	080092a1 	.word	0x080092a1
 80092c8:	080092a1 	.word	0x080092a1
 80092cc:	080092a1 	.word	0x080092a1
 80092d0:	08009325 	.word	0x08009325
 80092d4:	080092a1 	.word	0x080092a1
 80092d8:	080092a1 	.word	0x080092a1
 80092dc:	080092a1 	.word	0x080092a1
 80092e0:	080092a1 	.word	0x080092a1
 80092e4:	08009425 	.word	0x08009425
 80092e8:	0800934f 	.word	0x0800934f
 80092ec:	080093df 	.word	0x080093df
 80092f0:	080092a1 	.word	0x080092a1
 80092f4:	080092a1 	.word	0x080092a1
 80092f8:	08009447 	.word	0x08009447
 80092fc:	080092a1 	.word	0x080092a1
 8009300:	0800934f 	.word	0x0800934f
 8009304:	080092a1 	.word	0x080092a1
 8009308:	080092a1 	.word	0x080092a1
 800930c:	080093e7 	.word	0x080093e7
 8009310:	6833      	ldr	r3, [r6, #0]
 8009312:	1d1a      	adds	r2, r3, #4
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	6032      	str	r2, [r6, #0]
 8009318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800931c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009320:	2301      	movs	r3, #1
 8009322:	e09d      	b.n	8009460 <_printf_i+0x1e8>
 8009324:	6833      	ldr	r3, [r6, #0]
 8009326:	6820      	ldr	r0, [r4, #0]
 8009328:	1d19      	adds	r1, r3, #4
 800932a:	6031      	str	r1, [r6, #0]
 800932c:	0606      	lsls	r6, r0, #24
 800932e:	d501      	bpl.n	8009334 <_printf_i+0xbc>
 8009330:	681d      	ldr	r5, [r3, #0]
 8009332:	e003      	b.n	800933c <_printf_i+0xc4>
 8009334:	0645      	lsls	r5, r0, #25
 8009336:	d5fb      	bpl.n	8009330 <_printf_i+0xb8>
 8009338:	f9b3 5000 	ldrsh.w	r5, [r3]
 800933c:	2d00      	cmp	r5, #0
 800933e:	da03      	bge.n	8009348 <_printf_i+0xd0>
 8009340:	232d      	movs	r3, #45	@ 0x2d
 8009342:	426d      	negs	r5, r5
 8009344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009348:	4859      	ldr	r0, [pc, #356]	@ (80094b0 <_printf_i+0x238>)
 800934a:	230a      	movs	r3, #10
 800934c:	e011      	b.n	8009372 <_printf_i+0xfa>
 800934e:	6821      	ldr	r1, [r4, #0]
 8009350:	6833      	ldr	r3, [r6, #0]
 8009352:	0608      	lsls	r0, r1, #24
 8009354:	f853 5b04 	ldr.w	r5, [r3], #4
 8009358:	d402      	bmi.n	8009360 <_printf_i+0xe8>
 800935a:	0649      	lsls	r1, r1, #25
 800935c:	bf48      	it	mi
 800935e:	b2ad      	uxthmi	r5, r5
 8009360:	2f6f      	cmp	r7, #111	@ 0x6f
 8009362:	4853      	ldr	r0, [pc, #332]	@ (80094b0 <_printf_i+0x238>)
 8009364:	6033      	str	r3, [r6, #0]
 8009366:	bf14      	ite	ne
 8009368:	230a      	movne	r3, #10
 800936a:	2308      	moveq	r3, #8
 800936c:	2100      	movs	r1, #0
 800936e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009372:	6866      	ldr	r6, [r4, #4]
 8009374:	60a6      	str	r6, [r4, #8]
 8009376:	2e00      	cmp	r6, #0
 8009378:	bfa2      	ittt	ge
 800937a:	6821      	ldrge	r1, [r4, #0]
 800937c:	f021 0104 	bicge.w	r1, r1, #4
 8009380:	6021      	strge	r1, [r4, #0]
 8009382:	b90d      	cbnz	r5, 8009388 <_printf_i+0x110>
 8009384:	2e00      	cmp	r6, #0
 8009386:	d04b      	beq.n	8009420 <_printf_i+0x1a8>
 8009388:	4616      	mov	r6, r2
 800938a:	fbb5 f1f3 	udiv	r1, r5, r3
 800938e:	fb03 5711 	mls	r7, r3, r1, r5
 8009392:	5dc7      	ldrb	r7, [r0, r7]
 8009394:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009398:	462f      	mov	r7, r5
 800939a:	42bb      	cmp	r3, r7
 800939c:	460d      	mov	r5, r1
 800939e:	d9f4      	bls.n	800938a <_printf_i+0x112>
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	d10b      	bne.n	80093bc <_printf_i+0x144>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	07df      	lsls	r7, r3, #31
 80093a8:	d508      	bpl.n	80093bc <_printf_i+0x144>
 80093aa:	6923      	ldr	r3, [r4, #16]
 80093ac:	6861      	ldr	r1, [r4, #4]
 80093ae:	4299      	cmp	r1, r3
 80093b0:	bfde      	ittt	le
 80093b2:	2330      	movle	r3, #48	@ 0x30
 80093b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093bc:	1b92      	subs	r2, r2, r6
 80093be:	6122      	str	r2, [r4, #16]
 80093c0:	f8cd a000 	str.w	sl, [sp]
 80093c4:	464b      	mov	r3, r9
 80093c6:	aa03      	add	r2, sp, #12
 80093c8:	4621      	mov	r1, r4
 80093ca:	4640      	mov	r0, r8
 80093cc:	f7ff fee6 	bl	800919c <_printf_common>
 80093d0:	3001      	adds	r0, #1
 80093d2:	d14a      	bne.n	800946a <_printf_i+0x1f2>
 80093d4:	f04f 30ff 	mov.w	r0, #4294967295
 80093d8:	b004      	add	sp, #16
 80093da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	f043 0320 	orr.w	r3, r3, #32
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	4833      	ldr	r0, [pc, #204]	@ (80094b4 <_printf_i+0x23c>)
 80093e8:	2778      	movs	r7, #120	@ 0x78
 80093ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	6831      	ldr	r1, [r6, #0]
 80093f2:	061f      	lsls	r7, r3, #24
 80093f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80093f8:	d402      	bmi.n	8009400 <_printf_i+0x188>
 80093fa:	065f      	lsls	r7, r3, #25
 80093fc:	bf48      	it	mi
 80093fe:	b2ad      	uxthmi	r5, r5
 8009400:	6031      	str	r1, [r6, #0]
 8009402:	07d9      	lsls	r1, r3, #31
 8009404:	bf44      	itt	mi
 8009406:	f043 0320 	orrmi.w	r3, r3, #32
 800940a:	6023      	strmi	r3, [r4, #0]
 800940c:	b11d      	cbz	r5, 8009416 <_printf_i+0x19e>
 800940e:	2310      	movs	r3, #16
 8009410:	e7ac      	b.n	800936c <_printf_i+0xf4>
 8009412:	4827      	ldr	r0, [pc, #156]	@ (80094b0 <_printf_i+0x238>)
 8009414:	e7e9      	b.n	80093ea <_printf_i+0x172>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	f023 0320 	bic.w	r3, r3, #32
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	e7f6      	b.n	800940e <_printf_i+0x196>
 8009420:	4616      	mov	r6, r2
 8009422:	e7bd      	b.n	80093a0 <_printf_i+0x128>
 8009424:	6833      	ldr	r3, [r6, #0]
 8009426:	6825      	ldr	r5, [r4, #0]
 8009428:	6961      	ldr	r1, [r4, #20]
 800942a:	1d18      	adds	r0, r3, #4
 800942c:	6030      	str	r0, [r6, #0]
 800942e:	062e      	lsls	r6, r5, #24
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	d501      	bpl.n	8009438 <_printf_i+0x1c0>
 8009434:	6019      	str	r1, [r3, #0]
 8009436:	e002      	b.n	800943e <_printf_i+0x1c6>
 8009438:	0668      	lsls	r0, r5, #25
 800943a:	d5fb      	bpl.n	8009434 <_printf_i+0x1bc>
 800943c:	8019      	strh	r1, [r3, #0]
 800943e:	2300      	movs	r3, #0
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	4616      	mov	r6, r2
 8009444:	e7bc      	b.n	80093c0 <_printf_i+0x148>
 8009446:	6833      	ldr	r3, [r6, #0]
 8009448:	1d1a      	adds	r2, r3, #4
 800944a:	6032      	str	r2, [r6, #0]
 800944c:	681e      	ldr	r6, [r3, #0]
 800944e:	6862      	ldr	r2, [r4, #4]
 8009450:	2100      	movs	r1, #0
 8009452:	4630      	mov	r0, r6
 8009454:	f7f6 fedc 	bl	8000210 <memchr>
 8009458:	b108      	cbz	r0, 800945e <_printf_i+0x1e6>
 800945a:	1b80      	subs	r0, r0, r6
 800945c:	6060      	str	r0, [r4, #4]
 800945e:	6863      	ldr	r3, [r4, #4]
 8009460:	6123      	str	r3, [r4, #16]
 8009462:	2300      	movs	r3, #0
 8009464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009468:	e7aa      	b.n	80093c0 <_printf_i+0x148>
 800946a:	6923      	ldr	r3, [r4, #16]
 800946c:	4632      	mov	r2, r6
 800946e:	4649      	mov	r1, r9
 8009470:	4640      	mov	r0, r8
 8009472:	47d0      	blx	sl
 8009474:	3001      	adds	r0, #1
 8009476:	d0ad      	beq.n	80093d4 <_printf_i+0x15c>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	079b      	lsls	r3, r3, #30
 800947c:	d413      	bmi.n	80094a6 <_printf_i+0x22e>
 800947e:	68e0      	ldr	r0, [r4, #12]
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	4298      	cmp	r0, r3
 8009484:	bfb8      	it	lt
 8009486:	4618      	movlt	r0, r3
 8009488:	e7a6      	b.n	80093d8 <_printf_i+0x160>
 800948a:	2301      	movs	r3, #1
 800948c:	4632      	mov	r2, r6
 800948e:	4649      	mov	r1, r9
 8009490:	4640      	mov	r0, r8
 8009492:	47d0      	blx	sl
 8009494:	3001      	adds	r0, #1
 8009496:	d09d      	beq.n	80093d4 <_printf_i+0x15c>
 8009498:	3501      	adds	r5, #1
 800949a:	68e3      	ldr	r3, [r4, #12]
 800949c:	9903      	ldr	r1, [sp, #12]
 800949e:	1a5b      	subs	r3, r3, r1
 80094a0:	42ab      	cmp	r3, r5
 80094a2:	dcf2      	bgt.n	800948a <_printf_i+0x212>
 80094a4:	e7eb      	b.n	800947e <_printf_i+0x206>
 80094a6:	2500      	movs	r5, #0
 80094a8:	f104 0619 	add.w	r6, r4, #25
 80094ac:	e7f5      	b.n	800949a <_printf_i+0x222>
 80094ae:	bf00      	nop
 80094b0:	0800b7ea 	.word	0x0800b7ea
 80094b4:	0800b7fb 	.word	0x0800b7fb

080094b8 <std>:
 80094b8:	2300      	movs	r3, #0
 80094ba:	b510      	push	{r4, lr}
 80094bc:	4604      	mov	r4, r0
 80094be:	e9c0 3300 	strd	r3, r3, [r0]
 80094c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094c6:	6083      	str	r3, [r0, #8]
 80094c8:	8181      	strh	r1, [r0, #12]
 80094ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80094cc:	81c2      	strh	r2, [r0, #14]
 80094ce:	6183      	str	r3, [r0, #24]
 80094d0:	4619      	mov	r1, r3
 80094d2:	2208      	movs	r2, #8
 80094d4:	305c      	adds	r0, #92	@ 0x5c
 80094d6:	f000 f9f9 	bl	80098cc <memset>
 80094da:	4b0d      	ldr	r3, [pc, #52]	@ (8009510 <std+0x58>)
 80094dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80094de:	4b0d      	ldr	r3, [pc, #52]	@ (8009514 <std+0x5c>)
 80094e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009518 <std+0x60>)
 80094e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094e6:	4b0d      	ldr	r3, [pc, #52]	@ (800951c <std+0x64>)
 80094e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80094ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009520 <std+0x68>)
 80094ec:	6224      	str	r4, [r4, #32]
 80094ee:	429c      	cmp	r4, r3
 80094f0:	d006      	beq.n	8009500 <std+0x48>
 80094f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094f6:	4294      	cmp	r4, r2
 80094f8:	d002      	beq.n	8009500 <std+0x48>
 80094fa:	33d0      	adds	r3, #208	@ 0xd0
 80094fc:	429c      	cmp	r4, r3
 80094fe:	d105      	bne.n	800950c <std+0x54>
 8009500:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009508:	f000 ba5c 	b.w	80099c4 <__retarget_lock_init_recursive>
 800950c:	bd10      	pop	{r4, pc}
 800950e:	bf00      	nop
 8009510:	0800971d 	.word	0x0800971d
 8009514:	0800973f 	.word	0x0800973f
 8009518:	08009777 	.word	0x08009777
 800951c:	0800979b 	.word	0x0800979b
 8009520:	2002083c 	.word	0x2002083c

08009524 <stdio_exit_handler>:
 8009524:	4a02      	ldr	r2, [pc, #8]	@ (8009530 <stdio_exit_handler+0xc>)
 8009526:	4903      	ldr	r1, [pc, #12]	@ (8009534 <stdio_exit_handler+0x10>)
 8009528:	4803      	ldr	r0, [pc, #12]	@ (8009538 <stdio_exit_handler+0x14>)
 800952a:	f000 b869 	b.w	8009600 <_fwalk_sglue>
 800952e:	bf00      	nop
 8009530:	2000004c 	.word	0x2000004c
 8009534:	0800b311 	.word	0x0800b311
 8009538:	2000005c 	.word	0x2000005c

0800953c <cleanup_stdio>:
 800953c:	6841      	ldr	r1, [r0, #4]
 800953e:	4b0c      	ldr	r3, [pc, #48]	@ (8009570 <cleanup_stdio+0x34>)
 8009540:	4299      	cmp	r1, r3
 8009542:	b510      	push	{r4, lr}
 8009544:	4604      	mov	r4, r0
 8009546:	d001      	beq.n	800954c <cleanup_stdio+0x10>
 8009548:	f001 fee2 	bl	800b310 <_fflush_r>
 800954c:	68a1      	ldr	r1, [r4, #8]
 800954e:	4b09      	ldr	r3, [pc, #36]	@ (8009574 <cleanup_stdio+0x38>)
 8009550:	4299      	cmp	r1, r3
 8009552:	d002      	beq.n	800955a <cleanup_stdio+0x1e>
 8009554:	4620      	mov	r0, r4
 8009556:	f001 fedb 	bl	800b310 <_fflush_r>
 800955a:	68e1      	ldr	r1, [r4, #12]
 800955c:	4b06      	ldr	r3, [pc, #24]	@ (8009578 <cleanup_stdio+0x3c>)
 800955e:	4299      	cmp	r1, r3
 8009560:	d004      	beq.n	800956c <cleanup_stdio+0x30>
 8009562:	4620      	mov	r0, r4
 8009564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009568:	f001 bed2 	b.w	800b310 <_fflush_r>
 800956c:	bd10      	pop	{r4, pc}
 800956e:	bf00      	nop
 8009570:	2002083c 	.word	0x2002083c
 8009574:	200208a4 	.word	0x200208a4
 8009578:	2002090c 	.word	0x2002090c

0800957c <global_stdio_init.part.0>:
 800957c:	b510      	push	{r4, lr}
 800957e:	4b0b      	ldr	r3, [pc, #44]	@ (80095ac <global_stdio_init.part.0+0x30>)
 8009580:	4c0b      	ldr	r4, [pc, #44]	@ (80095b0 <global_stdio_init.part.0+0x34>)
 8009582:	4a0c      	ldr	r2, [pc, #48]	@ (80095b4 <global_stdio_init.part.0+0x38>)
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	4620      	mov	r0, r4
 8009588:	2200      	movs	r2, #0
 800958a:	2104      	movs	r1, #4
 800958c:	f7ff ff94 	bl	80094b8 <std>
 8009590:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009594:	2201      	movs	r2, #1
 8009596:	2109      	movs	r1, #9
 8009598:	f7ff ff8e 	bl	80094b8 <std>
 800959c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095a0:	2202      	movs	r2, #2
 80095a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095a6:	2112      	movs	r1, #18
 80095a8:	f7ff bf86 	b.w	80094b8 <std>
 80095ac:	20020974 	.word	0x20020974
 80095b0:	2002083c 	.word	0x2002083c
 80095b4:	08009525 	.word	0x08009525

080095b8 <__sfp_lock_acquire>:
 80095b8:	4801      	ldr	r0, [pc, #4]	@ (80095c0 <__sfp_lock_acquire+0x8>)
 80095ba:	f000 ba04 	b.w	80099c6 <__retarget_lock_acquire_recursive>
 80095be:	bf00      	nop
 80095c0:	2002097d 	.word	0x2002097d

080095c4 <__sfp_lock_release>:
 80095c4:	4801      	ldr	r0, [pc, #4]	@ (80095cc <__sfp_lock_release+0x8>)
 80095c6:	f000 b9ff 	b.w	80099c8 <__retarget_lock_release_recursive>
 80095ca:	bf00      	nop
 80095cc:	2002097d 	.word	0x2002097d

080095d0 <__sinit>:
 80095d0:	b510      	push	{r4, lr}
 80095d2:	4604      	mov	r4, r0
 80095d4:	f7ff fff0 	bl	80095b8 <__sfp_lock_acquire>
 80095d8:	6a23      	ldr	r3, [r4, #32]
 80095da:	b11b      	cbz	r3, 80095e4 <__sinit+0x14>
 80095dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e0:	f7ff bff0 	b.w	80095c4 <__sfp_lock_release>
 80095e4:	4b04      	ldr	r3, [pc, #16]	@ (80095f8 <__sinit+0x28>)
 80095e6:	6223      	str	r3, [r4, #32]
 80095e8:	4b04      	ldr	r3, [pc, #16]	@ (80095fc <__sinit+0x2c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1f5      	bne.n	80095dc <__sinit+0xc>
 80095f0:	f7ff ffc4 	bl	800957c <global_stdio_init.part.0>
 80095f4:	e7f2      	b.n	80095dc <__sinit+0xc>
 80095f6:	bf00      	nop
 80095f8:	0800953d 	.word	0x0800953d
 80095fc:	20020974 	.word	0x20020974

08009600 <_fwalk_sglue>:
 8009600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009604:	4607      	mov	r7, r0
 8009606:	4688      	mov	r8, r1
 8009608:	4614      	mov	r4, r2
 800960a:	2600      	movs	r6, #0
 800960c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009610:	f1b9 0901 	subs.w	r9, r9, #1
 8009614:	d505      	bpl.n	8009622 <_fwalk_sglue+0x22>
 8009616:	6824      	ldr	r4, [r4, #0]
 8009618:	2c00      	cmp	r4, #0
 800961a:	d1f7      	bne.n	800960c <_fwalk_sglue+0xc>
 800961c:	4630      	mov	r0, r6
 800961e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009622:	89ab      	ldrh	r3, [r5, #12]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d907      	bls.n	8009638 <_fwalk_sglue+0x38>
 8009628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800962c:	3301      	adds	r3, #1
 800962e:	d003      	beq.n	8009638 <_fwalk_sglue+0x38>
 8009630:	4629      	mov	r1, r5
 8009632:	4638      	mov	r0, r7
 8009634:	47c0      	blx	r8
 8009636:	4306      	orrs	r6, r0
 8009638:	3568      	adds	r5, #104	@ 0x68
 800963a:	e7e9      	b.n	8009610 <_fwalk_sglue+0x10>

0800963c <iprintf>:
 800963c:	b40f      	push	{r0, r1, r2, r3}
 800963e:	b507      	push	{r0, r1, r2, lr}
 8009640:	4906      	ldr	r1, [pc, #24]	@ (800965c <iprintf+0x20>)
 8009642:	ab04      	add	r3, sp, #16
 8009644:	6808      	ldr	r0, [r1, #0]
 8009646:	f853 2b04 	ldr.w	r2, [r3], #4
 800964a:	6881      	ldr	r1, [r0, #8]
 800964c:	9301      	str	r3, [sp, #4]
 800964e:	f001 fcc3 	bl	800afd8 <_vfiprintf_r>
 8009652:	b003      	add	sp, #12
 8009654:	f85d eb04 	ldr.w	lr, [sp], #4
 8009658:	b004      	add	sp, #16
 800965a:	4770      	bx	lr
 800965c:	20000058 	.word	0x20000058

08009660 <_puts_r>:
 8009660:	6a03      	ldr	r3, [r0, #32]
 8009662:	b570      	push	{r4, r5, r6, lr}
 8009664:	6884      	ldr	r4, [r0, #8]
 8009666:	4605      	mov	r5, r0
 8009668:	460e      	mov	r6, r1
 800966a:	b90b      	cbnz	r3, 8009670 <_puts_r+0x10>
 800966c:	f7ff ffb0 	bl	80095d0 <__sinit>
 8009670:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009672:	07db      	lsls	r3, r3, #31
 8009674:	d405      	bmi.n	8009682 <_puts_r+0x22>
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	0598      	lsls	r0, r3, #22
 800967a:	d402      	bmi.n	8009682 <_puts_r+0x22>
 800967c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800967e:	f000 f9a2 	bl	80099c6 <__retarget_lock_acquire_recursive>
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	0719      	lsls	r1, r3, #28
 8009686:	d502      	bpl.n	800968e <_puts_r+0x2e>
 8009688:	6923      	ldr	r3, [r4, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d135      	bne.n	80096fa <_puts_r+0x9a>
 800968e:	4621      	mov	r1, r4
 8009690:	4628      	mov	r0, r5
 8009692:	f000 f8c5 	bl	8009820 <__swsetup_r>
 8009696:	b380      	cbz	r0, 80096fa <_puts_r+0x9a>
 8009698:	f04f 35ff 	mov.w	r5, #4294967295
 800969c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800969e:	07da      	lsls	r2, r3, #31
 80096a0:	d405      	bmi.n	80096ae <_puts_r+0x4e>
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	059b      	lsls	r3, r3, #22
 80096a6:	d402      	bmi.n	80096ae <_puts_r+0x4e>
 80096a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096aa:	f000 f98d 	bl	80099c8 <__retarget_lock_release_recursive>
 80096ae:	4628      	mov	r0, r5
 80096b0:	bd70      	pop	{r4, r5, r6, pc}
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	da04      	bge.n	80096c0 <_puts_r+0x60>
 80096b6:	69a2      	ldr	r2, [r4, #24]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	dc17      	bgt.n	80096ec <_puts_r+0x8c>
 80096bc:	290a      	cmp	r1, #10
 80096be:	d015      	beq.n	80096ec <_puts_r+0x8c>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	6022      	str	r2, [r4, #0]
 80096c6:	7019      	strb	r1, [r3, #0]
 80096c8:	68a3      	ldr	r3, [r4, #8]
 80096ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096ce:	3b01      	subs	r3, #1
 80096d0:	60a3      	str	r3, [r4, #8]
 80096d2:	2900      	cmp	r1, #0
 80096d4:	d1ed      	bne.n	80096b2 <_puts_r+0x52>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	da11      	bge.n	80096fe <_puts_r+0x9e>
 80096da:	4622      	mov	r2, r4
 80096dc:	210a      	movs	r1, #10
 80096de:	4628      	mov	r0, r5
 80096e0:	f000 f85f 	bl	80097a2 <__swbuf_r>
 80096e4:	3001      	adds	r0, #1
 80096e6:	d0d7      	beq.n	8009698 <_puts_r+0x38>
 80096e8:	250a      	movs	r5, #10
 80096ea:	e7d7      	b.n	800969c <_puts_r+0x3c>
 80096ec:	4622      	mov	r2, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	f000 f857 	bl	80097a2 <__swbuf_r>
 80096f4:	3001      	adds	r0, #1
 80096f6:	d1e7      	bne.n	80096c8 <_puts_r+0x68>
 80096f8:	e7ce      	b.n	8009698 <_puts_r+0x38>
 80096fa:	3e01      	subs	r6, #1
 80096fc:	e7e4      	b.n	80096c8 <_puts_r+0x68>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	6022      	str	r2, [r4, #0]
 8009704:	220a      	movs	r2, #10
 8009706:	701a      	strb	r2, [r3, #0]
 8009708:	e7ee      	b.n	80096e8 <_puts_r+0x88>
	...

0800970c <puts>:
 800970c:	4b02      	ldr	r3, [pc, #8]	@ (8009718 <puts+0xc>)
 800970e:	4601      	mov	r1, r0
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	f7ff bfa5 	b.w	8009660 <_puts_r>
 8009716:	bf00      	nop
 8009718:	20000058 	.word	0x20000058

0800971c <__sread>:
 800971c:	b510      	push	{r4, lr}
 800971e:	460c      	mov	r4, r1
 8009720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009724:	f000 f900 	bl	8009928 <_read_r>
 8009728:	2800      	cmp	r0, #0
 800972a:	bfab      	itete	ge
 800972c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800972e:	89a3      	ldrhlt	r3, [r4, #12]
 8009730:	181b      	addge	r3, r3, r0
 8009732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009736:	bfac      	ite	ge
 8009738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800973a:	81a3      	strhlt	r3, [r4, #12]
 800973c:	bd10      	pop	{r4, pc}

0800973e <__swrite>:
 800973e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009742:	461f      	mov	r7, r3
 8009744:	898b      	ldrh	r3, [r1, #12]
 8009746:	05db      	lsls	r3, r3, #23
 8009748:	4605      	mov	r5, r0
 800974a:	460c      	mov	r4, r1
 800974c:	4616      	mov	r6, r2
 800974e:	d505      	bpl.n	800975c <__swrite+0x1e>
 8009750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009754:	2302      	movs	r3, #2
 8009756:	2200      	movs	r2, #0
 8009758:	f000 f8d4 	bl	8009904 <_lseek_r>
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009766:	81a3      	strh	r3, [r4, #12]
 8009768:	4632      	mov	r2, r6
 800976a:	463b      	mov	r3, r7
 800976c:	4628      	mov	r0, r5
 800976e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009772:	f000 b8eb 	b.w	800994c <_write_r>

08009776 <__sseek>:
 8009776:	b510      	push	{r4, lr}
 8009778:	460c      	mov	r4, r1
 800977a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977e:	f000 f8c1 	bl	8009904 <_lseek_r>
 8009782:	1c43      	adds	r3, r0, #1
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	bf15      	itete	ne
 8009788:	6560      	strne	r0, [r4, #84]	@ 0x54
 800978a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800978e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009792:	81a3      	strheq	r3, [r4, #12]
 8009794:	bf18      	it	ne
 8009796:	81a3      	strhne	r3, [r4, #12]
 8009798:	bd10      	pop	{r4, pc}

0800979a <__sclose>:
 800979a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979e:	f000 b8a1 	b.w	80098e4 <_close_r>

080097a2 <__swbuf_r>:
 80097a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a4:	460e      	mov	r6, r1
 80097a6:	4614      	mov	r4, r2
 80097a8:	4605      	mov	r5, r0
 80097aa:	b118      	cbz	r0, 80097b4 <__swbuf_r+0x12>
 80097ac:	6a03      	ldr	r3, [r0, #32]
 80097ae:	b90b      	cbnz	r3, 80097b4 <__swbuf_r+0x12>
 80097b0:	f7ff ff0e 	bl	80095d0 <__sinit>
 80097b4:	69a3      	ldr	r3, [r4, #24]
 80097b6:	60a3      	str	r3, [r4, #8]
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	071a      	lsls	r2, r3, #28
 80097bc:	d501      	bpl.n	80097c2 <__swbuf_r+0x20>
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	b943      	cbnz	r3, 80097d4 <__swbuf_r+0x32>
 80097c2:	4621      	mov	r1, r4
 80097c4:	4628      	mov	r0, r5
 80097c6:	f000 f82b 	bl	8009820 <__swsetup_r>
 80097ca:	b118      	cbz	r0, 80097d4 <__swbuf_r+0x32>
 80097cc:	f04f 37ff 	mov.w	r7, #4294967295
 80097d0:	4638      	mov	r0, r7
 80097d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	6922      	ldr	r2, [r4, #16]
 80097d8:	1a98      	subs	r0, r3, r2
 80097da:	6963      	ldr	r3, [r4, #20]
 80097dc:	b2f6      	uxtb	r6, r6
 80097de:	4283      	cmp	r3, r0
 80097e0:	4637      	mov	r7, r6
 80097e2:	dc05      	bgt.n	80097f0 <__swbuf_r+0x4e>
 80097e4:	4621      	mov	r1, r4
 80097e6:	4628      	mov	r0, r5
 80097e8:	f001 fd92 	bl	800b310 <_fflush_r>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d1ed      	bne.n	80097cc <__swbuf_r+0x2a>
 80097f0:	68a3      	ldr	r3, [r4, #8]
 80097f2:	3b01      	subs	r3, #1
 80097f4:	60a3      	str	r3, [r4, #8]
 80097f6:	6823      	ldr	r3, [r4, #0]
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	6022      	str	r2, [r4, #0]
 80097fc:	701e      	strb	r6, [r3, #0]
 80097fe:	6962      	ldr	r2, [r4, #20]
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	429a      	cmp	r2, r3
 8009804:	d004      	beq.n	8009810 <__swbuf_r+0x6e>
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	07db      	lsls	r3, r3, #31
 800980a:	d5e1      	bpl.n	80097d0 <__swbuf_r+0x2e>
 800980c:	2e0a      	cmp	r6, #10
 800980e:	d1df      	bne.n	80097d0 <__swbuf_r+0x2e>
 8009810:	4621      	mov	r1, r4
 8009812:	4628      	mov	r0, r5
 8009814:	f001 fd7c 	bl	800b310 <_fflush_r>
 8009818:	2800      	cmp	r0, #0
 800981a:	d0d9      	beq.n	80097d0 <__swbuf_r+0x2e>
 800981c:	e7d6      	b.n	80097cc <__swbuf_r+0x2a>
	...

08009820 <__swsetup_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4b29      	ldr	r3, [pc, #164]	@ (80098c8 <__swsetup_r+0xa8>)
 8009824:	4605      	mov	r5, r0
 8009826:	6818      	ldr	r0, [r3, #0]
 8009828:	460c      	mov	r4, r1
 800982a:	b118      	cbz	r0, 8009834 <__swsetup_r+0x14>
 800982c:	6a03      	ldr	r3, [r0, #32]
 800982e:	b90b      	cbnz	r3, 8009834 <__swsetup_r+0x14>
 8009830:	f7ff fece 	bl	80095d0 <__sinit>
 8009834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009838:	0719      	lsls	r1, r3, #28
 800983a:	d422      	bmi.n	8009882 <__swsetup_r+0x62>
 800983c:	06da      	lsls	r2, r3, #27
 800983e:	d407      	bmi.n	8009850 <__swsetup_r+0x30>
 8009840:	2209      	movs	r2, #9
 8009842:	602a      	str	r2, [r5, #0]
 8009844:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009848:	81a3      	strh	r3, [r4, #12]
 800984a:	f04f 30ff 	mov.w	r0, #4294967295
 800984e:	e033      	b.n	80098b8 <__swsetup_r+0x98>
 8009850:	0758      	lsls	r0, r3, #29
 8009852:	d512      	bpl.n	800987a <__swsetup_r+0x5a>
 8009854:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009856:	b141      	cbz	r1, 800986a <__swsetup_r+0x4a>
 8009858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800985c:	4299      	cmp	r1, r3
 800985e:	d002      	beq.n	8009866 <__swsetup_r+0x46>
 8009860:	4628      	mov	r0, r5
 8009862:	f000 ff0d 	bl	800a680 <_free_r>
 8009866:	2300      	movs	r3, #0
 8009868:	6363      	str	r3, [r4, #52]	@ 0x34
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	2300      	movs	r3, #0
 8009874:	6063      	str	r3, [r4, #4]
 8009876:	6923      	ldr	r3, [r4, #16]
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	89a3      	ldrh	r3, [r4, #12]
 800987c:	f043 0308 	orr.w	r3, r3, #8
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	6923      	ldr	r3, [r4, #16]
 8009884:	b94b      	cbnz	r3, 800989a <__swsetup_r+0x7a>
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800988c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009890:	d003      	beq.n	800989a <__swsetup_r+0x7a>
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	f001 fd89 	bl	800b3ac <__smakebuf_r>
 800989a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989e:	f013 0201 	ands.w	r2, r3, #1
 80098a2:	d00a      	beq.n	80098ba <__swsetup_r+0x9a>
 80098a4:	2200      	movs	r2, #0
 80098a6:	60a2      	str	r2, [r4, #8]
 80098a8:	6962      	ldr	r2, [r4, #20]
 80098aa:	4252      	negs	r2, r2
 80098ac:	61a2      	str	r2, [r4, #24]
 80098ae:	6922      	ldr	r2, [r4, #16]
 80098b0:	b942      	cbnz	r2, 80098c4 <__swsetup_r+0xa4>
 80098b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098b6:	d1c5      	bne.n	8009844 <__swsetup_r+0x24>
 80098b8:	bd38      	pop	{r3, r4, r5, pc}
 80098ba:	0799      	lsls	r1, r3, #30
 80098bc:	bf58      	it	pl
 80098be:	6962      	ldrpl	r2, [r4, #20]
 80098c0:	60a2      	str	r2, [r4, #8]
 80098c2:	e7f4      	b.n	80098ae <__swsetup_r+0x8e>
 80098c4:	2000      	movs	r0, #0
 80098c6:	e7f7      	b.n	80098b8 <__swsetup_r+0x98>
 80098c8:	20000058 	.word	0x20000058

080098cc <memset>:
 80098cc:	4402      	add	r2, r0
 80098ce:	4603      	mov	r3, r0
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d100      	bne.n	80098d6 <memset+0xa>
 80098d4:	4770      	bx	lr
 80098d6:	f803 1b01 	strb.w	r1, [r3], #1
 80098da:	e7f9      	b.n	80098d0 <memset+0x4>

080098dc <_localeconv_r>:
 80098dc:	4800      	ldr	r0, [pc, #0]	@ (80098e0 <_localeconv_r+0x4>)
 80098de:	4770      	bx	lr
 80098e0:	20000198 	.word	0x20000198

080098e4 <_close_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4d06      	ldr	r5, [pc, #24]	@ (8009900 <_close_r+0x1c>)
 80098e8:	2300      	movs	r3, #0
 80098ea:	4604      	mov	r4, r0
 80098ec:	4608      	mov	r0, r1
 80098ee:	602b      	str	r3, [r5, #0]
 80098f0:	f7f8 f9e6 	bl	8001cc0 <_close>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d102      	bne.n	80098fe <_close_r+0x1a>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	b103      	cbz	r3, 80098fe <_close_r+0x1a>
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	20020978 	.word	0x20020978

08009904 <_lseek_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4d07      	ldr	r5, [pc, #28]	@ (8009924 <_lseek_r+0x20>)
 8009908:	4604      	mov	r4, r0
 800990a:	4608      	mov	r0, r1
 800990c:	4611      	mov	r1, r2
 800990e:	2200      	movs	r2, #0
 8009910:	602a      	str	r2, [r5, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	f7f8 f9fb 	bl	8001d0e <_lseek>
 8009918:	1c43      	adds	r3, r0, #1
 800991a:	d102      	bne.n	8009922 <_lseek_r+0x1e>
 800991c:	682b      	ldr	r3, [r5, #0]
 800991e:	b103      	cbz	r3, 8009922 <_lseek_r+0x1e>
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	bd38      	pop	{r3, r4, r5, pc}
 8009924:	20020978 	.word	0x20020978

08009928 <_read_r>:
 8009928:	b538      	push	{r3, r4, r5, lr}
 800992a:	4d07      	ldr	r5, [pc, #28]	@ (8009948 <_read_r+0x20>)
 800992c:	4604      	mov	r4, r0
 800992e:	4608      	mov	r0, r1
 8009930:	4611      	mov	r1, r2
 8009932:	2200      	movs	r2, #0
 8009934:	602a      	str	r2, [r5, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	f7f8 f989 	bl	8001c4e <_read>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d102      	bne.n	8009946 <_read_r+0x1e>
 8009940:	682b      	ldr	r3, [r5, #0]
 8009942:	b103      	cbz	r3, 8009946 <_read_r+0x1e>
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	bd38      	pop	{r3, r4, r5, pc}
 8009948:	20020978 	.word	0x20020978

0800994c <_write_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	@ (800996c <_write_r+0x20>)
 8009950:	4604      	mov	r4, r0
 8009952:	4608      	mov	r0, r1
 8009954:	4611      	mov	r1, r2
 8009956:	2200      	movs	r2, #0
 8009958:	602a      	str	r2, [r5, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	f7f8 f994 	bl	8001c88 <_write>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_write_r+0x1e>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_write_r+0x1e>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20020978 	.word	0x20020978

08009970 <__errno>:
 8009970:	4b01      	ldr	r3, [pc, #4]	@ (8009978 <__errno+0x8>)
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	20000058 	.word	0x20000058

0800997c <__libc_init_array>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	4d0d      	ldr	r5, [pc, #52]	@ (80099b4 <__libc_init_array+0x38>)
 8009980:	4c0d      	ldr	r4, [pc, #52]	@ (80099b8 <__libc_init_array+0x3c>)
 8009982:	1b64      	subs	r4, r4, r5
 8009984:	10a4      	asrs	r4, r4, #2
 8009986:	2600      	movs	r6, #0
 8009988:	42a6      	cmp	r6, r4
 800998a:	d109      	bne.n	80099a0 <__libc_init_array+0x24>
 800998c:	4d0b      	ldr	r5, [pc, #44]	@ (80099bc <__libc_init_array+0x40>)
 800998e:	4c0c      	ldr	r4, [pc, #48]	@ (80099c0 <__libc_init_array+0x44>)
 8009990:	f001 fe2a 	bl	800b5e8 <_init>
 8009994:	1b64      	subs	r4, r4, r5
 8009996:	10a4      	asrs	r4, r4, #2
 8009998:	2600      	movs	r6, #0
 800999a:	42a6      	cmp	r6, r4
 800999c:	d105      	bne.n	80099aa <__libc_init_array+0x2e>
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a4:	4798      	blx	r3
 80099a6:	3601      	adds	r6, #1
 80099a8:	e7ee      	b.n	8009988 <__libc_init_array+0xc>
 80099aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ae:	4798      	blx	r3
 80099b0:	3601      	adds	r6, #1
 80099b2:	e7f2      	b.n	800999a <__libc_init_array+0x1e>
 80099b4:	0800bb50 	.word	0x0800bb50
 80099b8:	0800bb50 	.word	0x0800bb50
 80099bc:	0800bb50 	.word	0x0800bb50
 80099c0:	0800bb54 	.word	0x0800bb54

080099c4 <__retarget_lock_init_recursive>:
 80099c4:	4770      	bx	lr

080099c6 <__retarget_lock_acquire_recursive>:
 80099c6:	4770      	bx	lr

080099c8 <__retarget_lock_release_recursive>:
 80099c8:	4770      	bx	lr

080099ca <memcpy>:
 80099ca:	440a      	add	r2, r1
 80099cc:	4291      	cmp	r1, r2
 80099ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80099d2:	d100      	bne.n	80099d6 <memcpy+0xc>
 80099d4:	4770      	bx	lr
 80099d6:	b510      	push	{r4, lr}
 80099d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099e0:	4291      	cmp	r1, r2
 80099e2:	d1f9      	bne.n	80099d8 <memcpy+0xe>
 80099e4:	bd10      	pop	{r4, pc}

080099e6 <quorem>:
 80099e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ea:	6903      	ldr	r3, [r0, #16]
 80099ec:	690c      	ldr	r4, [r1, #16]
 80099ee:	42a3      	cmp	r3, r4
 80099f0:	4607      	mov	r7, r0
 80099f2:	db7e      	blt.n	8009af2 <quorem+0x10c>
 80099f4:	3c01      	subs	r4, #1
 80099f6:	f101 0814 	add.w	r8, r1, #20
 80099fa:	00a3      	lsls	r3, r4, #2
 80099fc:	f100 0514 	add.w	r5, r0, #20
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a10:	3301      	adds	r3, #1
 8009a12:	429a      	cmp	r2, r3
 8009a14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a18:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a1c:	d32e      	bcc.n	8009a7c <quorem+0x96>
 8009a1e:	f04f 0a00 	mov.w	sl, #0
 8009a22:	46c4      	mov	ip, r8
 8009a24:	46ae      	mov	lr, r5
 8009a26:	46d3      	mov	fp, sl
 8009a28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a2c:	b298      	uxth	r0, r3
 8009a2e:	fb06 a000 	mla	r0, r6, r0, sl
 8009a32:	0c02      	lsrs	r2, r0, #16
 8009a34:	0c1b      	lsrs	r3, r3, #16
 8009a36:	fb06 2303 	mla	r3, r6, r3, r2
 8009a3a:	f8de 2000 	ldr.w	r2, [lr]
 8009a3e:	b280      	uxth	r0, r0
 8009a40:	b292      	uxth	r2, r2
 8009a42:	1a12      	subs	r2, r2, r0
 8009a44:	445a      	add	r2, fp
 8009a46:	f8de 0000 	ldr.w	r0, [lr]
 8009a4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009a54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009a58:	b292      	uxth	r2, r2
 8009a5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009a5e:	45e1      	cmp	r9, ip
 8009a60:	f84e 2b04 	str.w	r2, [lr], #4
 8009a64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009a68:	d2de      	bcs.n	8009a28 <quorem+0x42>
 8009a6a:	9b00      	ldr	r3, [sp, #0]
 8009a6c:	58eb      	ldr	r3, [r5, r3]
 8009a6e:	b92b      	cbnz	r3, 8009a7c <quorem+0x96>
 8009a70:	9b01      	ldr	r3, [sp, #4]
 8009a72:	3b04      	subs	r3, #4
 8009a74:	429d      	cmp	r5, r3
 8009a76:	461a      	mov	r2, r3
 8009a78:	d32f      	bcc.n	8009ada <quorem+0xf4>
 8009a7a:	613c      	str	r4, [r7, #16]
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	f001 f979 	bl	800ad74 <__mcmp>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	db25      	blt.n	8009ad2 <quorem+0xec>
 8009a86:	4629      	mov	r1, r5
 8009a88:	2000      	movs	r0, #0
 8009a8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a8e:	f8d1 c000 	ldr.w	ip, [r1]
 8009a92:	fa1f fe82 	uxth.w	lr, r2
 8009a96:	fa1f f38c 	uxth.w	r3, ip
 8009a9a:	eba3 030e 	sub.w	r3, r3, lr
 8009a9e:	4403      	add	r3, r0
 8009aa0:	0c12      	lsrs	r2, r2, #16
 8009aa2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009aa6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ab0:	45c1      	cmp	r9, r8
 8009ab2:	f841 3b04 	str.w	r3, [r1], #4
 8009ab6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009aba:	d2e6      	bcs.n	8009a8a <quorem+0xa4>
 8009abc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ac4:	b922      	cbnz	r2, 8009ad0 <quorem+0xea>
 8009ac6:	3b04      	subs	r3, #4
 8009ac8:	429d      	cmp	r5, r3
 8009aca:	461a      	mov	r2, r3
 8009acc:	d30b      	bcc.n	8009ae6 <quorem+0x100>
 8009ace:	613c      	str	r4, [r7, #16]
 8009ad0:	3601      	adds	r6, #1
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	b003      	add	sp, #12
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ada:	6812      	ldr	r2, [r2, #0]
 8009adc:	3b04      	subs	r3, #4
 8009ade:	2a00      	cmp	r2, #0
 8009ae0:	d1cb      	bne.n	8009a7a <quorem+0x94>
 8009ae2:	3c01      	subs	r4, #1
 8009ae4:	e7c6      	b.n	8009a74 <quorem+0x8e>
 8009ae6:	6812      	ldr	r2, [r2, #0]
 8009ae8:	3b04      	subs	r3, #4
 8009aea:	2a00      	cmp	r2, #0
 8009aec:	d1ef      	bne.n	8009ace <quorem+0xe8>
 8009aee:	3c01      	subs	r4, #1
 8009af0:	e7ea      	b.n	8009ac8 <quorem+0xe2>
 8009af2:	2000      	movs	r0, #0
 8009af4:	e7ee      	b.n	8009ad4 <quorem+0xee>
	...

08009af8 <_dtoa_r>:
 8009af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	69c7      	ldr	r7, [r0, #28]
 8009afe:	b099      	sub	sp, #100	@ 0x64
 8009b00:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b04:	ec55 4b10 	vmov	r4, r5, d0
 8009b08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009b0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b0c:	4683      	mov	fp, r0
 8009b0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b12:	b97f      	cbnz	r7, 8009b34 <_dtoa_r+0x3c>
 8009b14:	2010      	movs	r0, #16
 8009b16:	f000 fdfd 	bl	800a714 <malloc>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009b20:	b920      	cbnz	r0, 8009b2c <_dtoa_r+0x34>
 8009b22:	4ba7      	ldr	r3, [pc, #668]	@ (8009dc0 <_dtoa_r+0x2c8>)
 8009b24:	21ef      	movs	r1, #239	@ 0xef
 8009b26:	48a7      	ldr	r0, [pc, #668]	@ (8009dc4 <_dtoa_r+0x2cc>)
 8009b28:	f001 fcae 	bl	800b488 <__assert_func>
 8009b2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009b30:	6007      	str	r7, [r0, #0]
 8009b32:	60c7      	str	r7, [r0, #12]
 8009b34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b38:	6819      	ldr	r1, [r3, #0]
 8009b3a:	b159      	cbz	r1, 8009b54 <_dtoa_r+0x5c>
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	604a      	str	r2, [r1, #4]
 8009b40:	2301      	movs	r3, #1
 8009b42:	4093      	lsls	r3, r2
 8009b44:	608b      	str	r3, [r1, #8]
 8009b46:	4658      	mov	r0, fp
 8009b48:	f000 feda 	bl	800a900 <_Bfree>
 8009b4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009b50:	2200      	movs	r2, #0
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	1e2b      	subs	r3, r5, #0
 8009b56:	bfb9      	ittee	lt
 8009b58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009b5c:	9303      	strlt	r3, [sp, #12]
 8009b5e:	2300      	movge	r3, #0
 8009b60:	6033      	strge	r3, [r6, #0]
 8009b62:	9f03      	ldr	r7, [sp, #12]
 8009b64:	4b98      	ldr	r3, [pc, #608]	@ (8009dc8 <_dtoa_r+0x2d0>)
 8009b66:	bfbc      	itt	lt
 8009b68:	2201      	movlt	r2, #1
 8009b6a:	6032      	strlt	r2, [r6, #0]
 8009b6c:	43bb      	bics	r3, r7
 8009b6e:	d112      	bne.n	8009b96 <_dtoa_r+0x9e>
 8009b70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009b72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009b76:	6013      	str	r3, [r2, #0]
 8009b78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b7c:	4323      	orrs	r3, r4
 8009b7e:	f000 854d 	beq.w	800a61c <_dtoa_r+0xb24>
 8009b82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009ddc <_dtoa_r+0x2e4>
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 854f 	beq.w	800a62c <_dtoa_r+0xb34>
 8009b8e:	f10a 0303 	add.w	r3, sl, #3
 8009b92:	f000 bd49 	b.w	800a628 <_dtoa_r+0xb30>
 8009b96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	ec51 0b17 	vmov	r0, r1, d7
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009ba6:	f7f6 ffaf 	bl	8000b08 <__aeabi_dcmpeq>
 8009baa:	4680      	mov	r8, r0
 8009bac:	b158      	cbz	r0, 8009bc6 <_dtoa_r+0xce>
 8009bae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bb6:	b113      	cbz	r3, 8009bbe <_dtoa_r+0xc6>
 8009bb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009bba:	4b84      	ldr	r3, [pc, #528]	@ (8009dcc <_dtoa_r+0x2d4>)
 8009bbc:	6013      	str	r3, [r2, #0]
 8009bbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009de0 <_dtoa_r+0x2e8>
 8009bc2:	f000 bd33 	b.w	800a62c <_dtoa_r+0xb34>
 8009bc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009bca:	aa16      	add	r2, sp, #88	@ 0x58
 8009bcc:	a917      	add	r1, sp, #92	@ 0x5c
 8009bce:	4658      	mov	r0, fp
 8009bd0:	f001 f980 	bl	800aed4 <__d2b>
 8009bd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009bd8:	4681      	mov	r9, r0
 8009bda:	2e00      	cmp	r6, #0
 8009bdc:	d077      	beq.n	8009cce <_dtoa_r+0x1d6>
 8009bde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009be0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009bf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009bf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	4b74      	ldr	r3, [pc, #464]	@ (8009dd0 <_dtoa_r+0x2d8>)
 8009bfe:	f7f6 fb63 	bl	80002c8 <__aeabi_dsub>
 8009c02:	a369      	add	r3, pc, #420	@ (adr r3, 8009da8 <_dtoa_r+0x2b0>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f7f6 fd16 	bl	8000638 <__aeabi_dmul>
 8009c0c:	a368      	add	r3, pc, #416	@ (adr r3, 8009db0 <_dtoa_r+0x2b8>)
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f7f6 fb5b 	bl	80002cc <__adddf3>
 8009c16:	4604      	mov	r4, r0
 8009c18:	4630      	mov	r0, r6
 8009c1a:	460d      	mov	r5, r1
 8009c1c:	f7f6 fca2 	bl	8000564 <__aeabi_i2d>
 8009c20:	a365      	add	r3, pc, #404	@ (adr r3, 8009db8 <_dtoa_r+0x2c0>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	f7f6 fd07 	bl	8000638 <__aeabi_dmul>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	4620      	mov	r0, r4
 8009c30:	4629      	mov	r1, r5
 8009c32:	f7f6 fb4b 	bl	80002cc <__adddf3>
 8009c36:	4604      	mov	r4, r0
 8009c38:	460d      	mov	r5, r1
 8009c3a:	f7f6 ffad 	bl	8000b98 <__aeabi_d2iz>
 8009c3e:	2200      	movs	r2, #0
 8009c40:	4607      	mov	r7, r0
 8009c42:	2300      	movs	r3, #0
 8009c44:	4620      	mov	r0, r4
 8009c46:	4629      	mov	r1, r5
 8009c48:	f7f6 ff68 	bl	8000b1c <__aeabi_dcmplt>
 8009c4c:	b140      	cbz	r0, 8009c60 <_dtoa_r+0x168>
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f7f6 fc88 	bl	8000564 <__aeabi_i2d>
 8009c54:	4622      	mov	r2, r4
 8009c56:	462b      	mov	r3, r5
 8009c58:	f7f6 ff56 	bl	8000b08 <__aeabi_dcmpeq>
 8009c5c:	b900      	cbnz	r0, 8009c60 <_dtoa_r+0x168>
 8009c5e:	3f01      	subs	r7, #1
 8009c60:	2f16      	cmp	r7, #22
 8009c62:	d851      	bhi.n	8009d08 <_dtoa_r+0x210>
 8009c64:	4b5b      	ldr	r3, [pc, #364]	@ (8009dd4 <_dtoa_r+0x2dc>)
 8009c66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c72:	f7f6 ff53 	bl	8000b1c <__aeabi_dcmplt>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d048      	beq.n	8009d0c <_dtoa_r+0x214>
 8009c7a:	3f01      	subs	r7, #1
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c82:	1b9b      	subs	r3, r3, r6
 8009c84:	1e5a      	subs	r2, r3, #1
 8009c86:	bf44      	itt	mi
 8009c88:	f1c3 0801 	rsbmi	r8, r3, #1
 8009c8c:	2300      	movmi	r3, #0
 8009c8e:	9208      	str	r2, [sp, #32]
 8009c90:	bf54      	ite	pl
 8009c92:	f04f 0800 	movpl.w	r8, #0
 8009c96:	9308      	strmi	r3, [sp, #32]
 8009c98:	2f00      	cmp	r7, #0
 8009c9a:	db39      	blt.n	8009d10 <_dtoa_r+0x218>
 8009c9c:	9b08      	ldr	r3, [sp, #32]
 8009c9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009ca0:	443b      	add	r3, r7
 8009ca2:	9308      	str	r3, [sp, #32]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009caa:	2b09      	cmp	r3, #9
 8009cac:	d864      	bhi.n	8009d78 <_dtoa_r+0x280>
 8009cae:	2b05      	cmp	r3, #5
 8009cb0:	bfc4      	itt	gt
 8009cb2:	3b04      	subgt	r3, #4
 8009cb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb8:	f1a3 0302 	sub.w	r3, r3, #2
 8009cbc:	bfcc      	ite	gt
 8009cbe:	2400      	movgt	r4, #0
 8009cc0:	2401      	movle	r4, #1
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d863      	bhi.n	8009d8e <_dtoa_r+0x296>
 8009cc6:	e8df f003 	tbb	[pc, r3]
 8009cca:	372a      	.short	0x372a
 8009ccc:	5535      	.short	0x5535
 8009cce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009cd2:	441e      	add	r6, r3
 8009cd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	bfc1      	itttt	gt
 8009cdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009ce0:	409f      	lslgt	r7, r3
 8009ce2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009ce6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009cea:	bfd6      	itet	le
 8009cec:	f1c3 0320 	rsble	r3, r3, #32
 8009cf0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009cf4:	fa04 f003 	lslle.w	r0, r4, r3
 8009cf8:	f7f6 fc24 	bl	8000544 <__aeabi_ui2d>
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009d02:	3e01      	subs	r6, #1
 8009d04:	9214      	str	r2, [sp, #80]	@ 0x50
 8009d06:	e777      	b.n	8009bf8 <_dtoa_r+0x100>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e7b8      	b.n	8009c7e <_dtoa_r+0x186>
 8009d0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009d0e:	e7b7      	b.n	8009c80 <_dtoa_r+0x188>
 8009d10:	427b      	negs	r3, r7
 8009d12:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d14:	2300      	movs	r3, #0
 8009d16:	eba8 0807 	sub.w	r8, r8, r7
 8009d1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d1c:	e7c4      	b.n	8009ca8 <_dtoa_r+0x1b0>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dc35      	bgt.n	8009d94 <_dtoa_r+0x29c>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	9307      	str	r3, [sp, #28]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d32:	e00b      	b.n	8009d4c <_dtoa_r+0x254>
 8009d34:	2301      	movs	r3, #1
 8009d36:	e7f3      	b.n	8009d20 <_dtoa_r+0x228>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d3e:	18fb      	adds	r3, r7, r3
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	3301      	adds	r3, #1
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	9307      	str	r3, [sp, #28]
 8009d48:	bfb8      	it	lt
 8009d4a:	2301      	movlt	r3, #1
 8009d4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009d50:	2100      	movs	r1, #0
 8009d52:	2204      	movs	r2, #4
 8009d54:	f102 0514 	add.w	r5, r2, #20
 8009d58:	429d      	cmp	r5, r3
 8009d5a:	d91f      	bls.n	8009d9c <_dtoa_r+0x2a4>
 8009d5c:	6041      	str	r1, [r0, #4]
 8009d5e:	4658      	mov	r0, fp
 8009d60:	f000 fd8e 	bl	800a880 <_Balloc>
 8009d64:	4682      	mov	sl, r0
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d13c      	bne.n	8009de4 <_dtoa_r+0x2ec>
 8009d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009dd8 <_dtoa_r+0x2e0>)
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009d72:	e6d8      	b.n	8009b26 <_dtoa_r+0x2e>
 8009d74:	2301      	movs	r3, #1
 8009d76:	e7e0      	b.n	8009d3a <_dtoa_r+0x242>
 8009d78:	2401      	movs	r4, #1
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009d80:	f04f 33ff 	mov.w	r3, #4294967295
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	9307      	str	r3, [sp, #28]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	2312      	movs	r3, #18
 8009d8c:	e7d0      	b.n	8009d30 <_dtoa_r+0x238>
 8009d8e:	2301      	movs	r3, #1
 8009d90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d92:	e7f5      	b.n	8009d80 <_dtoa_r+0x288>
 8009d94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	9307      	str	r3, [sp, #28]
 8009d9a:	e7d7      	b.n	8009d4c <_dtoa_r+0x254>
 8009d9c:	3101      	adds	r1, #1
 8009d9e:	0052      	lsls	r2, r2, #1
 8009da0:	e7d8      	b.n	8009d54 <_dtoa_r+0x25c>
 8009da2:	bf00      	nop
 8009da4:	f3af 8000 	nop.w
 8009da8:	636f4361 	.word	0x636f4361
 8009dac:	3fd287a7 	.word	0x3fd287a7
 8009db0:	8b60c8b3 	.word	0x8b60c8b3
 8009db4:	3fc68a28 	.word	0x3fc68a28
 8009db8:	509f79fb 	.word	0x509f79fb
 8009dbc:	3fd34413 	.word	0x3fd34413
 8009dc0:	0800b819 	.word	0x0800b819
 8009dc4:	0800b830 	.word	0x0800b830
 8009dc8:	7ff00000 	.word	0x7ff00000
 8009dcc:	0800b7e9 	.word	0x0800b7e9
 8009dd0:	3ff80000 	.word	0x3ff80000
 8009dd4:	0800b928 	.word	0x0800b928
 8009dd8:	0800b888 	.word	0x0800b888
 8009ddc:	0800b815 	.word	0x0800b815
 8009de0:	0800b7e8 	.word	0x0800b7e8
 8009de4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009de8:	6018      	str	r0, [r3, #0]
 8009dea:	9b07      	ldr	r3, [sp, #28]
 8009dec:	2b0e      	cmp	r3, #14
 8009dee:	f200 80a4 	bhi.w	8009f3a <_dtoa_r+0x442>
 8009df2:	2c00      	cmp	r4, #0
 8009df4:	f000 80a1 	beq.w	8009f3a <_dtoa_r+0x442>
 8009df8:	2f00      	cmp	r7, #0
 8009dfa:	dd33      	ble.n	8009e64 <_dtoa_r+0x36c>
 8009dfc:	4bad      	ldr	r3, [pc, #692]	@ (800a0b4 <_dtoa_r+0x5bc>)
 8009dfe:	f007 020f 	and.w	r2, r7, #15
 8009e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e06:	ed93 7b00 	vldr	d7, [r3]
 8009e0a:	05f8      	lsls	r0, r7, #23
 8009e0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009e14:	d516      	bpl.n	8009e44 <_dtoa_r+0x34c>
 8009e16:	4ba8      	ldr	r3, [pc, #672]	@ (800a0b8 <_dtoa_r+0x5c0>)
 8009e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e20:	f7f6 fd34 	bl	800088c <__aeabi_ddiv>
 8009e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e28:	f004 040f 	and.w	r4, r4, #15
 8009e2c:	2603      	movs	r6, #3
 8009e2e:	4da2      	ldr	r5, [pc, #648]	@ (800a0b8 <_dtoa_r+0x5c0>)
 8009e30:	b954      	cbnz	r4, 8009e48 <_dtoa_r+0x350>
 8009e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e3a:	f7f6 fd27 	bl	800088c <__aeabi_ddiv>
 8009e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e42:	e028      	b.n	8009e96 <_dtoa_r+0x39e>
 8009e44:	2602      	movs	r6, #2
 8009e46:	e7f2      	b.n	8009e2e <_dtoa_r+0x336>
 8009e48:	07e1      	lsls	r1, r4, #31
 8009e4a:	d508      	bpl.n	8009e5e <_dtoa_r+0x366>
 8009e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e54:	f7f6 fbf0 	bl	8000638 <__aeabi_dmul>
 8009e58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e5c:	3601      	adds	r6, #1
 8009e5e:	1064      	asrs	r4, r4, #1
 8009e60:	3508      	adds	r5, #8
 8009e62:	e7e5      	b.n	8009e30 <_dtoa_r+0x338>
 8009e64:	f000 80d2 	beq.w	800a00c <_dtoa_r+0x514>
 8009e68:	427c      	negs	r4, r7
 8009e6a:	4b92      	ldr	r3, [pc, #584]	@ (800a0b4 <_dtoa_r+0x5bc>)
 8009e6c:	4d92      	ldr	r5, [pc, #584]	@ (800a0b8 <_dtoa_r+0x5c0>)
 8009e6e:	f004 020f 	and.w	r2, r4, #15
 8009e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e7e:	f7f6 fbdb 	bl	8000638 <__aeabi_dmul>
 8009e82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e86:	1124      	asrs	r4, r4, #4
 8009e88:	2300      	movs	r3, #0
 8009e8a:	2602      	movs	r6, #2
 8009e8c:	2c00      	cmp	r4, #0
 8009e8e:	f040 80b2 	bne.w	8009ff6 <_dtoa_r+0x4fe>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1d3      	bne.n	8009e3e <_dtoa_r+0x346>
 8009e96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80b7 	beq.w	800a010 <_dtoa_r+0x518>
 8009ea2:	4b86      	ldr	r3, [pc, #536]	@ (800a0bc <_dtoa_r+0x5c4>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	f7f6 fe37 	bl	8000b1c <__aeabi_dcmplt>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	f000 80ae 	beq.w	800a010 <_dtoa_r+0x518>
 8009eb4:	9b07      	ldr	r3, [sp, #28]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 80aa 	beq.w	800a010 <_dtoa_r+0x518>
 8009ebc:	9b00      	ldr	r3, [sp, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dd37      	ble.n	8009f32 <_dtoa_r+0x43a>
 8009ec2:	1e7b      	subs	r3, r7, #1
 8009ec4:	9304      	str	r3, [sp, #16]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4b7d      	ldr	r3, [pc, #500]	@ (800a0c0 <_dtoa_r+0x5c8>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	4629      	mov	r1, r5
 8009ece:	f7f6 fbb3 	bl	8000638 <__aeabi_dmul>
 8009ed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed6:	9c00      	ldr	r4, [sp, #0]
 8009ed8:	3601      	adds	r6, #1
 8009eda:	4630      	mov	r0, r6
 8009edc:	f7f6 fb42 	bl	8000564 <__aeabi_i2d>
 8009ee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ee4:	f7f6 fba8 	bl	8000638 <__aeabi_dmul>
 8009ee8:	4b76      	ldr	r3, [pc, #472]	@ (800a0c4 <_dtoa_r+0x5cc>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	f7f6 f9ee 	bl	80002cc <__adddf3>
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009ef6:	2c00      	cmp	r4, #0
 8009ef8:	f040 808d 	bne.w	800a016 <_dtoa_r+0x51e>
 8009efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f00:	4b71      	ldr	r3, [pc, #452]	@ (800a0c8 <_dtoa_r+0x5d0>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	f7f6 f9e0 	bl	80002c8 <__aeabi_dsub>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f10:	462a      	mov	r2, r5
 8009f12:	4633      	mov	r3, r6
 8009f14:	f7f6 fe20 	bl	8000b58 <__aeabi_dcmpgt>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	f040 828b 	bne.w	800a434 <_dtoa_r+0x93c>
 8009f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f22:	462a      	mov	r2, r5
 8009f24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009f28:	f7f6 fdf8 	bl	8000b1c <__aeabi_dcmplt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	f040 8128 	bne.w	800a182 <_dtoa_r+0x68a>
 8009f32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009f36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009f3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f2c0 815a 	blt.w	800a1f6 <_dtoa_r+0x6fe>
 8009f42:	2f0e      	cmp	r7, #14
 8009f44:	f300 8157 	bgt.w	800a1f6 <_dtoa_r+0x6fe>
 8009f48:	4b5a      	ldr	r3, [pc, #360]	@ (800a0b4 <_dtoa_r+0x5bc>)
 8009f4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f4e:	ed93 7b00 	vldr	d7, [r3]
 8009f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	ed8d 7b00 	vstr	d7, [sp]
 8009f5a:	da03      	bge.n	8009f64 <_dtoa_r+0x46c>
 8009f5c:	9b07      	ldr	r3, [sp, #28]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f340 8101 	ble.w	800a166 <_dtoa_r+0x66e>
 8009f64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f68:	4656      	mov	r6, sl
 8009f6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f6e:	4620      	mov	r0, r4
 8009f70:	4629      	mov	r1, r5
 8009f72:	f7f6 fc8b 	bl	800088c <__aeabi_ddiv>
 8009f76:	f7f6 fe0f 	bl	8000b98 <__aeabi_d2iz>
 8009f7a:	4680      	mov	r8, r0
 8009f7c:	f7f6 faf2 	bl	8000564 <__aeabi_i2d>
 8009f80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f84:	f7f6 fb58 	bl	8000638 <__aeabi_dmul>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	4629      	mov	r1, r5
 8009f90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009f94:	f7f6 f998 	bl	80002c8 <__aeabi_dsub>
 8009f98:	f806 4b01 	strb.w	r4, [r6], #1
 8009f9c:	9d07      	ldr	r5, [sp, #28]
 8009f9e:	eba6 040a 	sub.w	r4, r6, sl
 8009fa2:	42a5      	cmp	r5, r4
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	f040 8117 	bne.w	800a1da <_dtoa_r+0x6e2>
 8009fac:	f7f6 f98e 	bl	80002cc <__adddf3>
 8009fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	460d      	mov	r5, r1
 8009fb8:	f7f6 fdce 	bl	8000b58 <__aeabi_dcmpgt>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	f040 80f9 	bne.w	800a1b4 <_dtoa_r+0x6bc>
 8009fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7f6 fd9d 	bl	8000b08 <__aeabi_dcmpeq>
 8009fce:	b118      	cbz	r0, 8009fd8 <_dtoa_r+0x4e0>
 8009fd0:	f018 0f01 	tst.w	r8, #1
 8009fd4:	f040 80ee 	bne.w	800a1b4 <_dtoa_r+0x6bc>
 8009fd8:	4649      	mov	r1, r9
 8009fda:	4658      	mov	r0, fp
 8009fdc:	f000 fc90 	bl	800a900 <_Bfree>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	7033      	strb	r3, [r6, #0]
 8009fe4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fe6:	3701      	adds	r7, #1
 8009fe8:	601f      	str	r7, [r3, #0]
 8009fea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 831d 	beq.w	800a62c <_dtoa_r+0xb34>
 8009ff2:	601e      	str	r6, [r3, #0]
 8009ff4:	e31a      	b.n	800a62c <_dtoa_r+0xb34>
 8009ff6:	07e2      	lsls	r2, r4, #31
 8009ff8:	d505      	bpl.n	800a006 <_dtoa_r+0x50e>
 8009ffa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ffe:	f7f6 fb1b 	bl	8000638 <__aeabi_dmul>
 800a002:	3601      	adds	r6, #1
 800a004:	2301      	movs	r3, #1
 800a006:	1064      	asrs	r4, r4, #1
 800a008:	3508      	adds	r5, #8
 800a00a:	e73f      	b.n	8009e8c <_dtoa_r+0x394>
 800a00c:	2602      	movs	r6, #2
 800a00e:	e742      	b.n	8009e96 <_dtoa_r+0x39e>
 800a010:	9c07      	ldr	r4, [sp, #28]
 800a012:	9704      	str	r7, [sp, #16]
 800a014:	e761      	b.n	8009eda <_dtoa_r+0x3e2>
 800a016:	4b27      	ldr	r3, [pc, #156]	@ (800a0b4 <_dtoa_r+0x5bc>)
 800a018:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a01a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a01e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a022:	4454      	add	r4, sl
 800a024:	2900      	cmp	r1, #0
 800a026:	d053      	beq.n	800a0d0 <_dtoa_r+0x5d8>
 800a028:	4928      	ldr	r1, [pc, #160]	@ (800a0cc <_dtoa_r+0x5d4>)
 800a02a:	2000      	movs	r0, #0
 800a02c:	f7f6 fc2e 	bl	800088c <__aeabi_ddiv>
 800a030:	4633      	mov	r3, r6
 800a032:	462a      	mov	r2, r5
 800a034:	f7f6 f948 	bl	80002c8 <__aeabi_dsub>
 800a038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a03c:	4656      	mov	r6, sl
 800a03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a042:	f7f6 fda9 	bl	8000b98 <__aeabi_d2iz>
 800a046:	4605      	mov	r5, r0
 800a048:	f7f6 fa8c 	bl	8000564 <__aeabi_i2d>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a054:	f7f6 f938 	bl	80002c8 <__aeabi_dsub>
 800a058:	3530      	adds	r5, #48	@ 0x30
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a062:	f806 5b01 	strb.w	r5, [r6], #1
 800a066:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a06a:	f7f6 fd57 	bl	8000b1c <__aeabi_dcmplt>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d171      	bne.n	800a156 <_dtoa_r+0x65e>
 800a072:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a076:	4911      	ldr	r1, [pc, #68]	@ (800a0bc <_dtoa_r+0x5c4>)
 800a078:	2000      	movs	r0, #0
 800a07a:	f7f6 f925 	bl	80002c8 <__aeabi_dsub>
 800a07e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a082:	f7f6 fd4b 	bl	8000b1c <__aeabi_dcmplt>
 800a086:	2800      	cmp	r0, #0
 800a088:	f040 8095 	bne.w	800a1b6 <_dtoa_r+0x6be>
 800a08c:	42a6      	cmp	r6, r4
 800a08e:	f43f af50 	beq.w	8009f32 <_dtoa_r+0x43a>
 800a092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a096:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c0 <_dtoa_r+0x5c8>)
 800a098:	2200      	movs	r2, #0
 800a09a:	f7f6 facd 	bl	8000638 <__aeabi_dmul>
 800a09e:	4b08      	ldr	r3, [pc, #32]	@ (800a0c0 <_dtoa_r+0x5c8>)
 800a0a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0aa:	f7f6 fac5 	bl	8000638 <__aeabi_dmul>
 800a0ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0b2:	e7c4      	b.n	800a03e <_dtoa_r+0x546>
 800a0b4:	0800b928 	.word	0x0800b928
 800a0b8:	0800b900 	.word	0x0800b900
 800a0bc:	3ff00000 	.word	0x3ff00000
 800a0c0:	40240000 	.word	0x40240000
 800a0c4:	401c0000 	.word	0x401c0000
 800a0c8:	40140000 	.word	0x40140000
 800a0cc:	3fe00000 	.word	0x3fe00000
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f7f6 fab0 	bl	8000638 <__aeabi_dmul>
 800a0d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a0de:	4656      	mov	r6, sl
 800a0e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0e4:	f7f6 fd58 	bl	8000b98 <__aeabi_d2iz>
 800a0e8:	4605      	mov	r5, r0
 800a0ea:	f7f6 fa3b 	bl	8000564 <__aeabi_i2d>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f6:	f7f6 f8e7 	bl	80002c8 <__aeabi_dsub>
 800a0fa:	3530      	adds	r5, #48	@ 0x30
 800a0fc:	f806 5b01 	strb.w	r5, [r6], #1
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	42a6      	cmp	r6, r4
 800a106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a10a:	f04f 0200 	mov.w	r2, #0
 800a10e:	d124      	bne.n	800a15a <_dtoa_r+0x662>
 800a110:	4bac      	ldr	r3, [pc, #688]	@ (800a3c4 <_dtoa_r+0x8cc>)
 800a112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a116:	f7f6 f8d9 	bl	80002cc <__adddf3>
 800a11a:	4602      	mov	r2, r0
 800a11c:	460b      	mov	r3, r1
 800a11e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a122:	f7f6 fd19 	bl	8000b58 <__aeabi_dcmpgt>
 800a126:	2800      	cmp	r0, #0
 800a128:	d145      	bne.n	800a1b6 <_dtoa_r+0x6be>
 800a12a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a12e:	49a5      	ldr	r1, [pc, #660]	@ (800a3c4 <_dtoa_r+0x8cc>)
 800a130:	2000      	movs	r0, #0
 800a132:	f7f6 f8c9 	bl	80002c8 <__aeabi_dsub>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a13e:	f7f6 fced 	bl	8000b1c <__aeabi_dcmplt>
 800a142:	2800      	cmp	r0, #0
 800a144:	f43f aef5 	beq.w	8009f32 <_dtoa_r+0x43a>
 800a148:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a14a:	1e73      	subs	r3, r6, #1
 800a14c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a14e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a152:	2b30      	cmp	r3, #48	@ 0x30
 800a154:	d0f8      	beq.n	800a148 <_dtoa_r+0x650>
 800a156:	9f04      	ldr	r7, [sp, #16]
 800a158:	e73e      	b.n	8009fd8 <_dtoa_r+0x4e0>
 800a15a:	4b9b      	ldr	r3, [pc, #620]	@ (800a3c8 <_dtoa_r+0x8d0>)
 800a15c:	f7f6 fa6c 	bl	8000638 <__aeabi_dmul>
 800a160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a164:	e7bc      	b.n	800a0e0 <_dtoa_r+0x5e8>
 800a166:	d10c      	bne.n	800a182 <_dtoa_r+0x68a>
 800a168:	4b98      	ldr	r3, [pc, #608]	@ (800a3cc <_dtoa_r+0x8d4>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a170:	f7f6 fa62 	bl	8000638 <__aeabi_dmul>
 800a174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a178:	f7f6 fce4 	bl	8000b44 <__aeabi_dcmpge>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f000 8157 	beq.w	800a430 <_dtoa_r+0x938>
 800a182:	2400      	movs	r4, #0
 800a184:	4625      	mov	r5, r4
 800a186:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a188:	43db      	mvns	r3, r3
 800a18a:	9304      	str	r3, [sp, #16]
 800a18c:	4656      	mov	r6, sl
 800a18e:	2700      	movs	r7, #0
 800a190:	4621      	mov	r1, r4
 800a192:	4658      	mov	r0, fp
 800a194:	f000 fbb4 	bl	800a900 <_Bfree>
 800a198:	2d00      	cmp	r5, #0
 800a19a:	d0dc      	beq.n	800a156 <_dtoa_r+0x65e>
 800a19c:	b12f      	cbz	r7, 800a1aa <_dtoa_r+0x6b2>
 800a19e:	42af      	cmp	r7, r5
 800a1a0:	d003      	beq.n	800a1aa <_dtoa_r+0x6b2>
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	4658      	mov	r0, fp
 800a1a6:	f000 fbab 	bl	800a900 <_Bfree>
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4658      	mov	r0, fp
 800a1ae:	f000 fba7 	bl	800a900 <_Bfree>
 800a1b2:	e7d0      	b.n	800a156 <_dtoa_r+0x65e>
 800a1b4:	9704      	str	r7, [sp, #16]
 800a1b6:	4633      	mov	r3, r6
 800a1b8:	461e      	mov	r6, r3
 800a1ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1be:	2a39      	cmp	r2, #57	@ 0x39
 800a1c0:	d107      	bne.n	800a1d2 <_dtoa_r+0x6da>
 800a1c2:	459a      	cmp	sl, r3
 800a1c4:	d1f8      	bne.n	800a1b8 <_dtoa_r+0x6c0>
 800a1c6:	9a04      	ldr	r2, [sp, #16]
 800a1c8:	3201      	adds	r2, #1
 800a1ca:	9204      	str	r2, [sp, #16]
 800a1cc:	2230      	movs	r2, #48	@ 0x30
 800a1ce:	f88a 2000 	strb.w	r2, [sl]
 800a1d2:	781a      	ldrb	r2, [r3, #0]
 800a1d4:	3201      	adds	r2, #1
 800a1d6:	701a      	strb	r2, [r3, #0]
 800a1d8:	e7bd      	b.n	800a156 <_dtoa_r+0x65e>
 800a1da:	4b7b      	ldr	r3, [pc, #492]	@ (800a3c8 <_dtoa_r+0x8d0>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f7f6 fa2b 	bl	8000638 <__aeabi_dmul>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	460d      	mov	r5, r1
 800a1ea:	f7f6 fc8d 	bl	8000b08 <__aeabi_dcmpeq>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f43f aebb 	beq.w	8009f6a <_dtoa_r+0x472>
 800a1f4:	e6f0      	b.n	8009fd8 <_dtoa_r+0x4e0>
 800a1f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	f000 80db 	beq.w	800a3b4 <_dtoa_r+0x8bc>
 800a1fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a200:	2a01      	cmp	r2, #1
 800a202:	f300 80bf 	bgt.w	800a384 <_dtoa_r+0x88c>
 800a206:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a208:	2a00      	cmp	r2, #0
 800a20a:	f000 80b7 	beq.w	800a37c <_dtoa_r+0x884>
 800a20e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a212:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a214:	4646      	mov	r6, r8
 800a216:	9a08      	ldr	r2, [sp, #32]
 800a218:	2101      	movs	r1, #1
 800a21a:	441a      	add	r2, r3
 800a21c:	4658      	mov	r0, fp
 800a21e:	4498      	add	r8, r3
 800a220:	9208      	str	r2, [sp, #32]
 800a222:	f000 fc21 	bl	800aa68 <__i2b>
 800a226:	4605      	mov	r5, r0
 800a228:	b15e      	cbz	r6, 800a242 <_dtoa_r+0x74a>
 800a22a:	9b08      	ldr	r3, [sp, #32]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	dd08      	ble.n	800a242 <_dtoa_r+0x74a>
 800a230:	42b3      	cmp	r3, r6
 800a232:	9a08      	ldr	r2, [sp, #32]
 800a234:	bfa8      	it	ge
 800a236:	4633      	movge	r3, r6
 800a238:	eba8 0803 	sub.w	r8, r8, r3
 800a23c:	1af6      	subs	r6, r6, r3
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	9308      	str	r3, [sp, #32]
 800a242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a244:	b1f3      	cbz	r3, 800a284 <_dtoa_r+0x78c>
 800a246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 80b7 	beq.w	800a3bc <_dtoa_r+0x8c4>
 800a24e:	b18c      	cbz	r4, 800a274 <_dtoa_r+0x77c>
 800a250:	4629      	mov	r1, r5
 800a252:	4622      	mov	r2, r4
 800a254:	4658      	mov	r0, fp
 800a256:	f000 fcc7 	bl	800abe8 <__pow5mult>
 800a25a:	464a      	mov	r2, r9
 800a25c:	4601      	mov	r1, r0
 800a25e:	4605      	mov	r5, r0
 800a260:	4658      	mov	r0, fp
 800a262:	f000 fc17 	bl	800aa94 <__multiply>
 800a266:	4649      	mov	r1, r9
 800a268:	9004      	str	r0, [sp, #16]
 800a26a:	4658      	mov	r0, fp
 800a26c:	f000 fb48 	bl	800a900 <_Bfree>
 800a270:	9b04      	ldr	r3, [sp, #16]
 800a272:	4699      	mov	r9, r3
 800a274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a276:	1b1a      	subs	r2, r3, r4
 800a278:	d004      	beq.n	800a284 <_dtoa_r+0x78c>
 800a27a:	4649      	mov	r1, r9
 800a27c:	4658      	mov	r0, fp
 800a27e:	f000 fcb3 	bl	800abe8 <__pow5mult>
 800a282:	4681      	mov	r9, r0
 800a284:	2101      	movs	r1, #1
 800a286:	4658      	mov	r0, fp
 800a288:	f000 fbee 	bl	800aa68 <__i2b>
 800a28c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a28e:	4604      	mov	r4, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 81cf 	beq.w	800a634 <_dtoa_r+0xb3c>
 800a296:	461a      	mov	r2, r3
 800a298:	4601      	mov	r1, r0
 800a29a:	4658      	mov	r0, fp
 800a29c:	f000 fca4 	bl	800abe8 <__pow5mult>
 800a2a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	f300 8095 	bgt.w	800a3d4 <_dtoa_r+0x8dc>
 800a2aa:	9b02      	ldr	r3, [sp, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f040 8087 	bne.w	800a3c0 <_dtoa_r+0x8c8>
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f040 8089 	bne.w	800a3d0 <_dtoa_r+0x8d8>
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a2c4:	0d1b      	lsrs	r3, r3, #20
 800a2c6:	051b      	lsls	r3, r3, #20
 800a2c8:	b12b      	cbz	r3, 800a2d6 <_dtoa_r+0x7de>
 800a2ca:	9b08      	ldr	r3, [sp, #32]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	9308      	str	r3, [sp, #32]
 800a2d0:	f108 0801 	add.w	r8, r8, #1
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 81b0 	beq.w	800a640 <_dtoa_r+0xb48>
 800a2e0:	6923      	ldr	r3, [r4, #16]
 800a2e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2e6:	6918      	ldr	r0, [r3, #16]
 800a2e8:	f000 fb72 	bl	800a9d0 <__hi0bits>
 800a2ec:	f1c0 0020 	rsb	r0, r0, #32
 800a2f0:	9b08      	ldr	r3, [sp, #32]
 800a2f2:	4418      	add	r0, r3
 800a2f4:	f010 001f 	ands.w	r0, r0, #31
 800a2f8:	d077      	beq.n	800a3ea <_dtoa_r+0x8f2>
 800a2fa:	f1c0 0320 	rsb	r3, r0, #32
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	dd6b      	ble.n	800a3da <_dtoa_r+0x8e2>
 800a302:	9b08      	ldr	r3, [sp, #32]
 800a304:	f1c0 001c 	rsb	r0, r0, #28
 800a308:	4403      	add	r3, r0
 800a30a:	4480      	add	r8, r0
 800a30c:	4406      	add	r6, r0
 800a30e:	9308      	str	r3, [sp, #32]
 800a310:	f1b8 0f00 	cmp.w	r8, #0
 800a314:	dd05      	ble.n	800a322 <_dtoa_r+0x82a>
 800a316:	4649      	mov	r1, r9
 800a318:	4642      	mov	r2, r8
 800a31a:	4658      	mov	r0, fp
 800a31c:	f000 fcbe 	bl	800ac9c <__lshift>
 800a320:	4681      	mov	r9, r0
 800a322:	9b08      	ldr	r3, [sp, #32]
 800a324:	2b00      	cmp	r3, #0
 800a326:	dd05      	ble.n	800a334 <_dtoa_r+0x83c>
 800a328:	4621      	mov	r1, r4
 800a32a:	461a      	mov	r2, r3
 800a32c:	4658      	mov	r0, fp
 800a32e:	f000 fcb5 	bl	800ac9c <__lshift>
 800a332:	4604      	mov	r4, r0
 800a334:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a336:	2b00      	cmp	r3, #0
 800a338:	d059      	beq.n	800a3ee <_dtoa_r+0x8f6>
 800a33a:	4621      	mov	r1, r4
 800a33c:	4648      	mov	r0, r9
 800a33e:	f000 fd19 	bl	800ad74 <__mcmp>
 800a342:	2800      	cmp	r0, #0
 800a344:	da53      	bge.n	800a3ee <_dtoa_r+0x8f6>
 800a346:	1e7b      	subs	r3, r7, #1
 800a348:	9304      	str	r3, [sp, #16]
 800a34a:	4649      	mov	r1, r9
 800a34c:	2300      	movs	r3, #0
 800a34e:	220a      	movs	r2, #10
 800a350:	4658      	mov	r0, fp
 800a352:	f000 faf7 	bl	800a944 <__multadd>
 800a356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a358:	4681      	mov	r9, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 8172 	beq.w	800a644 <_dtoa_r+0xb4c>
 800a360:	2300      	movs	r3, #0
 800a362:	4629      	mov	r1, r5
 800a364:	220a      	movs	r2, #10
 800a366:	4658      	mov	r0, fp
 800a368:	f000 faec 	bl	800a944 <__multadd>
 800a36c:	9b00      	ldr	r3, [sp, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	4605      	mov	r5, r0
 800a372:	dc67      	bgt.n	800a444 <_dtoa_r+0x94c>
 800a374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a376:	2b02      	cmp	r3, #2
 800a378:	dc41      	bgt.n	800a3fe <_dtoa_r+0x906>
 800a37a:	e063      	b.n	800a444 <_dtoa_r+0x94c>
 800a37c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a37e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a382:	e746      	b.n	800a212 <_dtoa_r+0x71a>
 800a384:	9b07      	ldr	r3, [sp, #28]
 800a386:	1e5c      	subs	r4, r3, #1
 800a388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a38a:	42a3      	cmp	r3, r4
 800a38c:	bfbf      	itttt	lt
 800a38e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a390:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a392:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a394:	1ae3      	sublt	r3, r4, r3
 800a396:	bfb4      	ite	lt
 800a398:	18d2      	addlt	r2, r2, r3
 800a39a:	1b1c      	subge	r4, r3, r4
 800a39c:	9b07      	ldr	r3, [sp, #28]
 800a39e:	bfbc      	itt	lt
 800a3a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a3a2:	2400      	movlt	r4, #0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	bfb5      	itete	lt
 800a3a8:	eba8 0603 	sublt.w	r6, r8, r3
 800a3ac:	9b07      	ldrge	r3, [sp, #28]
 800a3ae:	2300      	movlt	r3, #0
 800a3b0:	4646      	movge	r6, r8
 800a3b2:	e730      	b.n	800a216 <_dtoa_r+0x71e>
 800a3b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a3b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a3b8:	4646      	mov	r6, r8
 800a3ba:	e735      	b.n	800a228 <_dtoa_r+0x730>
 800a3bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3be:	e75c      	b.n	800a27a <_dtoa_r+0x782>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	e788      	b.n	800a2d6 <_dtoa_r+0x7de>
 800a3c4:	3fe00000 	.word	0x3fe00000
 800a3c8:	40240000 	.word	0x40240000
 800a3cc:	40140000 	.word	0x40140000
 800a3d0:	9b02      	ldr	r3, [sp, #8]
 800a3d2:	e780      	b.n	800a2d6 <_dtoa_r+0x7de>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3d8:	e782      	b.n	800a2e0 <_dtoa_r+0x7e8>
 800a3da:	d099      	beq.n	800a310 <_dtoa_r+0x818>
 800a3dc:	9a08      	ldr	r2, [sp, #32]
 800a3de:	331c      	adds	r3, #28
 800a3e0:	441a      	add	r2, r3
 800a3e2:	4498      	add	r8, r3
 800a3e4:	441e      	add	r6, r3
 800a3e6:	9208      	str	r2, [sp, #32]
 800a3e8:	e792      	b.n	800a310 <_dtoa_r+0x818>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	e7f6      	b.n	800a3dc <_dtoa_r+0x8e4>
 800a3ee:	9b07      	ldr	r3, [sp, #28]
 800a3f0:	9704      	str	r7, [sp, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	dc20      	bgt.n	800a438 <_dtoa_r+0x940>
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	dd1e      	ble.n	800a43c <_dtoa_r+0x944>
 800a3fe:	9b00      	ldr	r3, [sp, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	f47f aec0 	bne.w	800a186 <_dtoa_r+0x68e>
 800a406:	4621      	mov	r1, r4
 800a408:	2205      	movs	r2, #5
 800a40a:	4658      	mov	r0, fp
 800a40c:	f000 fa9a 	bl	800a944 <__multadd>
 800a410:	4601      	mov	r1, r0
 800a412:	4604      	mov	r4, r0
 800a414:	4648      	mov	r0, r9
 800a416:	f000 fcad 	bl	800ad74 <__mcmp>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	f77f aeb3 	ble.w	800a186 <_dtoa_r+0x68e>
 800a420:	4656      	mov	r6, sl
 800a422:	2331      	movs	r3, #49	@ 0x31
 800a424:	f806 3b01 	strb.w	r3, [r6], #1
 800a428:	9b04      	ldr	r3, [sp, #16]
 800a42a:	3301      	adds	r3, #1
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	e6ae      	b.n	800a18e <_dtoa_r+0x696>
 800a430:	9c07      	ldr	r4, [sp, #28]
 800a432:	9704      	str	r7, [sp, #16]
 800a434:	4625      	mov	r5, r4
 800a436:	e7f3      	b.n	800a420 <_dtoa_r+0x928>
 800a438:	9b07      	ldr	r3, [sp, #28]
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 8104 	beq.w	800a64c <_dtoa_r+0xb54>
 800a444:	2e00      	cmp	r6, #0
 800a446:	dd05      	ble.n	800a454 <_dtoa_r+0x95c>
 800a448:	4629      	mov	r1, r5
 800a44a:	4632      	mov	r2, r6
 800a44c:	4658      	mov	r0, fp
 800a44e:	f000 fc25 	bl	800ac9c <__lshift>
 800a452:	4605      	mov	r5, r0
 800a454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a456:	2b00      	cmp	r3, #0
 800a458:	d05a      	beq.n	800a510 <_dtoa_r+0xa18>
 800a45a:	6869      	ldr	r1, [r5, #4]
 800a45c:	4658      	mov	r0, fp
 800a45e:	f000 fa0f 	bl	800a880 <_Balloc>
 800a462:	4606      	mov	r6, r0
 800a464:	b928      	cbnz	r0, 800a472 <_dtoa_r+0x97a>
 800a466:	4b84      	ldr	r3, [pc, #528]	@ (800a678 <_dtoa_r+0xb80>)
 800a468:	4602      	mov	r2, r0
 800a46a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a46e:	f7ff bb5a 	b.w	8009b26 <_dtoa_r+0x2e>
 800a472:	692a      	ldr	r2, [r5, #16]
 800a474:	3202      	adds	r2, #2
 800a476:	0092      	lsls	r2, r2, #2
 800a478:	f105 010c 	add.w	r1, r5, #12
 800a47c:	300c      	adds	r0, #12
 800a47e:	f7ff faa4 	bl	80099ca <memcpy>
 800a482:	2201      	movs	r2, #1
 800a484:	4631      	mov	r1, r6
 800a486:	4658      	mov	r0, fp
 800a488:	f000 fc08 	bl	800ac9c <__lshift>
 800a48c:	f10a 0301 	add.w	r3, sl, #1
 800a490:	9307      	str	r3, [sp, #28]
 800a492:	9b00      	ldr	r3, [sp, #0]
 800a494:	4453      	add	r3, sl
 800a496:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a498:	9b02      	ldr	r3, [sp, #8]
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	462f      	mov	r7, r5
 800a4a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	9b07      	ldr	r3, [sp, #28]
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	4648      	mov	r0, r9
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	f7ff fa9a 	bl	80099e6 <quorem>
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	9002      	str	r0, [sp, #8]
 800a4b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a4ba:	4648      	mov	r0, r9
 800a4bc:	f000 fc5a 	bl	800ad74 <__mcmp>
 800a4c0:	462a      	mov	r2, r5
 800a4c2:	9008      	str	r0, [sp, #32]
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	4658      	mov	r0, fp
 800a4c8:	f000 fc70 	bl	800adac <__mdiff>
 800a4cc:	68c2      	ldr	r2, [r0, #12]
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	bb02      	cbnz	r2, 800a514 <_dtoa_r+0xa1c>
 800a4d2:	4601      	mov	r1, r0
 800a4d4:	4648      	mov	r0, r9
 800a4d6:	f000 fc4d 	bl	800ad74 <__mcmp>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4658      	mov	r0, fp
 800a4e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4e2:	f000 fa0d 	bl	800a900 <_Bfree>
 800a4e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4ea:	9e07      	ldr	r6, [sp, #28]
 800a4ec:	ea43 0102 	orr.w	r1, r3, r2
 800a4f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4f2:	4319      	orrs	r1, r3
 800a4f4:	d110      	bne.n	800a518 <_dtoa_r+0xa20>
 800a4f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a4fa:	d029      	beq.n	800a550 <_dtoa_r+0xa58>
 800a4fc:	9b08      	ldr	r3, [sp, #32]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	dd02      	ble.n	800a508 <_dtoa_r+0xa10>
 800a502:	9b02      	ldr	r3, [sp, #8]
 800a504:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a508:	9b00      	ldr	r3, [sp, #0]
 800a50a:	f883 8000 	strb.w	r8, [r3]
 800a50e:	e63f      	b.n	800a190 <_dtoa_r+0x698>
 800a510:	4628      	mov	r0, r5
 800a512:	e7bb      	b.n	800a48c <_dtoa_r+0x994>
 800a514:	2201      	movs	r2, #1
 800a516:	e7e1      	b.n	800a4dc <_dtoa_r+0x9e4>
 800a518:	9b08      	ldr	r3, [sp, #32]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	db04      	blt.n	800a528 <_dtoa_r+0xa30>
 800a51e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a520:	430b      	orrs	r3, r1
 800a522:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a524:	430b      	orrs	r3, r1
 800a526:	d120      	bne.n	800a56a <_dtoa_r+0xa72>
 800a528:	2a00      	cmp	r2, #0
 800a52a:	dded      	ble.n	800a508 <_dtoa_r+0xa10>
 800a52c:	4649      	mov	r1, r9
 800a52e:	2201      	movs	r2, #1
 800a530:	4658      	mov	r0, fp
 800a532:	f000 fbb3 	bl	800ac9c <__lshift>
 800a536:	4621      	mov	r1, r4
 800a538:	4681      	mov	r9, r0
 800a53a:	f000 fc1b 	bl	800ad74 <__mcmp>
 800a53e:	2800      	cmp	r0, #0
 800a540:	dc03      	bgt.n	800a54a <_dtoa_r+0xa52>
 800a542:	d1e1      	bne.n	800a508 <_dtoa_r+0xa10>
 800a544:	f018 0f01 	tst.w	r8, #1
 800a548:	d0de      	beq.n	800a508 <_dtoa_r+0xa10>
 800a54a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a54e:	d1d8      	bne.n	800a502 <_dtoa_r+0xa0a>
 800a550:	9a00      	ldr	r2, [sp, #0]
 800a552:	2339      	movs	r3, #57	@ 0x39
 800a554:	7013      	strb	r3, [r2, #0]
 800a556:	4633      	mov	r3, r6
 800a558:	461e      	mov	r6, r3
 800a55a:	3b01      	subs	r3, #1
 800a55c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a560:	2a39      	cmp	r2, #57	@ 0x39
 800a562:	d052      	beq.n	800a60a <_dtoa_r+0xb12>
 800a564:	3201      	adds	r2, #1
 800a566:	701a      	strb	r2, [r3, #0]
 800a568:	e612      	b.n	800a190 <_dtoa_r+0x698>
 800a56a:	2a00      	cmp	r2, #0
 800a56c:	dd07      	ble.n	800a57e <_dtoa_r+0xa86>
 800a56e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a572:	d0ed      	beq.n	800a550 <_dtoa_r+0xa58>
 800a574:	9a00      	ldr	r2, [sp, #0]
 800a576:	f108 0301 	add.w	r3, r8, #1
 800a57a:	7013      	strb	r3, [r2, #0]
 800a57c:	e608      	b.n	800a190 <_dtoa_r+0x698>
 800a57e:	9b07      	ldr	r3, [sp, #28]
 800a580:	9a07      	ldr	r2, [sp, #28]
 800a582:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a588:	4293      	cmp	r3, r2
 800a58a:	d028      	beq.n	800a5de <_dtoa_r+0xae6>
 800a58c:	4649      	mov	r1, r9
 800a58e:	2300      	movs	r3, #0
 800a590:	220a      	movs	r2, #10
 800a592:	4658      	mov	r0, fp
 800a594:	f000 f9d6 	bl	800a944 <__multadd>
 800a598:	42af      	cmp	r7, r5
 800a59a:	4681      	mov	r9, r0
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	f04f 020a 	mov.w	r2, #10
 800a5a4:	4639      	mov	r1, r7
 800a5a6:	4658      	mov	r0, fp
 800a5a8:	d107      	bne.n	800a5ba <_dtoa_r+0xac2>
 800a5aa:	f000 f9cb 	bl	800a944 <__multadd>
 800a5ae:	4607      	mov	r7, r0
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	9b07      	ldr	r3, [sp, #28]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	9307      	str	r3, [sp, #28]
 800a5b8:	e774      	b.n	800a4a4 <_dtoa_r+0x9ac>
 800a5ba:	f000 f9c3 	bl	800a944 <__multadd>
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	220a      	movs	r2, #10
 800a5c6:	4658      	mov	r0, fp
 800a5c8:	f000 f9bc 	bl	800a944 <__multadd>
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	e7f0      	b.n	800a5b2 <_dtoa_r+0xaba>
 800a5d0:	9b00      	ldr	r3, [sp, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	bfcc      	ite	gt
 800a5d6:	461e      	movgt	r6, r3
 800a5d8:	2601      	movle	r6, #1
 800a5da:	4456      	add	r6, sl
 800a5dc:	2700      	movs	r7, #0
 800a5de:	4649      	mov	r1, r9
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	4658      	mov	r0, fp
 800a5e4:	f000 fb5a 	bl	800ac9c <__lshift>
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	4681      	mov	r9, r0
 800a5ec:	f000 fbc2 	bl	800ad74 <__mcmp>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	dcb0      	bgt.n	800a556 <_dtoa_r+0xa5e>
 800a5f4:	d102      	bne.n	800a5fc <_dtoa_r+0xb04>
 800a5f6:	f018 0f01 	tst.w	r8, #1
 800a5fa:	d1ac      	bne.n	800a556 <_dtoa_r+0xa5e>
 800a5fc:	4633      	mov	r3, r6
 800a5fe:	461e      	mov	r6, r3
 800a600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a604:	2a30      	cmp	r2, #48	@ 0x30
 800a606:	d0fa      	beq.n	800a5fe <_dtoa_r+0xb06>
 800a608:	e5c2      	b.n	800a190 <_dtoa_r+0x698>
 800a60a:	459a      	cmp	sl, r3
 800a60c:	d1a4      	bne.n	800a558 <_dtoa_r+0xa60>
 800a60e:	9b04      	ldr	r3, [sp, #16]
 800a610:	3301      	adds	r3, #1
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	2331      	movs	r3, #49	@ 0x31
 800a616:	f88a 3000 	strb.w	r3, [sl]
 800a61a:	e5b9      	b.n	800a190 <_dtoa_r+0x698>
 800a61c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a61e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a67c <_dtoa_r+0xb84>
 800a622:	b11b      	cbz	r3, 800a62c <_dtoa_r+0xb34>
 800a624:	f10a 0308 	add.w	r3, sl, #8
 800a628:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	4650      	mov	r0, sl
 800a62e:	b019      	add	sp, #100	@ 0x64
 800a630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a636:	2b01      	cmp	r3, #1
 800a638:	f77f ae37 	ble.w	800a2aa <_dtoa_r+0x7b2>
 800a63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a640:	2001      	movs	r0, #1
 800a642:	e655      	b.n	800a2f0 <_dtoa_r+0x7f8>
 800a644:	9b00      	ldr	r3, [sp, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f77f aed6 	ble.w	800a3f8 <_dtoa_r+0x900>
 800a64c:	4656      	mov	r6, sl
 800a64e:	4621      	mov	r1, r4
 800a650:	4648      	mov	r0, r9
 800a652:	f7ff f9c8 	bl	80099e6 <quorem>
 800a656:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a65a:	f806 8b01 	strb.w	r8, [r6], #1
 800a65e:	9b00      	ldr	r3, [sp, #0]
 800a660:	eba6 020a 	sub.w	r2, r6, sl
 800a664:	4293      	cmp	r3, r2
 800a666:	ddb3      	ble.n	800a5d0 <_dtoa_r+0xad8>
 800a668:	4649      	mov	r1, r9
 800a66a:	2300      	movs	r3, #0
 800a66c:	220a      	movs	r2, #10
 800a66e:	4658      	mov	r0, fp
 800a670:	f000 f968 	bl	800a944 <__multadd>
 800a674:	4681      	mov	r9, r0
 800a676:	e7ea      	b.n	800a64e <_dtoa_r+0xb56>
 800a678:	0800b888 	.word	0x0800b888
 800a67c:	0800b80c 	.word	0x0800b80c

0800a680 <_free_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4605      	mov	r5, r0
 800a684:	2900      	cmp	r1, #0
 800a686:	d041      	beq.n	800a70c <_free_r+0x8c>
 800a688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a68c:	1f0c      	subs	r4, r1, #4
 800a68e:	2b00      	cmp	r3, #0
 800a690:	bfb8      	it	lt
 800a692:	18e4      	addlt	r4, r4, r3
 800a694:	f000 f8e8 	bl	800a868 <__malloc_lock>
 800a698:	4a1d      	ldr	r2, [pc, #116]	@ (800a710 <_free_r+0x90>)
 800a69a:	6813      	ldr	r3, [r2, #0]
 800a69c:	b933      	cbnz	r3, 800a6ac <_free_r+0x2c>
 800a69e:	6063      	str	r3, [r4, #4]
 800a6a0:	6014      	str	r4, [r2, #0]
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6a8:	f000 b8e4 	b.w	800a874 <__malloc_unlock>
 800a6ac:	42a3      	cmp	r3, r4
 800a6ae:	d908      	bls.n	800a6c2 <_free_r+0x42>
 800a6b0:	6820      	ldr	r0, [r4, #0]
 800a6b2:	1821      	adds	r1, r4, r0
 800a6b4:	428b      	cmp	r3, r1
 800a6b6:	bf01      	itttt	eq
 800a6b8:	6819      	ldreq	r1, [r3, #0]
 800a6ba:	685b      	ldreq	r3, [r3, #4]
 800a6bc:	1809      	addeq	r1, r1, r0
 800a6be:	6021      	streq	r1, [r4, #0]
 800a6c0:	e7ed      	b.n	800a69e <_free_r+0x1e>
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	b10b      	cbz	r3, 800a6cc <_free_r+0x4c>
 800a6c8:	42a3      	cmp	r3, r4
 800a6ca:	d9fa      	bls.n	800a6c2 <_free_r+0x42>
 800a6cc:	6811      	ldr	r1, [r2, #0]
 800a6ce:	1850      	adds	r0, r2, r1
 800a6d0:	42a0      	cmp	r0, r4
 800a6d2:	d10b      	bne.n	800a6ec <_free_r+0x6c>
 800a6d4:	6820      	ldr	r0, [r4, #0]
 800a6d6:	4401      	add	r1, r0
 800a6d8:	1850      	adds	r0, r2, r1
 800a6da:	4283      	cmp	r3, r0
 800a6dc:	6011      	str	r1, [r2, #0]
 800a6de:	d1e0      	bne.n	800a6a2 <_free_r+0x22>
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	6053      	str	r3, [r2, #4]
 800a6e6:	4408      	add	r0, r1
 800a6e8:	6010      	str	r0, [r2, #0]
 800a6ea:	e7da      	b.n	800a6a2 <_free_r+0x22>
 800a6ec:	d902      	bls.n	800a6f4 <_free_r+0x74>
 800a6ee:	230c      	movs	r3, #12
 800a6f0:	602b      	str	r3, [r5, #0]
 800a6f2:	e7d6      	b.n	800a6a2 <_free_r+0x22>
 800a6f4:	6820      	ldr	r0, [r4, #0]
 800a6f6:	1821      	adds	r1, r4, r0
 800a6f8:	428b      	cmp	r3, r1
 800a6fa:	bf04      	itt	eq
 800a6fc:	6819      	ldreq	r1, [r3, #0]
 800a6fe:	685b      	ldreq	r3, [r3, #4]
 800a700:	6063      	str	r3, [r4, #4]
 800a702:	bf04      	itt	eq
 800a704:	1809      	addeq	r1, r1, r0
 800a706:	6021      	streq	r1, [r4, #0]
 800a708:	6054      	str	r4, [r2, #4]
 800a70a:	e7ca      	b.n	800a6a2 <_free_r+0x22>
 800a70c:	bd38      	pop	{r3, r4, r5, pc}
 800a70e:	bf00      	nop
 800a710:	20020984 	.word	0x20020984

0800a714 <malloc>:
 800a714:	4b02      	ldr	r3, [pc, #8]	@ (800a720 <malloc+0xc>)
 800a716:	4601      	mov	r1, r0
 800a718:	6818      	ldr	r0, [r3, #0]
 800a71a:	f000 b825 	b.w	800a768 <_malloc_r>
 800a71e:	bf00      	nop
 800a720:	20000058 	.word	0x20000058

0800a724 <sbrk_aligned>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	4e0f      	ldr	r6, [pc, #60]	@ (800a764 <sbrk_aligned+0x40>)
 800a728:	460c      	mov	r4, r1
 800a72a:	6831      	ldr	r1, [r6, #0]
 800a72c:	4605      	mov	r5, r0
 800a72e:	b911      	cbnz	r1, 800a736 <sbrk_aligned+0x12>
 800a730:	f000 fe9a 	bl	800b468 <_sbrk_r>
 800a734:	6030      	str	r0, [r6, #0]
 800a736:	4621      	mov	r1, r4
 800a738:	4628      	mov	r0, r5
 800a73a:	f000 fe95 	bl	800b468 <_sbrk_r>
 800a73e:	1c43      	adds	r3, r0, #1
 800a740:	d103      	bne.n	800a74a <sbrk_aligned+0x26>
 800a742:	f04f 34ff 	mov.w	r4, #4294967295
 800a746:	4620      	mov	r0, r4
 800a748:	bd70      	pop	{r4, r5, r6, pc}
 800a74a:	1cc4      	adds	r4, r0, #3
 800a74c:	f024 0403 	bic.w	r4, r4, #3
 800a750:	42a0      	cmp	r0, r4
 800a752:	d0f8      	beq.n	800a746 <sbrk_aligned+0x22>
 800a754:	1a21      	subs	r1, r4, r0
 800a756:	4628      	mov	r0, r5
 800a758:	f000 fe86 	bl	800b468 <_sbrk_r>
 800a75c:	3001      	adds	r0, #1
 800a75e:	d1f2      	bne.n	800a746 <sbrk_aligned+0x22>
 800a760:	e7ef      	b.n	800a742 <sbrk_aligned+0x1e>
 800a762:	bf00      	nop
 800a764:	20020980 	.word	0x20020980

0800a768 <_malloc_r>:
 800a768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a76c:	1ccd      	adds	r5, r1, #3
 800a76e:	f025 0503 	bic.w	r5, r5, #3
 800a772:	3508      	adds	r5, #8
 800a774:	2d0c      	cmp	r5, #12
 800a776:	bf38      	it	cc
 800a778:	250c      	movcc	r5, #12
 800a77a:	2d00      	cmp	r5, #0
 800a77c:	4606      	mov	r6, r0
 800a77e:	db01      	blt.n	800a784 <_malloc_r+0x1c>
 800a780:	42a9      	cmp	r1, r5
 800a782:	d904      	bls.n	800a78e <_malloc_r+0x26>
 800a784:	230c      	movs	r3, #12
 800a786:	6033      	str	r3, [r6, #0]
 800a788:	2000      	movs	r0, #0
 800a78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a78e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a864 <_malloc_r+0xfc>
 800a792:	f000 f869 	bl	800a868 <__malloc_lock>
 800a796:	f8d8 3000 	ldr.w	r3, [r8]
 800a79a:	461c      	mov	r4, r3
 800a79c:	bb44      	cbnz	r4, 800a7f0 <_malloc_r+0x88>
 800a79e:	4629      	mov	r1, r5
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7ff ffbf 	bl	800a724 <sbrk_aligned>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	d158      	bne.n	800a85e <_malloc_r+0xf6>
 800a7ac:	f8d8 4000 	ldr.w	r4, [r8]
 800a7b0:	4627      	mov	r7, r4
 800a7b2:	2f00      	cmp	r7, #0
 800a7b4:	d143      	bne.n	800a83e <_malloc_r+0xd6>
 800a7b6:	2c00      	cmp	r4, #0
 800a7b8:	d04b      	beq.n	800a852 <_malloc_r+0xea>
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	4639      	mov	r1, r7
 800a7be:	4630      	mov	r0, r6
 800a7c0:	eb04 0903 	add.w	r9, r4, r3
 800a7c4:	f000 fe50 	bl	800b468 <_sbrk_r>
 800a7c8:	4581      	cmp	r9, r0
 800a7ca:	d142      	bne.n	800a852 <_malloc_r+0xea>
 800a7cc:	6821      	ldr	r1, [r4, #0]
 800a7ce:	1a6d      	subs	r5, r5, r1
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7ff ffa6 	bl	800a724 <sbrk_aligned>
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d03a      	beq.n	800a852 <_malloc_r+0xea>
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	442b      	add	r3, r5
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a7e6:	685a      	ldr	r2, [r3, #4]
 800a7e8:	bb62      	cbnz	r2, 800a844 <_malloc_r+0xdc>
 800a7ea:	f8c8 7000 	str.w	r7, [r8]
 800a7ee:	e00f      	b.n	800a810 <_malloc_r+0xa8>
 800a7f0:	6822      	ldr	r2, [r4, #0]
 800a7f2:	1b52      	subs	r2, r2, r5
 800a7f4:	d420      	bmi.n	800a838 <_malloc_r+0xd0>
 800a7f6:	2a0b      	cmp	r2, #11
 800a7f8:	d917      	bls.n	800a82a <_malloc_r+0xc2>
 800a7fa:	1961      	adds	r1, r4, r5
 800a7fc:	42a3      	cmp	r3, r4
 800a7fe:	6025      	str	r5, [r4, #0]
 800a800:	bf18      	it	ne
 800a802:	6059      	strne	r1, [r3, #4]
 800a804:	6863      	ldr	r3, [r4, #4]
 800a806:	bf08      	it	eq
 800a808:	f8c8 1000 	streq.w	r1, [r8]
 800a80c:	5162      	str	r2, [r4, r5]
 800a80e:	604b      	str	r3, [r1, #4]
 800a810:	4630      	mov	r0, r6
 800a812:	f000 f82f 	bl	800a874 <__malloc_unlock>
 800a816:	f104 000b 	add.w	r0, r4, #11
 800a81a:	1d23      	adds	r3, r4, #4
 800a81c:	f020 0007 	bic.w	r0, r0, #7
 800a820:	1ac2      	subs	r2, r0, r3
 800a822:	bf1c      	itt	ne
 800a824:	1a1b      	subne	r3, r3, r0
 800a826:	50a3      	strne	r3, [r4, r2]
 800a828:	e7af      	b.n	800a78a <_malloc_r+0x22>
 800a82a:	6862      	ldr	r2, [r4, #4]
 800a82c:	42a3      	cmp	r3, r4
 800a82e:	bf0c      	ite	eq
 800a830:	f8c8 2000 	streq.w	r2, [r8]
 800a834:	605a      	strne	r2, [r3, #4]
 800a836:	e7eb      	b.n	800a810 <_malloc_r+0xa8>
 800a838:	4623      	mov	r3, r4
 800a83a:	6864      	ldr	r4, [r4, #4]
 800a83c:	e7ae      	b.n	800a79c <_malloc_r+0x34>
 800a83e:	463c      	mov	r4, r7
 800a840:	687f      	ldr	r7, [r7, #4]
 800a842:	e7b6      	b.n	800a7b2 <_malloc_r+0x4a>
 800a844:	461a      	mov	r2, r3
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	42a3      	cmp	r3, r4
 800a84a:	d1fb      	bne.n	800a844 <_malloc_r+0xdc>
 800a84c:	2300      	movs	r3, #0
 800a84e:	6053      	str	r3, [r2, #4]
 800a850:	e7de      	b.n	800a810 <_malloc_r+0xa8>
 800a852:	230c      	movs	r3, #12
 800a854:	6033      	str	r3, [r6, #0]
 800a856:	4630      	mov	r0, r6
 800a858:	f000 f80c 	bl	800a874 <__malloc_unlock>
 800a85c:	e794      	b.n	800a788 <_malloc_r+0x20>
 800a85e:	6005      	str	r5, [r0, #0]
 800a860:	e7d6      	b.n	800a810 <_malloc_r+0xa8>
 800a862:	bf00      	nop
 800a864:	20020984 	.word	0x20020984

0800a868 <__malloc_lock>:
 800a868:	4801      	ldr	r0, [pc, #4]	@ (800a870 <__malloc_lock+0x8>)
 800a86a:	f7ff b8ac 	b.w	80099c6 <__retarget_lock_acquire_recursive>
 800a86e:	bf00      	nop
 800a870:	2002097c 	.word	0x2002097c

0800a874 <__malloc_unlock>:
 800a874:	4801      	ldr	r0, [pc, #4]	@ (800a87c <__malloc_unlock+0x8>)
 800a876:	f7ff b8a7 	b.w	80099c8 <__retarget_lock_release_recursive>
 800a87a:	bf00      	nop
 800a87c:	2002097c 	.word	0x2002097c

0800a880 <_Balloc>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	69c6      	ldr	r6, [r0, #28]
 800a884:	4604      	mov	r4, r0
 800a886:	460d      	mov	r5, r1
 800a888:	b976      	cbnz	r6, 800a8a8 <_Balloc+0x28>
 800a88a:	2010      	movs	r0, #16
 800a88c:	f7ff ff42 	bl	800a714 <malloc>
 800a890:	4602      	mov	r2, r0
 800a892:	61e0      	str	r0, [r4, #28]
 800a894:	b920      	cbnz	r0, 800a8a0 <_Balloc+0x20>
 800a896:	4b18      	ldr	r3, [pc, #96]	@ (800a8f8 <_Balloc+0x78>)
 800a898:	4818      	ldr	r0, [pc, #96]	@ (800a8fc <_Balloc+0x7c>)
 800a89a:	216b      	movs	r1, #107	@ 0x6b
 800a89c:	f000 fdf4 	bl	800b488 <__assert_func>
 800a8a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8a4:	6006      	str	r6, [r0, #0]
 800a8a6:	60c6      	str	r6, [r0, #12]
 800a8a8:	69e6      	ldr	r6, [r4, #28]
 800a8aa:	68f3      	ldr	r3, [r6, #12]
 800a8ac:	b183      	cbz	r3, 800a8d0 <_Balloc+0x50>
 800a8ae:	69e3      	ldr	r3, [r4, #28]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8b6:	b9b8      	cbnz	r0, 800a8e8 <_Balloc+0x68>
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	fa01 f605 	lsl.w	r6, r1, r5
 800a8be:	1d72      	adds	r2, r6, #5
 800a8c0:	0092      	lsls	r2, r2, #2
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fdfe 	bl	800b4c4 <_calloc_r>
 800a8c8:	b160      	cbz	r0, 800a8e4 <_Balloc+0x64>
 800a8ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8ce:	e00e      	b.n	800a8ee <_Balloc+0x6e>
 800a8d0:	2221      	movs	r2, #33	@ 0x21
 800a8d2:	2104      	movs	r1, #4
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 fdf5 	bl	800b4c4 <_calloc_r>
 800a8da:	69e3      	ldr	r3, [r4, #28]
 800a8dc:	60f0      	str	r0, [r6, #12]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e4      	bne.n	800a8ae <_Balloc+0x2e>
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	6802      	ldr	r2, [r0, #0]
 800a8ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8f4:	e7f7      	b.n	800a8e6 <_Balloc+0x66>
 800a8f6:	bf00      	nop
 800a8f8:	0800b819 	.word	0x0800b819
 800a8fc:	0800b899 	.word	0x0800b899

0800a900 <_Bfree>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	69c6      	ldr	r6, [r0, #28]
 800a904:	4605      	mov	r5, r0
 800a906:	460c      	mov	r4, r1
 800a908:	b976      	cbnz	r6, 800a928 <_Bfree+0x28>
 800a90a:	2010      	movs	r0, #16
 800a90c:	f7ff ff02 	bl	800a714 <malloc>
 800a910:	4602      	mov	r2, r0
 800a912:	61e8      	str	r0, [r5, #28]
 800a914:	b920      	cbnz	r0, 800a920 <_Bfree+0x20>
 800a916:	4b09      	ldr	r3, [pc, #36]	@ (800a93c <_Bfree+0x3c>)
 800a918:	4809      	ldr	r0, [pc, #36]	@ (800a940 <_Bfree+0x40>)
 800a91a:	218f      	movs	r1, #143	@ 0x8f
 800a91c:	f000 fdb4 	bl	800b488 <__assert_func>
 800a920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a924:	6006      	str	r6, [r0, #0]
 800a926:	60c6      	str	r6, [r0, #12]
 800a928:	b13c      	cbz	r4, 800a93a <_Bfree+0x3a>
 800a92a:	69eb      	ldr	r3, [r5, #28]
 800a92c:	6862      	ldr	r2, [r4, #4]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a934:	6021      	str	r1, [r4, #0]
 800a936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	0800b819 	.word	0x0800b819
 800a940:	0800b899 	.word	0x0800b899

0800a944 <__multadd>:
 800a944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a948:	690d      	ldr	r5, [r1, #16]
 800a94a:	4607      	mov	r7, r0
 800a94c:	460c      	mov	r4, r1
 800a94e:	461e      	mov	r6, r3
 800a950:	f101 0c14 	add.w	ip, r1, #20
 800a954:	2000      	movs	r0, #0
 800a956:	f8dc 3000 	ldr.w	r3, [ip]
 800a95a:	b299      	uxth	r1, r3
 800a95c:	fb02 6101 	mla	r1, r2, r1, r6
 800a960:	0c1e      	lsrs	r6, r3, #16
 800a962:	0c0b      	lsrs	r3, r1, #16
 800a964:	fb02 3306 	mla	r3, r2, r6, r3
 800a968:	b289      	uxth	r1, r1
 800a96a:	3001      	adds	r0, #1
 800a96c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a970:	4285      	cmp	r5, r0
 800a972:	f84c 1b04 	str.w	r1, [ip], #4
 800a976:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a97a:	dcec      	bgt.n	800a956 <__multadd+0x12>
 800a97c:	b30e      	cbz	r6, 800a9c2 <__multadd+0x7e>
 800a97e:	68a3      	ldr	r3, [r4, #8]
 800a980:	42ab      	cmp	r3, r5
 800a982:	dc19      	bgt.n	800a9b8 <__multadd+0x74>
 800a984:	6861      	ldr	r1, [r4, #4]
 800a986:	4638      	mov	r0, r7
 800a988:	3101      	adds	r1, #1
 800a98a:	f7ff ff79 	bl	800a880 <_Balloc>
 800a98e:	4680      	mov	r8, r0
 800a990:	b928      	cbnz	r0, 800a99e <__multadd+0x5a>
 800a992:	4602      	mov	r2, r0
 800a994:	4b0c      	ldr	r3, [pc, #48]	@ (800a9c8 <__multadd+0x84>)
 800a996:	480d      	ldr	r0, [pc, #52]	@ (800a9cc <__multadd+0x88>)
 800a998:	21ba      	movs	r1, #186	@ 0xba
 800a99a:	f000 fd75 	bl	800b488 <__assert_func>
 800a99e:	6922      	ldr	r2, [r4, #16]
 800a9a0:	3202      	adds	r2, #2
 800a9a2:	f104 010c 	add.w	r1, r4, #12
 800a9a6:	0092      	lsls	r2, r2, #2
 800a9a8:	300c      	adds	r0, #12
 800a9aa:	f7ff f80e 	bl	80099ca <memcpy>
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f7ff ffa5 	bl	800a900 <_Bfree>
 800a9b6:	4644      	mov	r4, r8
 800a9b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9bc:	3501      	adds	r5, #1
 800a9be:	615e      	str	r6, [r3, #20]
 800a9c0:	6125      	str	r5, [r4, #16]
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c8:	0800b888 	.word	0x0800b888
 800a9cc:	0800b899 	.word	0x0800b899

0800a9d0 <__hi0bits>:
 800a9d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	bf36      	itet	cc
 800a9d8:	0403      	lslcc	r3, r0, #16
 800a9da:	2000      	movcs	r0, #0
 800a9dc:	2010      	movcc	r0, #16
 800a9de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9e2:	bf3c      	itt	cc
 800a9e4:	021b      	lslcc	r3, r3, #8
 800a9e6:	3008      	addcc	r0, #8
 800a9e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9ec:	bf3c      	itt	cc
 800a9ee:	011b      	lslcc	r3, r3, #4
 800a9f0:	3004      	addcc	r0, #4
 800a9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9f6:	bf3c      	itt	cc
 800a9f8:	009b      	lslcc	r3, r3, #2
 800a9fa:	3002      	addcc	r0, #2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	db05      	blt.n	800aa0c <__hi0bits+0x3c>
 800aa00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aa04:	f100 0001 	add.w	r0, r0, #1
 800aa08:	bf08      	it	eq
 800aa0a:	2020      	moveq	r0, #32
 800aa0c:	4770      	bx	lr

0800aa0e <__lo0bits>:
 800aa0e:	6803      	ldr	r3, [r0, #0]
 800aa10:	4602      	mov	r2, r0
 800aa12:	f013 0007 	ands.w	r0, r3, #7
 800aa16:	d00b      	beq.n	800aa30 <__lo0bits+0x22>
 800aa18:	07d9      	lsls	r1, r3, #31
 800aa1a:	d421      	bmi.n	800aa60 <__lo0bits+0x52>
 800aa1c:	0798      	lsls	r0, r3, #30
 800aa1e:	bf49      	itett	mi
 800aa20:	085b      	lsrmi	r3, r3, #1
 800aa22:	089b      	lsrpl	r3, r3, #2
 800aa24:	2001      	movmi	r0, #1
 800aa26:	6013      	strmi	r3, [r2, #0]
 800aa28:	bf5c      	itt	pl
 800aa2a:	6013      	strpl	r3, [r2, #0]
 800aa2c:	2002      	movpl	r0, #2
 800aa2e:	4770      	bx	lr
 800aa30:	b299      	uxth	r1, r3
 800aa32:	b909      	cbnz	r1, 800aa38 <__lo0bits+0x2a>
 800aa34:	0c1b      	lsrs	r3, r3, #16
 800aa36:	2010      	movs	r0, #16
 800aa38:	b2d9      	uxtb	r1, r3
 800aa3a:	b909      	cbnz	r1, 800aa40 <__lo0bits+0x32>
 800aa3c:	3008      	adds	r0, #8
 800aa3e:	0a1b      	lsrs	r3, r3, #8
 800aa40:	0719      	lsls	r1, r3, #28
 800aa42:	bf04      	itt	eq
 800aa44:	091b      	lsreq	r3, r3, #4
 800aa46:	3004      	addeq	r0, #4
 800aa48:	0799      	lsls	r1, r3, #30
 800aa4a:	bf04      	itt	eq
 800aa4c:	089b      	lsreq	r3, r3, #2
 800aa4e:	3002      	addeq	r0, #2
 800aa50:	07d9      	lsls	r1, r3, #31
 800aa52:	d403      	bmi.n	800aa5c <__lo0bits+0x4e>
 800aa54:	085b      	lsrs	r3, r3, #1
 800aa56:	f100 0001 	add.w	r0, r0, #1
 800aa5a:	d003      	beq.n	800aa64 <__lo0bits+0x56>
 800aa5c:	6013      	str	r3, [r2, #0]
 800aa5e:	4770      	bx	lr
 800aa60:	2000      	movs	r0, #0
 800aa62:	4770      	bx	lr
 800aa64:	2020      	movs	r0, #32
 800aa66:	4770      	bx	lr

0800aa68 <__i2b>:
 800aa68:	b510      	push	{r4, lr}
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	f7ff ff07 	bl	800a880 <_Balloc>
 800aa72:	4602      	mov	r2, r0
 800aa74:	b928      	cbnz	r0, 800aa82 <__i2b+0x1a>
 800aa76:	4b05      	ldr	r3, [pc, #20]	@ (800aa8c <__i2b+0x24>)
 800aa78:	4805      	ldr	r0, [pc, #20]	@ (800aa90 <__i2b+0x28>)
 800aa7a:	f240 1145 	movw	r1, #325	@ 0x145
 800aa7e:	f000 fd03 	bl	800b488 <__assert_func>
 800aa82:	2301      	movs	r3, #1
 800aa84:	6144      	str	r4, [r0, #20]
 800aa86:	6103      	str	r3, [r0, #16]
 800aa88:	bd10      	pop	{r4, pc}
 800aa8a:	bf00      	nop
 800aa8c:	0800b888 	.word	0x0800b888
 800aa90:	0800b899 	.word	0x0800b899

0800aa94 <__multiply>:
 800aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	4614      	mov	r4, r2
 800aa9a:	690a      	ldr	r2, [r1, #16]
 800aa9c:	6923      	ldr	r3, [r4, #16]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	bfa8      	it	ge
 800aaa2:	4623      	movge	r3, r4
 800aaa4:	460f      	mov	r7, r1
 800aaa6:	bfa4      	itt	ge
 800aaa8:	460c      	movge	r4, r1
 800aaaa:	461f      	movge	r7, r3
 800aaac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aab0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aab4:	68a3      	ldr	r3, [r4, #8]
 800aab6:	6861      	ldr	r1, [r4, #4]
 800aab8:	eb0a 0609 	add.w	r6, sl, r9
 800aabc:	42b3      	cmp	r3, r6
 800aabe:	b085      	sub	sp, #20
 800aac0:	bfb8      	it	lt
 800aac2:	3101      	addlt	r1, #1
 800aac4:	f7ff fedc 	bl	800a880 <_Balloc>
 800aac8:	b930      	cbnz	r0, 800aad8 <__multiply+0x44>
 800aaca:	4602      	mov	r2, r0
 800aacc:	4b44      	ldr	r3, [pc, #272]	@ (800abe0 <__multiply+0x14c>)
 800aace:	4845      	ldr	r0, [pc, #276]	@ (800abe4 <__multiply+0x150>)
 800aad0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aad4:	f000 fcd8 	bl	800b488 <__assert_func>
 800aad8:	f100 0514 	add.w	r5, r0, #20
 800aadc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aae0:	462b      	mov	r3, r5
 800aae2:	2200      	movs	r2, #0
 800aae4:	4543      	cmp	r3, r8
 800aae6:	d321      	bcc.n	800ab2c <__multiply+0x98>
 800aae8:	f107 0114 	add.w	r1, r7, #20
 800aaec:	f104 0214 	add.w	r2, r4, #20
 800aaf0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aaf4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aaf8:	9302      	str	r3, [sp, #8]
 800aafa:	1b13      	subs	r3, r2, r4
 800aafc:	3b15      	subs	r3, #21
 800aafe:	f023 0303 	bic.w	r3, r3, #3
 800ab02:	3304      	adds	r3, #4
 800ab04:	f104 0715 	add.w	r7, r4, #21
 800ab08:	42ba      	cmp	r2, r7
 800ab0a:	bf38      	it	cc
 800ab0c:	2304      	movcc	r3, #4
 800ab0e:	9301      	str	r3, [sp, #4]
 800ab10:	9b02      	ldr	r3, [sp, #8]
 800ab12:	9103      	str	r1, [sp, #12]
 800ab14:	428b      	cmp	r3, r1
 800ab16:	d80c      	bhi.n	800ab32 <__multiply+0x9e>
 800ab18:	2e00      	cmp	r6, #0
 800ab1a:	dd03      	ble.n	800ab24 <__multiply+0x90>
 800ab1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d05b      	beq.n	800abdc <__multiply+0x148>
 800ab24:	6106      	str	r6, [r0, #16]
 800ab26:	b005      	add	sp, #20
 800ab28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2c:	f843 2b04 	str.w	r2, [r3], #4
 800ab30:	e7d8      	b.n	800aae4 <__multiply+0x50>
 800ab32:	f8b1 a000 	ldrh.w	sl, [r1]
 800ab36:	f1ba 0f00 	cmp.w	sl, #0
 800ab3a:	d024      	beq.n	800ab86 <__multiply+0xf2>
 800ab3c:	f104 0e14 	add.w	lr, r4, #20
 800ab40:	46a9      	mov	r9, r5
 800ab42:	f04f 0c00 	mov.w	ip, #0
 800ab46:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab4a:	f8d9 3000 	ldr.w	r3, [r9]
 800ab4e:	fa1f fb87 	uxth.w	fp, r7
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	fb0a 330b 	mla	r3, sl, fp, r3
 800ab58:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ab5c:	f8d9 7000 	ldr.w	r7, [r9]
 800ab60:	4463      	add	r3, ip
 800ab62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ab66:	fb0a c70b 	mla	r7, sl, fp, ip
 800ab6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ab74:	4572      	cmp	r2, lr
 800ab76:	f849 3b04 	str.w	r3, [r9], #4
 800ab7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ab7e:	d8e2      	bhi.n	800ab46 <__multiply+0xb2>
 800ab80:	9b01      	ldr	r3, [sp, #4]
 800ab82:	f845 c003 	str.w	ip, [r5, r3]
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ab8c:	3104      	adds	r1, #4
 800ab8e:	f1b9 0f00 	cmp.w	r9, #0
 800ab92:	d021      	beq.n	800abd8 <__multiply+0x144>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	f104 0c14 	add.w	ip, r4, #20
 800ab9a:	46ae      	mov	lr, r5
 800ab9c:	f04f 0a00 	mov.w	sl, #0
 800aba0:	f8bc b000 	ldrh.w	fp, [ip]
 800aba4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aba8:	fb09 770b 	mla	r7, r9, fp, r7
 800abac:	4457      	add	r7, sl
 800abae:	b29b      	uxth	r3, r3
 800abb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800abb4:	f84e 3b04 	str.w	r3, [lr], #4
 800abb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abc0:	f8be 3000 	ldrh.w	r3, [lr]
 800abc4:	fb09 330a 	mla	r3, r9, sl, r3
 800abc8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800abcc:	4562      	cmp	r2, ip
 800abce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abd2:	d8e5      	bhi.n	800aba0 <__multiply+0x10c>
 800abd4:	9f01      	ldr	r7, [sp, #4]
 800abd6:	51eb      	str	r3, [r5, r7]
 800abd8:	3504      	adds	r5, #4
 800abda:	e799      	b.n	800ab10 <__multiply+0x7c>
 800abdc:	3e01      	subs	r6, #1
 800abde:	e79b      	b.n	800ab18 <__multiply+0x84>
 800abe0:	0800b888 	.word	0x0800b888
 800abe4:	0800b899 	.word	0x0800b899

0800abe8 <__pow5mult>:
 800abe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abec:	4615      	mov	r5, r2
 800abee:	f012 0203 	ands.w	r2, r2, #3
 800abf2:	4607      	mov	r7, r0
 800abf4:	460e      	mov	r6, r1
 800abf6:	d007      	beq.n	800ac08 <__pow5mult+0x20>
 800abf8:	4c25      	ldr	r4, [pc, #148]	@ (800ac90 <__pow5mult+0xa8>)
 800abfa:	3a01      	subs	r2, #1
 800abfc:	2300      	movs	r3, #0
 800abfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac02:	f7ff fe9f 	bl	800a944 <__multadd>
 800ac06:	4606      	mov	r6, r0
 800ac08:	10ad      	asrs	r5, r5, #2
 800ac0a:	d03d      	beq.n	800ac88 <__pow5mult+0xa0>
 800ac0c:	69fc      	ldr	r4, [r7, #28]
 800ac0e:	b97c      	cbnz	r4, 800ac30 <__pow5mult+0x48>
 800ac10:	2010      	movs	r0, #16
 800ac12:	f7ff fd7f 	bl	800a714 <malloc>
 800ac16:	4602      	mov	r2, r0
 800ac18:	61f8      	str	r0, [r7, #28]
 800ac1a:	b928      	cbnz	r0, 800ac28 <__pow5mult+0x40>
 800ac1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ac94 <__pow5mult+0xac>)
 800ac1e:	481e      	ldr	r0, [pc, #120]	@ (800ac98 <__pow5mult+0xb0>)
 800ac20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ac24:	f000 fc30 	bl	800b488 <__assert_func>
 800ac28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac2c:	6004      	str	r4, [r0, #0]
 800ac2e:	60c4      	str	r4, [r0, #12]
 800ac30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ac34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac38:	b94c      	cbnz	r4, 800ac4e <__pow5mult+0x66>
 800ac3a:	f240 2171 	movw	r1, #625	@ 0x271
 800ac3e:	4638      	mov	r0, r7
 800ac40:	f7ff ff12 	bl	800aa68 <__i2b>
 800ac44:	2300      	movs	r3, #0
 800ac46:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	6003      	str	r3, [r0, #0]
 800ac4e:	f04f 0900 	mov.w	r9, #0
 800ac52:	07eb      	lsls	r3, r5, #31
 800ac54:	d50a      	bpl.n	800ac6c <__pow5mult+0x84>
 800ac56:	4631      	mov	r1, r6
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	f7ff ff1a 	bl	800aa94 <__multiply>
 800ac60:	4631      	mov	r1, r6
 800ac62:	4680      	mov	r8, r0
 800ac64:	4638      	mov	r0, r7
 800ac66:	f7ff fe4b 	bl	800a900 <_Bfree>
 800ac6a:	4646      	mov	r6, r8
 800ac6c:	106d      	asrs	r5, r5, #1
 800ac6e:	d00b      	beq.n	800ac88 <__pow5mult+0xa0>
 800ac70:	6820      	ldr	r0, [r4, #0]
 800ac72:	b938      	cbnz	r0, 800ac84 <__pow5mult+0x9c>
 800ac74:	4622      	mov	r2, r4
 800ac76:	4621      	mov	r1, r4
 800ac78:	4638      	mov	r0, r7
 800ac7a:	f7ff ff0b 	bl	800aa94 <__multiply>
 800ac7e:	6020      	str	r0, [r4, #0]
 800ac80:	f8c0 9000 	str.w	r9, [r0]
 800ac84:	4604      	mov	r4, r0
 800ac86:	e7e4      	b.n	800ac52 <__pow5mult+0x6a>
 800ac88:	4630      	mov	r0, r6
 800ac8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8e:	bf00      	nop
 800ac90:	0800b8f4 	.word	0x0800b8f4
 800ac94:	0800b819 	.word	0x0800b819
 800ac98:	0800b899 	.word	0x0800b899

0800ac9c <__lshift>:
 800ac9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca0:	460c      	mov	r4, r1
 800aca2:	6849      	ldr	r1, [r1, #4]
 800aca4:	6923      	ldr	r3, [r4, #16]
 800aca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acaa:	68a3      	ldr	r3, [r4, #8]
 800acac:	4607      	mov	r7, r0
 800acae:	4691      	mov	r9, r2
 800acb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acb4:	f108 0601 	add.w	r6, r8, #1
 800acb8:	42b3      	cmp	r3, r6
 800acba:	db0b      	blt.n	800acd4 <__lshift+0x38>
 800acbc:	4638      	mov	r0, r7
 800acbe:	f7ff fddf 	bl	800a880 <_Balloc>
 800acc2:	4605      	mov	r5, r0
 800acc4:	b948      	cbnz	r0, 800acda <__lshift+0x3e>
 800acc6:	4602      	mov	r2, r0
 800acc8:	4b28      	ldr	r3, [pc, #160]	@ (800ad6c <__lshift+0xd0>)
 800acca:	4829      	ldr	r0, [pc, #164]	@ (800ad70 <__lshift+0xd4>)
 800accc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800acd0:	f000 fbda 	bl	800b488 <__assert_func>
 800acd4:	3101      	adds	r1, #1
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	e7ee      	b.n	800acb8 <__lshift+0x1c>
 800acda:	2300      	movs	r3, #0
 800acdc:	f100 0114 	add.w	r1, r0, #20
 800ace0:	f100 0210 	add.w	r2, r0, #16
 800ace4:	4618      	mov	r0, r3
 800ace6:	4553      	cmp	r3, sl
 800ace8:	db33      	blt.n	800ad52 <__lshift+0xb6>
 800acea:	6920      	ldr	r0, [r4, #16]
 800acec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acf0:	f104 0314 	add.w	r3, r4, #20
 800acf4:	f019 091f 	ands.w	r9, r9, #31
 800acf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad00:	d02b      	beq.n	800ad5a <__lshift+0xbe>
 800ad02:	f1c9 0e20 	rsb	lr, r9, #32
 800ad06:	468a      	mov	sl, r1
 800ad08:	2200      	movs	r2, #0
 800ad0a:	6818      	ldr	r0, [r3, #0]
 800ad0c:	fa00 f009 	lsl.w	r0, r0, r9
 800ad10:	4310      	orrs	r0, r2
 800ad12:	f84a 0b04 	str.w	r0, [sl], #4
 800ad16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad1a:	459c      	cmp	ip, r3
 800ad1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad20:	d8f3      	bhi.n	800ad0a <__lshift+0x6e>
 800ad22:	ebac 0304 	sub.w	r3, ip, r4
 800ad26:	3b15      	subs	r3, #21
 800ad28:	f023 0303 	bic.w	r3, r3, #3
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	f104 0015 	add.w	r0, r4, #21
 800ad32:	4584      	cmp	ip, r0
 800ad34:	bf38      	it	cc
 800ad36:	2304      	movcc	r3, #4
 800ad38:	50ca      	str	r2, [r1, r3]
 800ad3a:	b10a      	cbz	r2, 800ad40 <__lshift+0xa4>
 800ad3c:	f108 0602 	add.w	r6, r8, #2
 800ad40:	3e01      	subs	r6, #1
 800ad42:	4638      	mov	r0, r7
 800ad44:	612e      	str	r6, [r5, #16]
 800ad46:	4621      	mov	r1, r4
 800ad48:	f7ff fdda 	bl	800a900 <_Bfree>
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad56:	3301      	adds	r3, #1
 800ad58:	e7c5      	b.n	800ace6 <__lshift+0x4a>
 800ad5a:	3904      	subs	r1, #4
 800ad5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad64:	459c      	cmp	ip, r3
 800ad66:	d8f9      	bhi.n	800ad5c <__lshift+0xc0>
 800ad68:	e7ea      	b.n	800ad40 <__lshift+0xa4>
 800ad6a:	bf00      	nop
 800ad6c:	0800b888 	.word	0x0800b888
 800ad70:	0800b899 	.word	0x0800b899

0800ad74 <__mcmp>:
 800ad74:	690a      	ldr	r2, [r1, #16]
 800ad76:	4603      	mov	r3, r0
 800ad78:	6900      	ldr	r0, [r0, #16]
 800ad7a:	1a80      	subs	r0, r0, r2
 800ad7c:	b530      	push	{r4, r5, lr}
 800ad7e:	d10e      	bne.n	800ad9e <__mcmp+0x2a>
 800ad80:	3314      	adds	r3, #20
 800ad82:	3114      	adds	r1, #20
 800ad84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ad88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ad8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ad90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ad94:	4295      	cmp	r5, r2
 800ad96:	d003      	beq.n	800ada0 <__mcmp+0x2c>
 800ad98:	d205      	bcs.n	800ada6 <__mcmp+0x32>
 800ad9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9e:	bd30      	pop	{r4, r5, pc}
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	d3f3      	bcc.n	800ad8c <__mcmp+0x18>
 800ada4:	e7fb      	b.n	800ad9e <__mcmp+0x2a>
 800ada6:	2001      	movs	r0, #1
 800ada8:	e7f9      	b.n	800ad9e <__mcmp+0x2a>
	...

0800adac <__mdiff>:
 800adac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	4689      	mov	r9, r1
 800adb2:	4606      	mov	r6, r0
 800adb4:	4611      	mov	r1, r2
 800adb6:	4648      	mov	r0, r9
 800adb8:	4614      	mov	r4, r2
 800adba:	f7ff ffdb 	bl	800ad74 <__mcmp>
 800adbe:	1e05      	subs	r5, r0, #0
 800adc0:	d112      	bne.n	800ade8 <__mdiff+0x3c>
 800adc2:	4629      	mov	r1, r5
 800adc4:	4630      	mov	r0, r6
 800adc6:	f7ff fd5b 	bl	800a880 <_Balloc>
 800adca:	4602      	mov	r2, r0
 800adcc:	b928      	cbnz	r0, 800adda <__mdiff+0x2e>
 800adce:	4b3f      	ldr	r3, [pc, #252]	@ (800aecc <__mdiff+0x120>)
 800add0:	f240 2137 	movw	r1, #567	@ 0x237
 800add4:	483e      	ldr	r0, [pc, #248]	@ (800aed0 <__mdiff+0x124>)
 800add6:	f000 fb57 	bl	800b488 <__assert_func>
 800adda:	2301      	movs	r3, #1
 800addc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ade0:	4610      	mov	r0, r2
 800ade2:	b003      	add	sp, #12
 800ade4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade8:	bfbc      	itt	lt
 800adea:	464b      	movlt	r3, r9
 800adec:	46a1      	movlt	r9, r4
 800adee:	4630      	mov	r0, r6
 800adf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800adf4:	bfba      	itte	lt
 800adf6:	461c      	movlt	r4, r3
 800adf8:	2501      	movlt	r5, #1
 800adfa:	2500      	movge	r5, #0
 800adfc:	f7ff fd40 	bl	800a880 <_Balloc>
 800ae00:	4602      	mov	r2, r0
 800ae02:	b918      	cbnz	r0, 800ae0c <__mdiff+0x60>
 800ae04:	4b31      	ldr	r3, [pc, #196]	@ (800aecc <__mdiff+0x120>)
 800ae06:	f240 2145 	movw	r1, #581	@ 0x245
 800ae0a:	e7e3      	b.n	800add4 <__mdiff+0x28>
 800ae0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ae10:	6926      	ldr	r6, [r4, #16]
 800ae12:	60c5      	str	r5, [r0, #12]
 800ae14:	f109 0310 	add.w	r3, r9, #16
 800ae18:	f109 0514 	add.w	r5, r9, #20
 800ae1c:	f104 0e14 	add.w	lr, r4, #20
 800ae20:	f100 0b14 	add.w	fp, r0, #20
 800ae24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ae28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	46d9      	mov	r9, fp
 800ae30:	f04f 0c00 	mov.w	ip, #0
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ae3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ae3e:	9301      	str	r3, [sp, #4]
 800ae40:	fa1f f38a 	uxth.w	r3, sl
 800ae44:	4619      	mov	r1, r3
 800ae46:	b283      	uxth	r3, r0
 800ae48:	1acb      	subs	r3, r1, r3
 800ae4a:	0c00      	lsrs	r0, r0, #16
 800ae4c:	4463      	add	r3, ip
 800ae4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ae52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ae5c:	4576      	cmp	r6, lr
 800ae5e:	f849 3b04 	str.w	r3, [r9], #4
 800ae62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae66:	d8e5      	bhi.n	800ae34 <__mdiff+0x88>
 800ae68:	1b33      	subs	r3, r6, r4
 800ae6a:	3b15      	subs	r3, #21
 800ae6c:	f023 0303 	bic.w	r3, r3, #3
 800ae70:	3415      	adds	r4, #21
 800ae72:	3304      	adds	r3, #4
 800ae74:	42a6      	cmp	r6, r4
 800ae76:	bf38      	it	cc
 800ae78:	2304      	movcc	r3, #4
 800ae7a:	441d      	add	r5, r3
 800ae7c:	445b      	add	r3, fp
 800ae7e:	461e      	mov	r6, r3
 800ae80:	462c      	mov	r4, r5
 800ae82:	4544      	cmp	r4, r8
 800ae84:	d30e      	bcc.n	800aea4 <__mdiff+0xf8>
 800ae86:	f108 0103 	add.w	r1, r8, #3
 800ae8a:	1b49      	subs	r1, r1, r5
 800ae8c:	f021 0103 	bic.w	r1, r1, #3
 800ae90:	3d03      	subs	r5, #3
 800ae92:	45a8      	cmp	r8, r5
 800ae94:	bf38      	it	cc
 800ae96:	2100      	movcc	r1, #0
 800ae98:	440b      	add	r3, r1
 800ae9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae9e:	b191      	cbz	r1, 800aec6 <__mdiff+0x11a>
 800aea0:	6117      	str	r7, [r2, #16]
 800aea2:	e79d      	b.n	800ade0 <__mdiff+0x34>
 800aea4:	f854 1b04 	ldr.w	r1, [r4], #4
 800aea8:	46e6      	mov	lr, ip
 800aeaa:	0c08      	lsrs	r0, r1, #16
 800aeac:	fa1c fc81 	uxtah	ip, ip, r1
 800aeb0:	4471      	add	r1, lr
 800aeb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aeb6:	b289      	uxth	r1, r1
 800aeb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aebc:	f846 1b04 	str.w	r1, [r6], #4
 800aec0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aec4:	e7dd      	b.n	800ae82 <__mdiff+0xd6>
 800aec6:	3f01      	subs	r7, #1
 800aec8:	e7e7      	b.n	800ae9a <__mdiff+0xee>
 800aeca:	bf00      	nop
 800aecc:	0800b888 	.word	0x0800b888
 800aed0:	0800b899 	.word	0x0800b899

0800aed4 <__d2b>:
 800aed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aed8:	460f      	mov	r7, r1
 800aeda:	2101      	movs	r1, #1
 800aedc:	ec59 8b10 	vmov	r8, r9, d0
 800aee0:	4616      	mov	r6, r2
 800aee2:	f7ff fccd 	bl	800a880 <_Balloc>
 800aee6:	4604      	mov	r4, r0
 800aee8:	b930      	cbnz	r0, 800aef8 <__d2b+0x24>
 800aeea:	4602      	mov	r2, r0
 800aeec:	4b23      	ldr	r3, [pc, #140]	@ (800af7c <__d2b+0xa8>)
 800aeee:	4824      	ldr	r0, [pc, #144]	@ (800af80 <__d2b+0xac>)
 800aef0:	f240 310f 	movw	r1, #783	@ 0x30f
 800aef4:	f000 fac8 	bl	800b488 <__assert_func>
 800aef8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aefc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af00:	b10d      	cbz	r5, 800af06 <__d2b+0x32>
 800af02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	f1b8 0300 	subs.w	r3, r8, #0
 800af0c:	d023      	beq.n	800af56 <__d2b+0x82>
 800af0e:	4668      	mov	r0, sp
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	f7ff fd7c 	bl	800aa0e <__lo0bits>
 800af16:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af1a:	b1d0      	cbz	r0, 800af52 <__d2b+0x7e>
 800af1c:	f1c0 0320 	rsb	r3, r0, #32
 800af20:	fa02 f303 	lsl.w	r3, r2, r3
 800af24:	430b      	orrs	r3, r1
 800af26:	40c2      	lsrs	r2, r0
 800af28:	6163      	str	r3, [r4, #20]
 800af2a:	9201      	str	r2, [sp, #4]
 800af2c:	9b01      	ldr	r3, [sp, #4]
 800af2e:	61a3      	str	r3, [r4, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	bf0c      	ite	eq
 800af34:	2201      	moveq	r2, #1
 800af36:	2202      	movne	r2, #2
 800af38:	6122      	str	r2, [r4, #16]
 800af3a:	b1a5      	cbz	r5, 800af66 <__d2b+0x92>
 800af3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800af40:	4405      	add	r5, r0
 800af42:	603d      	str	r5, [r7, #0]
 800af44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800af48:	6030      	str	r0, [r6, #0]
 800af4a:	4620      	mov	r0, r4
 800af4c:	b003      	add	sp, #12
 800af4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af52:	6161      	str	r1, [r4, #20]
 800af54:	e7ea      	b.n	800af2c <__d2b+0x58>
 800af56:	a801      	add	r0, sp, #4
 800af58:	f7ff fd59 	bl	800aa0e <__lo0bits>
 800af5c:	9b01      	ldr	r3, [sp, #4]
 800af5e:	6163      	str	r3, [r4, #20]
 800af60:	3020      	adds	r0, #32
 800af62:	2201      	movs	r2, #1
 800af64:	e7e8      	b.n	800af38 <__d2b+0x64>
 800af66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800af6e:	6038      	str	r0, [r7, #0]
 800af70:	6918      	ldr	r0, [r3, #16]
 800af72:	f7ff fd2d 	bl	800a9d0 <__hi0bits>
 800af76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af7a:	e7e5      	b.n	800af48 <__d2b+0x74>
 800af7c:	0800b888 	.word	0x0800b888
 800af80:	0800b899 	.word	0x0800b899

0800af84 <__sfputc_r>:
 800af84:	6893      	ldr	r3, [r2, #8]
 800af86:	3b01      	subs	r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	b410      	push	{r4}
 800af8c:	6093      	str	r3, [r2, #8]
 800af8e:	da08      	bge.n	800afa2 <__sfputc_r+0x1e>
 800af90:	6994      	ldr	r4, [r2, #24]
 800af92:	42a3      	cmp	r3, r4
 800af94:	db01      	blt.n	800af9a <__sfputc_r+0x16>
 800af96:	290a      	cmp	r1, #10
 800af98:	d103      	bne.n	800afa2 <__sfputc_r+0x1e>
 800af9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af9e:	f7fe bc00 	b.w	80097a2 <__swbuf_r>
 800afa2:	6813      	ldr	r3, [r2, #0]
 800afa4:	1c58      	adds	r0, r3, #1
 800afa6:	6010      	str	r0, [r2, #0]
 800afa8:	7019      	strb	r1, [r3, #0]
 800afaa:	4608      	mov	r0, r1
 800afac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <__sfputs_r>:
 800afb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb4:	4606      	mov	r6, r0
 800afb6:	460f      	mov	r7, r1
 800afb8:	4614      	mov	r4, r2
 800afba:	18d5      	adds	r5, r2, r3
 800afbc:	42ac      	cmp	r4, r5
 800afbe:	d101      	bne.n	800afc4 <__sfputs_r+0x12>
 800afc0:	2000      	movs	r0, #0
 800afc2:	e007      	b.n	800afd4 <__sfputs_r+0x22>
 800afc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc8:	463a      	mov	r2, r7
 800afca:	4630      	mov	r0, r6
 800afcc:	f7ff ffda 	bl	800af84 <__sfputc_r>
 800afd0:	1c43      	adds	r3, r0, #1
 800afd2:	d1f3      	bne.n	800afbc <__sfputs_r+0xa>
 800afd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afd8 <_vfiprintf_r>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	460d      	mov	r5, r1
 800afde:	b09d      	sub	sp, #116	@ 0x74
 800afe0:	4614      	mov	r4, r2
 800afe2:	4698      	mov	r8, r3
 800afe4:	4606      	mov	r6, r0
 800afe6:	b118      	cbz	r0, 800aff0 <_vfiprintf_r+0x18>
 800afe8:	6a03      	ldr	r3, [r0, #32]
 800afea:	b90b      	cbnz	r3, 800aff0 <_vfiprintf_r+0x18>
 800afec:	f7fe faf0 	bl	80095d0 <__sinit>
 800aff0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aff2:	07d9      	lsls	r1, r3, #31
 800aff4:	d405      	bmi.n	800b002 <_vfiprintf_r+0x2a>
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	059a      	lsls	r2, r3, #22
 800affa:	d402      	bmi.n	800b002 <_vfiprintf_r+0x2a>
 800affc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800affe:	f7fe fce2 	bl	80099c6 <__retarget_lock_acquire_recursive>
 800b002:	89ab      	ldrh	r3, [r5, #12]
 800b004:	071b      	lsls	r3, r3, #28
 800b006:	d501      	bpl.n	800b00c <_vfiprintf_r+0x34>
 800b008:	692b      	ldr	r3, [r5, #16]
 800b00a:	b99b      	cbnz	r3, 800b034 <_vfiprintf_r+0x5c>
 800b00c:	4629      	mov	r1, r5
 800b00e:	4630      	mov	r0, r6
 800b010:	f7fe fc06 	bl	8009820 <__swsetup_r>
 800b014:	b170      	cbz	r0, 800b034 <_vfiprintf_r+0x5c>
 800b016:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b018:	07dc      	lsls	r4, r3, #31
 800b01a:	d504      	bpl.n	800b026 <_vfiprintf_r+0x4e>
 800b01c:	f04f 30ff 	mov.w	r0, #4294967295
 800b020:	b01d      	add	sp, #116	@ 0x74
 800b022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b026:	89ab      	ldrh	r3, [r5, #12]
 800b028:	0598      	lsls	r0, r3, #22
 800b02a:	d4f7      	bmi.n	800b01c <_vfiprintf_r+0x44>
 800b02c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b02e:	f7fe fccb 	bl	80099c8 <__retarget_lock_release_recursive>
 800b032:	e7f3      	b.n	800b01c <_vfiprintf_r+0x44>
 800b034:	2300      	movs	r3, #0
 800b036:	9309      	str	r3, [sp, #36]	@ 0x24
 800b038:	2320      	movs	r3, #32
 800b03a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b03e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b042:	2330      	movs	r3, #48	@ 0x30
 800b044:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b1f4 <_vfiprintf_r+0x21c>
 800b048:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b04c:	f04f 0901 	mov.w	r9, #1
 800b050:	4623      	mov	r3, r4
 800b052:	469a      	mov	sl, r3
 800b054:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b058:	b10a      	cbz	r2, 800b05e <_vfiprintf_r+0x86>
 800b05a:	2a25      	cmp	r2, #37	@ 0x25
 800b05c:	d1f9      	bne.n	800b052 <_vfiprintf_r+0x7a>
 800b05e:	ebba 0b04 	subs.w	fp, sl, r4
 800b062:	d00b      	beq.n	800b07c <_vfiprintf_r+0xa4>
 800b064:	465b      	mov	r3, fp
 800b066:	4622      	mov	r2, r4
 800b068:	4629      	mov	r1, r5
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7ff ffa1 	bl	800afb2 <__sfputs_r>
 800b070:	3001      	adds	r0, #1
 800b072:	f000 80a7 	beq.w	800b1c4 <_vfiprintf_r+0x1ec>
 800b076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b078:	445a      	add	r2, fp
 800b07a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b07c:	f89a 3000 	ldrb.w	r3, [sl]
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 809f 	beq.w	800b1c4 <_vfiprintf_r+0x1ec>
 800b086:	2300      	movs	r3, #0
 800b088:	f04f 32ff 	mov.w	r2, #4294967295
 800b08c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b090:	f10a 0a01 	add.w	sl, sl, #1
 800b094:	9304      	str	r3, [sp, #16]
 800b096:	9307      	str	r3, [sp, #28]
 800b098:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b09c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b09e:	4654      	mov	r4, sl
 800b0a0:	2205      	movs	r2, #5
 800b0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a6:	4853      	ldr	r0, [pc, #332]	@ (800b1f4 <_vfiprintf_r+0x21c>)
 800b0a8:	f7f5 f8b2 	bl	8000210 <memchr>
 800b0ac:	9a04      	ldr	r2, [sp, #16]
 800b0ae:	b9d8      	cbnz	r0, 800b0e8 <_vfiprintf_r+0x110>
 800b0b0:	06d1      	lsls	r1, r2, #27
 800b0b2:	bf44      	itt	mi
 800b0b4:	2320      	movmi	r3, #32
 800b0b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0ba:	0713      	lsls	r3, r2, #28
 800b0bc:	bf44      	itt	mi
 800b0be:	232b      	movmi	r3, #43	@ 0x2b
 800b0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0ca:	d015      	beq.n	800b0f8 <_vfiprintf_r+0x120>
 800b0cc:	9a07      	ldr	r2, [sp, #28]
 800b0ce:	4654      	mov	r4, sl
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	f04f 0c0a 	mov.w	ip, #10
 800b0d6:	4621      	mov	r1, r4
 800b0d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0dc:	3b30      	subs	r3, #48	@ 0x30
 800b0de:	2b09      	cmp	r3, #9
 800b0e0:	d94b      	bls.n	800b17a <_vfiprintf_r+0x1a2>
 800b0e2:	b1b0      	cbz	r0, 800b112 <_vfiprintf_r+0x13a>
 800b0e4:	9207      	str	r2, [sp, #28]
 800b0e6:	e014      	b.n	800b112 <_vfiprintf_r+0x13a>
 800b0e8:	eba0 0308 	sub.w	r3, r0, r8
 800b0ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	9304      	str	r3, [sp, #16]
 800b0f4:	46a2      	mov	sl, r4
 800b0f6:	e7d2      	b.n	800b09e <_vfiprintf_r+0xc6>
 800b0f8:	9b03      	ldr	r3, [sp, #12]
 800b0fa:	1d19      	adds	r1, r3, #4
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	9103      	str	r1, [sp, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfbb      	ittet	lt
 800b104:	425b      	neglt	r3, r3
 800b106:	f042 0202 	orrlt.w	r2, r2, #2
 800b10a:	9307      	strge	r3, [sp, #28]
 800b10c:	9307      	strlt	r3, [sp, #28]
 800b10e:	bfb8      	it	lt
 800b110:	9204      	strlt	r2, [sp, #16]
 800b112:	7823      	ldrb	r3, [r4, #0]
 800b114:	2b2e      	cmp	r3, #46	@ 0x2e
 800b116:	d10a      	bne.n	800b12e <_vfiprintf_r+0x156>
 800b118:	7863      	ldrb	r3, [r4, #1]
 800b11a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b11c:	d132      	bne.n	800b184 <_vfiprintf_r+0x1ac>
 800b11e:	9b03      	ldr	r3, [sp, #12]
 800b120:	1d1a      	adds	r2, r3, #4
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	9203      	str	r2, [sp, #12]
 800b126:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b12a:	3402      	adds	r4, #2
 800b12c:	9305      	str	r3, [sp, #20]
 800b12e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b204 <_vfiprintf_r+0x22c>
 800b132:	7821      	ldrb	r1, [r4, #0]
 800b134:	2203      	movs	r2, #3
 800b136:	4650      	mov	r0, sl
 800b138:	f7f5 f86a 	bl	8000210 <memchr>
 800b13c:	b138      	cbz	r0, 800b14e <_vfiprintf_r+0x176>
 800b13e:	9b04      	ldr	r3, [sp, #16]
 800b140:	eba0 000a 	sub.w	r0, r0, sl
 800b144:	2240      	movs	r2, #64	@ 0x40
 800b146:	4082      	lsls	r2, r0
 800b148:	4313      	orrs	r3, r2
 800b14a:	3401      	adds	r4, #1
 800b14c:	9304      	str	r3, [sp, #16]
 800b14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b152:	4829      	ldr	r0, [pc, #164]	@ (800b1f8 <_vfiprintf_r+0x220>)
 800b154:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b158:	2206      	movs	r2, #6
 800b15a:	f7f5 f859 	bl	8000210 <memchr>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d03f      	beq.n	800b1e2 <_vfiprintf_r+0x20a>
 800b162:	4b26      	ldr	r3, [pc, #152]	@ (800b1fc <_vfiprintf_r+0x224>)
 800b164:	bb1b      	cbnz	r3, 800b1ae <_vfiprintf_r+0x1d6>
 800b166:	9b03      	ldr	r3, [sp, #12]
 800b168:	3307      	adds	r3, #7
 800b16a:	f023 0307 	bic.w	r3, r3, #7
 800b16e:	3308      	adds	r3, #8
 800b170:	9303      	str	r3, [sp, #12]
 800b172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b174:	443b      	add	r3, r7
 800b176:	9309      	str	r3, [sp, #36]	@ 0x24
 800b178:	e76a      	b.n	800b050 <_vfiprintf_r+0x78>
 800b17a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b17e:	460c      	mov	r4, r1
 800b180:	2001      	movs	r0, #1
 800b182:	e7a8      	b.n	800b0d6 <_vfiprintf_r+0xfe>
 800b184:	2300      	movs	r3, #0
 800b186:	3401      	adds	r4, #1
 800b188:	9305      	str	r3, [sp, #20]
 800b18a:	4619      	mov	r1, r3
 800b18c:	f04f 0c0a 	mov.w	ip, #10
 800b190:	4620      	mov	r0, r4
 800b192:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b196:	3a30      	subs	r2, #48	@ 0x30
 800b198:	2a09      	cmp	r2, #9
 800b19a:	d903      	bls.n	800b1a4 <_vfiprintf_r+0x1cc>
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d0c6      	beq.n	800b12e <_vfiprintf_r+0x156>
 800b1a0:	9105      	str	r1, [sp, #20]
 800b1a2:	e7c4      	b.n	800b12e <_vfiprintf_r+0x156>
 800b1a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e7f0      	b.n	800b190 <_vfiprintf_r+0x1b8>
 800b1ae:	ab03      	add	r3, sp, #12
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	462a      	mov	r2, r5
 800b1b4:	4b12      	ldr	r3, [pc, #72]	@ (800b200 <_vfiprintf_r+0x228>)
 800b1b6:	a904      	add	r1, sp, #16
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f7fd fdc5 	bl	8008d48 <_printf_float>
 800b1be:	4607      	mov	r7, r0
 800b1c0:	1c78      	adds	r0, r7, #1
 800b1c2:	d1d6      	bne.n	800b172 <_vfiprintf_r+0x19a>
 800b1c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1c6:	07d9      	lsls	r1, r3, #31
 800b1c8:	d405      	bmi.n	800b1d6 <_vfiprintf_r+0x1fe>
 800b1ca:	89ab      	ldrh	r3, [r5, #12]
 800b1cc:	059a      	lsls	r2, r3, #22
 800b1ce:	d402      	bmi.n	800b1d6 <_vfiprintf_r+0x1fe>
 800b1d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1d2:	f7fe fbf9 	bl	80099c8 <__retarget_lock_release_recursive>
 800b1d6:	89ab      	ldrh	r3, [r5, #12]
 800b1d8:	065b      	lsls	r3, r3, #25
 800b1da:	f53f af1f 	bmi.w	800b01c <_vfiprintf_r+0x44>
 800b1de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1e0:	e71e      	b.n	800b020 <_vfiprintf_r+0x48>
 800b1e2:	ab03      	add	r3, sp, #12
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	462a      	mov	r2, r5
 800b1e8:	4b05      	ldr	r3, [pc, #20]	@ (800b200 <_vfiprintf_r+0x228>)
 800b1ea:	a904      	add	r1, sp, #16
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	f7fe f843 	bl	8009278 <_printf_i>
 800b1f2:	e7e4      	b.n	800b1be <_vfiprintf_r+0x1e6>
 800b1f4:	0800b9f0 	.word	0x0800b9f0
 800b1f8:	0800b9fa 	.word	0x0800b9fa
 800b1fc:	08008d49 	.word	0x08008d49
 800b200:	0800afb3 	.word	0x0800afb3
 800b204:	0800b9f6 	.word	0x0800b9f6

0800b208 <__sflush_r>:
 800b208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b210:	0716      	lsls	r6, r2, #28
 800b212:	4605      	mov	r5, r0
 800b214:	460c      	mov	r4, r1
 800b216:	d454      	bmi.n	800b2c2 <__sflush_r+0xba>
 800b218:	684b      	ldr	r3, [r1, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	dc02      	bgt.n	800b224 <__sflush_r+0x1c>
 800b21e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b220:	2b00      	cmp	r3, #0
 800b222:	dd48      	ble.n	800b2b6 <__sflush_r+0xae>
 800b224:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b226:	2e00      	cmp	r6, #0
 800b228:	d045      	beq.n	800b2b6 <__sflush_r+0xae>
 800b22a:	2300      	movs	r3, #0
 800b22c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b230:	682f      	ldr	r7, [r5, #0]
 800b232:	6a21      	ldr	r1, [r4, #32]
 800b234:	602b      	str	r3, [r5, #0]
 800b236:	d030      	beq.n	800b29a <__sflush_r+0x92>
 800b238:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	0759      	lsls	r1, r3, #29
 800b23e:	d505      	bpl.n	800b24c <__sflush_r+0x44>
 800b240:	6863      	ldr	r3, [r4, #4]
 800b242:	1ad2      	subs	r2, r2, r3
 800b244:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b246:	b10b      	cbz	r3, 800b24c <__sflush_r+0x44>
 800b248:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b24a:	1ad2      	subs	r2, r2, r3
 800b24c:	2300      	movs	r3, #0
 800b24e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b250:	6a21      	ldr	r1, [r4, #32]
 800b252:	4628      	mov	r0, r5
 800b254:	47b0      	blx	r6
 800b256:	1c43      	adds	r3, r0, #1
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	d106      	bne.n	800b26a <__sflush_r+0x62>
 800b25c:	6829      	ldr	r1, [r5, #0]
 800b25e:	291d      	cmp	r1, #29
 800b260:	d82b      	bhi.n	800b2ba <__sflush_r+0xb2>
 800b262:	4a2a      	ldr	r2, [pc, #168]	@ (800b30c <__sflush_r+0x104>)
 800b264:	410a      	asrs	r2, r1
 800b266:	07d6      	lsls	r6, r2, #31
 800b268:	d427      	bmi.n	800b2ba <__sflush_r+0xb2>
 800b26a:	2200      	movs	r2, #0
 800b26c:	6062      	str	r2, [r4, #4]
 800b26e:	04d9      	lsls	r1, r3, #19
 800b270:	6922      	ldr	r2, [r4, #16]
 800b272:	6022      	str	r2, [r4, #0]
 800b274:	d504      	bpl.n	800b280 <__sflush_r+0x78>
 800b276:	1c42      	adds	r2, r0, #1
 800b278:	d101      	bne.n	800b27e <__sflush_r+0x76>
 800b27a:	682b      	ldr	r3, [r5, #0]
 800b27c:	b903      	cbnz	r3, 800b280 <__sflush_r+0x78>
 800b27e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b282:	602f      	str	r7, [r5, #0]
 800b284:	b1b9      	cbz	r1, 800b2b6 <__sflush_r+0xae>
 800b286:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b28a:	4299      	cmp	r1, r3
 800b28c:	d002      	beq.n	800b294 <__sflush_r+0x8c>
 800b28e:	4628      	mov	r0, r5
 800b290:	f7ff f9f6 	bl	800a680 <_free_r>
 800b294:	2300      	movs	r3, #0
 800b296:	6363      	str	r3, [r4, #52]	@ 0x34
 800b298:	e00d      	b.n	800b2b6 <__sflush_r+0xae>
 800b29a:	2301      	movs	r3, #1
 800b29c:	4628      	mov	r0, r5
 800b29e:	47b0      	blx	r6
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	1c50      	adds	r0, r2, #1
 800b2a4:	d1c9      	bne.n	800b23a <__sflush_r+0x32>
 800b2a6:	682b      	ldr	r3, [r5, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d0c6      	beq.n	800b23a <__sflush_r+0x32>
 800b2ac:	2b1d      	cmp	r3, #29
 800b2ae:	d001      	beq.n	800b2b4 <__sflush_r+0xac>
 800b2b0:	2b16      	cmp	r3, #22
 800b2b2:	d11e      	bne.n	800b2f2 <__sflush_r+0xea>
 800b2b4:	602f      	str	r7, [r5, #0]
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e022      	b.n	800b300 <__sflush_r+0xf8>
 800b2ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2be:	b21b      	sxth	r3, r3
 800b2c0:	e01b      	b.n	800b2fa <__sflush_r+0xf2>
 800b2c2:	690f      	ldr	r7, [r1, #16]
 800b2c4:	2f00      	cmp	r7, #0
 800b2c6:	d0f6      	beq.n	800b2b6 <__sflush_r+0xae>
 800b2c8:	0793      	lsls	r3, r2, #30
 800b2ca:	680e      	ldr	r6, [r1, #0]
 800b2cc:	bf08      	it	eq
 800b2ce:	694b      	ldreq	r3, [r1, #20]
 800b2d0:	600f      	str	r7, [r1, #0]
 800b2d2:	bf18      	it	ne
 800b2d4:	2300      	movne	r3, #0
 800b2d6:	eba6 0807 	sub.w	r8, r6, r7
 800b2da:	608b      	str	r3, [r1, #8]
 800b2dc:	f1b8 0f00 	cmp.w	r8, #0
 800b2e0:	dde9      	ble.n	800b2b6 <__sflush_r+0xae>
 800b2e2:	6a21      	ldr	r1, [r4, #32]
 800b2e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b2e6:	4643      	mov	r3, r8
 800b2e8:	463a      	mov	r2, r7
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	47b0      	blx	r6
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	dc08      	bgt.n	800b304 <__sflush_r+0xfc>
 800b2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2fa:	81a3      	strh	r3, [r4, #12]
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b304:	4407      	add	r7, r0
 800b306:	eba8 0800 	sub.w	r8, r8, r0
 800b30a:	e7e7      	b.n	800b2dc <__sflush_r+0xd4>
 800b30c:	dfbffffe 	.word	0xdfbffffe

0800b310 <_fflush_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	690b      	ldr	r3, [r1, #16]
 800b314:	4605      	mov	r5, r0
 800b316:	460c      	mov	r4, r1
 800b318:	b913      	cbnz	r3, 800b320 <_fflush_r+0x10>
 800b31a:	2500      	movs	r5, #0
 800b31c:	4628      	mov	r0, r5
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	b118      	cbz	r0, 800b32a <_fflush_r+0x1a>
 800b322:	6a03      	ldr	r3, [r0, #32]
 800b324:	b90b      	cbnz	r3, 800b32a <_fflush_r+0x1a>
 800b326:	f7fe f953 	bl	80095d0 <__sinit>
 800b32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d0f3      	beq.n	800b31a <_fflush_r+0xa>
 800b332:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b334:	07d0      	lsls	r0, r2, #31
 800b336:	d404      	bmi.n	800b342 <_fflush_r+0x32>
 800b338:	0599      	lsls	r1, r3, #22
 800b33a:	d402      	bmi.n	800b342 <_fflush_r+0x32>
 800b33c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b33e:	f7fe fb42 	bl	80099c6 <__retarget_lock_acquire_recursive>
 800b342:	4628      	mov	r0, r5
 800b344:	4621      	mov	r1, r4
 800b346:	f7ff ff5f 	bl	800b208 <__sflush_r>
 800b34a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b34c:	07da      	lsls	r2, r3, #31
 800b34e:	4605      	mov	r5, r0
 800b350:	d4e4      	bmi.n	800b31c <_fflush_r+0xc>
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	059b      	lsls	r3, r3, #22
 800b356:	d4e1      	bmi.n	800b31c <_fflush_r+0xc>
 800b358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b35a:	f7fe fb35 	bl	80099c8 <__retarget_lock_release_recursive>
 800b35e:	e7dd      	b.n	800b31c <_fflush_r+0xc>

0800b360 <__swhatbuf_r>:
 800b360:	b570      	push	{r4, r5, r6, lr}
 800b362:	460c      	mov	r4, r1
 800b364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b368:	2900      	cmp	r1, #0
 800b36a:	b096      	sub	sp, #88	@ 0x58
 800b36c:	4615      	mov	r5, r2
 800b36e:	461e      	mov	r6, r3
 800b370:	da0d      	bge.n	800b38e <__swhatbuf_r+0x2e>
 800b372:	89a3      	ldrh	r3, [r4, #12]
 800b374:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b378:	f04f 0100 	mov.w	r1, #0
 800b37c:	bf14      	ite	ne
 800b37e:	2340      	movne	r3, #64	@ 0x40
 800b380:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b384:	2000      	movs	r0, #0
 800b386:	6031      	str	r1, [r6, #0]
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	b016      	add	sp, #88	@ 0x58
 800b38c:	bd70      	pop	{r4, r5, r6, pc}
 800b38e:	466a      	mov	r2, sp
 800b390:	f000 f848 	bl	800b424 <_fstat_r>
 800b394:	2800      	cmp	r0, #0
 800b396:	dbec      	blt.n	800b372 <__swhatbuf_r+0x12>
 800b398:	9901      	ldr	r1, [sp, #4]
 800b39a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b39e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3a2:	4259      	negs	r1, r3
 800b3a4:	4159      	adcs	r1, r3
 800b3a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3aa:	e7eb      	b.n	800b384 <__swhatbuf_r+0x24>

0800b3ac <__smakebuf_r>:
 800b3ac:	898b      	ldrh	r3, [r1, #12]
 800b3ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3b0:	079d      	lsls	r5, r3, #30
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	460c      	mov	r4, r1
 800b3b6:	d507      	bpl.n	800b3c8 <__smakebuf_r+0x1c>
 800b3b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b3bc:	6023      	str	r3, [r4, #0]
 800b3be:	6123      	str	r3, [r4, #16]
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	6163      	str	r3, [r4, #20]
 800b3c4:	b003      	add	sp, #12
 800b3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c8:	ab01      	add	r3, sp, #4
 800b3ca:	466a      	mov	r2, sp
 800b3cc:	f7ff ffc8 	bl	800b360 <__swhatbuf_r>
 800b3d0:	9f00      	ldr	r7, [sp, #0]
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f7ff f9c6 	bl	800a768 <_malloc_r>
 800b3dc:	b948      	cbnz	r0, 800b3f2 <__smakebuf_r+0x46>
 800b3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3e2:	059a      	lsls	r2, r3, #22
 800b3e4:	d4ee      	bmi.n	800b3c4 <__smakebuf_r+0x18>
 800b3e6:	f023 0303 	bic.w	r3, r3, #3
 800b3ea:	f043 0302 	orr.w	r3, r3, #2
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	e7e2      	b.n	800b3b8 <__smakebuf_r+0xc>
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	6020      	str	r0, [r4, #0]
 800b3f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3fa:	81a3      	strh	r3, [r4, #12]
 800b3fc:	9b01      	ldr	r3, [sp, #4]
 800b3fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b402:	b15b      	cbz	r3, 800b41c <__smakebuf_r+0x70>
 800b404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b408:	4630      	mov	r0, r6
 800b40a:	f000 f81d 	bl	800b448 <_isatty_r>
 800b40e:	b128      	cbz	r0, 800b41c <__smakebuf_r+0x70>
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	f023 0303 	bic.w	r3, r3, #3
 800b416:	f043 0301 	orr.w	r3, r3, #1
 800b41a:	81a3      	strh	r3, [r4, #12]
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	431d      	orrs	r5, r3
 800b420:	81a5      	strh	r5, [r4, #12]
 800b422:	e7cf      	b.n	800b3c4 <__smakebuf_r+0x18>

0800b424 <_fstat_r>:
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	4d07      	ldr	r5, [pc, #28]	@ (800b444 <_fstat_r+0x20>)
 800b428:	2300      	movs	r3, #0
 800b42a:	4604      	mov	r4, r0
 800b42c:	4608      	mov	r0, r1
 800b42e:	4611      	mov	r1, r2
 800b430:	602b      	str	r3, [r5, #0]
 800b432:	f7f6 fc51 	bl	8001cd8 <_fstat>
 800b436:	1c43      	adds	r3, r0, #1
 800b438:	d102      	bne.n	800b440 <_fstat_r+0x1c>
 800b43a:	682b      	ldr	r3, [r5, #0]
 800b43c:	b103      	cbz	r3, 800b440 <_fstat_r+0x1c>
 800b43e:	6023      	str	r3, [r4, #0]
 800b440:	bd38      	pop	{r3, r4, r5, pc}
 800b442:	bf00      	nop
 800b444:	20020978 	.word	0x20020978

0800b448 <_isatty_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4d06      	ldr	r5, [pc, #24]	@ (800b464 <_isatty_r+0x1c>)
 800b44c:	2300      	movs	r3, #0
 800b44e:	4604      	mov	r4, r0
 800b450:	4608      	mov	r0, r1
 800b452:	602b      	str	r3, [r5, #0]
 800b454:	f7f6 fc50 	bl	8001cf8 <_isatty>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d102      	bne.n	800b462 <_isatty_r+0x1a>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	b103      	cbz	r3, 800b462 <_isatty_r+0x1a>
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	20020978 	.word	0x20020978

0800b468 <_sbrk_r>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	4d06      	ldr	r5, [pc, #24]	@ (800b484 <_sbrk_r+0x1c>)
 800b46c:	2300      	movs	r3, #0
 800b46e:	4604      	mov	r4, r0
 800b470:	4608      	mov	r0, r1
 800b472:	602b      	str	r3, [r5, #0]
 800b474:	f7f6 fc58 	bl	8001d28 <_sbrk>
 800b478:	1c43      	adds	r3, r0, #1
 800b47a:	d102      	bne.n	800b482 <_sbrk_r+0x1a>
 800b47c:	682b      	ldr	r3, [r5, #0]
 800b47e:	b103      	cbz	r3, 800b482 <_sbrk_r+0x1a>
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	bd38      	pop	{r3, r4, r5, pc}
 800b484:	20020978 	.word	0x20020978

0800b488 <__assert_func>:
 800b488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b48a:	4614      	mov	r4, r2
 800b48c:	461a      	mov	r2, r3
 800b48e:	4b09      	ldr	r3, [pc, #36]	@ (800b4b4 <__assert_func+0x2c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4605      	mov	r5, r0
 800b494:	68d8      	ldr	r0, [r3, #12]
 800b496:	b954      	cbnz	r4, 800b4ae <__assert_func+0x26>
 800b498:	4b07      	ldr	r3, [pc, #28]	@ (800b4b8 <__assert_func+0x30>)
 800b49a:	461c      	mov	r4, r3
 800b49c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4a0:	9100      	str	r1, [sp, #0]
 800b4a2:	462b      	mov	r3, r5
 800b4a4:	4905      	ldr	r1, [pc, #20]	@ (800b4bc <__assert_func+0x34>)
 800b4a6:	f000 f841 	bl	800b52c <fiprintf>
 800b4aa:	f000 f851 	bl	800b550 <abort>
 800b4ae:	4b04      	ldr	r3, [pc, #16]	@ (800b4c0 <__assert_func+0x38>)
 800b4b0:	e7f4      	b.n	800b49c <__assert_func+0x14>
 800b4b2:	bf00      	nop
 800b4b4:	20000058 	.word	0x20000058
 800b4b8:	0800ba46 	.word	0x0800ba46
 800b4bc:	0800ba18 	.word	0x0800ba18
 800b4c0:	0800ba0b 	.word	0x0800ba0b

0800b4c4 <_calloc_r>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	fba1 5402 	umull	r5, r4, r1, r2
 800b4ca:	b93c      	cbnz	r4, 800b4dc <_calloc_r+0x18>
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	f7ff f94b 	bl	800a768 <_malloc_r>
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	b928      	cbnz	r0, 800b4e2 <_calloc_r+0x1e>
 800b4d6:	2600      	movs	r6, #0
 800b4d8:	4630      	mov	r0, r6
 800b4da:	bd70      	pop	{r4, r5, r6, pc}
 800b4dc:	220c      	movs	r2, #12
 800b4de:	6002      	str	r2, [r0, #0]
 800b4e0:	e7f9      	b.n	800b4d6 <_calloc_r+0x12>
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	4621      	mov	r1, r4
 800b4e6:	f7fe f9f1 	bl	80098cc <memset>
 800b4ea:	e7f5      	b.n	800b4d8 <_calloc_r+0x14>

0800b4ec <__ascii_mbtowc>:
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	b901      	cbnz	r1, 800b4f2 <__ascii_mbtowc+0x6>
 800b4f0:	a901      	add	r1, sp, #4
 800b4f2:	b142      	cbz	r2, 800b506 <__ascii_mbtowc+0x1a>
 800b4f4:	b14b      	cbz	r3, 800b50a <__ascii_mbtowc+0x1e>
 800b4f6:	7813      	ldrb	r3, [r2, #0]
 800b4f8:	600b      	str	r3, [r1, #0]
 800b4fa:	7812      	ldrb	r2, [r2, #0]
 800b4fc:	1e10      	subs	r0, r2, #0
 800b4fe:	bf18      	it	ne
 800b500:	2001      	movne	r0, #1
 800b502:	b002      	add	sp, #8
 800b504:	4770      	bx	lr
 800b506:	4610      	mov	r0, r2
 800b508:	e7fb      	b.n	800b502 <__ascii_mbtowc+0x16>
 800b50a:	f06f 0001 	mvn.w	r0, #1
 800b50e:	e7f8      	b.n	800b502 <__ascii_mbtowc+0x16>

0800b510 <__ascii_wctomb>:
 800b510:	4603      	mov	r3, r0
 800b512:	4608      	mov	r0, r1
 800b514:	b141      	cbz	r1, 800b528 <__ascii_wctomb+0x18>
 800b516:	2aff      	cmp	r2, #255	@ 0xff
 800b518:	d904      	bls.n	800b524 <__ascii_wctomb+0x14>
 800b51a:	228a      	movs	r2, #138	@ 0x8a
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	f04f 30ff 	mov.w	r0, #4294967295
 800b522:	4770      	bx	lr
 800b524:	700a      	strb	r2, [r1, #0]
 800b526:	2001      	movs	r0, #1
 800b528:	4770      	bx	lr
	...

0800b52c <fiprintf>:
 800b52c:	b40e      	push	{r1, r2, r3}
 800b52e:	b503      	push	{r0, r1, lr}
 800b530:	4601      	mov	r1, r0
 800b532:	ab03      	add	r3, sp, #12
 800b534:	4805      	ldr	r0, [pc, #20]	@ (800b54c <fiprintf+0x20>)
 800b536:	f853 2b04 	ldr.w	r2, [r3], #4
 800b53a:	6800      	ldr	r0, [r0, #0]
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	f7ff fd4b 	bl	800afd8 <_vfiprintf_r>
 800b542:	b002      	add	sp, #8
 800b544:	f85d eb04 	ldr.w	lr, [sp], #4
 800b548:	b003      	add	sp, #12
 800b54a:	4770      	bx	lr
 800b54c:	20000058 	.word	0x20000058

0800b550 <abort>:
 800b550:	b508      	push	{r3, lr}
 800b552:	2006      	movs	r0, #6
 800b554:	f000 f82c 	bl	800b5b0 <raise>
 800b558:	2001      	movs	r0, #1
 800b55a:	f7f6 fb6d 	bl	8001c38 <_exit>

0800b55e <_raise_r>:
 800b55e:	291f      	cmp	r1, #31
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4605      	mov	r5, r0
 800b564:	460c      	mov	r4, r1
 800b566:	d904      	bls.n	800b572 <_raise_r+0x14>
 800b568:	2316      	movs	r3, #22
 800b56a:	6003      	str	r3, [r0, #0]
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295
 800b570:	bd38      	pop	{r3, r4, r5, pc}
 800b572:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b574:	b112      	cbz	r2, 800b57c <_raise_r+0x1e>
 800b576:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b57a:	b94b      	cbnz	r3, 800b590 <_raise_r+0x32>
 800b57c:	4628      	mov	r0, r5
 800b57e:	f000 f831 	bl	800b5e4 <_getpid_r>
 800b582:	4622      	mov	r2, r4
 800b584:	4601      	mov	r1, r0
 800b586:	4628      	mov	r0, r5
 800b588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b58c:	f000 b818 	b.w	800b5c0 <_kill_r>
 800b590:	2b01      	cmp	r3, #1
 800b592:	d00a      	beq.n	800b5aa <_raise_r+0x4c>
 800b594:	1c59      	adds	r1, r3, #1
 800b596:	d103      	bne.n	800b5a0 <_raise_r+0x42>
 800b598:	2316      	movs	r3, #22
 800b59a:	6003      	str	r3, [r0, #0]
 800b59c:	2001      	movs	r0, #1
 800b59e:	e7e7      	b.n	800b570 <_raise_r+0x12>
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	4798      	blx	r3
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	e7e0      	b.n	800b570 <_raise_r+0x12>
	...

0800b5b0 <raise>:
 800b5b0:	4b02      	ldr	r3, [pc, #8]	@ (800b5bc <raise+0xc>)
 800b5b2:	4601      	mov	r1, r0
 800b5b4:	6818      	ldr	r0, [r3, #0]
 800b5b6:	f7ff bfd2 	b.w	800b55e <_raise_r>
 800b5ba:	bf00      	nop
 800b5bc:	20000058 	.word	0x20000058

0800b5c0 <_kill_r>:
 800b5c0:	b538      	push	{r3, r4, r5, lr}
 800b5c2:	4d07      	ldr	r5, [pc, #28]	@ (800b5e0 <_kill_r+0x20>)
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	4608      	mov	r0, r1
 800b5ca:	4611      	mov	r1, r2
 800b5cc:	602b      	str	r3, [r5, #0]
 800b5ce:	f7f6 fb23 	bl	8001c18 <_kill>
 800b5d2:	1c43      	adds	r3, r0, #1
 800b5d4:	d102      	bne.n	800b5dc <_kill_r+0x1c>
 800b5d6:	682b      	ldr	r3, [r5, #0]
 800b5d8:	b103      	cbz	r3, 800b5dc <_kill_r+0x1c>
 800b5da:	6023      	str	r3, [r4, #0]
 800b5dc:	bd38      	pop	{r3, r4, r5, pc}
 800b5de:	bf00      	nop
 800b5e0:	20020978 	.word	0x20020978

0800b5e4 <_getpid_r>:
 800b5e4:	f7f6 bb10 	b.w	8001c08 <_getpid>

0800b5e8 <_init>:
 800b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ea:	bf00      	nop
 800b5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ee:	bc08      	pop	{r3}
 800b5f0:	469e      	mov	lr, r3
 800b5f2:	4770      	bx	lr

0800b5f4 <_fini>:
 800b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f6:	bf00      	nop
 800b5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fa:	bc08      	pop	{r3}
 800b5fc:	469e      	mov	lr, r3
 800b5fe:	4770      	bx	lr
